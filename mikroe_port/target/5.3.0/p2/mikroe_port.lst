
/Users/Erik-Home/Documents/GitHub/mikroe_port/mikroe_port/target/5.3.0/p2/mikroe_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fd000  085fd000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fd018  085fd018  0000d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fdb40  085fd088  0000db40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000024b0  023fdb48  085fd090  0000db48  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000070  1007ade0  085ff540  0001ade0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000198  1007ae50  1007ae50  0002ae50  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff5b0  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000a04  085ff5b4  085ff5b4  0001f5b4  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f5b4  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0013ff24  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00014ec4  00000000  00000000  0015ff24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003979c  00000000  00000000  00174de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002a60  00000000  00000000  001ae584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000acd0  00000000  00000000  001b0fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000291d0  00000000  00000000  001bbcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00046ab6  00000000  00000000  001e4e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ca94c  00000000  00000000  0022b93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007870  00000000  00000000  002f6288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fd018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd018:	480e      	ldr	r0, [pc, #56]	; (85fd054 <module_user_pre_init+0x3c>)
 85fd01a:	490f      	ldr	r1, [pc, #60]	; (85fd058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fd01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd01e:	4288      	cmp	r0, r1
 85fd020:	d005      	beq.n	85fd02e <module_user_pre_init+0x16>
 85fd022:	4a0e      	ldr	r2, [pc, #56]	; (85fd05c <module_user_pre_init+0x44>)
 85fd024:	4282      	cmp	r2, r0
 85fd026:	d002      	beq.n	85fd02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fd028:	4b0d      	ldr	r3, [pc, #52]	; (85fd060 <module_user_pre_init+0x48>)
 85fd02a:	1a12      	subs	r2, r2, r0
 85fd02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fd02e:	480d      	ldr	r0, [pc, #52]	; (85fd064 <module_user_pre_init+0x4c>)
 85fd030:	4a0d      	ldr	r2, [pc, #52]	; (85fd068 <module_user_pre_init+0x50>)
 85fd032:	2100      	movs	r1, #0
 85fd034:	4b0d      	ldr	r3, [pc, #52]	; (85fd06c <module_user_pre_init+0x54>)
 85fd036:	1a12      	subs	r2, r2, r0
 85fd038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fd03a:	480d      	ldr	r0, [pc, #52]	; (85fd070 <module_user_pre_init+0x58>)
 85fd03c:	490d      	ldr	r1, [pc, #52]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd03e:	4288      	cmp	r0, r1
 85fd040:	d005      	beq.n	85fd04e <module_user_pre_init+0x36>
 85fd042:	4a0d      	ldr	r2, [pc, #52]	; (85fd078 <module_user_pre_init+0x60>)
 85fd044:	4282      	cmp	r2, r0
 85fd046:	d002      	beq.n	85fd04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fd048:	4b05      	ldr	r3, [pc, #20]	; (85fd060 <module_user_pre_init+0x48>)
 85fd04a:	1a12      	subs	r2, r2, r0
 85fd04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fd04e:	4801      	ldr	r0, [pc, #4]	; (85fd054 <module_user_pre_init+0x3c>)
 85fd050:	bd08      	pop	{r3, pc}
 85fd052:	bf00      	nop
 85fd054:	1007ade0 	.word	0x1007ade0
 85fd058:	085ff540 	.word	0x085ff540
 85fd05c:	1007ae50 	.word	0x1007ae50
 85fd060:	10110d2d 	.word	0x10110d2d
 85fd064:	1007ae50 	.word	0x1007ae50
 85fd068:	1007afe8 	.word	0x1007afe8
 85fd06c:	10110ea1 	.word	0x10110ea1
 85fd070:	023fdb40 	.word	0x023fdb40
 85fd074:	085fd088 	.word	0x085fd088
 85fd078:	023ffff8 	.word	0x023ffff8

085fd07c <dynalib_preinit>:
 85fd07c:	085fd019 00000000                       .._.....

Disassembly of section .psram_text:

023fdb48 <__aeabi_drsub>:
 23fdb48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fdb4c:	e002      	b.n	23fdb54 <__adddf3>
 23fdb4e:	bf00      	nop

023fdb50 <__aeabi_dsub>:
 23fdb50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fdb54 <__adddf3>:
 23fdb54:	b530      	push	{r4, r5, lr}
 23fdb56:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fdb5a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fdb5e:	ea94 0f05 	teq	r4, r5
 23fdb62:	bf08      	it	eq
 23fdb64:	ea90 0f02 	teqeq	r0, r2
 23fdb68:	bf1f      	itttt	ne
 23fdb6a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fdb6e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fdb72:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fdb76:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fdb7a:	f000 80e2 	beq.w	23fdd42 <__adddf3+0x1ee>
 23fdb7e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fdb82:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fdb86:	bfb8      	it	lt
 23fdb88:	426d      	neglt	r5, r5
 23fdb8a:	dd0c      	ble.n	23fdba6 <__adddf3+0x52>
 23fdb8c:	442c      	add	r4, r5
 23fdb8e:	ea80 0202 	eor.w	r2, r0, r2
 23fdb92:	ea81 0303 	eor.w	r3, r1, r3
 23fdb96:	ea82 0000 	eor.w	r0, r2, r0
 23fdb9a:	ea83 0101 	eor.w	r1, r3, r1
 23fdb9e:	ea80 0202 	eor.w	r2, r0, r2
 23fdba2:	ea81 0303 	eor.w	r3, r1, r3
 23fdba6:	2d36      	cmp	r5, #54	; 0x36
 23fdba8:	bf88      	it	hi
 23fdbaa:	bd30      	pophi	{r4, r5, pc}
 23fdbac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fdbb0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fdbb4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fdbb8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fdbbc:	d002      	beq.n	23fdbc4 <__adddf3+0x70>
 23fdbbe:	4240      	negs	r0, r0
 23fdbc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fdbc4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fdbc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fdbcc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fdbd0:	d002      	beq.n	23fdbd8 <__adddf3+0x84>
 23fdbd2:	4252      	negs	r2, r2
 23fdbd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fdbd8:	ea94 0f05 	teq	r4, r5
 23fdbdc:	f000 80a7 	beq.w	23fdd2e <__adddf3+0x1da>
 23fdbe0:	f1a4 0401 	sub.w	r4, r4, #1
 23fdbe4:	f1d5 0e20 	rsbs	lr, r5, #32
 23fdbe8:	db0d      	blt.n	23fdc06 <__adddf3+0xb2>
 23fdbea:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fdbee:	fa22 f205 	lsr.w	r2, r2, r5
 23fdbf2:	1880      	adds	r0, r0, r2
 23fdbf4:	f141 0100 	adc.w	r1, r1, #0
 23fdbf8:	fa03 f20e 	lsl.w	r2, r3, lr
 23fdbfc:	1880      	adds	r0, r0, r2
 23fdbfe:	fa43 f305 	asr.w	r3, r3, r5
 23fdc02:	4159      	adcs	r1, r3
 23fdc04:	e00e      	b.n	23fdc24 <__adddf3+0xd0>
 23fdc06:	f1a5 0520 	sub.w	r5, r5, #32
 23fdc0a:	f10e 0e20 	add.w	lr, lr, #32
 23fdc0e:	2a01      	cmp	r2, #1
 23fdc10:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fdc14:	bf28      	it	cs
 23fdc16:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fdc1a:	fa43 f305 	asr.w	r3, r3, r5
 23fdc1e:	18c0      	adds	r0, r0, r3
 23fdc20:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fdc24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fdc28:	d507      	bpl.n	23fdc3a <__adddf3+0xe6>
 23fdc2a:	f04f 0e00 	mov.w	lr, #0
 23fdc2e:	f1dc 0c00 	rsbs	ip, ip, #0
 23fdc32:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fdc36:	eb6e 0101 	sbc.w	r1, lr, r1
 23fdc3a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fdc3e:	d31b      	bcc.n	23fdc78 <__adddf3+0x124>
 23fdc40:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fdc44:	d30c      	bcc.n	23fdc60 <__adddf3+0x10c>
 23fdc46:	0849      	lsrs	r1, r1, #1
 23fdc48:	ea5f 0030 	movs.w	r0, r0, rrx
 23fdc4c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fdc50:	f104 0401 	add.w	r4, r4, #1
 23fdc54:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fdc58:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fdc5c:	f080 809a 	bcs.w	23fdd94 <__adddf3+0x240>
 23fdc60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fdc64:	bf08      	it	eq
 23fdc66:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fdc6a:	f150 0000 	adcs.w	r0, r0, #0
 23fdc6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fdc72:	ea41 0105 	orr.w	r1, r1, r5
 23fdc76:	bd30      	pop	{r4, r5, pc}
 23fdc78:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fdc7c:	4140      	adcs	r0, r0
 23fdc7e:	eb41 0101 	adc.w	r1, r1, r1
 23fdc82:	3c01      	subs	r4, #1
 23fdc84:	bf28      	it	cs
 23fdc86:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fdc8a:	d2e9      	bcs.n	23fdc60 <__adddf3+0x10c>
 23fdc8c:	f091 0f00 	teq	r1, #0
 23fdc90:	bf04      	itt	eq
 23fdc92:	4601      	moveq	r1, r0
 23fdc94:	2000      	moveq	r0, #0
 23fdc96:	fab1 f381 	clz	r3, r1
 23fdc9a:	bf08      	it	eq
 23fdc9c:	3320      	addeq	r3, #32
 23fdc9e:	f1a3 030b 	sub.w	r3, r3, #11
 23fdca2:	f1b3 0220 	subs.w	r2, r3, #32
 23fdca6:	da0c      	bge.n	23fdcc2 <__adddf3+0x16e>
 23fdca8:	320c      	adds	r2, #12
 23fdcaa:	dd08      	ble.n	23fdcbe <__adddf3+0x16a>
 23fdcac:	f102 0c14 	add.w	ip, r2, #20
 23fdcb0:	f1c2 020c 	rsb	r2, r2, #12
 23fdcb4:	fa01 f00c 	lsl.w	r0, r1, ip
 23fdcb8:	fa21 f102 	lsr.w	r1, r1, r2
 23fdcbc:	e00c      	b.n	23fdcd8 <__adddf3+0x184>
 23fdcbe:	f102 0214 	add.w	r2, r2, #20
 23fdcc2:	bfd8      	it	le
 23fdcc4:	f1c2 0c20 	rsble	ip, r2, #32
 23fdcc8:	fa01 f102 	lsl.w	r1, r1, r2
 23fdccc:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fdcd0:	bfdc      	itt	le
 23fdcd2:	ea41 010c 	orrle.w	r1, r1, ip
 23fdcd6:	4090      	lslle	r0, r2
 23fdcd8:	1ae4      	subs	r4, r4, r3
 23fdcda:	bfa2      	ittt	ge
 23fdcdc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fdce0:	4329      	orrge	r1, r5
 23fdce2:	bd30      	popge	{r4, r5, pc}
 23fdce4:	ea6f 0404 	mvn.w	r4, r4
 23fdce8:	3c1f      	subs	r4, #31
 23fdcea:	da1c      	bge.n	23fdd26 <__adddf3+0x1d2>
 23fdcec:	340c      	adds	r4, #12
 23fdcee:	dc0e      	bgt.n	23fdd0e <__adddf3+0x1ba>
 23fdcf0:	f104 0414 	add.w	r4, r4, #20
 23fdcf4:	f1c4 0220 	rsb	r2, r4, #32
 23fdcf8:	fa20 f004 	lsr.w	r0, r0, r4
 23fdcfc:	fa01 f302 	lsl.w	r3, r1, r2
 23fdd00:	ea40 0003 	orr.w	r0, r0, r3
 23fdd04:	fa21 f304 	lsr.w	r3, r1, r4
 23fdd08:	ea45 0103 	orr.w	r1, r5, r3
 23fdd0c:	bd30      	pop	{r4, r5, pc}
 23fdd0e:	f1c4 040c 	rsb	r4, r4, #12
 23fdd12:	f1c4 0220 	rsb	r2, r4, #32
 23fdd16:	fa20 f002 	lsr.w	r0, r0, r2
 23fdd1a:	fa01 f304 	lsl.w	r3, r1, r4
 23fdd1e:	ea40 0003 	orr.w	r0, r0, r3
 23fdd22:	4629      	mov	r1, r5
 23fdd24:	bd30      	pop	{r4, r5, pc}
 23fdd26:	fa21 f004 	lsr.w	r0, r1, r4
 23fdd2a:	4629      	mov	r1, r5
 23fdd2c:	bd30      	pop	{r4, r5, pc}
 23fdd2e:	f094 0f00 	teq	r4, #0
 23fdd32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fdd36:	bf06      	itte	eq
 23fdd38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fdd3c:	3401      	addeq	r4, #1
 23fdd3e:	3d01      	subne	r5, #1
 23fdd40:	e74e      	b.n	23fdbe0 <__adddf3+0x8c>
 23fdd42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fdd46:	bf18      	it	ne
 23fdd48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fdd4c:	d029      	beq.n	23fdda2 <__adddf3+0x24e>
 23fdd4e:	ea94 0f05 	teq	r4, r5
 23fdd52:	bf08      	it	eq
 23fdd54:	ea90 0f02 	teqeq	r0, r2
 23fdd58:	d005      	beq.n	23fdd66 <__adddf3+0x212>
 23fdd5a:	ea54 0c00 	orrs.w	ip, r4, r0
 23fdd5e:	bf04      	itt	eq
 23fdd60:	4619      	moveq	r1, r3
 23fdd62:	4610      	moveq	r0, r2
 23fdd64:	bd30      	pop	{r4, r5, pc}
 23fdd66:	ea91 0f03 	teq	r1, r3
 23fdd6a:	bf1e      	ittt	ne
 23fdd6c:	2100      	movne	r1, #0
 23fdd6e:	2000      	movne	r0, #0
 23fdd70:	bd30      	popne	{r4, r5, pc}
 23fdd72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fdd76:	d105      	bne.n	23fdd84 <__adddf3+0x230>
 23fdd78:	0040      	lsls	r0, r0, #1
 23fdd7a:	4149      	adcs	r1, r1
 23fdd7c:	bf28      	it	cs
 23fdd7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fdd82:	bd30      	pop	{r4, r5, pc}
 23fdd84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fdd88:	bf3c      	itt	cc
 23fdd8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fdd8e:	bd30      	popcc	{r4, r5, pc}
 23fdd90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fdd94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fdd98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fdd9c:	f04f 0000 	mov.w	r0, #0
 23fdda0:	bd30      	pop	{r4, r5, pc}
 23fdda2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fdda6:	bf1a      	itte	ne
 23fdda8:	4619      	movne	r1, r3
 23fddaa:	4610      	movne	r0, r2
 23fddac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fddb0:	bf1c      	itt	ne
 23fddb2:	460b      	movne	r3, r1
 23fddb4:	4602      	movne	r2, r0
 23fddb6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fddba:	bf06      	itte	eq
 23fddbc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fddc0:	ea91 0f03 	teqeq	r1, r3
 23fddc4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fddc8:	bd30      	pop	{r4, r5, pc}
 23fddca:	bf00      	nop

023fddcc <__aeabi_ui2d>:
 23fddcc:	f090 0f00 	teq	r0, #0
 23fddd0:	bf04      	itt	eq
 23fddd2:	2100      	moveq	r1, #0
 23fddd4:	4770      	bxeq	lr
 23fddd6:	b530      	push	{r4, r5, lr}
 23fddd8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fdddc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fdde0:	f04f 0500 	mov.w	r5, #0
 23fdde4:	f04f 0100 	mov.w	r1, #0
 23fdde8:	e750      	b.n	23fdc8c <__adddf3+0x138>
 23fddea:	bf00      	nop

023fddec <__aeabi_i2d>:
 23fddec:	f090 0f00 	teq	r0, #0
 23fddf0:	bf04      	itt	eq
 23fddf2:	2100      	moveq	r1, #0
 23fddf4:	4770      	bxeq	lr
 23fddf6:	b530      	push	{r4, r5, lr}
 23fddf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fddfc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fde00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fde04:	bf48      	it	mi
 23fde06:	4240      	negmi	r0, r0
 23fde08:	f04f 0100 	mov.w	r1, #0
 23fde0c:	e73e      	b.n	23fdc8c <__adddf3+0x138>
 23fde0e:	bf00      	nop

023fde10 <__aeabi_f2d>:
 23fde10:	0042      	lsls	r2, r0, #1
 23fde12:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fde16:	ea4f 0131 	mov.w	r1, r1, rrx
 23fde1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fde1e:	bf1f      	itttt	ne
 23fde20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fde24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fde28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fde2c:	4770      	bxne	lr
 23fde2e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fde32:	bf08      	it	eq
 23fde34:	4770      	bxeq	lr
 23fde36:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fde3a:	bf04      	itt	eq
 23fde3c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fde40:	4770      	bxeq	lr
 23fde42:	b530      	push	{r4, r5, lr}
 23fde44:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fde48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fde4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fde50:	e71c      	b.n	23fdc8c <__adddf3+0x138>
 23fde52:	bf00      	nop

023fde54 <__aeabi_ul2d>:
 23fde54:	ea50 0201 	orrs.w	r2, r0, r1
 23fde58:	bf08      	it	eq
 23fde5a:	4770      	bxeq	lr
 23fde5c:	b530      	push	{r4, r5, lr}
 23fde5e:	f04f 0500 	mov.w	r5, #0
 23fde62:	e00a      	b.n	23fde7a <__aeabi_l2d+0x16>

023fde64 <__aeabi_l2d>:
 23fde64:	ea50 0201 	orrs.w	r2, r0, r1
 23fde68:	bf08      	it	eq
 23fde6a:	4770      	bxeq	lr
 23fde6c:	b530      	push	{r4, r5, lr}
 23fde6e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fde72:	d502      	bpl.n	23fde7a <__aeabi_l2d+0x16>
 23fde74:	4240      	negs	r0, r0
 23fde76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fde7a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fde7e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fde82:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fde86:	f43f aed8 	beq.w	23fdc3a <__adddf3+0xe6>
 23fde8a:	f04f 0203 	mov.w	r2, #3
 23fde8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fde92:	bf18      	it	ne
 23fde94:	3203      	addne	r2, #3
 23fde96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fde9a:	bf18      	it	ne
 23fde9c:	3203      	addne	r2, #3
 23fde9e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fdea2:	f1c2 0320 	rsb	r3, r2, #32
 23fdea6:	fa00 fc03 	lsl.w	ip, r0, r3
 23fdeaa:	fa20 f002 	lsr.w	r0, r0, r2
 23fdeae:	fa01 fe03 	lsl.w	lr, r1, r3
 23fdeb2:	ea40 000e 	orr.w	r0, r0, lr
 23fdeb6:	fa21 f102 	lsr.w	r1, r1, r2
 23fdeba:	4414      	add	r4, r2
 23fdebc:	e6bd      	b.n	23fdc3a <__adddf3+0xe6>
 23fdebe:	bf00      	nop

023fdec0 <__aeabi_dmul>:
 23fdec0:	b570      	push	{r4, r5, r6, lr}
 23fdec2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fdec6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fdeca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fdece:	bf1d      	ittte	ne
 23fded0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fded4:	ea94 0f0c 	teqne	r4, ip
 23fded8:	ea95 0f0c 	teqne	r5, ip
 23fdedc:	f000 f8de 	bleq	23fe09c <__aeabi_dmul+0x1dc>
 23fdee0:	442c      	add	r4, r5
 23fdee2:	ea81 0603 	eor.w	r6, r1, r3
 23fdee6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fdeea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fdeee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fdef2:	bf18      	it	ne
 23fdef4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fdef8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fdefc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fdf00:	d038      	beq.n	23fdf74 <__aeabi_dmul+0xb4>
 23fdf02:	fba0 ce02 	umull	ip, lr, r0, r2
 23fdf06:	f04f 0500 	mov.w	r5, #0
 23fdf0a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fdf0e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fdf12:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fdf16:	f04f 0600 	mov.w	r6, #0
 23fdf1a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fdf1e:	f09c 0f00 	teq	ip, #0
 23fdf22:	bf18      	it	ne
 23fdf24:	f04e 0e01 	orrne.w	lr, lr, #1
 23fdf28:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fdf2c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fdf30:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fdf34:	d204      	bcs.n	23fdf40 <__aeabi_dmul+0x80>
 23fdf36:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fdf3a:	416d      	adcs	r5, r5
 23fdf3c:	eb46 0606 	adc.w	r6, r6, r6
 23fdf40:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fdf44:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fdf48:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fdf4c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fdf50:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fdf54:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fdf58:	bf88      	it	hi
 23fdf5a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fdf5e:	d81e      	bhi.n	23fdf9e <__aeabi_dmul+0xde>
 23fdf60:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fdf64:	bf08      	it	eq
 23fdf66:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fdf6a:	f150 0000 	adcs.w	r0, r0, #0
 23fdf6e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fdf72:	bd70      	pop	{r4, r5, r6, pc}
 23fdf74:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fdf78:	ea46 0101 	orr.w	r1, r6, r1
 23fdf7c:	ea40 0002 	orr.w	r0, r0, r2
 23fdf80:	ea81 0103 	eor.w	r1, r1, r3
 23fdf84:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fdf88:	bfc2      	ittt	gt
 23fdf8a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fdf8e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fdf92:	bd70      	popgt	{r4, r5, r6, pc}
 23fdf94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fdf98:	f04f 0e00 	mov.w	lr, #0
 23fdf9c:	3c01      	subs	r4, #1
 23fdf9e:	f300 80ab 	bgt.w	23fe0f8 <__aeabi_dmul+0x238>
 23fdfa2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fdfa6:	bfde      	ittt	le
 23fdfa8:	2000      	movle	r0, #0
 23fdfaa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fdfae:	bd70      	pople	{r4, r5, r6, pc}
 23fdfb0:	f1c4 0400 	rsb	r4, r4, #0
 23fdfb4:	3c20      	subs	r4, #32
 23fdfb6:	da35      	bge.n	23fe024 <__aeabi_dmul+0x164>
 23fdfb8:	340c      	adds	r4, #12
 23fdfba:	dc1b      	bgt.n	23fdff4 <__aeabi_dmul+0x134>
 23fdfbc:	f104 0414 	add.w	r4, r4, #20
 23fdfc0:	f1c4 0520 	rsb	r5, r4, #32
 23fdfc4:	fa00 f305 	lsl.w	r3, r0, r5
 23fdfc8:	fa20 f004 	lsr.w	r0, r0, r4
 23fdfcc:	fa01 f205 	lsl.w	r2, r1, r5
 23fdfd0:	ea40 0002 	orr.w	r0, r0, r2
 23fdfd4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fdfd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fdfdc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fdfe0:	fa21 f604 	lsr.w	r6, r1, r4
 23fdfe4:	eb42 0106 	adc.w	r1, r2, r6
 23fdfe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fdfec:	bf08      	it	eq
 23fdfee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fdff2:	bd70      	pop	{r4, r5, r6, pc}
 23fdff4:	f1c4 040c 	rsb	r4, r4, #12
 23fdff8:	f1c4 0520 	rsb	r5, r4, #32
 23fdffc:	fa00 f304 	lsl.w	r3, r0, r4
 23fe000:	fa20 f005 	lsr.w	r0, r0, r5
 23fe004:	fa01 f204 	lsl.w	r2, r1, r4
 23fe008:	ea40 0002 	orr.w	r0, r0, r2
 23fe00c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fe010:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fe014:	f141 0100 	adc.w	r1, r1, #0
 23fe018:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fe01c:	bf08      	it	eq
 23fe01e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fe022:	bd70      	pop	{r4, r5, r6, pc}
 23fe024:	f1c4 0520 	rsb	r5, r4, #32
 23fe028:	fa00 f205 	lsl.w	r2, r0, r5
 23fe02c:	ea4e 0e02 	orr.w	lr, lr, r2
 23fe030:	fa20 f304 	lsr.w	r3, r0, r4
 23fe034:	fa01 f205 	lsl.w	r2, r1, r5
 23fe038:	ea43 0302 	orr.w	r3, r3, r2
 23fe03c:	fa21 f004 	lsr.w	r0, r1, r4
 23fe040:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fe044:	fa21 f204 	lsr.w	r2, r1, r4
 23fe048:	ea20 0002 	bic.w	r0, r0, r2
 23fe04c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fe050:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fe054:	bf08      	it	eq
 23fe056:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fe05a:	bd70      	pop	{r4, r5, r6, pc}
 23fe05c:	f094 0f00 	teq	r4, #0
 23fe060:	d10f      	bne.n	23fe082 <__aeabi_dmul+0x1c2>
 23fe062:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fe066:	0040      	lsls	r0, r0, #1
 23fe068:	eb41 0101 	adc.w	r1, r1, r1
 23fe06c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fe070:	bf08      	it	eq
 23fe072:	3c01      	subeq	r4, #1
 23fe074:	d0f7      	beq.n	23fe066 <__aeabi_dmul+0x1a6>
 23fe076:	ea41 0106 	orr.w	r1, r1, r6
 23fe07a:	f095 0f00 	teq	r5, #0
 23fe07e:	bf18      	it	ne
 23fe080:	4770      	bxne	lr
 23fe082:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fe086:	0052      	lsls	r2, r2, #1
 23fe088:	eb43 0303 	adc.w	r3, r3, r3
 23fe08c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fe090:	bf08      	it	eq
 23fe092:	3d01      	subeq	r5, #1
 23fe094:	d0f7      	beq.n	23fe086 <__aeabi_dmul+0x1c6>
 23fe096:	ea43 0306 	orr.w	r3, r3, r6
 23fe09a:	4770      	bx	lr
 23fe09c:	ea94 0f0c 	teq	r4, ip
 23fe0a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fe0a4:	bf18      	it	ne
 23fe0a6:	ea95 0f0c 	teqne	r5, ip
 23fe0aa:	d00c      	beq.n	23fe0c6 <__aeabi_dmul+0x206>
 23fe0ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fe0b0:	bf18      	it	ne
 23fe0b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fe0b6:	d1d1      	bne.n	23fe05c <__aeabi_dmul+0x19c>
 23fe0b8:	ea81 0103 	eor.w	r1, r1, r3
 23fe0bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fe0c0:	f04f 0000 	mov.w	r0, #0
 23fe0c4:	bd70      	pop	{r4, r5, r6, pc}
 23fe0c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fe0ca:	bf06      	itte	eq
 23fe0cc:	4610      	moveq	r0, r2
 23fe0ce:	4619      	moveq	r1, r3
 23fe0d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fe0d4:	d019      	beq.n	23fe10a <__aeabi_dmul+0x24a>
 23fe0d6:	ea94 0f0c 	teq	r4, ip
 23fe0da:	d102      	bne.n	23fe0e2 <__aeabi_dmul+0x222>
 23fe0dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fe0e0:	d113      	bne.n	23fe10a <__aeabi_dmul+0x24a>
 23fe0e2:	ea95 0f0c 	teq	r5, ip
 23fe0e6:	d105      	bne.n	23fe0f4 <__aeabi_dmul+0x234>
 23fe0e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fe0ec:	bf1c      	itt	ne
 23fe0ee:	4610      	movne	r0, r2
 23fe0f0:	4619      	movne	r1, r3
 23fe0f2:	d10a      	bne.n	23fe10a <__aeabi_dmul+0x24a>
 23fe0f4:	ea81 0103 	eor.w	r1, r1, r3
 23fe0f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fe0fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fe100:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fe104:	f04f 0000 	mov.w	r0, #0
 23fe108:	bd70      	pop	{r4, r5, r6, pc}
 23fe10a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fe10e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fe112:	bd70      	pop	{r4, r5, r6, pc}

023fe114 <__aeabi_ddiv>:
 23fe114:	b570      	push	{r4, r5, r6, lr}
 23fe116:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fe11a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fe11e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fe122:	bf1d      	ittte	ne
 23fe124:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fe128:	ea94 0f0c 	teqne	r4, ip
 23fe12c:	ea95 0f0c 	teqne	r5, ip
 23fe130:	f000 f8a7 	bleq	23fe282 <__aeabi_ddiv+0x16e>
 23fe134:	eba4 0405 	sub.w	r4, r4, r5
 23fe138:	ea81 0e03 	eor.w	lr, r1, r3
 23fe13c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fe140:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fe144:	f000 8088 	beq.w	23fe258 <__aeabi_ddiv+0x144>
 23fe148:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fe14c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fe150:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fe154:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fe158:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fe15c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fe160:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fe164:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fe168:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fe16c:	429d      	cmp	r5, r3
 23fe16e:	bf08      	it	eq
 23fe170:	4296      	cmpeq	r6, r2
 23fe172:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fe176:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fe17a:	d202      	bcs.n	23fe182 <__aeabi_ddiv+0x6e>
 23fe17c:	085b      	lsrs	r3, r3, #1
 23fe17e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fe182:	1ab6      	subs	r6, r6, r2
 23fe184:	eb65 0503 	sbc.w	r5, r5, r3
 23fe188:	085b      	lsrs	r3, r3, #1
 23fe18a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fe18e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fe192:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fe196:	ebb6 0e02 	subs.w	lr, r6, r2
 23fe19a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fe19e:	bf22      	ittt	cs
 23fe1a0:	1ab6      	subcs	r6, r6, r2
 23fe1a2:	4675      	movcs	r5, lr
 23fe1a4:	ea40 000c 	orrcs.w	r0, r0, ip
 23fe1a8:	085b      	lsrs	r3, r3, #1
 23fe1aa:	ea4f 0232 	mov.w	r2, r2, rrx
 23fe1ae:	ebb6 0e02 	subs.w	lr, r6, r2
 23fe1b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fe1b6:	bf22      	ittt	cs
 23fe1b8:	1ab6      	subcs	r6, r6, r2
 23fe1ba:	4675      	movcs	r5, lr
 23fe1bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fe1c0:	085b      	lsrs	r3, r3, #1
 23fe1c2:	ea4f 0232 	mov.w	r2, r2, rrx
 23fe1c6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fe1ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fe1ce:	bf22      	ittt	cs
 23fe1d0:	1ab6      	subcs	r6, r6, r2
 23fe1d2:	4675      	movcs	r5, lr
 23fe1d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fe1d8:	085b      	lsrs	r3, r3, #1
 23fe1da:	ea4f 0232 	mov.w	r2, r2, rrx
 23fe1de:	ebb6 0e02 	subs.w	lr, r6, r2
 23fe1e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fe1e6:	bf22      	ittt	cs
 23fe1e8:	1ab6      	subcs	r6, r6, r2
 23fe1ea:	4675      	movcs	r5, lr
 23fe1ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fe1f0:	ea55 0e06 	orrs.w	lr, r5, r6
 23fe1f4:	d018      	beq.n	23fe228 <__aeabi_ddiv+0x114>
 23fe1f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fe1fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fe1fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fe202:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fe206:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fe20a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fe20e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fe212:	d1c0      	bne.n	23fe196 <__aeabi_ddiv+0x82>
 23fe214:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fe218:	d10b      	bne.n	23fe232 <__aeabi_ddiv+0x11e>
 23fe21a:	ea41 0100 	orr.w	r1, r1, r0
 23fe21e:	f04f 0000 	mov.w	r0, #0
 23fe222:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fe226:	e7b6      	b.n	23fe196 <__aeabi_ddiv+0x82>
 23fe228:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fe22c:	bf04      	itt	eq
 23fe22e:	4301      	orreq	r1, r0
 23fe230:	2000      	moveq	r0, #0
 23fe232:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fe236:	bf88      	it	hi
 23fe238:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fe23c:	f63f aeaf 	bhi.w	23fdf9e <__aeabi_dmul+0xde>
 23fe240:	ebb5 0c03 	subs.w	ip, r5, r3
 23fe244:	bf04      	itt	eq
 23fe246:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fe24a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fe24e:	f150 0000 	adcs.w	r0, r0, #0
 23fe252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fe256:	bd70      	pop	{r4, r5, r6, pc}
 23fe258:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fe25c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fe260:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fe264:	bfc2      	ittt	gt
 23fe266:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fe26a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fe26e:	bd70      	popgt	{r4, r5, r6, pc}
 23fe270:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fe274:	f04f 0e00 	mov.w	lr, #0
 23fe278:	3c01      	subs	r4, #1
 23fe27a:	e690      	b.n	23fdf9e <__aeabi_dmul+0xde>
 23fe27c:	ea45 0e06 	orr.w	lr, r5, r6
 23fe280:	e68d      	b.n	23fdf9e <__aeabi_dmul+0xde>
 23fe282:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fe286:	ea94 0f0c 	teq	r4, ip
 23fe28a:	bf08      	it	eq
 23fe28c:	ea95 0f0c 	teqeq	r5, ip
 23fe290:	f43f af3b 	beq.w	23fe10a <__aeabi_dmul+0x24a>
 23fe294:	ea94 0f0c 	teq	r4, ip
 23fe298:	d10a      	bne.n	23fe2b0 <__aeabi_ddiv+0x19c>
 23fe29a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fe29e:	f47f af34 	bne.w	23fe10a <__aeabi_dmul+0x24a>
 23fe2a2:	ea95 0f0c 	teq	r5, ip
 23fe2a6:	f47f af25 	bne.w	23fe0f4 <__aeabi_dmul+0x234>
 23fe2aa:	4610      	mov	r0, r2
 23fe2ac:	4619      	mov	r1, r3
 23fe2ae:	e72c      	b.n	23fe10a <__aeabi_dmul+0x24a>
 23fe2b0:	ea95 0f0c 	teq	r5, ip
 23fe2b4:	d106      	bne.n	23fe2c4 <__aeabi_ddiv+0x1b0>
 23fe2b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fe2ba:	f43f aefd 	beq.w	23fe0b8 <__aeabi_dmul+0x1f8>
 23fe2be:	4610      	mov	r0, r2
 23fe2c0:	4619      	mov	r1, r3
 23fe2c2:	e722      	b.n	23fe10a <__aeabi_dmul+0x24a>
 23fe2c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fe2c8:	bf18      	it	ne
 23fe2ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fe2ce:	f47f aec5 	bne.w	23fe05c <__aeabi_dmul+0x19c>
 23fe2d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fe2d6:	f47f af0d 	bne.w	23fe0f4 <__aeabi_dmul+0x234>
 23fe2da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fe2de:	f47f aeeb 	bne.w	23fe0b8 <__aeabi_dmul+0x1f8>
 23fe2e2:	e712      	b.n	23fe10a <__aeabi_dmul+0x24a>

023fe2e4 <__gedf2>:
 23fe2e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fe2e8:	e006      	b.n	23fe2f8 <__cmpdf2+0x4>
 23fe2ea:	bf00      	nop

023fe2ec <__ledf2>:
 23fe2ec:	f04f 0c01 	mov.w	ip, #1
 23fe2f0:	e002      	b.n	23fe2f8 <__cmpdf2+0x4>
 23fe2f2:	bf00      	nop

023fe2f4 <__cmpdf2>:
 23fe2f4:	f04f 0c01 	mov.w	ip, #1
 23fe2f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fe2fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fe300:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fe304:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fe308:	bf18      	it	ne
 23fe30a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fe30e:	d01b      	beq.n	23fe348 <__cmpdf2+0x54>
 23fe310:	b001      	add	sp, #4
 23fe312:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fe316:	bf0c      	ite	eq
 23fe318:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fe31c:	ea91 0f03 	teqne	r1, r3
 23fe320:	bf02      	ittt	eq
 23fe322:	ea90 0f02 	teqeq	r0, r2
 23fe326:	2000      	moveq	r0, #0
 23fe328:	4770      	bxeq	lr
 23fe32a:	f110 0f00 	cmn.w	r0, #0
 23fe32e:	ea91 0f03 	teq	r1, r3
 23fe332:	bf58      	it	pl
 23fe334:	4299      	cmppl	r1, r3
 23fe336:	bf08      	it	eq
 23fe338:	4290      	cmpeq	r0, r2
 23fe33a:	bf2c      	ite	cs
 23fe33c:	17d8      	asrcs	r0, r3, #31
 23fe33e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fe342:	f040 0001 	orr.w	r0, r0, #1
 23fe346:	4770      	bx	lr
 23fe348:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fe34c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fe350:	d102      	bne.n	23fe358 <__cmpdf2+0x64>
 23fe352:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fe356:	d107      	bne.n	23fe368 <__cmpdf2+0x74>
 23fe358:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fe35c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fe360:	d1d6      	bne.n	23fe310 <__cmpdf2+0x1c>
 23fe362:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fe366:	d0d3      	beq.n	23fe310 <__cmpdf2+0x1c>
 23fe368:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fe36c:	4770      	bx	lr
 23fe36e:	bf00      	nop

023fe370 <__aeabi_cdrcmple>:
 23fe370:	4684      	mov	ip, r0
 23fe372:	4610      	mov	r0, r2
 23fe374:	4662      	mov	r2, ip
 23fe376:	468c      	mov	ip, r1
 23fe378:	4619      	mov	r1, r3
 23fe37a:	4663      	mov	r3, ip
 23fe37c:	e000      	b.n	23fe380 <__aeabi_cdcmpeq>
 23fe37e:	bf00      	nop

023fe380 <__aeabi_cdcmpeq>:
 23fe380:	b501      	push	{r0, lr}
 23fe382:	f7ff ffb7 	bl	23fe2f4 <__cmpdf2>
 23fe386:	2800      	cmp	r0, #0
 23fe388:	bf48      	it	mi
 23fe38a:	f110 0f00 	cmnmi.w	r0, #0
 23fe38e:	bd01      	pop	{r0, pc}

023fe390 <__aeabi_dcmpeq>:
 23fe390:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fe394:	f7ff fff4 	bl	23fe380 <__aeabi_cdcmpeq>
 23fe398:	bf0c      	ite	eq
 23fe39a:	2001      	moveq	r0, #1
 23fe39c:	2000      	movne	r0, #0
 23fe39e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fe3a2:	bf00      	nop

023fe3a4 <__aeabi_dcmplt>:
 23fe3a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fe3a8:	f7ff ffea 	bl	23fe380 <__aeabi_cdcmpeq>
 23fe3ac:	bf34      	ite	cc
 23fe3ae:	2001      	movcc	r0, #1
 23fe3b0:	2000      	movcs	r0, #0
 23fe3b2:	f85d fb08 	ldr.w	pc, [sp], #8
 23fe3b6:	bf00      	nop

023fe3b8 <__aeabi_dcmple>:
 23fe3b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fe3bc:	f7ff ffe0 	bl	23fe380 <__aeabi_cdcmpeq>
 23fe3c0:	bf94      	ite	ls
 23fe3c2:	2001      	movls	r0, #1
 23fe3c4:	2000      	movhi	r0, #0
 23fe3c6:	f85d fb08 	ldr.w	pc, [sp], #8
 23fe3ca:	bf00      	nop

023fe3cc <__aeabi_dcmpge>:
 23fe3cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fe3d0:	f7ff ffce 	bl	23fe370 <__aeabi_cdrcmple>
 23fe3d4:	bf94      	ite	ls
 23fe3d6:	2001      	movls	r0, #1
 23fe3d8:	2000      	movhi	r0, #0
 23fe3da:	f85d fb08 	ldr.w	pc, [sp], #8
 23fe3de:	bf00      	nop

023fe3e0 <__aeabi_dcmpgt>:
 23fe3e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fe3e4:	f7ff ffc4 	bl	23fe370 <__aeabi_cdrcmple>
 23fe3e8:	bf34      	ite	cc
 23fe3ea:	2001      	movcc	r0, #1
 23fe3ec:	2000      	movcs	r0, #0
 23fe3ee:	f85d fb08 	ldr.w	pc, [sp], #8
 23fe3f2:	bf00      	nop

023fe3f4 <__aeabi_dcmpun>:
 23fe3f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fe3f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fe3fc:	d102      	bne.n	23fe404 <__aeabi_dcmpun+0x10>
 23fe3fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fe402:	d10a      	bne.n	23fe41a <__aeabi_dcmpun+0x26>
 23fe404:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fe408:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fe40c:	d102      	bne.n	23fe414 <__aeabi_dcmpun+0x20>
 23fe40e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fe412:	d102      	bne.n	23fe41a <__aeabi_dcmpun+0x26>
 23fe414:	f04f 0000 	mov.w	r0, #0
 23fe418:	4770      	bx	lr
 23fe41a:	f04f 0001 	mov.w	r0, #1
 23fe41e:	4770      	bx	lr

023fe420 <__aeabi_d2iz>:
 23fe420:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fe424:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fe428:	d215      	bcs.n	23fe456 <__aeabi_d2iz+0x36>
 23fe42a:	d511      	bpl.n	23fe450 <__aeabi_d2iz+0x30>
 23fe42c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fe430:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fe434:	d912      	bls.n	23fe45c <__aeabi_d2iz+0x3c>
 23fe436:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fe43a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fe43e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fe442:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fe446:	fa23 f002 	lsr.w	r0, r3, r2
 23fe44a:	bf18      	it	ne
 23fe44c:	4240      	negne	r0, r0
 23fe44e:	4770      	bx	lr
 23fe450:	f04f 0000 	mov.w	r0, #0
 23fe454:	4770      	bx	lr
 23fe456:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fe45a:	d105      	bne.n	23fe468 <__aeabi_d2iz+0x48>
 23fe45c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23fe460:	bf08      	it	eq
 23fe462:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23fe466:	4770      	bx	lr
 23fe468:	f04f 0000 	mov.w	r0, #0
 23fe46c:	4770      	bx	lr
 23fe46e:	bf00      	nop

023fe470 <__aeabi_d2uiz>:
 23fe470:	004a      	lsls	r2, r1, #1
 23fe472:	d211      	bcs.n	23fe498 <__aeabi_d2uiz+0x28>
 23fe474:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fe478:	d211      	bcs.n	23fe49e <__aeabi_d2uiz+0x2e>
 23fe47a:	d50d      	bpl.n	23fe498 <__aeabi_d2uiz+0x28>
 23fe47c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fe480:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fe484:	d40e      	bmi.n	23fe4a4 <__aeabi_d2uiz+0x34>
 23fe486:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fe48a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fe48e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fe492:	fa23 f002 	lsr.w	r0, r3, r2
 23fe496:	4770      	bx	lr
 23fe498:	f04f 0000 	mov.w	r0, #0
 23fe49c:	4770      	bx	lr
 23fe49e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fe4a2:	d102      	bne.n	23fe4aa <__aeabi_d2uiz+0x3a>
 23fe4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe4a8:	4770      	bx	lr
 23fe4aa:	f04f 0000 	mov.w	r0, #0
 23fe4ae:	4770      	bx	lr

023fe4b0 <__aeabi_d2f>:
 23fe4b0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fe4b4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fe4b8:	bf24      	itt	cs
 23fe4ba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fe4be:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fe4c2:	d90d      	bls.n	23fe4e0 <__aeabi_d2f+0x30>
 23fe4c4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fe4c8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fe4cc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fe4d0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fe4d4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fe4d8:	bf08      	it	eq
 23fe4da:	f020 0001 	biceq.w	r0, r0, #1
 23fe4de:	4770      	bx	lr
 23fe4e0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fe4e4:	d121      	bne.n	23fe52a <__aeabi_d2f+0x7a>
 23fe4e6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fe4ea:	bfbc      	itt	lt
 23fe4ec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fe4f0:	4770      	bxlt	lr
 23fe4f2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fe4f6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fe4fa:	f1c2 0218 	rsb	r2, r2, #24
 23fe4fe:	f1c2 0c20 	rsb	ip, r2, #32
 23fe502:	fa10 f30c 	lsls.w	r3, r0, ip
 23fe506:	fa20 f002 	lsr.w	r0, r0, r2
 23fe50a:	bf18      	it	ne
 23fe50c:	f040 0001 	orrne.w	r0, r0, #1
 23fe510:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fe514:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fe518:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fe51c:	ea40 000c 	orr.w	r0, r0, ip
 23fe520:	fa23 f302 	lsr.w	r3, r3, r2
 23fe524:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fe528:	e7cc      	b.n	23fe4c4 <__aeabi_d2f+0x14>
 23fe52a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fe52e:	d107      	bne.n	23fe540 <__aeabi_d2f+0x90>
 23fe530:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fe534:	bf1e      	ittt	ne
 23fe536:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fe53a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fe53e:	4770      	bxne	lr
 23fe540:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fe544:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fe548:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fe54c:	4770      	bx	lr
 23fe54e:	bf00      	nop

023fe550 <strlen>:
 23fe550:	4603      	mov	r3, r0
 23fe552:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe556:	2a00      	cmp	r2, #0
 23fe558:	d1fb      	bne.n	23fe552 <strlen+0x2>
 23fe55a:	1a18      	subs	r0, r3, r0
 23fe55c:	3801      	subs	r0, #1
 23fe55e:	4770      	bx	lr

023fe560 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fe560:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fe562:	f001 f9e1 	bl	23ff928 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe566:	2500      	movs	r5, #0
 23fe568:	4e05      	ldr	r6, [pc, #20]	; (23fe580 <module_user_init+0x20>)
 23fe56a:	4c06      	ldr	r4, [pc, #24]	; (23fe584 <module_user_init+0x24>)
 23fe56c:	1ba4      	subs	r4, r4, r6
 23fe56e:	08a4      	lsrs	r4, r4, #2
 23fe570:	42ac      	cmp	r4, r5
 23fe572:	d100      	bne.n	23fe576 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fe574:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fe576:	f856 3b04 	ldr.w	r3, [r6], #4
 23fe57a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe57c:	3501      	adds	r5, #1
 23fe57e:	e7f7      	b.n	23fe570 <module_user_init+0x10>
 23fe580:	023fffd4 	.word	0x023fffd4
 23fe584:	023ffff8 	.word	0x023ffff8

023fe588 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fe588:	f000 b814 	b.w	23fe5b4 <setup>

023fe58c <module_user_loop>:
}

void module_user_loop() {
 23fe58c:	b508      	push	{r3, lr}
    loop();
 23fe58e:	f000 f86b 	bl	23fe668 <loop>
    _post_loop();
}
 23fe592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fe596:	f001 b97f 	b.w	23ff898 <_post_loop>

023fe59a <_Znaj>:
 23fe59a:	f000 bca7 	b.w	23feeec <malloc>

023fe59e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fe59e:	f000 bcb3 	b.w	23fef08 <free>

023fe5a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fe5a2:	7800      	ldrb	r0, [r0, #0]
 23fe5a4:	fab0 f080 	clz	r0, r0
 23fe5a8:	0940      	lsrs	r0, r0, #5
 23fe5aa:	4770      	bx	lr

023fe5ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fe5ac:	2301      	movs	r3, #1
 23fe5ae:	7003      	strb	r3, [r0, #0]
 23fe5b0:	4770      	bx	lr
	...

023fe5b4 <setup>:
//defines from rs232 main.c
#define PROCESS_RX_BUFFER_SIZE 500
#define RS232_TRANSMITTER

void setup() 
{
 23fe5b4:	b510      	push	{r4, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 23fe5b6:	2400      	movs	r4, #0
 23fe5b8:	b086      	sub	sp, #24

  Serial.begin(9600);
 23fe5ba:	f001 f8dd 	bl	23ff778 <_Z16_fetch_usbserialv>
 23fe5be:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fe5c2:	f001 f8cd 	bl	23ff760 <_ZN9USBSerial5beginEl>

  Particle.disconnect();
 23fe5c6:	a803      	add	r0, sp, #12
 23fe5c8:	e9cd 4403 	strd	r4, r4, [sp, #12]
        bool clearSession) :
 23fe5cc:	f8ad 4014 	strh.w	r4, [sp, #20]
 23fe5d0:	f000 fcd0 	bl	23fef74 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 23fe5d4:	4810      	ldr	r0, [pc, #64]	; (23fe618 <setup+0x64>)
 23fe5d6:	4622      	mov	r2, r4
 23fe5d8:	4623      	mov	r3, r4
 23fe5da:	4621      	mov	r1, r4
 23fe5dc:	6840      	ldr	r0, [r0, #4]
 23fe5de:	f000 fc23 	bl	23fee28 <network_off>
  eeprom7_default_cfg ( &eeprom7 );
  */

  //from temphum13
  temphum13_cfg_t temphum13_cfg;
  temphum13_cfg_setup( &temphum13_cfg );
 23fe5e2:	a803      	add	r0, sp, #12
 23fe5e4:	f000 f91d 	bl	23fe822 <temphum13_cfg_setup>
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fe5e8:	2301      	movs	r3, #1
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fe5ea:	4c0c      	ldr	r4, [pc, #48]	; (23fe61c <setup+0x68>)
 23fe5ec:	a903      	add	r1, sp, #12
 23fe5ee:	4620      	mov	r0, r4
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fe5f0:	f8ad 300c 	strh.w	r3, [sp, #12]
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fe5f4:	f000 f91d 	bl	23fe832 <temphum13_init>
  temphum13_default_cfg( &temphum13 );
 23fe5f8:	4620      	mov	r0, r4
 23fe5fa:	f000 f94a 	bl	23fe892 <temphum13_default_cfg>
  pwmdriver_pwm_start( &pwmdriver );
*/  

  //from current4
  current4_cfg_t current4_cfg;
  current4_cfg_setup( &current4_cfg );
 23fe5fe:	a801      	add	r0, sp, #4
 23fe600:	f000 f850 	bl	23fe6a4 <_Z18current4_cfg_setupP14current4_cfg_t>
  CURRENT4_MAP_MIKROBUS( current4_cfg, MIKROBUS_1 );
 23fe604:	230b      	movs	r3, #11
  current4_init( &current4, &current4_cfg );
 23fe606:	a901      	add	r1, sp, #4
 23fe608:	4805      	ldr	r0, [pc, #20]	; (23fe620 <setup+0x6c>)
  CURRENT4_MAP_MIKROBUS( current4_cfg, MIKROBUS_1 );
 23fe60a:	f88d 3004 	strb.w	r3, [sp, #4]
  current4_init( &current4, &current4_cfg );
 23fe60e:	f000 f851 	bl	23fe6b4 <_Z13current4_initP10current4_tP14current4_cfg_t>
}
 23fe612:	b006      	add	sp, #24
 23fe614:	bd10      	pop	{r4, pc}
 23fe616:	bf00      	nop
 23fe618:	1007aee0 	.word	0x1007aee0
 23fe61c:	1007ae68 	.word	0x1007ae68
 23fe620:	1007ae5c 	.word	0x1007ae5c

023fe624 <_Z13current4_mainv>:
}

// current4 main.c example
void current4_main()
{
  float current4_load_voltage = 0;
 23fe624:	2300      	movs	r3, #0
{
 23fe626:	b507      	push	{r0, r1, r2, lr}
  current4_read_an_pin_voltage ( &current4, &current4_load_voltage );
 23fe628:	480c      	ldr	r0, [pc, #48]	; (23fe65c <_Z13current4_mainv+0x38>)
 23fe62a:	a901      	add	r1, sp, #4
  float current4_load_voltage = 0;
 23fe62c:	9301      	str	r3, [sp, #4]
  current4_read_an_pin_voltage ( &current4, &current4_load_voltage );
 23fe62e:	f000 f865 	bl	23fe6fc <_Z28current4_read_an_pin_voltageP10current4_tPf>
  Serial.print("voltage = ");
 23fe632:	f001 f8a1 	bl	23ff778 <_Z16_fetch_usbserialv>
 23fe636:	490a      	ldr	r1, [pc, #40]	; (23fe660 <_Z13current4_mainv+0x3c>)
 23fe638:	f000 feaa 	bl	23ff390 <_ZN5Print5printEPKc>
	Serial.print(current4_load_voltage, 2); 
 23fe63c:	f001 f89c 	bl	23ff778 <_Z16_fetch_usbserialv>
 23fe640:	ed9d 0a01 	vldr	s0, [sp, #4]
 23fe644:	2102      	movs	r1, #2
 23fe646:	f000 ffa7 	bl	23ff598 <_ZN5Print5printEfi>
	Serial.println("");
 23fe64a:	f001 f895 	bl	23ff778 <_Z16_fetch_usbserialv>
 23fe64e:	4905      	ldr	r1, [pc, #20]	; (23fe664 <_Z13current4_mainv+0x40>)
 23fe650:	f000 feb1 	bl	23ff3b6 <_ZN5Print7printlnEPKc>

 23fe654:	b003      	add	sp, #12
 23fe656:	f85d fb04 	ldr.w	pc, [sp], #4
 23fe65a:	bf00      	nop
 23fe65c:	1007ae5c 	.word	0x1007ae5c
 23fe660:	023ffdd5 	.word	0x023ffdd5
 23fe664:	023ffddf 	.word	0x023ffddf

023fe668 <loop>:
void loop() {
 23fe668:	b508      	push	{r3, lr}
current4_main();
 23fe66a:	f7ff ffdb 	bl	23fe624 <_Z13current4_mainv>
}
 23fe66e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
delay(5000);
 23fe672:	f241 3088 	movw	r0, #5000	; 0x1388
 23fe676:	f000 bc71 	b.w	23fef5c <delay>
	...

023fe67c <_GLOBAL__sub_I_SystemMode>:
 23fe67c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe67e:	2400      	movs	r4, #0
 23fe680:	4b06      	ldr	r3, [pc, #24]	; (23fe69c <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
 23fe682:	4a07      	ldr	r2, [pc, #28]	; (23fe6a0 <_GLOBAL__sub_I_SystemMode+0x24>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe684:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 23fe686:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fe68a:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fe68c:	f000 fb24 	bl	23fecd8 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fe690:	4621      	mov	r1, r4
 23fe692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
 23fe696:	2001      	movs	r0, #1
 23fe698:	f000 bb3a 	b.w	23fed10 <system_thread_set_state>
 23fe69c:	1007ae50 	.word	0x1007ae50
 23fe6a0:	ffff0000 	.word	0xffff0000

023fe6a4 <_Z18current4_cfg_setupP14current4_cfg_t>:
 */
#define GAIN 0.25

void current4_cfg_setup ( current4_cfg_t *cfg )
{
    cfg->an = HAL_PIN_NC;
 23fe6a4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 23fe6a8:	8003      	strh	r3, [r0, #0]

    cfg->resolution = ANALOG_IN_RESOLUTION_DEFAULT; /*< Should leave this by default for portability purposes. 
                                                        Different MCU's have different resolutions. 
                                                        Change only if necessary.*/
    cfg->vref       = 3.3;
 23fe6aa:	4b01      	ldr	r3, [pc, #4]	; (23fe6b0 <_Z18current4_cfg_setupP14current4_cfg_t+0xc>)
 23fe6ac:	6043      	str	r3, [r0, #4]
}
 23fe6ae:	4770      	bx	lr
 23fe6b0:	40533333 	.word	0x40533333

023fe6b4 <_Z13current4_initP10current4_tP14current4_cfg_t>:

err_t current4_init ( current4_t *ctx, current4_cfg_t *cfg ) 
{
 23fe6b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe6b6:	460d      	mov	r5, r1
 23fe6b8:	4604      	mov	r4, r0
    analog_in_config_t adc_cfg;

    analog_in_configure_default( &adc_cfg );
 23fe6ba:	4668      	mov	r0, sp
 23fe6bc:	f000 f820 	bl	23fe700 <_Z27analog_in_configure_defaultP18analog_in_config_t>

    adc_cfg.input_pin = cfg->an;
 23fe6c0:	782b      	ldrb	r3, [r5, #0]

    if ( analog_in_open( &ctx->adc, &adc_cfg ) == ADC_ERROR ) 
 23fe6c2:	4669      	mov	r1, sp
 23fe6c4:	4620      	mov	r0, r4
    adc_cfg.input_pin = cfg->an;
 23fe6c6:	f88d 3000 	strb.w	r3, [sp]
    if ( analog_in_open( &ctx->adc, &adc_cfg ) == ADC_ERROR ) 
 23fe6ca:	f000 f81f 	bl	23fe70c <_Z14analog_in_openP11analog_in_tP18analog_in_config_t>
 23fe6ce:	3001      	adds	r0, #1
 23fe6d0:	d103      	bne.n	23fe6da <_Z13current4_initP10current4_tP14current4_cfg_t+0x26>
    {
        return ADC_ERROR;
 23fe6d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
    
    ctx->ic_vref = 0;

    return ADC_SUCCESS;
}
 23fe6d6:	b003      	add	sp, #12
 23fe6d8:	bd30      	pop	{r4, r5, pc}
    if ( analog_in_set_vref_value( &ctx->adc, cfg->vref ) == ADC_ERROR ) 
 23fe6da:	ed95 0a01 	vldr	s0, [r5, #4]
 23fe6de:	4620      	mov	r0, r4
 23fe6e0:	f000 f82c 	bl	23fe73c <_Z24analog_in_set_vref_valueP11analog_in_tf>
 23fe6e4:	3001      	adds	r0, #1
 23fe6e6:	d0f4      	beq.n	23fe6d2 <_Z13current4_initP10current4_tP14current4_cfg_t+0x1e>
    if ( analog_in_set_resolution( &ctx->adc, cfg->resolution ) == ADC_ERROR ) 
 23fe6e8:	4620      	mov	r0, r4
 23fe6ea:	7869      	ldrb	r1, [r5, #1]
 23fe6ec:	f000 f81a 	bl	23fe724 <_Z24analog_in_set_resolutionP11analog_in_t22analog_in_resolution_t>
 23fe6f0:	3001      	adds	r0, #1
 23fe6f2:	d0ee      	beq.n	23fe6d2 <_Z13current4_initP10current4_tP14current4_cfg_t+0x1e>
    ctx->ic_vref = 0;
 23fe6f4:	2300      	movs	r3, #0
    return ADC_SUCCESS;
 23fe6f6:	2000      	movs	r0, #0
    ctx->ic_vref = 0;
 23fe6f8:	60a3      	str	r3, [r4, #8]
    return ADC_SUCCESS;
 23fe6fa:	e7ec      	b.n	23fe6d6 <_Z13current4_initP10current4_tP14current4_cfg_t+0x22>

023fe6fc <_Z28current4_read_an_pin_voltageP10current4_tPf>:
    return analog_in_read( &ctx->adc, data_out );
}

err_t current4_read_an_pin_voltage ( current4_t *ctx, float *data_out ) 
{
    return analog_in_read_voltage( &ctx->adc, data_out );
 23fe6fc:	f000 b820 	b.w	23fe740 <_Z22analog_in_read_voltageP11analog_in_tPf>

023fe700 <_Z27analog_in_configure_defaultP18analog_in_config_t>:
    config->vref_input = ANALOG_IN_VREF_EXTERNAL;
    config->vref_value = -1.0;
    */


   global_resolution = ANALOG_IN_RESOLUTION_12_BIT;        //set global variable to 12-bit
 23fe700:	2204      	movs	r2, #4
 23fe702:	4b01      	ldr	r3, [pc, #4]	; (23fe708 <_Z27analog_in_configure_defaultP18analog_in_config_t+0x8>)
 23fe704:	701a      	strb	r2, [r3, #0]
}
 23fe706:	4770      	bx	lr
 23fe708:	1007ae7a 	.word	0x1007ae7a

023fe70c <_Z14analog_in_openP11analog_in_tP18analog_in_config_t>:

//open analog input on pin
int8_t analog_in_open(analog_in_t *obj, analog_in_config_t *config)
{
 23fe70c:	b508      	push	{r3, lr}
    memcpy( p_config, config, sizeof( analog_in_config_t ) );
    return _acquire( obj, true );
    */
   

   global_pin = config->input_pin;      //set global pin variable to function parameter
 23fe70e:	4b04      	ldr	r3, [pc, #16]	; (23fe720 <_Z14analog_in_openP11analog_in_tP18analog_in_config_t+0x14>)
 23fe710:	7808      	ldrb	r0, [r1, #0]
   pinMode(global_pin, AN_INPUT);       //set pin as analog input
 23fe712:	2106      	movs	r1, #6
   global_pin = config->input_pin;      //set global pin variable to function parameter
 23fe714:	8018      	strh	r0, [r3, #0]
   pinMode(global_pin, AN_INPUT);       //set pin as analog input
 23fe716:	f001 f977 	bl	23ffa08 <pinMode>
   return ADC_SUCCESS;                  //return status
}
 23fe71a:	2000      	movs	r0, #0
 23fe71c:	bd08      	pop	{r3, pc}
 23fe71e:	bf00      	nop
 23fe720:	1007ae78 	.word	0x1007ae78

023fe724 <_Z24analog_in_set_resolutionP11analog_in_t22analog_in_resolution_t>:
        return ADC_ERROR;
    }
    */


    switch (resolution)
 23fe724:	1e4b      	subs	r3, r1, #1
 23fe726:	2b05      	cmp	r3, #5
    {
        case ANALOG_IN_RESOLUTION_6_BIT:
        case ANALOG_IN_RESOLUTION_8_BIT:
        case ANALOG_IN_RESOLUTION_10_BIT:
        case ANALOG_IN_RESOLUTION_12_BIT:
                global_resolution = resolution;     //set global variable to function parameter
 23fe728:	bf9d      	ittte	ls
 23fe72a:	4b03      	ldrls	r3, [pc, #12]	; (23fe738 <_Z24analog_in_set_resolutionP11analog_in_t22analog_in_resolution_t+0x14>)
            return ADC_SUCCESS;                     //return status
 23fe72c:	2000      	movls	r0, #0
                global_resolution = resolution;     //set global variable to function parameter
 23fe72e:	7019      	strbls	r1, [r3, #0]
    switch (resolution)
 23fe730:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
            return ADC_SUCCESS;                     //return status

         default:
            return ADC_ERROR;      //return status
    }
}
 23fe734:	4770      	bx	lr
 23fe736:	bf00      	nop
 23fe738:	1007ae7a 	.word	0x1007ae7a

023fe73c <_Z24analog_in_set_vref_valueP11analog_in_tf>:
    */

    #warning analog_in_set_vref_value() function is not implemented
    return ADC_SUCCESS;      //return status

}
 23fe73c:	2000      	movs	r0, #0
 23fe73e:	4770      	bx	lr

023fe740 <_Z22analog_in_read_voltageP11analog_in_tPf>:
}

//read analog voltage
int8_t analog_in_read_voltage(analog_in_t *obj, float *readDatabuf)
//int8_t analog_in_read_voltage(analog_in_t *obj, float readDatabuf)
{
 23fe740:	b510      	push	{r4, lr}
        return ADC_ERROR;
    }
    */


    int32_t val = analogRead(global_pin);                   //analog read from set pin               
 23fe742:	4b0b      	ldr	r3, [pc, #44]	; (23fe770 <_Z22analog_in_read_voltageP11analog_in_tPf+0x30>)
{
 23fe744:	460c      	mov	r4, r1
    int32_t val = analogRead(global_pin);                   //analog read from set pin               
 23fe746:	8818      	ldrh	r0, [r3, #0]
 23fe748:	f001 f96f 	bl	23ffa2a <analogRead>
    *readDatabuf = (float) (val * 0.0008);     //convert value to voltage and set to function parameter           
 23fe74c:	f7ff fb4e 	bl	23fddec <__aeabi_i2d>
 23fe750:	a305      	add	r3, pc, #20	; (adr r3, 23fe768 <_Z22analog_in_read_voltageP11analog_in_tPf+0x28>)
 23fe752:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe756:	f7ff fbb3 	bl	23fdec0 <__aeabi_dmul>
 23fe75a:	f7ff fea9 	bl	23fe4b0 <__aeabi_d2f>
 23fe75e:	6020      	str	r0, [r4, #0]
    return ADC_SUCCESS;      //return status
}
 23fe760:	2000      	movs	r0, #0
 23fe762:	bd10      	pop	{r4, pc}
 23fe764:	f3af 8000 	nop.w
 23fe768:	eb1c432d 	.word	0xeb1c432d
 23fe76c:	3f4a36e2 	.word	0x3f4a36e2
 23fe770:	1007ae78 	.word	0x1007ae78

023fe774 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>:
static uint32_t set_speed;      //scl speed variable, static as previous value should be retained
static uint8_t addr;            //7-bit cleint address variable, status as previous value should be retained

//Configures i2c_master_config_t struct to default initialization values
void i2c_master_configure_default(i2c_master_config_t *config)
{
 23fe774:	b510      	push	{r4, lr}
    config->speed = I2C_MASTER_SPEED_STANDARD;
    config->timeout_pass_count = 10000;
    */
    
    
    addr = 0x00;                                    //set client address to 0x00
 23fe776:	2400      	movs	r4, #0
 23fe778:	4b05      	ldr	r3, [pc, #20]	; (23fe790 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x1c>)
 23fe77a:	701c      	strb	r4, [r3, #0]
    set_speed = I2C_MASTER_SPEED_STANDARD;          //set static global variable to new speed value
 23fe77c:	4b05      	ldr	r3, [pc, #20]	; (23fe794 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x20>)
 23fe77e:	601c      	str	r4, [r3, #0]
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fe780:	f001 f980 	bl	23ffa84 <_Z19__fetch_global_Wirev>
 23fe784:	4621      	mov	r1, r4
}
 23fe786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fe78a:	f000 bc95 	b.w	23ff0b8 <_ZN7TwoWire8setSpeedEm>
 23fe78e:	bf00      	nop
 23fe790:	1007ae7b 	.word	0x1007ae7b
 23fe794:	1007ae7c 	.word	0x1007ae7c

023fe798 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>:

//Opens the I2C Master driver object on selected pins
int8_t i2c_master_open(i2c_master_t *obj, i2c_master_config_t *config)
{
 23fe798:	b508      	push	{r3, lr}

    return _acquire( obj, true );
    */

    
    Wire.setSpeed(set_speed);       //set speed, must be done before Wire.begin() and set to whatever the static global variable is set to
 23fe79a:	f001 f973 	bl	23ffa84 <_Z19__fetch_global_Wirev>
 23fe79e:	4b05      	ldr	r3, [pc, #20]	; (23fe7b4 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t+0x1c>)
 23fe7a0:	6819      	ldr	r1, [r3, #0]
 23fe7a2:	f000 fc89 	bl	23ff0b8 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();                   //join i2c bus as host                   
 23fe7a6:	f001 f96d 	bl	23ffa84 <_Z19__fetch_global_Wirev>
 23fe7aa:	f000 fc89 	bl	23ff0c0 <_ZN7TwoWire5beginEv>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe7ae:	2000      	movs	r0, #0
 23fe7b0:	bd08      	pop	{r3, pc}
 23fe7b2:	bf00      	nop
 23fe7b4:	1007ae7c 	.word	0x1007ae7c

023fe7b8 <_Z20i2c_master_set_speedP12i2c_master_tm>:

//set scl speed
int8_t i2c_master_set_speed(i2c_master_t *obj, uint32_t speed)
{
 23fe7b8:	b510      	push	{r4, lr}
 23fe7ba:	460c      	mov	r4, r1
        return I2C_MASTER_ERROR;
    }
    */

    
    set_speed = speed;              //set static global variable to new speed value
 23fe7bc:	4b04      	ldr	r3, [pc, #16]	; (23fe7d0 <_Z20i2c_master_set_speedP12i2c_master_tm+0x18>)
 23fe7be:	6019      	str	r1, [r3, #0]
    Wire.setSpeed(speed);           //set speed, must be done before Wire.begin()
 23fe7c0:	f001 f960 	bl	23ffa84 <_Z19__fetch_global_Wirev>
 23fe7c4:	4621      	mov	r1, r4
 23fe7c6:	f000 fc77 	bl	23ff0b8 <_ZN7TwoWire8setSpeedEm>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe7ca:	2000      	movs	r0, #0
 23fe7cc:	bd10      	pop	{r4, pc}
 23fe7ce:	bf00      	nop
 23fe7d0:	1007ae7c 	.word	0x1007ae7c

023fe7d4 <_Z28i2c_master_set_slave_addressP12i2c_master_th>:
        return I2C_MASTER_ERROR;
    }
    */

    
    addr = address;                 //set function parameter to global variable
 23fe7d4:	4b01      	ldr	r3, [pc, #4]	; (23fe7dc <_Z28i2c_master_set_slave_addressP12i2c_master_th+0x8>)
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe7d6:	2000      	movs	r0, #0
    addr = address;                 //set function parameter to global variable
 23fe7d8:	7019      	strb	r1, [r3, #0]
}
 23fe7da:	4770      	bx	lr
 23fe7dc:	1007ae7b 	.word	0x1007ae7b

023fe7e0 <_Z16i2c_master_writeP12i2c_master_tPhj>:

//i2c write operation, R/W = 0
int8_t i2c_master_write(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data)
{
 23fe7e0:	b513      	push	{r0, r1, r4, lr}
 23fe7e2:	460c      	mov	r4, r1
 23fe7e4:	9201      	str	r2, [sp, #4]
        return I2C_MASTER_ERROR;
    }
    */

    
    Wire.beginTransmission(addr);                       //send device address byte using 7-bit client address
 23fe7e6:	f001 f94d 	bl	23ffa84 <_Z19__fetch_global_Wirev>
 23fe7ea:	4b0b      	ldr	r3, [pc, #44]	; (23fe818 <_Z16i2c_master_writeP12i2c_master_tPhj+0x38>)
 23fe7ec:	7819      	ldrb	r1, [r3, #0]
 23fe7ee:	f000 fc6d 	bl	23ff0cc <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);
 23fe7f2:	f001 f947 	bl	23ffa84 <_Z19__fetch_global_Wirev>
 23fe7f6:	6803      	ldr	r3, [r0, #0]
 23fe7f8:	4621      	mov	r1, r4
 23fe7fa:	68db      	ldr	r3, [r3, #12]
 23fe7fc:	9a01      	ldr	r2, [sp, #4]
 23fe7fe:	4798      	blx	r3
    if (Wire.endTransmission(TRUE) == TRUE)     //send stop condition (true)
 23fe800:	f001 f940 	bl	23ffa84 <_Z19__fetch_global_Wirev>
 23fe804:	2101      	movs	r1, #1
 23fe806:	f000 fc65 	bl	23ff0d4 <_ZN7TwoWire15endTransmissionEh>
    {
        return I2C_MASTER_SUCCESS;      //return status
    }
    return I2C_MASTER_ERROR;        //return status    
}
 23fe80a:	3801      	subs	r0, #1
 23fe80c:	bf18      	it	ne
 23fe80e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fe812:	b002      	add	sp, #8
 23fe814:	bd10      	pop	{r4, pc}
 23fe816:	bf00      	nop
 23fe818:	1007ae7b 	.word	0x1007ae7b

023fe81c <_Z11Delay_100msv>:
#define HAL_PORT_NC (uint8_t)(0xFFFFFFFF)              //port error, wrong port selected

//function for mikroE delays for libray port compability
inline void Delay_1ms( ) {delay(1);}
inline void Delay_10ms( ) {delay(10);}
inline void Delay_100ms( ) {delay(100);}
 23fe81c:	2064      	movs	r0, #100	; 0x64
 23fe81e:	f000 bb9d 	b.w	23fef5c <delay>

023fe822 <temphum13_cfg_setup>:

void temphum13_cfg_setup ( temphum13_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->scl = HAL_PIN_NC;
 23fe822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe826:	8003      	strh	r3, [r0, #0]
    cfg->sda = HAL_PIN_NC;

    cfg->i2c_speed = I2C_MASTER_SPEED_STANDARD; 
 23fe828:	2300      	movs	r3, #0
 23fe82a:	6043      	str	r3, [r0, #4]
    cfg->i2c_address = TEMPHUM13_DEVICE_ADDRESS;
 23fe82c:	2340      	movs	r3, #64	; 0x40
 23fe82e:	7203      	strb	r3, [r0, #8]
}
 23fe830:	4770      	bx	lr

023fe832 <temphum13_init>:

TEMPHUM13_RETVAL temphum13_init ( temphum13_t *ctx, temphum13_cfg_t *cfg )
{
 23fe832:	b530      	push	{r4, r5, lr}
 23fe834:	460d      	mov	r5, r1
 23fe836:	4604      	mov	r4, r0
 23fe838:	b085      	sub	sp, #20
    i2c_master_config_t i2c_cfg;

    i2c_master_configure_default( &i2c_cfg );
 23fe83a:	a801      	add	r0, sp, #4
 23fe83c:	f7ff ff9a 	bl	23fe774 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>
    i2c_cfg.speed  = cfg->i2c_speed;
 23fe840:	686b      	ldr	r3, [r5, #4]
    i2c_cfg.scl    = cfg->scl;
    i2c_cfg.sda    = cfg->sda;

    ctx->slave_address = cfg->i2c_address;

    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fe842:	4620      	mov	r0, r4
    i2c_cfg.speed  = cfg->i2c_speed;
 23fe844:	9302      	str	r3, [sp, #8]
    i2c_cfg.scl    = cfg->scl;
 23fe846:	782b      	ldrb	r3, [r5, #0]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fe848:	a901      	add	r1, sp, #4
    i2c_cfg.scl    = cfg->scl;
 23fe84a:	f88d 3006 	strb.w	r3, [sp, #6]
    i2c_cfg.sda    = cfg->sda;
 23fe84e:	786b      	ldrb	r3, [r5, #1]
 23fe850:	f88d 3005 	strb.w	r3, [sp, #5]
    ctx->slave_address = cfg->i2c_address;
 23fe854:	7a2b      	ldrb	r3, [r5, #8]
 23fe856:	7323      	strb	r3, [r4, #12]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fe858:	f7ff ff9e 	bl	23fe798 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>
 23fe85c:	3001      	adds	r0, #1
 23fe85e:	d00a      	beq.n	23fe876 <temphum13_init+0x44>
    {
        return TEMPHUM13_INIT_ERROR;
    }

    i2c_master_set_slave_address( &ctx->i2c, ctx->slave_address );
 23fe860:	7b21      	ldrb	r1, [r4, #12]
 23fe862:	4620      	mov	r0, r4
 23fe864:	f7ff ffb6 	bl	23fe7d4 <_Z28i2c_master_set_slave_addressP12i2c_master_th>
    i2c_master_set_speed( &ctx->i2c, cfg->i2c_speed );
 23fe868:	4620      	mov	r0, r4
 23fe86a:	6869      	ldr	r1, [r5, #4]
 23fe86c:	f7ff ffa4 	bl	23fe7b8 <_Z20i2c_master_set_speedP12i2c_master_tm>

    return TEMPHUM13_OK;
 23fe870:	2000      	movs	r0, #0
}
 23fe872:	b005      	add	sp, #20
 23fe874:	bd30      	pop	{r4, r5, pc}
        return TEMPHUM13_INIT_ERROR;
 23fe876:	20ff      	movs	r0, #255	; 0xff
 23fe878:	e7fb      	b.n	23fe872 <temphum13_init+0x40>

023fe87a <temphum13_soft_reset>:

void temphum13_soft_reset ( temphum13_t *ctx )
{
    uint8_t aux_reg_address;

    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fe87a:	23fe      	movs	r3, #254	; 0xfe
{
 23fe87c:	b507      	push	{r0, r1, r2, lr}

    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fe87e:	2201      	movs	r2, #1
 23fe880:	f10d 0107 	add.w	r1, sp, #7
    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fe884:	f88d 3007 	strb.w	r3, [sp, #7]
    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fe888:	f7ff ffaa 	bl	23fe7e0 <_Z16i2c_master_writeP12i2c_master_tPhj>
}
 23fe88c:	b003      	add	sp, #12
 23fe88e:	f85d fb04 	ldr.w	pc, [sp], #4

023fe892 <temphum13_default_cfg>:
{
 23fe892:	b507      	push	{r0, r1, r2, lr}
 23fe894:	9001      	str	r0, [sp, #4]
    Delay_100ms( );
 23fe896:	f7ff ffc1 	bl	23fe81c <_Z11Delay_100msv>
    Delay_100ms( );
 23fe89a:	f7ff ffbf 	bl	23fe81c <_Z11Delay_100msv>
    Delay_100ms( );
 23fe89e:	f7ff ffbd 	bl	23fe81c <_Z11Delay_100msv>
    Delay_100ms( );
 23fe8a2:	f7ff ffbb 	bl	23fe81c <_Z11Delay_100msv>
    Delay_100ms( );
 23fe8a6:	f7ff ffb9 	bl	23fe81c <_Z11Delay_100msv>
    temphum13_soft_reset( ctx );
 23fe8aa:	9801      	ldr	r0, [sp, #4]
 23fe8ac:	f7ff ffe5 	bl	23fe87a <temphum13_soft_reset>
    Delay_100ms( );
 23fe8b0:	f7ff ffb4 	bl	23fe81c <_Z11Delay_100msv>
    Delay_100ms( );
 23fe8b4:	f7ff ffb2 	bl	23fe81c <_Z11Delay_100msv>
    Delay_100ms( );
 23fe8b8:	f7ff ffb0 	bl	23fe81c <_Z11Delay_100msv>
    Delay_100ms( );
 23fe8bc:	f7ff ffae 	bl	23fe81c <_Z11Delay_100msv>
    Delay_100ms( );
 23fe8c0:	f7ff ffac 	bl	23fe81c <_Z11Delay_100msv>
}
 23fe8c4:	b003      	add	sp, #12
 23fe8c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fe8cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fe8cc:	b509      	push	{r0, r3, lr}
 23fe8ce:	4804      	ldr	r0, [pc, #16]	; (23fe8e0 <os_mutex_recursive_create+0x14>)
 23fe8d0:	6800      	ldr	r0, [r0, #0]
 23fe8d2:	4b04      	ldr	r3, [pc, #16]	; (23fe8e4 <os_mutex_recursive_create+0x18>)
 23fe8d4:	4403      	add	r3, r0
 23fe8d6:	681b      	ldr	r3, [r3, #0]
 23fe8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe8da:	9302      	str	r3, [sp, #8]
 23fe8dc:	bd09      	pop	{r0, r3, pc}
 23fe8de:	0000      	.short	0x0000
 23fe8e0:	1007ade0 	.word	0x1007ade0
 23fe8e4:	00000030 	.word	0x00000030

023fe8e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fe8e8:	b509      	push	{r0, r3, lr}
 23fe8ea:	4804      	ldr	r0, [pc, #16]	; (23fe8fc <HAL_RNG_GetRandomNumber+0x14>)
 23fe8ec:	6800      	ldr	r0, [r0, #0]
 23fe8ee:	4b04      	ldr	r3, [pc, #16]	; (23fe900 <HAL_RNG_GetRandomNumber+0x18>)
 23fe8f0:	4403      	add	r3, r0
 23fe8f2:	681b      	ldr	r3, [r3, #0]
 23fe8f4:	685b      	ldr	r3, [r3, #4]
 23fe8f6:	9302      	str	r3, [sp, #8]
 23fe8f8:	bd09      	pop	{r0, r3, pc}
 23fe8fa:	0000      	.short	0x0000
 23fe8fc:	1007ade0 	.word	0x1007ade0
 23fe900:	00000000 	.word	0x00000000

023fe904 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fe904:	b509      	push	{r0, r3, lr}
 23fe906:	4804      	ldr	r0, [pc, #16]	; (23fe918 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fe908:	6800      	ldr	r0, [r0, #0]
 23fe90a:	4b04      	ldr	r3, [pc, #16]	; (23fe91c <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fe90c:	4403      	add	r3, r0
 23fe90e:	681b      	ldr	r3, [r3, #0]
 23fe910:	695b      	ldr	r3, [r3, #20]
 23fe912:	9302      	str	r3, [sp, #8]
 23fe914:	bd09      	pop	{r0, r3, pc}
 23fe916:	0000      	.short	0x0000
 23fe918:	1007ade0 	.word	0x1007ade0
 23fe91c:	00000000 	.word	0x00000000

023fe920 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fe920:	b509      	push	{r0, r3, lr}
 23fe922:	4804      	ldr	r0, [pc, #16]	; (23fe934 <hal_pin_validate_function+0x14>)
 23fe924:	6800      	ldr	r0, [r0, #0]
 23fe926:	4b04      	ldr	r3, [pc, #16]	; (23fe938 <hal_pin_validate_function+0x18>)
 23fe928:	4403      	add	r3, r0
 23fe92a:	681b      	ldr	r3, [r3, #0]
 23fe92c:	685b      	ldr	r3, [r3, #4]
 23fe92e:	9302      	str	r3, [sp, #8]
 23fe930:	bd09      	pop	{r0, r3, pc}
 23fe932:	0000      	.short	0x0000
 23fe934:	1007ade0 	.word	0x1007ade0
 23fe938:	00000014 	.word	0x00000014

023fe93c <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fe93c:	b509      	push	{r0, r3, lr}
 23fe93e:	4804      	ldr	r0, [pc, #16]	; (23fe950 <hal_gpio_mode+0x14>)
 23fe940:	6800      	ldr	r0, [r0, #0]
 23fe942:	4b04      	ldr	r3, [pc, #16]	; (23fe954 <hal_gpio_mode+0x18>)
 23fe944:	4403      	add	r3, r0
 23fe946:	681b      	ldr	r3, [r3, #0]
 23fe948:	689b      	ldr	r3, [r3, #8]
 23fe94a:	9302      	str	r3, [sp, #8]
 23fe94c:	bd09      	pop	{r0, r3, pc}
 23fe94e:	0000      	.short	0x0000
 23fe950:	1007ade0 	.word	0x1007ade0
 23fe954:	00000014 	.word	0x00000014

023fe958 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
 23fe958:	b509      	push	{r0, r3, lr}
 23fe95a:	4804      	ldr	r0, [pc, #16]	; (23fe96c <hal_adc_read+0x14>)
 23fe95c:	6800      	ldr	r0, [r0, #0]
 23fe95e:	4b04      	ldr	r3, [pc, #16]	; (23fe970 <hal_adc_read+0x18>)
 23fe960:	4403      	add	r3, r0
 23fe962:	681b      	ldr	r3, [r3, #0]
 23fe964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe966:	9302      	str	r3, [sp, #8]
 23fe968:	bd09      	pop	{r0, r3, pc}
 23fe96a:	0000      	.short	0x0000
 23fe96c:	1007ade0 	.word	0x1007ade0
 23fe970:	00000014 	.word	0x00000014

023fe974 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fe974:	b509      	push	{r0, r3, lr}
 23fe976:	4804      	ldr	r0, [pc, #16]	; (23fe988 <hal_i2c_set_speed+0x14>)
 23fe978:	6800      	ldr	r0, [r0, #0]
 23fe97a:	4b04      	ldr	r3, [pc, #16]	; (23fe98c <hal_i2c_set_speed+0x18>)
 23fe97c:	4403      	add	r3, r0
 23fe97e:	681b      	ldr	r3, [r3, #0]
 23fe980:	681b      	ldr	r3, [r3, #0]
 23fe982:	9302      	str	r3, [sp, #8]
 23fe984:	bd09      	pop	{r0, r3, pc}
 23fe986:	0000      	.short	0x0000
 23fe988:	1007ade0 	.word	0x1007ade0
 23fe98c:	00000010 	.word	0x00000010

023fe990 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fe990:	b509      	push	{r0, r3, lr}
 23fe992:	4804      	ldr	r0, [pc, #16]	; (23fe9a4 <hal_i2c_begin+0x14>)
 23fe994:	6800      	ldr	r0, [r0, #0]
 23fe996:	4b04      	ldr	r3, [pc, #16]	; (23fe9a8 <hal_i2c_begin+0x18>)
 23fe998:	4403      	add	r3, r0
 23fe99a:	681b      	ldr	r3, [r3, #0]
 23fe99c:	68db      	ldr	r3, [r3, #12]
 23fe99e:	9302      	str	r3, [sp, #8]
 23fe9a0:	bd09      	pop	{r0, r3, pc}
 23fe9a2:	0000      	.short	0x0000
 23fe9a4:	1007ade0 	.word	0x1007ade0
 23fe9a8:	00000010 	.word	0x00000010

023fe9ac <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fe9ac:	b509      	push	{r0, r3, lr}
 23fe9ae:	4804      	ldr	r0, [pc, #16]	; (23fe9c0 <hal_i2c_begin_transmission+0x14>)
 23fe9b0:	6800      	ldr	r0, [r0, #0]
 23fe9b2:	4b04      	ldr	r3, [pc, #16]	; (23fe9c4 <hal_i2c_begin_transmission+0x18>)
 23fe9b4:	4403      	add	r3, r0
 23fe9b6:	681b      	ldr	r3, [r3, #0]
 23fe9b8:	699b      	ldr	r3, [r3, #24]
 23fe9ba:	9302      	str	r3, [sp, #8]
 23fe9bc:	bd09      	pop	{r0, r3, pc}
 23fe9be:	0000      	.short	0x0000
 23fe9c0:	1007ade0 	.word	0x1007ade0
 23fe9c4:	00000010 	.word	0x00000010

023fe9c8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fe9c8:	b509      	push	{r0, r3, lr}
 23fe9ca:	4804      	ldr	r0, [pc, #16]	; (23fe9dc <hal_i2c_end_transmission+0x14>)
 23fe9cc:	6800      	ldr	r0, [r0, #0]
 23fe9ce:	4b04      	ldr	r3, [pc, #16]	; (23fe9e0 <hal_i2c_end_transmission+0x18>)
 23fe9d0:	4403      	add	r3, r0
 23fe9d2:	681b      	ldr	r3, [r3, #0]
 23fe9d4:	69db      	ldr	r3, [r3, #28]
 23fe9d6:	9302      	str	r3, [sp, #8]
 23fe9d8:	bd09      	pop	{r0, r3, pc}
 23fe9da:	0000      	.short	0x0000
 23fe9dc:	1007ade0 	.word	0x1007ade0
 23fe9e0:	00000010 	.word	0x00000010

023fe9e4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fe9e4:	b509      	push	{r0, r3, lr}
 23fe9e6:	4804      	ldr	r0, [pc, #16]	; (23fe9f8 <hal_i2c_write+0x14>)
 23fe9e8:	6800      	ldr	r0, [r0, #0]
 23fe9ea:	4b04      	ldr	r3, [pc, #16]	; (23fe9fc <hal_i2c_write+0x18>)
 23fe9ec:	4403      	add	r3, r0
 23fe9ee:	681b      	ldr	r3, [r3, #0]
 23fe9f0:	6a1b      	ldr	r3, [r3, #32]
 23fe9f2:	9302      	str	r3, [sp, #8]
 23fe9f4:	bd09      	pop	{r0, r3, pc}
 23fe9f6:	0000      	.short	0x0000
 23fe9f8:	1007ade0 	.word	0x1007ade0
 23fe9fc:	00000010 	.word	0x00000010

023fea00 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fea00:	b509      	push	{r0, r3, lr}
 23fea02:	4804      	ldr	r0, [pc, #16]	; (23fea14 <hal_i2c_available+0x14>)
 23fea04:	6800      	ldr	r0, [r0, #0]
 23fea06:	4b04      	ldr	r3, [pc, #16]	; (23fea18 <hal_i2c_available+0x18>)
 23fea08:	4403      	add	r3, r0
 23fea0a:	681b      	ldr	r3, [r3, #0]
 23fea0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fea0e:	9302      	str	r3, [sp, #8]
 23fea10:	bd09      	pop	{r0, r3, pc}
 23fea12:	0000      	.short	0x0000
 23fea14:	1007ade0 	.word	0x1007ade0
 23fea18:	00000010 	.word	0x00000010

023fea1c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fea1c:	b509      	push	{r0, r3, lr}
 23fea1e:	4804      	ldr	r0, [pc, #16]	; (23fea30 <hal_i2c_read+0x14>)
 23fea20:	6800      	ldr	r0, [r0, #0]
 23fea22:	4b04      	ldr	r3, [pc, #16]	; (23fea34 <hal_i2c_read+0x18>)
 23fea24:	4403      	add	r3, r0
 23fea26:	681b      	ldr	r3, [r3, #0]
 23fea28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fea2a:	9302      	str	r3, [sp, #8]
 23fea2c:	bd09      	pop	{r0, r3, pc}
 23fea2e:	0000      	.short	0x0000
 23fea30:	1007ade0 	.word	0x1007ade0
 23fea34:	00000010 	.word	0x00000010

023fea38 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fea38:	b509      	push	{r0, r3, lr}
 23fea3a:	4804      	ldr	r0, [pc, #16]	; (23fea4c <hal_i2c_peek+0x14>)
 23fea3c:	6800      	ldr	r0, [r0, #0]
 23fea3e:	4b04      	ldr	r3, [pc, #16]	; (23fea50 <hal_i2c_peek+0x18>)
 23fea40:	4403      	add	r3, r0
 23fea42:	681b      	ldr	r3, [r3, #0]
 23fea44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fea46:	9302      	str	r3, [sp, #8]
 23fea48:	bd09      	pop	{r0, r3, pc}
 23fea4a:	0000      	.short	0x0000
 23fea4c:	1007ade0 	.word	0x1007ade0
 23fea50:	00000010 	.word	0x00000010

023fea54 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fea54:	b509      	push	{r0, r3, lr}
 23fea56:	4804      	ldr	r0, [pc, #16]	; (23fea68 <hal_i2c_flush+0x14>)
 23fea58:	6800      	ldr	r0, [r0, #0]
 23fea5a:	4b04      	ldr	r3, [pc, #16]	; (23fea6c <hal_i2c_flush+0x18>)
 23fea5c:	4403      	add	r3, r0
 23fea5e:	681b      	ldr	r3, [r3, #0]
 23fea60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fea62:	9302      	str	r3, [sp, #8]
 23fea64:	bd09      	pop	{r0, r3, pc}
 23fea66:	0000      	.short	0x0000
 23fea68:	1007ade0 	.word	0x1007ade0
 23fea6c:	00000010 	.word	0x00000010

023fea70 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fea70:	b509      	push	{r0, r3, lr}
 23fea72:	4804      	ldr	r0, [pc, #16]	; (23fea84 <hal_i2c_is_enabled+0x14>)
 23fea74:	6800      	ldr	r0, [r0, #0]
 23fea76:	4b04      	ldr	r3, [pc, #16]	; (23fea88 <hal_i2c_is_enabled+0x18>)
 23fea78:	4403      	add	r3, r0
 23fea7a:	681b      	ldr	r3, [r3, #0]
 23fea7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fea7e:	9302      	str	r3, [sp, #8]
 23fea80:	bd09      	pop	{r0, r3, pc}
 23fea82:	0000      	.short	0x0000
 23fea84:	1007ade0 	.word	0x1007ade0
 23fea88:	00000010 	.word	0x00000010

023fea8c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fea8c:	b509      	push	{r0, r3, lr}
 23fea8e:	4804      	ldr	r0, [pc, #16]	; (23feaa0 <hal_i2c_init+0x14>)
 23fea90:	6800      	ldr	r0, [r0, #0]
 23fea92:	4b04      	ldr	r3, [pc, #16]	; (23feaa4 <hal_i2c_init+0x18>)
 23fea94:	4403      	add	r3, r0
 23fea96:	681b      	ldr	r3, [r3, #0]
 23fea98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fea9a:	9302      	str	r3, [sp, #8]
 23fea9c:	bd09      	pop	{r0, r3, pc}
 23fea9e:	0000      	.short	0x0000
 23feaa0:	1007ade0 	.word	0x1007ade0
 23feaa4:	00000010 	.word	0x00000010

023feaa8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23feaa8:	b509      	push	{r0, r3, lr}
 23feaaa:	4804      	ldr	r0, [pc, #16]	; (23feabc <inet_inet_ntop+0x14>)
 23feaac:	6800      	ldr	r0, [r0, #0]
 23feaae:	4b04      	ldr	r3, [pc, #16]	; (23feac0 <inet_inet_ntop+0x18>)
 23feab0:	4403      	add	r3, r0
 23feab2:	681b      	ldr	r3, [r3, #0]
 23feab4:	695b      	ldr	r3, [r3, #20]
 23feab6:	9302      	str	r3, [sp, #8]
 23feab8:	bd09      	pop	{r0, r3, pc}
 23feaba:	0000      	.short	0x0000
 23feabc:	1007ade0 	.word	0x1007ade0
 23feac0:	0000004c 	.word	0x0000004c

023feac4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23feac4:	b509      	push	{r0, r3, lr}
 23feac6:	4804      	ldr	r0, [pc, #16]	; (23fead8 <netdb_freeaddrinfo+0x14>)
 23feac8:	6800      	ldr	r0, [r0, #0]
 23feaca:	4b04      	ldr	r3, [pc, #16]	; (23feadc <netdb_freeaddrinfo+0x18>)
 23feacc:	4403      	add	r3, r0
 23feace:	681b      	ldr	r3, [r3, #0]
 23fead0:	689b      	ldr	r3, [r3, #8]
 23fead2:	9302      	str	r3, [sp, #8]
 23fead4:	bd09      	pop	{r0, r3, pc}
 23fead6:	0000      	.short	0x0000
 23fead8:	1007ade0 	.word	0x1007ade0
 23feadc:	00000050 	.word	0x00000050

023feae0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23feae0:	b509      	push	{r0, r3, lr}
 23feae2:	4804      	ldr	r0, [pc, #16]	; (23feaf4 <netdb_getaddrinfo+0x14>)
 23feae4:	6800      	ldr	r0, [r0, #0]
 23feae6:	4b04      	ldr	r3, [pc, #16]	; (23feaf8 <netdb_getaddrinfo+0x18>)
 23feae8:	4403      	add	r3, r0
 23feaea:	681b      	ldr	r3, [r3, #0]
 23feaec:	68db      	ldr	r3, [r3, #12]
 23feaee:	9302      	str	r3, [sp, #8]
 23feaf0:	bd09      	pop	{r0, r3, pc}
 23feaf2:	0000      	.short	0x0000
 23feaf4:	1007ade0 	.word	0x1007ade0
 23feaf8:	00000050 	.word	0x00000050

023feafc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23feafc:	b509      	push	{r0, r3, lr}
 23feafe:	4804      	ldr	r0, [pc, #16]	; (23feb10 <hal_spi_init+0x14>)
 23feb00:	6800      	ldr	r0, [r0, #0]
 23feb02:	4b04      	ldr	r3, [pc, #16]	; (23feb14 <hal_spi_init+0x18>)
 23feb04:	4403      	add	r3, r0
 23feb06:	681b      	ldr	r3, [r3, #0]
 23feb08:	69db      	ldr	r3, [r3, #28]
 23feb0a:	9302      	str	r3, [sp, #8]
 23feb0c:	bd09      	pop	{r0, r3, pc}
 23feb0e:	0000      	.short	0x0000
 23feb10:	1007ade0 	.word	0x1007ade0
 23feb14:	00000018 	.word	0x00000018

023feb18 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23feb18:	b509      	push	{r0, r3, lr}
 23feb1a:	4804      	ldr	r0, [pc, #16]	; (23feb2c <hal_spi_is_enabled+0x14>)
 23feb1c:	6800      	ldr	r0, [r0, #0]
 23feb1e:	4b04      	ldr	r3, [pc, #16]	; (23feb30 <hal_spi_is_enabled+0x18>)
 23feb20:	4403      	add	r3, r0
 23feb22:	681b      	ldr	r3, [r3, #0]
 23feb24:	6a1b      	ldr	r3, [r3, #32]
 23feb26:	9302      	str	r3, [sp, #8]
 23feb28:	bd09      	pop	{r0, r3, pc}
 23feb2a:	0000      	.short	0x0000
 23feb2c:	1007ade0 	.word	0x1007ade0
 23feb30:	00000018 	.word	0x00000018

023feb34 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23feb34:	b509      	push	{r0, r3, lr}
 23feb36:	4804      	ldr	r0, [pc, #16]	; (23feb48 <hal_usart_write+0x14>)
 23feb38:	6800      	ldr	r0, [r0, #0]
 23feb3a:	4b04      	ldr	r3, [pc, #16]	; (23feb4c <hal_usart_write+0x18>)
 23feb3c:	4403      	add	r3, r0
 23feb3e:	681b      	ldr	r3, [r3, #0]
 23feb40:	68db      	ldr	r3, [r3, #12]
 23feb42:	9302      	str	r3, [sp, #8]
 23feb44:	bd09      	pop	{r0, r3, pc}
 23feb46:	0000      	.short	0x0000
 23feb48:	1007ade0 	.word	0x1007ade0
 23feb4c:	00000024 	.word	0x00000024

023feb50 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23feb50:	b509      	push	{r0, r3, lr}
 23feb52:	4804      	ldr	r0, [pc, #16]	; (23feb64 <hal_usart_available+0x14>)
 23feb54:	6800      	ldr	r0, [r0, #0]
 23feb56:	4b04      	ldr	r3, [pc, #16]	; (23feb68 <hal_usart_available+0x18>)
 23feb58:	4403      	add	r3, r0
 23feb5a:	681b      	ldr	r3, [r3, #0]
 23feb5c:	691b      	ldr	r3, [r3, #16]
 23feb5e:	9302      	str	r3, [sp, #8]
 23feb60:	bd09      	pop	{r0, r3, pc}
 23feb62:	0000      	.short	0x0000
 23feb64:	1007ade0 	.word	0x1007ade0
 23feb68:	00000024 	.word	0x00000024

023feb6c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23feb6c:	b509      	push	{r0, r3, lr}
 23feb6e:	4804      	ldr	r0, [pc, #16]	; (23feb80 <hal_usart_read+0x14>)
 23feb70:	6800      	ldr	r0, [r0, #0]
 23feb72:	4b04      	ldr	r3, [pc, #16]	; (23feb84 <hal_usart_read+0x18>)
 23feb74:	4403      	add	r3, r0
 23feb76:	681b      	ldr	r3, [r3, #0]
 23feb78:	695b      	ldr	r3, [r3, #20]
 23feb7a:	9302      	str	r3, [sp, #8]
 23feb7c:	bd09      	pop	{r0, r3, pc}
 23feb7e:	0000      	.short	0x0000
 23feb80:	1007ade0 	.word	0x1007ade0
 23feb84:	00000024 	.word	0x00000024

023feb88 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23feb88:	b509      	push	{r0, r3, lr}
 23feb8a:	4804      	ldr	r0, [pc, #16]	; (23feb9c <hal_usart_peek+0x14>)
 23feb8c:	6800      	ldr	r0, [r0, #0]
 23feb8e:	4b04      	ldr	r3, [pc, #16]	; (23feba0 <hal_usart_peek+0x18>)
 23feb90:	4403      	add	r3, r0
 23feb92:	681b      	ldr	r3, [r3, #0]
 23feb94:	699b      	ldr	r3, [r3, #24]
 23feb96:	9302      	str	r3, [sp, #8]
 23feb98:	bd09      	pop	{r0, r3, pc}
 23feb9a:	0000      	.short	0x0000
 23feb9c:	1007ade0 	.word	0x1007ade0
 23feba0:	00000024 	.word	0x00000024

023feba4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23feba4:	b509      	push	{r0, r3, lr}
 23feba6:	4804      	ldr	r0, [pc, #16]	; (23febb8 <hal_usart_flush+0x14>)
 23feba8:	6800      	ldr	r0, [r0, #0]
 23febaa:	4b04      	ldr	r3, [pc, #16]	; (23febbc <hal_usart_flush+0x18>)
 23febac:	4403      	add	r3, r0
 23febae:	681b      	ldr	r3, [r3, #0]
 23febb0:	69db      	ldr	r3, [r3, #28]
 23febb2:	9302      	str	r3, [sp, #8]
 23febb4:	bd09      	pop	{r0, r3, pc}
 23febb6:	0000      	.short	0x0000
 23febb8:	1007ade0 	.word	0x1007ade0
 23febbc:	00000024 	.word	0x00000024

023febc0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23febc0:	b509      	push	{r0, r3, lr}
 23febc2:	4804      	ldr	r0, [pc, #16]	; (23febd4 <hal_usart_is_enabled+0x14>)
 23febc4:	6800      	ldr	r0, [r0, #0]
 23febc6:	4b04      	ldr	r3, [pc, #16]	; (23febd8 <hal_usart_is_enabled+0x18>)
 23febc8:	4403      	add	r3, r0
 23febca:	681b      	ldr	r3, [r3, #0]
 23febcc:	6a1b      	ldr	r3, [r3, #32]
 23febce:	9302      	str	r3, [sp, #8]
 23febd0:	bd09      	pop	{r0, r3, pc}
 23febd2:	0000      	.short	0x0000
 23febd4:	1007ade0 	.word	0x1007ade0
 23febd8:	00000024 	.word	0x00000024

023febdc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23febdc:	b509      	push	{r0, r3, lr}
 23febde:	4804      	ldr	r0, [pc, #16]	; (23febf0 <hal_usart_available_data_for_write+0x14>)
 23febe0:	6800      	ldr	r0, [r0, #0]
 23febe2:	4b04      	ldr	r3, [pc, #16]	; (23febf4 <hal_usart_available_data_for_write+0x18>)
 23febe4:	4403      	add	r3, r0
 23febe6:	681b      	ldr	r3, [r3, #0]
 23febe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23febea:	9302      	str	r3, [sp, #8]
 23febec:	bd09      	pop	{r0, r3, pc}
 23febee:	0000      	.short	0x0000
 23febf0:	1007ade0 	.word	0x1007ade0
 23febf4:	00000024 	.word	0x00000024

023febf8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23febf8:	b509      	push	{r0, r3, lr}
 23febfa:	4804      	ldr	r0, [pc, #16]	; (23fec0c <hal_usart_init_ex+0x14>)
 23febfc:	6800      	ldr	r0, [r0, #0]
 23febfe:	4b04      	ldr	r3, [pc, #16]	; (23fec10 <hal_usart_init_ex+0x18>)
 23fec00:	4403      	add	r3, r0
 23fec02:	681b      	ldr	r3, [r3, #0]
 23fec04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fec06:	9302      	str	r3, [sp, #8]
 23fec08:	bd09      	pop	{r0, r3, pc}
 23fec0a:	0000      	.short	0x0000
 23fec0c:	1007ade0 	.word	0x1007ade0
 23fec10:	00000024 	.word	0x00000024

023fec14 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fec14:	b509      	push	{r0, r3, lr}
 23fec16:	4804      	ldr	r0, [pc, #16]	; (23fec28 <HAL_USB_USART_Init+0x14>)
 23fec18:	6800      	ldr	r0, [r0, #0]
 23fec1a:	4b04      	ldr	r3, [pc, #16]	; (23fec2c <HAL_USB_USART_Init+0x18>)
 23fec1c:	4403      	add	r3, r0
 23fec1e:	681b      	ldr	r3, [r3, #0]
 23fec20:	681b      	ldr	r3, [r3, #0]
 23fec22:	9302      	str	r3, [sp, #8]
 23fec24:	bd09      	pop	{r0, r3, pc}
 23fec26:	0000      	.short	0x0000
 23fec28:	1007ade0 	.word	0x1007ade0
 23fec2c:	00000034 	.word	0x00000034

023fec30 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fec30:	b509      	push	{r0, r3, lr}
 23fec32:	4804      	ldr	r0, [pc, #16]	; (23fec44 <HAL_USB_USART_Begin+0x14>)
 23fec34:	6800      	ldr	r0, [r0, #0]
 23fec36:	4b04      	ldr	r3, [pc, #16]	; (23fec48 <HAL_USB_USART_Begin+0x18>)
 23fec38:	4403      	add	r3, r0
 23fec3a:	681b      	ldr	r3, [r3, #0]
 23fec3c:	685b      	ldr	r3, [r3, #4]
 23fec3e:	9302      	str	r3, [sp, #8]
 23fec40:	bd09      	pop	{r0, r3, pc}
 23fec42:	0000      	.short	0x0000
 23fec44:	1007ade0 	.word	0x1007ade0
 23fec48:	00000034 	.word	0x00000034

023fec4c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fec4c:	b509      	push	{r0, r3, lr}
 23fec4e:	4804      	ldr	r0, [pc, #16]	; (23fec60 <HAL_USB_USART_Available_Data+0x14>)
 23fec50:	6800      	ldr	r0, [r0, #0]
 23fec52:	4b04      	ldr	r3, [pc, #16]	; (23fec64 <HAL_USB_USART_Available_Data+0x18>)
 23fec54:	4403      	add	r3, r0
 23fec56:	681b      	ldr	r3, [r3, #0]
 23fec58:	691b      	ldr	r3, [r3, #16]
 23fec5a:	9302      	str	r3, [sp, #8]
 23fec5c:	bd09      	pop	{r0, r3, pc}
 23fec5e:	0000      	.short	0x0000
 23fec60:	1007ade0 	.word	0x1007ade0
 23fec64:	00000034 	.word	0x00000034

023fec68 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fec68:	b509      	push	{r0, r3, lr}
 23fec6a:	4804      	ldr	r0, [pc, #16]	; (23fec7c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fec6c:	6800      	ldr	r0, [r0, #0]
 23fec6e:	4b04      	ldr	r3, [pc, #16]	; (23fec80 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fec70:	4403      	add	r3, r0
 23fec72:	681b      	ldr	r3, [r3, #0]
 23fec74:	695b      	ldr	r3, [r3, #20]
 23fec76:	9302      	str	r3, [sp, #8]
 23fec78:	bd09      	pop	{r0, r3, pc}
 23fec7a:	0000      	.short	0x0000
 23fec7c:	1007ade0 	.word	0x1007ade0
 23fec80:	00000034 	.word	0x00000034

023fec84 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fec84:	b509      	push	{r0, r3, lr}
 23fec86:	4804      	ldr	r0, [pc, #16]	; (23fec98 <HAL_USB_USART_Receive_Data+0x14>)
 23fec88:	6800      	ldr	r0, [r0, #0]
 23fec8a:	4b04      	ldr	r3, [pc, #16]	; (23fec9c <HAL_USB_USART_Receive_Data+0x18>)
 23fec8c:	4403      	add	r3, r0
 23fec8e:	681b      	ldr	r3, [r3, #0]
 23fec90:	699b      	ldr	r3, [r3, #24]
 23fec92:	9302      	str	r3, [sp, #8]
 23fec94:	bd09      	pop	{r0, r3, pc}
 23fec96:	0000      	.short	0x0000
 23fec98:	1007ade0 	.word	0x1007ade0
 23fec9c:	00000034 	.word	0x00000034

023feca0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23feca0:	b509      	push	{r0, r3, lr}
 23feca2:	4804      	ldr	r0, [pc, #16]	; (23fecb4 <HAL_USB_USART_Send_Data+0x14>)
 23feca4:	6800      	ldr	r0, [r0, #0]
 23feca6:	4b04      	ldr	r3, [pc, #16]	; (23fecb8 <HAL_USB_USART_Send_Data+0x18>)
 23feca8:	4403      	add	r3, r0
 23fecaa:	681b      	ldr	r3, [r3, #0]
 23fecac:	69db      	ldr	r3, [r3, #28]
 23fecae:	9302      	str	r3, [sp, #8]
 23fecb0:	bd09      	pop	{r0, r3, pc}
 23fecb2:	0000      	.short	0x0000
 23fecb4:	1007ade0 	.word	0x1007ade0
 23fecb8:	00000034 	.word	0x00000034

023fecbc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fecbc:	b509      	push	{r0, r3, lr}
 23fecbe:	4804      	ldr	r0, [pc, #16]	; (23fecd0 <HAL_USB_USART_Flush_Data+0x14>)
 23fecc0:	6800      	ldr	r0, [r0, #0]
 23fecc2:	4b04      	ldr	r3, [pc, #16]	; (23fecd4 <HAL_USB_USART_Flush_Data+0x18>)
 23fecc4:	4403      	add	r3, r0
 23fecc6:	681b      	ldr	r3, [r3, #0]
 23fecc8:	6a1b      	ldr	r3, [r3, #32]
 23fecca:	9302      	str	r3, [sp, #8]
 23feccc:	bd09      	pop	{r0, r3, pc}
 23fecce:	0000      	.short	0x0000
 23fecd0:	1007ade0 	.word	0x1007ade0
 23fecd4:	00000034 	.word	0x00000034

023fecd8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fecd8:	b509      	push	{r0, r3, lr}
 23fecda:	4804      	ldr	r0, [pc, #16]	; (23fecec <set_system_mode+0x14>)
 23fecdc:	6800      	ldr	r0, [r0, #0]
 23fecde:	4b04      	ldr	r3, [pc, #16]	; (23fecf0 <set_system_mode+0x18>)
 23fece0:	4403      	add	r3, r0
 23fece2:	681b      	ldr	r3, [r3, #0]
 23fece4:	685b      	ldr	r3, [r3, #4]
 23fece6:	9302      	str	r3, [sp, #8]
 23fece8:	bd09      	pop	{r0, r3, pc}
 23fecea:	0000      	.short	0x0000
 23fecec:	1007ade0 	.word	0x1007ade0
 23fecf0:	00000008 	.word	0x00000008

023fecf4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fecf4:	b509      	push	{r0, r3, lr}
 23fecf6:	4804      	ldr	r0, [pc, #16]	; (23fed08 <system_delay_ms+0x14>)
 23fecf8:	6800      	ldr	r0, [r0, #0]
 23fecfa:	4b04      	ldr	r3, [pc, #16]	; (23fed0c <system_delay_ms+0x18>)
 23fecfc:	4403      	add	r3, r0
 23fecfe:	681b      	ldr	r3, [r3, #0]
 23fed00:	695b      	ldr	r3, [r3, #20]
 23fed02:	9302      	str	r3, [sp, #8]
 23fed04:	bd09      	pop	{r0, r3, pc}
 23fed06:	0000      	.short	0x0000
 23fed08:	1007ade0 	.word	0x1007ade0
 23fed0c:	00000008 	.word	0x00000008

023fed10 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fed10:	b509      	push	{r0, r3, lr}
 23fed12:	4804      	ldr	r0, [pc, #16]	; (23fed24 <system_thread_set_state+0x14>)
 23fed14:	6800      	ldr	r0, [r0, #0]
 23fed16:	4b04      	ldr	r3, [pc, #16]	; (23fed28 <system_thread_set_state+0x18>)
 23fed18:	4403      	add	r3, r0
 23fed1a:	681b      	ldr	r3, [r3, #0]
 23fed1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fed1e:	9302      	str	r3, [sp, #8]
 23fed20:	bd09      	pop	{r0, r3, pc}
 23fed22:	0000      	.short	0x0000
 23fed24:	1007ade0 	.word	0x1007ade0
 23fed28:	00000008 	.word	0x00000008

023fed2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fed2c:	b509      	push	{r0, r3, lr}
 23fed2e:	4804      	ldr	r0, [pc, #16]	; (23fed40 <system_ctrl_set_app_request_handler+0x14>)
 23fed30:	6800      	ldr	r0, [r0, #0]
 23fed32:	4b04      	ldr	r3, [pc, #16]	; (23fed44 <system_ctrl_set_app_request_handler+0x18>)
 23fed34:	4403      	add	r3, r0
 23fed36:	681b      	ldr	r3, [r3, #0]
 23fed38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fed3c:	9302      	str	r3, [sp, #8]
 23fed3e:	bd09      	pop	{r0, r3, pc}
 23fed40:	1007ade0 	.word	0x1007ade0
 23fed44:	00000008 	.word	0x00000008

023fed48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fed48:	b509      	push	{r0, r3, lr}
 23fed4a:	4804      	ldr	r0, [pc, #16]	; (23fed5c <system_ctrl_set_result+0x14>)
 23fed4c:	6800      	ldr	r0, [r0, #0]
 23fed4e:	4b04      	ldr	r3, [pc, #16]	; (23fed60 <system_ctrl_set_result+0x18>)
 23fed50:	4403      	add	r3, r0
 23fed52:	681b      	ldr	r3, [r3, #0]
 23fed54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fed58:	9302      	str	r3, [sp, #8]
 23fed5a:	bd09      	pop	{r0, r3, pc}
 23fed5c:	1007ade0 	.word	0x1007ade0
 23fed60:	00000008 	.word	0x00000008

023fed64 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fed64:	b509      	push	{r0, r3, lr}
 23fed66:	4804      	ldr	r0, [pc, #16]	; (23fed78 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fed68:	6800      	ldr	r0, [r0, #0]
 23fed6a:	4b04      	ldr	r3, [pc, #16]	; (23fed7c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fed6c:	4403      	add	r3, r0
 23fed6e:	681b      	ldr	r3, [r3, #0]
 23fed70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fed72:	9302      	str	r3, [sp, #8]
 23fed74:	bd09      	pop	{r0, r3, pc}
 23fed76:	0000      	.short	0x0000
 23fed78:	1007ade0 	.word	0x1007ade0
 23fed7c:	0000002c 	.word	0x0000002c

023fed80 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23fed80:	b509      	push	{r0, r3, lr}
 23fed82:	4804      	ldr	r0, [pc, #16]	; (23fed94 <spark_cloud_disconnect+0x14>)
 23fed84:	6800      	ldr	r0, [r0, #0]
 23fed86:	4b04      	ldr	r3, [pc, #16]	; (23fed98 <spark_cloud_disconnect+0x18>)
 23fed88:	4403      	add	r3, r0
 23fed8a:	681b      	ldr	r3, [r3, #0]
 23fed8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fed8e:	9302      	str	r3, [sp, #8]
 23fed90:	bd09      	pop	{r0, r3, pc}
 23fed92:	0000      	.short	0x0000
 23fed94:	1007ade0 	.word	0x1007ade0
 23fed98:	0000002c 	.word	0x0000002c

023fed9c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fed9c:	b509      	push	{r0, r3, lr}
 23fed9e:	4804      	ldr	r0, [pc, #16]	; (23fedb0 <network_connect+0x14>)
 23feda0:	6800      	ldr	r0, [r0, #0]
 23feda2:	4b04      	ldr	r3, [pc, #16]	; (23fedb4 <network_connect+0x18>)
 23feda4:	4403      	add	r3, r0
 23feda6:	681b      	ldr	r3, [r3, #0]
 23feda8:	685b      	ldr	r3, [r3, #4]
 23fedaa:	9302      	str	r3, [sp, #8]
 23fedac:	bd09      	pop	{r0, r3, pc}
 23fedae:	0000      	.short	0x0000
 23fedb0:	1007ade0 	.word	0x1007ade0
 23fedb4:	00000028 	.word	0x00000028

023fedb8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fedb8:	b509      	push	{r0, r3, lr}
 23fedba:	4804      	ldr	r0, [pc, #16]	; (23fedcc <network_connecting+0x14>)
 23fedbc:	6800      	ldr	r0, [r0, #0]
 23fedbe:	4b04      	ldr	r3, [pc, #16]	; (23fedd0 <network_connecting+0x18>)
 23fedc0:	4403      	add	r3, r0
 23fedc2:	681b      	ldr	r3, [r3, #0]
 23fedc4:	689b      	ldr	r3, [r3, #8]
 23fedc6:	9302      	str	r3, [sp, #8]
 23fedc8:	bd09      	pop	{r0, r3, pc}
 23fedca:	0000      	.short	0x0000
 23fedcc:	1007ade0 	.word	0x1007ade0
 23fedd0:	00000028 	.word	0x00000028

023fedd4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fedd4:	b509      	push	{r0, r3, lr}
 23fedd6:	4804      	ldr	r0, [pc, #16]	; (23fede8 <network_disconnect+0x14>)
 23fedd8:	6800      	ldr	r0, [r0, #0]
 23fedda:	4b04      	ldr	r3, [pc, #16]	; (23fedec <network_disconnect+0x18>)
 23feddc:	4403      	add	r3, r0
 23fedde:	681b      	ldr	r3, [r3, #0]
 23fede0:	68db      	ldr	r3, [r3, #12]
 23fede2:	9302      	str	r3, [sp, #8]
 23fede4:	bd09      	pop	{r0, r3, pc}
 23fede6:	0000      	.short	0x0000
 23fede8:	1007ade0 	.word	0x1007ade0
 23fedec:	00000028 	.word	0x00000028

023fedf0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fedf0:	b509      	push	{r0, r3, lr}
 23fedf2:	4804      	ldr	r0, [pc, #16]	; (23fee04 <network_ready+0x14>)
 23fedf4:	6800      	ldr	r0, [r0, #0]
 23fedf6:	4b04      	ldr	r3, [pc, #16]	; (23fee08 <network_ready+0x18>)
 23fedf8:	4403      	add	r3, r0
 23fedfa:	681b      	ldr	r3, [r3, #0]
 23fedfc:	691b      	ldr	r3, [r3, #16]
 23fedfe:	9302      	str	r3, [sp, #8]
 23fee00:	bd09      	pop	{r0, r3, pc}
 23fee02:	0000      	.short	0x0000
 23fee04:	1007ade0 	.word	0x1007ade0
 23fee08:	00000028 	.word	0x00000028

023fee0c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fee0c:	b509      	push	{r0, r3, lr}
 23fee0e:	4804      	ldr	r0, [pc, #16]	; (23fee20 <network_on+0x14>)
 23fee10:	6800      	ldr	r0, [r0, #0]
 23fee12:	4b04      	ldr	r3, [pc, #16]	; (23fee24 <network_on+0x18>)
 23fee14:	4403      	add	r3, r0
 23fee16:	681b      	ldr	r3, [r3, #0]
 23fee18:	695b      	ldr	r3, [r3, #20]
 23fee1a:	9302      	str	r3, [sp, #8]
 23fee1c:	bd09      	pop	{r0, r3, pc}
 23fee1e:	0000      	.short	0x0000
 23fee20:	1007ade0 	.word	0x1007ade0
 23fee24:	00000028 	.word	0x00000028

023fee28 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fee28:	b509      	push	{r0, r3, lr}
 23fee2a:	4804      	ldr	r0, [pc, #16]	; (23fee3c <network_off+0x14>)
 23fee2c:	6800      	ldr	r0, [r0, #0]
 23fee2e:	4b04      	ldr	r3, [pc, #16]	; (23fee40 <network_off+0x18>)
 23fee30:	4403      	add	r3, r0
 23fee32:	681b      	ldr	r3, [r3, #0]
 23fee34:	699b      	ldr	r3, [r3, #24]
 23fee36:	9302      	str	r3, [sp, #8]
 23fee38:	bd09      	pop	{r0, r3, pc}
 23fee3a:	0000      	.short	0x0000
 23fee3c:	1007ade0 	.word	0x1007ade0
 23fee40:	00000028 	.word	0x00000028

023fee44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fee44:	b509      	push	{r0, r3, lr}
 23fee46:	4804      	ldr	r0, [pc, #16]	; (23fee58 <network_listen+0x14>)
 23fee48:	6800      	ldr	r0, [r0, #0]
 23fee4a:	4b04      	ldr	r3, [pc, #16]	; (23fee5c <network_listen+0x18>)
 23fee4c:	4403      	add	r3, r0
 23fee4e:	681b      	ldr	r3, [r3, #0]
 23fee50:	69db      	ldr	r3, [r3, #28]
 23fee52:	9302      	str	r3, [sp, #8]
 23fee54:	bd09      	pop	{r0, r3, pc}
 23fee56:	0000      	.short	0x0000
 23fee58:	1007ade0 	.word	0x1007ade0
 23fee5c:	00000028 	.word	0x00000028

023fee60 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fee60:	b509      	push	{r0, r3, lr}
 23fee62:	4804      	ldr	r0, [pc, #16]	; (23fee74 <network_listening+0x14>)
 23fee64:	6800      	ldr	r0, [r0, #0]
 23fee66:	4b04      	ldr	r3, [pc, #16]	; (23fee78 <network_listening+0x18>)
 23fee68:	4403      	add	r3, r0
 23fee6a:	681b      	ldr	r3, [r3, #0]
 23fee6c:	6a1b      	ldr	r3, [r3, #32]
 23fee6e:	9302      	str	r3, [sp, #8]
 23fee70:	bd09      	pop	{r0, r3, pc}
 23fee72:	0000      	.short	0x0000
 23fee74:	1007ade0 	.word	0x1007ade0
 23fee78:	00000028 	.word	0x00000028

023fee7c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fee7c:	b509      	push	{r0, r3, lr}
 23fee7e:	4804      	ldr	r0, [pc, #16]	; (23fee90 <network_set_listen_timeout+0x14>)
 23fee80:	6800      	ldr	r0, [r0, #0]
 23fee82:	4b04      	ldr	r3, [pc, #16]	; (23fee94 <network_set_listen_timeout+0x18>)
 23fee84:	4403      	add	r3, r0
 23fee86:	681b      	ldr	r3, [r3, #0]
 23fee88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fee8a:	9302      	str	r3, [sp, #8]
 23fee8c:	bd09      	pop	{r0, r3, pc}
 23fee8e:	0000      	.short	0x0000
 23fee90:	1007ade0 	.word	0x1007ade0
 23fee94:	00000028 	.word	0x00000028

023fee98 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fee98:	b509      	push	{r0, r3, lr}
 23fee9a:	4804      	ldr	r0, [pc, #16]	; (23feeac <network_get_listen_timeout+0x14>)
 23fee9c:	6800      	ldr	r0, [r0, #0]
 23fee9e:	4b04      	ldr	r3, [pc, #16]	; (23feeb0 <network_get_listen_timeout+0x18>)
 23feea0:	4403      	add	r3, r0
 23feea2:	681b      	ldr	r3, [r3, #0]
 23feea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23feea6:	9302      	str	r3, [sp, #8]
 23feea8:	bd09      	pop	{r0, r3, pc}
 23feeaa:	0000      	.short	0x0000
 23feeac:	1007ade0 	.word	0x1007ade0
 23feeb0:	00000028 	.word	0x00000028

023feeb4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23feeb4:	b509      	push	{r0, r3, lr}
 23feeb6:	4804      	ldr	r0, [pc, #16]	; (23feec8 <network_is_on+0x14>)
 23feeb8:	6800      	ldr	r0, [r0, #0]
 23feeba:	4b04      	ldr	r3, [pc, #16]	; (23feecc <network_is_on+0x18>)
 23feebc:	4403      	add	r3, r0
 23feebe:	681b      	ldr	r3, [r3, #0]
 23feec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23feec2:	9302      	str	r3, [sp, #8]
 23feec4:	bd09      	pop	{r0, r3, pc}
 23feec6:	0000      	.short	0x0000
 23feec8:	1007ade0 	.word	0x1007ade0
 23feecc:	00000028 	.word	0x00000028

023feed0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23feed0:	b509      	push	{r0, r3, lr}
 23feed2:	4804      	ldr	r0, [pc, #16]	; (23feee4 <network_is_off+0x14>)
 23feed4:	6800      	ldr	r0, [r0, #0]
 23feed6:	4b04      	ldr	r3, [pc, #16]	; (23feee8 <network_is_off+0x18>)
 23feed8:	4403      	add	r3, r0
 23feeda:	681b      	ldr	r3, [r3, #0]
 23feedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23feede:	9302      	str	r3, [sp, #8]
 23feee0:	bd09      	pop	{r0, r3, pc}
 23feee2:	0000      	.short	0x0000
 23feee4:	1007ade0 	.word	0x1007ade0
 23feee8:	00000028 	.word	0x00000028

023feeec <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23feeec:	b509      	push	{r0, r3, lr}
 23feeee:	4804      	ldr	r0, [pc, #16]	; (23fef00 <malloc+0x14>)
 23feef0:	6800      	ldr	r0, [r0, #0]
 23feef2:	4b04      	ldr	r3, [pc, #16]	; (23fef04 <malloc+0x18>)
 23feef4:	4403      	add	r3, r0
 23feef6:	681b      	ldr	r3, [r3, #0]
 23feef8:	681b      	ldr	r3, [r3, #0]
 23feefa:	9302      	str	r3, [sp, #8]
 23feefc:	bd09      	pop	{r0, r3, pc}
 23feefe:	0000      	.short	0x0000
 23fef00:	1007ade0 	.word	0x1007ade0
 23fef04:	00000004 	.word	0x00000004

023fef08 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fef08:	b509      	push	{r0, r3, lr}
 23fef0a:	4804      	ldr	r0, [pc, #16]	; (23fef1c <free+0x14>)
 23fef0c:	6800      	ldr	r0, [r0, #0]
 23fef0e:	4b04      	ldr	r3, [pc, #16]	; (23fef20 <free+0x18>)
 23fef10:	4403      	add	r3, r0
 23fef12:	681b      	ldr	r3, [r3, #0]
 23fef14:	685b      	ldr	r3, [r3, #4]
 23fef16:	9302      	str	r3, [sp, #8]
 23fef18:	bd09      	pop	{r0, r3, pc}
 23fef1a:	0000      	.short	0x0000
 23fef1c:	1007ade0 	.word	0x1007ade0
 23fef20:	00000004 	.word	0x00000004

023fef24 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fef24:	b509      	push	{r0, r3, lr}
 23fef26:	4804      	ldr	r0, [pc, #16]	; (23fef38 <__assert_func+0x14>)
 23fef28:	6800      	ldr	r0, [r0, #0]
 23fef2a:	4b04      	ldr	r3, [pc, #16]	; (23fef3c <__assert_func+0x18>)
 23fef2c:	4403      	add	r3, r0
 23fef2e:	681b      	ldr	r3, [r3, #0]
 23fef30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fef32:	9302      	str	r3, [sp, #8]
 23fef34:	bd09      	pop	{r0, r3, pc}
 23fef36:	0000      	.short	0x0000
 23fef38:	1007ade0 	.word	0x1007ade0
 23fef3c:	00000004 	.word	0x00000004

023fef40 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fef40:	b509      	push	{r0, r3, lr}
 23fef42:	4804      	ldr	r0, [pc, #16]	; (23fef54 <newlib_impure_ptr_callback+0x14>)
 23fef44:	6800      	ldr	r0, [r0, #0]
 23fef46:	4b04      	ldr	r3, [pc, #16]	; (23fef58 <newlib_impure_ptr_callback+0x18>)
 23fef48:	4403      	add	r3, r0
 23fef4a:	681b      	ldr	r3, [r3, #0]
 23fef4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fef4e:	9302      	str	r3, [sp, #8]
 23fef50:	bd09      	pop	{r0, r3, pc}
 23fef52:	0000      	.short	0x0000
 23fef54:	1007ade0 	.word	0x1007ade0
 23fef58:	00000004 	.word	0x00000004

023fef5c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fef5c:	2100      	movs	r1, #0
 23fef5e:	f7ff bec9 	b.w	23fecf4 <system_delay_ms>
	...

023fef64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fef64:	2300      	movs	r3, #0
 23fef66:	4802      	ldr	r0, [pc, #8]	; (23fef70 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fef68:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fef6a:	f7ff bcaf 	b.w	23fe8cc <os_mutex_recursive_create>
 23fef6e:	bf00      	nop
 23fef70:	1007ae8c 	.word	0x1007ae8c

023fef74 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23fef74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 23fef76:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 23fef78:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 23fef7a:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 23fef7e:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 23fef80:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 23fef84:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 23fef88:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 23fef8a:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 23fef8e:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 23fef92:	6843      	ldr	r3, [r0, #4]
 23fef94:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 23fef96:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fef98:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 23fef9a:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fef9e:	f7ff feef 	bl	23fed80 <spark_cloud_disconnect>
}
 23fefa2:	b005      	add	sp, #20
 23fefa4:	f85d fb04 	ldr.w	pc, [sp], #4

023fefa8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fefa8:	2200      	movs	r2, #0
 23fefaa:	6840      	ldr	r0, [r0, #4]
 23fefac:	4611      	mov	r1, r2
 23fefae:	f7ff bf57 	b.w	23fee60 <network_listening>

023fefb2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fefb2:	2200      	movs	r2, #0
 23fefb4:	6840      	ldr	r0, [r0, #4]
 23fefb6:	4611      	mov	r1, r2
 23fefb8:	f7ff bf6e 	b.w	23fee98 <network_get_listen_timeout>

023fefbc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fefbc:	2200      	movs	r2, #0
 23fefbe:	6840      	ldr	r0, [r0, #4]
 23fefc0:	f7ff bf5c 	b.w	23fee7c <network_set_listen_timeout>

023fefc4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fefc4:	2200      	movs	r2, #0
 23fefc6:	6840      	ldr	r0, [r0, #4]
 23fefc8:	f081 0101 	eor.w	r1, r1, #1
 23fefcc:	f7ff bf3a 	b.w	23fee44 <network_listen>

023fefd0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fefd0:	2300      	movs	r3, #0
 23fefd2:	6840      	ldr	r0, [r0, #4]
 23fefd4:	461a      	mov	r2, r3
 23fefd6:	4619      	mov	r1, r3
 23fefd8:	f7ff bf26 	b.w	23fee28 <network_off>

023fefdc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fefdc:	2300      	movs	r3, #0
 23fefde:	6840      	ldr	r0, [r0, #4]
 23fefe0:	461a      	mov	r2, r3
 23fefe2:	4619      	mov	r1, r3
 23fefe4:	f7ff bf12 	b.w	23fee0c <network_on>

023fefe8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fefe8:	2200      	movs	r2, #0
 23fefea:	6840      	ldr	r0, [r0, #4]
 23fefec:	4611      	mov	r1, r2
 23fefee:	f7ff beff 	b.w	23fedf0 <network_ready>

023feff2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23feff2:	2200      	movs	r2, #0
 23feff4:	6840      	ldr	r0, [r0, #4]
 23feff6:	4611      	mov	r1, r2
 23feff8:	f7ff bede 	b.w	23fedb8 <network_connecting>

023feffc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23feffc:	2200      	movs	r2, #0
 23feffe:	2102      	movs	r1, #2
 23ff000:	6840      	ldr	r0, [r0, #4]
 23ff002:	f7ff bee7 	b.w	23fedd4 <network_disconnect>

023ff006 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff006:	2300      	movs	r3, #0
 23ff008:	6840      	ldr	r0, [r0, #4]
 23ff00a:	461a      	mov	r2, r3
 23ff00c:	f7ff bec6 	b.w	23fed9c <network_connect>

023ff010 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23ff010:	2203      	movs	r2, #3
 23ff012:	4b02      	ldr	r3, [pc, #8]	; (23ff01c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23ff014:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23ff016:	4a02      	ldr	r2, [pc, #8]	; (23ff020 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23ff018:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23ff01a:	4770      	bx	lr
 23ff01c:	1007ae90 	.word	0x1007ae90
 23ff020:	023ffde8 	.word	0x023ffde8

023ff024 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23ff024:	4770      	bx	lr

023ff026 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23ff026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff028:	4606      	mov	r6, r0
 23ff02a:	4615      	mov	r5, r2
 23ff02c:	460c      	mov	r4, r1
 23ff02e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23ff030:	42bc      	cmp	r4, r7
 23ff032:	d006      	beq.n	23ff042 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23ff034:	6833      	ldr	r3, [r6, #0]
 23ff036:	4630      	mov	r0, r6
 23ff038:	689b      	ldr	r3, [r3, #8]
 23ff03a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23ff03e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23ff040:	e7f6      	b.n	23ff030 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23ff042:	4628      	mov	r0, r5
 23ff044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff046 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23ff046:	2200      	movs	r2, #0
 23ff048:	7c00      	ldrb	r0, [r0, #16]
 23ff04a:	f7ff bccb 	b.w	23fe9e4 <hal_i2c_write>

023ff04e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23ff04e:	2100      	movs	r1, #0
 23ff050:	7c00      	ldrb	r0, [r0, #16]
 23ff052:	f7ff bcd5 	b.w	23fea00 <hal_i2c_available>

023ff056 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23ff056:	2100      	movs	r1, #0
 23ff058:	7c00      	ldrb	r0, [r0, #16]
 23ff05a:	f7ff bcdf 	b.w	23fea1c <hal_i2c_read>

023ff05e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23ff05e:	2100      	movs	r1, #0
 23ff060:	7c00      	ldrb	r0, [r0, #16]
 23ff062:	f7ff bce9 	b.w	23fea38 <hal_i2c_peek>

023ff066 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23ff066:	2100      	movs	r1, #0
 23ff068:	7c00      	ldrb	r0, [r0, #16]
 23ff06a:	f7ff bcf3 	b.w	23fea54 <hal_i2c_flush>

023ff06e <_ZN7TwoWireD0Ev>:
 23ff06e:	b510      	push	{r4, lr}
 23ff070:	4604      	mov	r4, r0
 23ff072:	2114      	movs	r1, #20
 23ff074:	f7ff fa93 	bl	23fe59e <_ZdlPvj>
 23ff078:	4620      	mov	r0, r4
 23ff07a:	bd10      	pop	{r4, pc}

023ff07c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23ff07c:	b538      	push	{r3, r4, r5, lr}
 23ff07e:	4604      	mov	r4, r0
 23ff080:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23ff082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff086:	2200      	movs	r2, #0
 23ff088:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff08c:	4b09      	ldr	r3, [pc, #36]	; (23ff0b4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23ff08e:	4608      	mov	r0, r1
  _i2c = i2c;
 23ff090:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23ff092:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23ff094:	4629      	mov	r1, r5
 23ff096:	f7ff fcf9 	bl	23fea8c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23ff09a:	30bf      	adds	r0, #191	; 0xbf
 23ff09c:	d108      	bne.n	23ff0b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23ff09e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23ff0a0:	07db      	lsls	r3, r3, #31
 23ff0a2:	d505      	bpl.n	23ff0b0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23ff0a4:	6868      	ldr	r0, [r5, #4]
 23ff0a6:	f7ff ff2f 	bl	23fef08 <free>
    free(conf.tx_buffer);
 23ff0aa:	68e8      	ldr	r0, [r5, #12]
 23ff0ac:	f7ff ff2c 	bl	23fef08 <free>
}
 23ff0b0:	4620      	mov	r0, r4
 23ff0b2:	bd38      	pop	{r3, r4, r5, pc}
 23ff0b4:	023ffe24 	.word	0x023ffe24

023ff0b8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23ff0b8:	2200      	movs	r2, #0
 23ff0ba:	7c00      	ldrb	r0, [r0, #16]
 23ff0bc:	f7ff bc5a 	b.w	23fe974 <hal_i2c_set_speed>

023ff0c0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23ff0c0:	2300      	movs	r3, #0
 23ff0c2:	7c00      	ldrb	r0, [r0, #16]
 23ff0c4:	461a      	mov	r2, r3
 23ff0c6:	4619      	mov	r1, r3
 23ff0c8:	f7ff bc62 	b.w	23fe990 <hal_i2c_begin>

023ff0cc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23ff0cc:	2200      	movs	r2, #0
 23ff0ce:	7c00      	ldrb	r0, [r0, #16]
 23ff0d0:	f7ff bc6c 	b.w	23fe9ac <hal_i2c_begin_transmission>

023ff0d4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23ff0d4:	2200      	movs	r2, #0
 23ff0d6:	7c00      	ldrb	r0, [r0, #16]
 23ff0d8:	f7ff bc76 	b.w	23fe9c8 <hal_i2c_end_transmission>

023ff0dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23ff0dc:	4770      	bx	lr

023ff0de <_ZN9IPAddressD0Ev>:
 23ff0de:	b510      	push	{r4, lr}
 23ff0e0:	4604      	mov	r4, r0
 23ff0e2:	2118      	movs	r1, #24
 23ff0e4:	f7ff fa5b 	bl	23fe59e <_ZdlPvj>
 23ff0e8:	4620      	mov	r0, r4
 23ff0ea:	bd10      	pop	{r4, pc}

023ff0ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23ff0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23ff0ee:	7d03      	ldrb	r3, [r0, #20]
{
 23ff0f0:	460e      	mov	r6, r1
	if (address.v==6) {
 23ff0f2:	2b06      	cmp	r3, #6
 23ff0f4:	f04f 0400 	mov.w	r4, #0
{
 23ff0f8:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff0fa:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23ff0fe:	d012      	beq.n	23ff126 <_ZNK9IPAddress7printToER5Print+0x3a>
 23ff100:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23ff104:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23ff108:	220a      	movs	r2, #10
 23ff10a:	4630      	mov	r0, r6
 23ff10c:	f000 f95d 	bl	23ff3ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23ff110:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23ff112:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23ff114:	d019      	beq.n	23ff14a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23ff116:	2c00      	cmp	r4, #0
 23ff118:	d0f4      	beq.n	23ff104 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23ff11a:	212e      	movs	r1, #46	; 0x2e
 23ff11c:	4630      	mov	r0, r6
 23ff11e:	f000 f93b 	bl	23ff398 <_ZN5Print5printEc>
 23ff122:	4404      	add	r4, r0
 23ff124:	e7ee      	b.n	23ff104 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff126:	232f      	movs	r3, #47	; 0x2f
 23ff128:	466a      	mov	r2, sp
 23ff12a:	4639      	mov	r1, r7
 23ff12c:	200a      	movs	r0, #10
		buf[0] = 0;
 23ff12e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff132:	f7ff fcb9 	bl	23feaa8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23ff136:	4668      	mov	r0, sp
 23ff138:	f7ff fa0a 	bl	23fe550 <strlen>
 23ff13c:	6833      	ldr	r3, [r6, #0]
 23ff13e:	4602      	mov	r2, r0
 23ff140:	4669      	mov	r1, sp
 23ff142:	4630      	mov	r0, r6
 23ff144:	68db      	ldr	r3, [r3, #12]
 23ff146:	4798      	blx	r3
 23ff148:	4604      	mov	r4, r0
    }
    return n;
}
 23ff14a:	4620      	mov	r0, r4
 23ff14c:	b00d      	add	sp, #52	; 0x34
 23ff14e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff150 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23ff150:	b510      	push	{r4, lr}
 23ff152:	4604      	mov	r4, r0
 23ff154:	4b04      	ldr	r3, [pc, #16]	; (23ff168 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23ff156:	2211      	movs	r2, #17
 23ff158:	2100      	movs	r1, #0
 23ff15a:	f840 3b04 	str.w	r3, [r0], #4
 23ff15e:	f000 fd8a 	bl	23ffc76 <memset>
}
 23ff162:	4620      	mov	r0, r4
 23ff164:	bd10      	pop	{r4, pc}
 23ff166:	bf00      	nop
 23ff168:	023ffe4c 	.word	0x023ffe4c

023ff16c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23ff16c:	4603      	mov	r3, r0
 23ff16e:	4a07      	ldr	r2, [pc, #28]	; (23ff18c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23ff170:	b510      	push	{r4, lr}
 23ff172:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23ff176:	f101 0210 	add.w	r2, r1, #16
 23ff17a:	f851 4b04 	ldr.w	r4, [r1], #4
 23ff17e:	4291      	cmp	r1, r2
 23ff180:	f843 4b04 	str.w	r4, [r3], #4
 23ff184:	d1f9      	bne.n	23ff17a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23ff186:	780a      	ldrb	r2, [r1, #0]
 23ff188:	701a      	strb	r2, [r3, #0]
}
 23ff18a:	bd10      	pop	{r4, pc}
 23ff18c:	023ffe4c 	.word	0x023ffe4c

023ff190 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23ff190:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23ff192:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23ff196:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23ff19a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23ff19e:	2304      	movs	r3, #4
 23ff1a0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23ff1a4:	6041      	str	r1, [r0, #4]
 23ff1a6:	7503      	strb	r3, [r0, #20]
}
 23ff1a8:	bd10      	pop	{r4, pc}
	...

023ff1ac <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23ff1ac:	b507      	push	{r0, r1, r2, lr}
 23ff1ae:	4b06      	ldr	r3, [pc, #24]	; (23ff1c8 <_ZN9IPAddressC1EPKh+0x1c>)
 23ff1b0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23ff1b2:	78cb      	ldrb	r3, [r1, #3]
 23ff1b4:	9300      	str	r3, [sp, #0]
 23ff1b6:	788b      	ldrb	r3, [r1, #2]
 23ff1b8:	784a      	ldrb	r2, [r1, #1]
 23ff1ba:	7809      	ldrb	r1, [r1, #0]
 23ff1bc:	f7ff ffe8 	bl	23ff190 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23ff1c0:	b003      	add	sp, #12
 23ff1c2:	f85d fb04 	ldr.w	pc, [sp], #4
 23ff1c6:	bf00      	nop
 23ff1c8:	023ffe4c 	.word	0x023ffe4c

023ff1cc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23ff1cc:	4b01      	ldr	r3, [pc, #4]	; (23ff1d4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23ff1ce:	4a02      	ldr	r2, [pc, #8]	; (23ff1d8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23ff1d0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23ff1d2:	4770      	bx	lr
 23ff1d4:	1007ae98 	.word	0x1007ae98
 23ff1d8:	023ffe58 	.word	0x023ffe58

023ff1dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff1dc:	2300      	movs	r3, #0
 23ff1de:	6840      	ldr	r0, [r0, #4]
 23ff1e0:	461a      	mov	r2, r3
 23ff1e2:	f7ff bddb 	b.w	23fed9c <network_connect>

023ff1e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff1e6:	2200      	movs	r2, #0
 23ff1e8:	2102      	movs	r1, #2
 23ff1ea:	6840      	ldr	r0, [r0, #4]
 23ff1ec:	f7ff bdf2 	b.w	23fedd4 <network_disconnect>

023ff1f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff1f0:	2200      	movs	r2, #0
 23ff1f2:	6840      	ldr	r0, [r0, #4]
 23ff1f4:	4611      	mov	r1, r2
 23ff1f6:	f7ff bddf 	b.w	23fedb8 <network_connecting>

023ff1fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff1fa:	2200      	movs	r2, #0
 23ff1fc:	6840      	ldr	r0, [r0, #4]
 23ff1fe:	4611      	mov	r1, r2
 23ff200:	f7ff bdf6 	b.w	23fedf0 <network_ready>

023ff204 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff204:	2300      	movs	r3, #0
 23ff206:	6840      	ldr	r0, [r0, #4]
 23ff208:	461a      	mov	r2, r3
 23ff20a:	4619      	mov	r1, r3
 23ff20c:	f7ff bdfe 	b.w	23fee0c <network_on>

023ff210 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff210:	2300      	movs	r3, #0
 23ff212:	6840      	ldr	r0, [r0, #4]
 23ff214:	461a      	mov	r2, r3
 23ff216:	4619      	mov	r1, r3
 23ff218:	f7ff be06 	b.w	23fee28 <network_off>

023ff21c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff21c:	2100      	movs	r1, #0
 23ff21e:	6840      	ldr	r0, [r0, #4]
 23ff220:	f7ff be48 	b.w	23feeb4 <network_is_on>

023ff224 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff224:	2100      	movs	r1, #0
 23ff226:	6840      	ldr	r0, [r0, #4]
 23ff228:	f7ff be52 	b.w	23feed0 <network_is_off>

023ff22c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff22c:	2200      	movs	r2, #0
 23ff22e:	6840      	ldr	r0, [r0, #4]
 23ff230:	f081 0101 	eor.w	r1, r1, #1
 23ff234:	f7ff be06 	b.w	23fee44 <network_listen>

023ff238 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff238:	2200      	movs	r2, #0
 23ff23a:	6840      	ldr	r0, [r0, #4]
 23ff23c:	f7ff be1e 	b.w	23fee7c <network_set_listen_timeout>

023ff240 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff240:	2200      	movs	r2, #0
 23ff242:	6840      	ldr	r0, [r0, #4]
 23ff244:	4611      	mov	r1, r2
 23ff246:	f7ff be27 	b.w	23fee98 <network_get_listen_timeout>

023ff24a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff24a:	2200      	movs	r2, #0
 23ff24c:	6840      	ldr	r0, [r0, #4]
 23ff24e:	4611      	mov	r1, r2
 23ff250:	f7ff be06 	b.w	23fee60 <network_listening>

023ff254 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff258:	b095      	sub	sp, #84	; 0x54
 23ff25a:	4614      	mov	r4, r2
 23ff25c:	460d      	mov	r5, r1
 23ff25e:	4607      	mov	r7, r0
    IPAddress addr;
 23ff260:	f7ff ff76 	bl	23ff150 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff264:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff266:	221c      	movs	r2, #28
 23ff268:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff26a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff26c:	f000 fd03 	bl	23ffc76 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff270:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff272:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff274:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff276:	2100      	movs	r1, #0
 23ff278:	466b      	mov	r3, sp
 23ff27a:	aa0c      	add	r2, sp, #48	; 0x30
 23ff27c:	f7ff fc30 	bl	23feae0 <netdb_getaddrinfo>
    if (!r) {
 23ff280:	4604      	mov	r4, r0
 23ff282:	2800      	cmp	r0, #0
 23ff284:	d14b      	bne.n	23ff31e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff286:	4602      	mov	r2, r0
 23ff288:	2101      	movs	r1, #1
 23ff28a:	6868      	ldr	r0, [r5, #4]
 23ff28c:	f7ff fdb0 	bl	23fedf0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff290:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff292:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff294:	4622      	mov	r2, r4
 23ff296:	6868      	ldr	r0, [r5, #4]
 23ff298:	f7ff fdaa 	bl	23fedf0 <network_ready>
        bool ok = false;
 23ff29c:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff29e:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff2a0:	9e00      	ldr	r6, [sp, #0]
 23ff2a2:	2e00      	cmp	r6, #0
 23ff2a4:	d03b      	beq.n	23ff31e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff2a6:	2900      	cmp	r1, #0
 23ff2a8:	d139      	bne.n	23ff31e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff2aa:	6873      	ldr	r3, [r6, #4]
 23ff2ac:	2b02      	cmp	r3, #2
 23ff2ae:	d003      	beq.n	23ff2b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff2b0:	2b0a      	cmp	r3, #10
 23ff2b2:	d011      	beq.n	23ff2d8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff2b4:	69f6      	ldr	r6, [r6, #28]
 23ff2b6:	e7f4      	b.n	23ff2a2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff2b8:	f1b8 0f00 	cmp.w	r8, #0
 23ff2bc:	d0fa      	beq.n	23ff2b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff2be:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff2c0:	a806      	add	r0, sp, #24
 23ff2c2:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff2c4:	1d3c      	adds	r4, r7, #4
 23ff2c6:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff2c8:	f7ff ff70 	bl	23ff1ac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff2cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff2ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff2d0:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff2d2:	4641      	mov	r1, r8
 23ff2d4:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff2d6:	e7ed      	b.n	23ff2b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff2d8:	f1b9 0f00 	cmp.w	r9, #0
 23ff2dc:	d0ea      	beq.n	23ff2b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff2de:	2210      	movs	r2, #16
 23ff2e0:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff2e2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff2e4:	f000 fcc7 	bl	23ffc76 <memset>
                    a.v = 6;
 23ff2e8:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff2ea:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff2ec:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff2f0:	f104 0308 	add.w	r3, r4, #8
 23ff2f4:	3418      	adds	r4, #24
 23ff2f6:	462a      	mov	r2, r5
 23ff2f8:	6818      	ldr	r0, [r3, #0]
 23ff2fa:	6859      	ldr	r1, [r3, #4]
 23ff2fc:	3308      	adds	r3, #8
 23ff2fe:	c203      	stmia	r2!, {r0, r1}
 23ff300:	42a3      	cmp	r3, r4
 23ff302:	4615      	mov	r5, r2
 23ff304:	d1f7      	bne.n	23ff2f6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff306:	a901      	add	r1, sp, #4
 23ff308:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff30a:	1d3c      	adds	r4, r7, #4
 23ff30c:	ad07      	add	r5, sp, #28
 23ff30e:	f7ff ff2d 	bl	23ff16c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff316:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff318:	4649      	mov	r1, r9
 23ff31a:	7023      	strb	r3, [r4, #0]
                    break;
 23ff31c:	e7ca      	b.n	23ff2b4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff31e:	9800      	ldr	r0, [sp, #0]
 23ff320:	f7ff fbd0 	bl	23feac4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff324:	4638      	mov	r0, r7
 23ff326:	b015      	add	sp, #84	; 0x54
 23ff328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff32c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff32c:	4b02      	ldr	r3, [pc, #8]	; (23ff338 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff32e:	4a03      	ldr	r2, [pc, #12]	; (23ff33c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff330:	601a      	str	r2, [r3, #0]
 23ff332:	2200      	movs	r2, #0
 23ff334:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff336:	4770      	bx	lr
 23ff338:	1007ae9c 	.word	0x1007ae9c
 23ff33c:	023ffe64 	.word	0x023ffe64

023ff340 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff342:	4606      	mov	r6, r0
 23ff344:	460d      	mov	r5, r1
  size_t n = 0;
 23ff346:	2400      	movs	r4, #0
 23ff348:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff34a:	42bd      	cmp	r5, r7
 23ff34c:	d00c      	beq.n	23ff368 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff34e:	6833      	ldr	r3, [r6, #0]
 23ff350:	4630      	mov	r0, r6
 23ff352:	689b      	ldr	r3, [r3, #8]
 23ff354:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff358:	4798      	blx	r3
     if (chunk>=0)
 23ff35a:	1e03      	subs	r3, r0, #0
 23ff35c:	db01      	blt.n	23ff362 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff35e:	441c      	add	r4, r3
  while (size--) {
 23ff360:	e7f3      	b.n	23ff34a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff362:	2c00      	cmp	r4, #0
 23ff364:	bf08      	it	eq
 23ff366:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff368:	4620      	mov	r0, r4
 23ff36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff36c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff36c:	b513      	push	{r0, r1, r4, lr}
 23ff36e:	4604      	mov	r4, r0
    }
 23ff370:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff372:	b159      	cbz	r1, 23ff38c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff374:	9101      	str	r1, [sp, #4]
 23ff376:	f7ff f8eb 	bl	23fe550 <strlen>
 23ff37a:	4602      	mov	r2, r0
 23ff37c:	4620      	mov	r0, r4
 23ff37e:	6823      	ldr	r3, [r4, #0]
 23ff380:	9901      	ldr	r1, [sp, #4]
 23ff382:	68db      	ldr	r3, [r3, #12]
    }
 23ff384:	b002      	add	sp, #8
 23ff386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff38a:	4718      	bx	r3
    }
 23ff38c:	b002      	add	sp, #8
 23ff38e:	bd10      	pop	{r4, pc}

023ff390 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23ff390:	b508      	push	{r3, lr}
  return write(str);
 23ff392:	f7ff ffeb 	bl	23ff36c <_ZN5Print5writeEPKc>
}
 23ff396:	bd08      	pop	{r3, pc}

023ff398 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23ff398:	6803      	ldr	r3, [r0, #0]
 23ff39a:	689b      	ldr	r3, [r3, #8]
 23ff39c:	4718      	bx	r3

023ff39e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23ff39e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23ff3a0:	210d      	movs	r1, #13
{
 23ff3a2:	4605      	mov	r5, r0
  size_t n = print('\r');
 23ff3a4:	f7ff fff8 	bl	23ff398 <_ZN5Print5printEc>
  n += print('\n');
 23ff3a8:	210a      	movs	r1, #10
  size_t n = print('\r');
 23ff3aa:	4604      	mov	r4, r0
  n += print('\n');
 23ff3ac:	4628      	mov	r0, r5
 23ff3ae:	f7ff fff3 	bl	23ff398 <_ZN5Print5printEc>
  return n;
}
 23ff3b2:	4420      	add	r0, r4
 23ff3b4:	bd38      	pop	{r3, r4, r5, pc}

023ff3b6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23ff3b6:	b538      	push	{r3, r4, r5, lr}
 23ff3b8:	4605      	mov	r5, r0
  return write(str);
 23ff3ba:	f7ff ffd7 	bl	23ff36c <_ZN5Print5writeEPKc>
 23ff3be:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23ff3c0:	4628      	mov	r0, r5
 23ff3c2:	f7ff ffec 	bl	23ff39e <_ZN5Print7printlnEv>
  return n;
}
 23ff3c6:	4420      	add	r0, r4
 23ff3c8:	bd38      	pop	{r3, r4, r5, pc}

023ff3ca <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff3ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff3cc:	2a01      	cmp	r2, #1
 23ff3ce:	bf98      	it	ls
 23ff3d0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff3d2:	b530      	push	{r4, r5, lr}
 23ff3d4:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff3d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff3da:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff3dc:	460d      	mov	r5, r1
 23ff3de:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff3e2:	fb01 5312 	mls	r3, r1, r2, r5
 23ff3e6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff3ea:	2b09      	cmp	r3, #9
 23ff3ec:	bf94      	ite	ls
 23ff3ee:	3330      	addls	r3, #48	; 0x30
 23ff3f0:	3337      	addhi	r3, #55	; 0x37
 23ff3f2:	b2db      	uxtb	r3, r3
  } while(n);
 23ff3f4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff3f6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff3fa:	d9ef      	bls.n	23ff3dc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff3fc:	4621      	mov	r1, r4
 23ff3fe:	f7ff ffb5 	bl	23ff36c <_ZN5Print5writeEPKc>
}
 23ff402:	b00b      	add	sp, #44	; 0x2c
 23ff404:	bd30      	pop	{r4, r5, pc}
	...

023ff408 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23ff408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff40c:	ec55 4b10 	vmov	r4, r5, d0
 23ff410:	4606      	mov	r6, r0
 23ff412:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23ff414:	ee10 2a10 	vmov	r2, s0
 23ff418:	462b      	mov	r3, r5
 23ff41a:	ee10 0a10 	vmov	r0, s0
 23ff41e:	4629      	mov	r1, r5
 23ff420:	f7fe ffe8 	bl	23fe3f4 <__aeabi_dcmpun>
 23ff424:	b140      	cbz	r0, 23ff438 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23ff426:	4953      	ldr	r1, [pc, #332]	; (23ff574 <_ZN5Print10printFloatEdh+0x16c>)
 23ff428:	4630      	mov	r0, r6
 23ff42a:	f7ff ff9f 	bl	23ff36c <_ZN5Print5writeEPKc>
 23ff42e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23ff430:	4650      	mov	r0, sl
 23ff432:	b003      	add	sp, #12
 23ff434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23ff438:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23ff43c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ff440:	4620      	mov	r0, r4
 23ff442:	4649      	mov	r1, r9
 23ff444:	4b4c      	ldr	r3, [pc, #304]	; (23ff578 <_ZN5Print10printFloatEdh+0x170>)
 23ff446:	f7fe ffd5 	bl	23fe3f4 <__aeabi_dcmpun>
 23ff44a:	b948      	cbnz	r0, 23ff460 <_ZN5Print10printFloatEdh+0x58>
 23ff44c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ff450:	4620      	mov	r0, r4
 23ff452:	4649      	mov	r1, r9
 23ff454:	4b48      	ldr	r3, [pc, #288]	; (23ff578 <_ZN5Print10printFloatEdh+0x170>)
 23ff456:	f7fe ffaf 	bl	23fe3b8 <__aeabi_dcmple>
 23ff45a:	b908      	cbnz	r0, 23ff460 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23ff45c:	4947      	ldr	r1, [pc, #284]	; (23ff57c <_ZN5Print10printFloatEdh+0x174>)
 23ff45e:	e7e3      	b.n	23ff428 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23ff460:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23ff464:	4620      	mov	r0, r4
 23ff466:	4629      	mov	r1, r5
 23ff468:	4b45      	ldr	r3, [pc, #276]	; (23ff580 <_ZN5Print10printFloatEdh+0x178>)
 23ff46a:	f7fe ffb9 	bl	23fe3e0 <__aeabi_dcmpgt>
 23ff46e:	b108      	cbz	r0, 23ff474 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23ff470:	4944      	ldr	r1, [pc, #272]	; (23ff584 <_ZN5Print10printFloatEdh+0x17c>)
 23ff472:	e7d9      	b.n	23ff428 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23ff474:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23ff478:	4620      	mov	r0, r4
 23ff47a:	4629      	mov	r1, r5
 23ff47c:	4b42      	ldr	r3, [pc, #264]	; (23ff588 <_ZN5Print10printFloatEdh+0x180>)
 23ff47e:	f7fe ff91 	bl	23fe3a4 <__aeabi_dcmplt>
 23ff482:	2800      	cmp	r0, #0
 23ff484:	d1f4      	bne.n	23ff470 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23ff486:	2200      	movs	r2, #0
 23ff488:	2300      	movs	r3, #0
 23ff48a:	4620      	mov	r0, r4
 23ff48c:	4629      	mov	r1, r5
 23ff48e:	f7fe ff89 	bl	23fe3a4 <__aeabi_dcmplt>
 23ff492:	b1d0      	cbz	r0, 23ff4ca <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23ff494:	212d      	movs	r1, #45	; 0x2d
 23ff496:	4630      	mov	r0, r6
 23ff498:	f7ff ff7e 	bl	23ff398 <_ZN5Print5printEc>
     number = -number;
 23ff49c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23ff4a0:	4682      	mov	sl, r0
     number = -number;
 23ff4a2:	461d      	mov	r5, r3
  size_t n = 0;
 23ff4a4:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23ff4a8:	2000      	movs	r0, #0
    rounding /= 10.0;
 23ff4aa:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23ff4ae:	4937      	ldr	r1, [pc, #220]	; (23ff58c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23ff4b0:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23ff594 <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23ff4b4:	fa5f f38b 	uxtb.w	r3, fp
 23ff4b8:	429f      	cmp	r7, r3
 23ff4ba:	d908      	bls.n	23ff4ce <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23ff4bc:	4642      	mov	r2, r8
 23ff4be:	464b      	mov	r3, r9
 23ff4c0:	f7fe fe28 	bl	23fe114 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23ff4c4:	f10b 0b01 	add.w	fp, fp, #1
 23ff4c8:	e7f4      	b.n	23ff4b4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23ff4ca:	4682      	mov	sl, r0
 23ff4cc:	e7ea      	b.n	23ff4a4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23ff4ce:	4622      	mov	r2, r4
 23ff4d0:	462b      	mov	r3, r5
 23ff4d2:	f7fe fb3f 	bl	23fdb54 <__adddf3>
 23ff4d6:	460d      	mov	r5, r1
 23ff4d8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23ff4da:	f7fe ffc9 	bl	23fe470 <__aeabi_d2uiz>
 23ff4de:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23ff4e0:	f7fe fc74 	bl	23fddcc <__aeabi_ui2d>
 23ff4e4:	4602      	mov	r2, r0
 23ff4e6:	460b      	mov	r3, r1
 23ff4e8:	4620      	mov	r0, r4
 23ff4ea:	4629      	mov	r1, r5
 23ff4ec:	f7fe fb30 	bl	23fdb50 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23ff4f0:	220a      	movs	r2, #10
 23ff4f2:	4604      	mov	r4, r0
 23ff4f4:	460d      	mov	r5, r1
 23ff4f6:	4630      	mov	r0, r6
 23ff4f8:	4641      	mov	r1, r8
 23ff4fa:	f7ff ff66 	bl	23ff3ca <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23ff4fe:	4482      	add	sl, r0
  if (digits > 0) {
 23ff500:	2f00      	cmp	r7, #0
 23ff502:	d095      	beq.n	23ff430 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23ff504:	4630      	mov	r0, r6
 23ff506:	4922      	ldr	r1, [pc, #136]	; (23ff590 <_ZN5Print10printFloatEdh+0x188>)
 23ff508:	f7ff ff30 	bl	23ff36c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23ff50c:	f04f 0800 	mov.w	r8, #0
 23ff510:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23ff594 <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23ff514:	4482      	add	sl, r0
  while (digits-- > 0)
 23ff516:	2f00      	cmp	r7, #0
 23ff518:	d08a      	beq.n	23ff430 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23ff51a:	4642      	mov	r2, r8
 23ff51c:	464b      	mov	r3, r9
 23ff51e:	4620      	mov	r0, r4
 23ff520:	4629      	mov	r1, r5
 23ff522:	f7fe fccd 	bl	23fdec0 <__aeabi_dmul>
 23ff526:	4604      	mov	r4, r0
 23ff528:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23ff52a:	f7fe ff79 	bl	23fe420 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23ff52e:	f1b0 0b00 	subs.w	fp, r0, #0
 23ff532:	da1c      	bge.n	23ff56e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23ff534:	212d      	movs	r1, #45	; 0x2d
 23ff536:	4630      	mov	r0, r6
 23ff538:	f7ff ff2e 	bl	23ff398 <_ZN5Print5printEc>
 23ff53c:	4603      	mov	r3, r0
            val = -n;
 23ff53e:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23ff542:	220a      	movs	r2, #10
 23ff544:	4630      	mov	r0, r6
 23ff546:	9301      	str	r3, [sp, #4]
 23ff548:	f7ff ff3f 	bl	23ff3ca <_ZN5Print11printNumberEmh>
 23ff54c:	9b01      	ldr	r3, [sp, #4]
 23ff54e:	3f01      	subs	r7, #1
 23ff550:	4418      	add	r0, r3
    n += print(toPrint);
 23ff552:	4482      	add	sl, r0
    remainder -= toPrint;
 23ff554:	4658      	mov	r0, fp
 23ff556:	f7fe fc49 	bl	23fddec <__aeabi_i2d>
 23ff55a:	4602      	mov	r2, r0
 23ff55c:	460b      	mov	r3, r1
 23ff55e:	4620      	mov	r0, r4
 23ff560:	4629      	mov	r1, r5
 23ff562:	f7fe faf5 	bl	23fdb50 <__aeabi_dsub>
 23ff566:	b2ff      	uxtb	r7, r7
 23ff568:	4604      	mov	r4, r0
 23ff56a:	460d      	mov	r5, r1
  while (digits-- > 0)
 23ff56c:	e7d3      	b.n	23ff516 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23ff56e:	4659      	mov	r1, fp
        size_t t = 0;
 23ff570:	2300      	movs	r3, #0
 23ff572:	e7e6      	b.n	23ff542 <_ZN5Print10printFloatEdh+0x13a>
 23ff574:	023ffe98 	.word	0x023ffe98
 23ff578:	7fefffff 	.word	0x7fefffff
 23ff57c:	023ffe9c 	.word	0x023ffe9c
 23ff580:	41efffff 	.word	0x41efffff
 23ff584:	023ffea0 	.word	0x023ffea0
 23ff588:	c1efffff 	.word	0xc1efffff
 23ff58c:	3fe00000 	.word	0x3fe00000
 23ff590:	023ffea4 	.word	0x023ffea4
 23ff594:	40240000 	.word	0x40240000

023ff598 <_ZN5Print5printEfi>:
{
 23ff598:	b538      	push	{r3, r4, r5, lr}
 23ff59a:	4604      	mov	r4, r0
 23ff59c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23ff5a0:	b2cd      	uxtb	r5, r1
 23ff5a2:	f7fe fc35 	bl	23fde10 <__aeabi_f2d>
 23ff5a6:	ec41 0b10 	vmov	d0, r0, r1
 23ff5aa:	4629      	mov	r1, r5
 23ff5ac:	4620      	mov	r0, r4
}
 23ff5ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23ff5b2:	f7ff bf29 	b.w	23ff408 <_ZN5Print10printFloatEdh>
	...

023ff5b8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23ff5b8:	2200      	movs	r2, #0
 23ff5ba:	4b01      	ldr	r3, [pc, #4]	; (23ff5c0 <_GLOBAL__sub_I_RGB+0x8>)
 23ff5bc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff5be:	4770      	bx	lr
 23ff5c0:	1007aea4 	.word	0x1007aea4

023ff5c4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff5c4:	b510      	push	{r4, lr}
 23ff5c6:	4604      	mov	r4, r0
 23ff5c8:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff5ca:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff5cc:	f7ff fa96 	bl	23feafc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff5d0:	2300      	movs	r3, #0
}
 23ff5d2:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff5d4:	6063      	str	r3, [r4, #4]
}
 23ff5d6:	bd10      	pop	{r4, pc}

023ff5d8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff5d8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff5da:	2000      	movs	r0, #0
 23ff5dc:	4b04      	ldr	r3, [pc, #16]	; (23ff5f0 <_GLOBAL__sub_I_System+0x18>)
 23ff5de:	601a      	str	r2, [r3, #0]
 23ff5e0:	4b04      	ldr	r3, [pc, #16]	; (23ff5f4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff5e2:	4a05      	ldr	r2, [pc, #20]	; (23ff5f8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff5e4:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff5e8:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff5ea:	f7ff bb75 	b.w	23fecd8 <set_system_mode>
 23ff5ee:	bf00      	nop
 23ff5f0:	1007aec0 	.word	0x1007aec0
 23ff5f4:	1007aeb4 	.word	0x1007aeb4
 23ff5f8:	ffff0000 	.word	0xffff0000

023ff5fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff5fc:	4b02      	ldr	r3, [pc, #8]	; (23ff608 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff5fe:	681a      	ldr	r2, [r3, #0]
 23ff600:	4b02      	ldr	r3, [pc, #8]	; (23ff60c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff602:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff604:	4770      	bx	lr
 23ff606:	bf00      	nop
 23ff608:	1007ade4 	.word	0x1007ade4
 23ff60c:	1007aec4 	.word	0x1007aec4

023ff610 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff610:	4770      	bx	lr

023ff612 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff612:	7441      	strb	r1, [r0, #17]
}
 23ff614:	4770      	bx	lr

023ff616 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff616:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff618:	7c00      	ldrb	r0, [r0, #16]
 23ff61a:	f7ff fadf 	bl	23febdc <hal_usart_available_data_for_write>
}
 23ff61e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff622:	bd08      	pop	{r3, pc}

023ff624 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff624:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff626:	7c00      	ldrb	r0, [r0, #16]
 23ff628:	f7ff fa92 	bl	23feb50 <hal_usart_available>
}
 23ff62c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff630:	bd08      	pop	{r3, pc}

023ff632 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff632:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff634:	7c00      	ldrb	r0, [r0, #16]
 23ff636:	f7ff faa7 	bl	23feb88 <hal_usart_peek>
}
 23ff63a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff63e:	bd08      	pop	{r3, pc}

023ff640 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff640:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff642:	7c00      	ldrb	r0, [r0, #16]
 23ff644:	f7ff fa92 	bl	23feb6c <hal_usart_read>
}
 23ff648:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff64c:	bd08      	pop	{r3, pc}

023ff64e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff64e:	7c00      	ldrb	r0, [r0, #16]
 23ff650:	f7ff baa8 	b.w	23feba4 <hal_usart_flush>

023ff654 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff654:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff656:	7c45      	ldrb	r5, [r0, #17]
{
 23ff658:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff65a:	b12d      	cbz	r5, 23ff668 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff65c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff65e:	b003      	add	sp, #12
 23ff660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff664:	f7ff ba66 	b.w	23feb34 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff668:	7c00      	ldrb	r0, [r0, #16]
 23ff66a:	9101      	str	r1, [sp, #4]
 23ff66c:	f7ff fab6 	bl	23febdc <hal_usart_available_data_for_write>
 23ff670:	2800      	cmp	r0, #0
 23ff672:	9901      	ldr	r1, [sp, #4]
 23ff674:	dcf2      	bgt.n	23ff65c <_ZN11USARTSerial5writeEh+0x8>
}
 23ff676:	4628      	mov	r0, r5
 23ff678:	b003      	add	sp, #12
 23ff67a:	bd30      	pop	{r4, r5, pc}

023ff67c <_ZN11USARTSerialD0Ev>:
 23ff67c:	b510      	push	{r4, lr}
 23ff67e:	4604      	mov	r4, r0
 23ff680:	2114      	movs	r1, #20
 23ff682:	f7fe ff8c 	bl	23fe59e <_ZdlPvj>
 23ff686:	4620      	mov	r0, r4
 23ff688:	bd10      	pop	{r4, pc}
	...

023ff68c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff68c:	b510      	push	{r4, lr}
 23ff68e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff692:	4604      	mov	r4, r0
 23ff694:	4608      	mov	r0, r1
 23ff696:	4611      	mov	r1, r2
 23ff698:	2200      	movs	r2, #0
 23ff69a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff69e:	4b04      	ldr	r3, [pc, #16]	; (23ff6b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff6a0:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff6a2:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff6a4:	2301      	movs	r3, #1
 23ff6a6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff6a8:	f7ff faa6 	bl	23febf8 <hal_usart_init_ex>
}
 23ff6ac:	4620      	mov	r0, r4
 23ff6ae:	bd10      	pop	{r4, pc}
 23ff6b0:	023ffecc 	.word	0x023ffecc

023ff6b4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff6b4:	7c00      	ldrb	r0, [r0, #16]
 23ff6b6:	f7ff ba83 	b.w	23febc0 <hal_usart_is_enabled>

023ff6ba <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff6ba:	7441      	strb	r1, [r0, #17]
}
 23ff6bc:	4770      	bx	lr

023ff6be <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff6be:	4770      	bx	lr

023ff6c0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff6c0:	4770      	bx	lr

023ff6c2 <_ZN9USBSerial4readEv>:
{
 23ff6c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff6c4:	2100      	movs	r1, #0
 23ff6c6:	7c00      	ldrb	r0, [r0, #16]
 23ff6c8:	f7ff fadc 	bl	23fec84 <HAL_USB_USART_Receive_Data>
}
 23ff6cc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff6d0:	bd08      	pop	{r3, pc}

023ff6d2 <_ZN9USBSerial4peekEv>:
{
 23ff6d2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff6d4:	2101      	movs	r1, #1
 23ff6d6:	7c00      	ldrb	r0, [r0, #16]
 23ff6d8:	f7ff fad4 	bl	23fec84 <HAL_USB_USART_Receive_Data>
}
 23ff6dc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff6e0:	bd08      	pop	{r3, pc}

023ff6e2 <_ZN9USBSerial17availableForWriteEv>:
{
 23ff6e2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff6e4:	7c00      	ldrb	r0, [r0, #16]
 23ff6e6:	f7ff fabf 	bl	23fec68 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff6ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff6ee:	bd08      	pop	{r3, pc}

023ff6f0 <_ZN9USBSerial9availableEv>:
{
 23ff6f0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff6f2:	7c00      	ldrb	r0, [r0, #16]
 23ff6f4:	f7ff faaa 	bl	23fec4c <HAL_USB_USART_Available_Data>
}
 23ff6f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff6fc:	bd08      	pop	{r3, pc}

023ff6fe <_ZN9USBSerial5writeEh>:
{
 23ff6fe:	b513      	push	{r0, r1, r4, lr}
 23ff700:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff702:	7c00      	ldrb	r0, [r0, #16]
{
 23ff704:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff706:	f7ff faaf 	bl	23fec68 <HAL_USB_USART_Available_Data_For_Write>
 23ff70a:	2800      	cmp	r0, #0
 23ff70c:	9901      	ldr	r1, [sp, #4]
 23ff70e:	dc01      	bgt.n	23ff714 <_ZN9USBSerial5writeEh+0x16>
 23ff710:	7c60      	ldrb	r0, [r4, #17]
 23ff712:	b120      	cbz	r0, 23ff71e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff714:	7c20      	ldrb	r0, [r4, #16]
 23ff716:	f7ff fac3 	bl	23feca0 <HAL_USB_USART_Send_Data>
 23ff71a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff71e:	b002      	add	sp, #8
 23ff720:	bd10      	pop	{r4, pc}

023ff722 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff722:	7c00      	ldrb	r0, [r0, #16]
 23ff724:	f7ff baca 	b.w	23fecbc <HAL_USB_USART_Flush_Data>

023ff728 <_ZN9USBSerialD0Ev>:
 23ff728:	b510      	push	{r4, lr}
 23ff72a:	4604      	mov	r4, r0
 23ff72c:	2114      	movs	r1, #20
 23ff72e:	f7fe ff36 	bl	23fe59e <_ZdlPvj>
 23ff732:	4620      	mov	r0, r4
 23ff734:	bd10      	pop	{r4, pc}
	...

023ff738 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff738:	b510      	push	{r4, lr}
 23ff73a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff73e:	4604      	mov	r4, r0
 23ff740:	4608      	mov	r0, r1
 23ff742:	2100      	movs	r1, #0
 23ff744:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff748:	4b04      	ldr	r3, [pc, #16]	; (23ff75c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff74a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff74c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff74e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff750:	4611      	mov	r1, r2
  _blocking = true;
 23ff752:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff754:	f7ff fa5e 	bl	23fec14 <HAL_USB_USART_Init>
}
 23ff758:	4620      	mov	r0, r4
 23ff75a:	bd10      	pop	{r4, pc}
 23ff75c:	023ffefc 	.word	0x023ffefc

023ff760 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff760:	2200      	movs	r2, #0
 23ff762:	7c00      	ldrb	r0, [r0, #16]
 23ff764:	f7ff ba64 	b.w	23fec30 <HAL_USB_USART_Begin>

023ff768 <_Z19acquireSerialBufferv>:
{
 23ff768:	b510      	push	{r4, lr}
 23ff76a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff76c:	2214      	movs	r2, #20
 23ff76e:	2100      	movs	r1, #0
 23ff770:	f000 fa81 	bl	23ffc76 <memset>
}
 23ff774:	4620      	mov	r0, r4
 23ff776:	bd10      	pop	{r4, pc}

023ff778 <_Z16_fetch_usbserialv>:
{
 23ff778:	b510      	push	{r4, lr}
 23ff77a:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff77c:	a803      	add	r0, sp, #12
 23ff77e:	f7ff fff3 	bl	23ff768 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff782:	4c0c      	ldr	r4, [pc, #48]	; (23ff7b4 <_Z16_fetch_usbserialv+0x3c>)
 23ff784:	e8d4 1f8f 	ldab	r1, [r4]
 23ff788:	f011 0101 	ands.w	r1, r1, #1
 23ff78c:	d10f      	bne.n	23ff7ae <_Z16_fetch_usbserialv+0x36>
 23ff78e:	4620      	mov	r0, r4
 23ff790:	9101      	str	r1, [sp, #4]
 23ff792:	f7fe ff06 	bl	23fe5a2 <__cxa_guard_acquire>
 23ff796:	9901      	ldr	r1, [sp, #4]
 23ff798:	b148      	cbz	r0, 23ff7ae <_Z16_fetch_usbserialv+0x36>
 23ff79a:	aa03      	add	r2, sp, #12
 23ff79c:	4806      	ldr	r0, [pc, #24]	; (23ff7b8 <_Z16_fetch_usbserialv+0x40>)
 23ff79e:	f7ff ffcb 	bl	23ff738 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff7a2:	4620      	mov	r0, r4
 23ff7a4:	f7fe ff02 	bl	23fe5ac <__cxa_guard_release>
 23ff7a8:	4804      	ldr	r0, [pc, #16]	; (23ff7bc <_Z16_fetch_usbserialv+0x44>)
 23ff7aa:	f000 fa51 	bl	23ffc50 <atexit>
	return _usbserial;
}
 23ff7ae:	4802      	ldr	r0, [pc, #8]	; (23ff7b8 <_Z16_fetch_usbserialv+0x40>)
 23ff7b0:	b008      	add	sp, #32
 23ff7b2:	bd10      	pop	{r4, pc}
 23ff7b4:	1007aec8 	.word	0x1007aec8
 23ff7b8:	1007aecc 	.word	0x1007aecc
 23ff7bc:	023ff6bf 	.word	0x023ff6bf

023ff7c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff7c0:	2200      	movs	r2, #0
 23ff7c2:	6840      	ldr	r0, [r0, #4]
 23ff7c4:	4611      	mov	r1, r2
 23ff7c6:	f7ff bb13 	b.w	23fedf0 <network_ready>

023ff7ca <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff7ca:	2200      	movs	r2, #0
 23ff7cc:	6840      	ldr	r0, [r0, #4]
 23ff7ce:	4611      	mov	r1, r2
 23ff7d0:	f7ff bb46 	b.w	23fee60 <network_listening>

023ff7d4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff7d4:	2200      	movs	r2, #0
 23ff7d6:	6840      	ldr	r0, [r0, #4]
 23ff7d8:	4611      	mov	r1, r2
 23ff7da:	f7ff bb5d 	b.w	23fee98 <network_get_listen_timeout>

023ff7de <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff7de:	2200      	movs	r2, #0
 23ff7e0:	6840      	ldr	r0, [r0, #4]
 23ff7e2:	f7ff bb4b 	b.w	23fee7c <network_set_listen_timeout>

023ff7e6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff7e6:	2200      	movs	r2, #0
 23ff7e8:	6840      	ldr	r0, [r0, #4]
 23ff7ea:	f081 0101 	eor.w	r1, r1, #1
 23ff7ee:	f7ff bb29 	b.w	23fee44 <network_listen>

023ff7f2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff7f2:	2300      	movs	r3, #0
 23ff7f4:	6840      	ldr	r0, [r0, #4]
 23ff7f6:	461a      	mov	r2, r3
 23ff7f8:	4619      	mov	r1, r3
 23ff7fa:	f7ff bb15 	b.w	23fee28 <network_off>

023ff7fe <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff7fe:	2300      	movs	r3, #0
 23ff800:	6840      	ldr	r0, [r0, #4]
 23ff802:	461a      	mov	r2, r3
 23ff804:	4619      	mov	r1, r3
 23ff806:	f7ff bb01 	b.w	23fee0c <network_on>

023ff80a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff80a:	2200      	movs	r2, #0
 23ff80c:	6840      	ldr	r0, [r0, #4]
 23ff80e:	4611      	mov	r1, r2
 23ff810:	f7ff bad2 	b.w	23fedb8 <network_connecting>

023ff814 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff814:	2200      	movs	r2, #0
 23ff816:	2102      	movs	r1, #2
 23ff818:	6840      	ldr	r0, [r0, #4]
 23ff81a:	f7ff badb 	b.w	23fedd4 <network_disconnect>

023ff81e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff81e:	2300      	movs	r3, #0
 23ff820:	6840      	ldr	r0, [r0, #4]
 23ff822:	461a      	mov	r2, r3
 23ff824:	f7ff baba 	b.w	23fed9c <network_connect>

023ff828 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff828:	2204      	movs	r2, #4
 23ff82a:	4b02      	ldr	r3, [pc, #8]	; (23ff834 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff82c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff82e:	4a02      	ldr	r2, [pc, #8]	; (23ff838 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff830:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff832:	4770      	bx	lr
 23ff834:	1007aee0 	.word	0x1007aee0
 23ff838:	023fff2c 	.word	0x023fff2c

023ff83c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff83c:	4b01      	ldr	r3, [pc, #4]	; (23ff844 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff83e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff840:	4770      	bx	lr
 23ff842:	bf00      	nop
 23ff844:	1007ade8 	.word	0x1007ade8

023ff848 <serialEventRun>:
{
 23ff848:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff84a:	4b0f      	ldr	r3, [pc, #60]	; (23ff888 <serialEventRun+0x40>)
 23ff84c:	b143      	cbz	r3, 23ff860 <serialEventRun+0x18>
 23ff84e:	f7ff ff93 	bl	23ff778 <_Z16_fetch_usbserialv>
 23ff852:	6803      	ldr	r3, [r0, #0]
 23ff854:	691b      	ldr	r3, [r3, #16]
 23ff856:	4798      	blx	r3
 23ff858:	2800      	cmp	r0, #0
 23ff85a:	dd01      	ble.n	23ff860 <serialEventRun+0x18>
        serialEvent();
 23ff85c:	e000      	b.n	23ff860 <serialEventRun+0x18>
 23ff85e:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff860:	4b0a      	ldr	r3, [pc, #40]	; (23ff88c <serialEventRun+0x44>)
 23ff862:	b143      	cbz	r3, 23ff876 <serialEventRun+0x2e>
 23ff864:	f000 f962 	bl	23ffb2c <_Z22__fetch_global_Serial1v>
 23ff868:	6803      	ldr	r3, [r0, #0]
 23ff86a:	691b      	ldr	r3, [r3, #16]
 23ff86c:	4798      	blx	r3
 23ff86e:	2800      	cmp	r0, #0
 23ff870:	dd01      	ble.n	23ff876 <serialEventRun+0x2e>
        serialEvent1();
 23ff872:	e000      	b.n	23ff876 <serialEventRun+0x2e>
 23ff874:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff876:	4b06      	ldr	r3, [pc, #24]	; (23ff890 <serialEventRun+0x48>)
 23ff878:	b10b      	cbz	r3, 23ff87e <serialEventRun+0x36>
 23ff87a:	f000 f99d 	bl	23ffbb8 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff87e:	4b05      	ldr	r3, [pc, #20]	; (23ff894 <serialEventRun+0x4c>)
 23ff880:	b10b      	cbz	r3, 23ff886 <serialEventRun+0x3e>
 23ff882:	f000 f9cf 	bl	23ffc24 <_Z15serialEventRun3v>
}
 23ff886:	bd08      	pop	{r3, pc}
	...

023ff898 <_post_loop>:
{
 23ff898:	b508      	push	{r3, lr}
	serialEventRun();
 23ff89a:	f7ff ffd5 	bl	23ff848 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff89e:	f7ff f831 	bl	23fe904 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff8a2:	4b01      	ldr	r3, [pc, #4]	; (23ff8a8 <_post_loop+0x10>)
 23ff8a4:	6018      	str	r0, [r3, #0]
}
 23ff8a6:	bd08      	pop	{r3, pc}
 23ff8a8:	1007aef0 	.word	0x1007aef0

023ff8ac <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff8ac:	4805      	ldr	r0, [pc, #20]	; (23ff8c4 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff8ae:	4a06      	ldr	r2, [pc, #24]	; (23ff8c8 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff8b0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff8b2:	1a12      	subs	r2, r2, r0
 23ff8b4:	4905      	ldr	r1, [pc, #20]	; (23ff8cc <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff8b6:	f000 f9d1 	bl	23ffc5c <memcpy>
    __backup_sram_signature = signature;
 23ff8ba:	4b05      	ldr	r3, [pc, #20]	; (23ff8d0 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff8bc:	4a05      	ldr	r2, [pc, #20]	; (23ff8d4 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff8be:	601a      	str	r2, [r3, #0]
}
 23ff8c0:	bd08      	pop	{r3, pc}
 23ff8c2:	bf00      	nop
 23ff8c4:	1007b400 	.word	0x1007b400
 23ff8c8:	1007b404 	.word	0x1007b404
 23ff8cc:	085ff5b0 	.word	0x085ff5b0
 23ff8d0:	1007b400 	.word	0x1007b400
 23ff8d4:	9a271c1e 	.word	0x9a271c1e

023ff8d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8d8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff8da:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8dc:	461a      	mov	r2, r3
 23ff8de:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff8e2:	9300      	str	r3, [sp, #0]
 23ff8e4:	f7ff fa30 	bl	23fed48 <system_ctrl_set_result>
}
 23ff8e8:	b003      	add	sp, #12
 23ff8ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff8f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff8f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff8f2:	8843      	ldrh	r3, [r0, #2]
 23ff8f4:	2b0a      	cmp	r3, #10
 23ff8f6:	d008      	beq.n	23ff90a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff8f8:	2b50      	cmp	r3, #80	; 0x50
 23ff8fa:	d10b      	bne.n	23ff914 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff8fc:	4b09      	ldr	r3, [pc, #36]	; (23ff924 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff8fe:	681b      	ldr	r3, [r3, #0]
 23ff900:	b14b      	cbz	r3, 23ff916 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff902:	b003      	add	sp, #12
 23ff904:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff908:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff90a:	f7ff ffe5 	bl	23ff8d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff90e:	b003      	add	sp, #12
 23ff910:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff914:	2300      	movs	r3, #0
 23ff916:	461a      	mov	r2, r3
 23ff918:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff91c:	9300      	str	r3, [sp, #0]
 23ff91e:	f7ff fa13 	bl	23fed48 <system_ctrl_set_result>
}
 23ff922:	e7f4      	b.n	23ff90e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff924:	1007aeec 	.word	0x1007aeec

023ff928 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff928:	2100      	movs	r1, #0
{
 23ff92a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff92c:	4811      	ldr	r0, [pc, #68]	; (23ff974 <module_user_init_hook+0x4c>)
 23ff92e:	f7ff fb07 	bl	23fef40 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff932:	4b11      	ldr	r3, [pc, #68]	; (23ff978 <module_user_init_hook+0x50>)
 23ff934:	681a      	ldr	r2, [r3, #0]
 23ff936:	4b11      	ldr	r3, [pc, #68]	; (23ff97c <module_user_init_hook+0x54>)
 23ff938:	429a      	cmp	r2, r3
 23ff93a:	bf0c      	ite	eq
 23ff93c:	2201      	moveq	r2, #1
 23ff93e:	2200      	movne	r2, #0
 23ff940:	4b0f      	ldr	r3, [pc, #60]	; (23ff980 <module_user_init_hook+0x58>)
 23ff942:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff944:	d001      	beq.n	23ff94a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff946:	f7ff ffb1 	bl	23ff8ac <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff94a:	f7fe ffcd 	bl	23fe8e8 <HAL_RNG_GetRandomNumber>
 23ff94e:	4604      	mov	r4, r0
    srand(seed);
 23ff950:	f000 f99a 	bl	23ffc88 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff954:	4b0b      	ldr	r3, [pc, #44]	; (23ff984 <module_user_init_hook+0x5c>)
 23ff956:	b113      	cbz	r3, 23ff95e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff958:	4620      	mov	r0, r4
 23ff95a:	e000      	b.n	23ff95e <module_user_init_hook+0x36>
 23ff95c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff95e:	2100      	movs	r1, #0
 23ff960:	4808      	ldr	r0, [pc, #32]	; (23ff984 <module_user_init_hook+0x5c>)
 23ff962:	f7ff f9ff 	bl	23fed64 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff96a:	2100      	movs	r1, #0
 23ff96c:	4806      	ldr	r0, [pc, #24]	; (23ff988 <module_user_init_hook+0x60>)
 23ff96e:	f7ff b9dd 	b.w	23fed2c <system_ctrl_set_app_request_handler>
 23ff972:	bf00      	nop
 23ff974:	023ff83d 	.word	0x023ff83d
 23ff978:	1007b400 	.word	0x1007b400
 23ff97c:	9a271c1e 	.word	0x9a271c1e
 23ff980:	1007aee8 	.word	0x1007aee8
 23ff984:	00000000 	.word	0x00000000
 23ff988:	023ff8f1 	.word	0x023ff8f1

023ff98c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff98c:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff98e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff990:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff992:	d902      	bls.n	23ff99a <pinAvailable+0xe>
    return false;
 23ff994:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff996:	b003      	add	sp, #12
 23ff998:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff99a:	f1a0 030f 	sub.w	r3, r0, #15
 23ff99e:	2b02      	cmp	r3, #2
 23ff9a0:	d90b      	bls.n	23ff9ba <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff9a2:	2801      	cmp	r0, #1
 23ff9a4:	d821      	bhi.n	23ff9ea <pinAvailable+0x5e>
 23ff9a6:	f000 f86d 	bl	23ffa84 <_Z19__fetch_global_Wirev>
 23ff9aa:	2100      	movs	r1, #0
 23ff9ac:	7c00      	ldrb	r0, [r0, #16]
 23ff9ae:	f7ff f85f 	bl	23fea70 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff9b2:	f080 0001 	eor.w	r0, r0, #1
 23ff9b6:	b2c0      	uxtb	r0, r0
 23ff9b8:	e7ed      	b.n	23ff996 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff9ba:	4d11      	ldr	r5, [pc, #68]	; (23ffa00 <pinAvailable+0x74>)
 23ff9bc:	e8d5 1f8f 	ldab	r1, [r5]
 23ff9c0:	f011 0101 	ands.w	r1, r1, #1
 23ff9c4:	d10b      	bne.n	23ff9de <pinAvailable+0x52>
 23ff9c6:	4628      	mov	r0, r5
 23ff9c8:	9101      	str	r1, [sp, #4]
 23ff9ca:	f7fe fdea 	bl	23fe5a2 <__cxa_guard_acquire>
 23ff9ce:	9901      	ldr	r1, [sp, #4]
 23ff9d0:	b128      	cbz	r0, 23ff9de <pinAvailable+0x52>
 23ff9d2:	480c      	ldr	r0, [pc, #48]	; (23ffa04 <pinAvailable+0x78>)
 23ff9d4:	f7ff fdf6 	bl	23ff5c4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff9d8:	4628      	mov	r0, r5
 23ff9da:	f7fe fde7 	bl	23fe5ac <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff9de:	4b09      	ldr	r3, [pc, #36]	; (23ffa04 <pinAvailable+0x78>)
 23ff9e0:	7818      	ldrb	r0, [r3, #0]
 23ff9e2:	f7ff f899 	bl	23feb18 <hal_spi_is_enabled>
 23ff9e6:	2800      	cmp	r0, #0
 23ff9e8:	d1d4      	bne.n	23ff994 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff9ea:	3c08      	subs	r4, #8
 23ff9ec:	2c01      	cmp	r4, #1
 23ff9ee:	d805      	bhi.n	23ff9fc <pinAvailable+0x70>
 23ff9f0:	f000 f89c 	bl	23ffb2c <_Z22__fetch_global_Serial1v>
 23ff9f4:	7c00      	ldrb	r0, [r0, #16]
 23ff9f6:	f7ff f8e3 	bl	23febc0 <hal_usart_is_enabled>
 23ff9fa:	e7da      	b.n	23ff9b2 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff9fc:	2001      	movs	r0, #1
 23ff9fe:	e7ca      	b.n	23ff996 <pinAvailable+0xa>
 23ffa00:	1007ae80 	.word	0x1007ae80
 23ffa04:	1007ae84 	.word	0x1007ae84

023ffa08 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ffa08:	281b      	cmp	r0, #27
{
 23ffa0a:	b538      	push	{r3, r4, r5, lr}
 23ffa0c:	4604      	mov	r4, r0
 23ffa0e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ffa10:	d80a      	bhi.n	23ffa28 <pinMode+0x20>
 23ffa12:	29ff      	cmp	r1, #255	; 0xff
 23ffa14:	d008      	beq.n	23ffa28 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ffa16:	f7ff ffb9 	bl	23ff98c <pinAvailable>
 23ffa1a:	b128      	cbz	r0, 23ffa28 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ffa1c:	4629      	mov	r1, r5
 23ffa1e:	4620      	mov	r0, r4
}
 23ffa20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ffa24:	f7fe bf8a 	b.w	23fe93c <hal_gpio_mode>
}
 23ffa28:	bd38      	pop	{r3, r4, r5, pc}

023ffa2a <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(hal_pin_t pin)
{
 23ffa2a:	b510      	push	{r4, lr}
 23ffa2c:	4604      	mov	r4, r0
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
 23ffa2e:	f7ff ffad 	bl	23ff98c <pinAvailable>
 23ffa32:	b150      	cbz	r0, 23ffa4a <analogRead+0x20>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
 23ffa34:	2103      	movs	r1, #3
 23ffa36:	4620      	mov	r0, r4
 23ffa38:	f7fe ff72 	bl	23fe920 <hal_pin_validate_function>
 23ffa3c:	2803      	cmp	r0, #3
 23ffa3e:	d104      	bne.n	23ffa4a <analogRead+0x20>
  {
    return LOW;
  }

  return hal_adc_read(pin);
 23ffa40:	4620      	mov	r0, r4
}
 23ffa42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
 23ffa46:	f7fe bf87 	b.w	23fe958 <hal_adc_read>
}
 23ffa4a:	2000      	movs	r0, #0
 23ffa4c:	bd10      	pop	{r4, pc}

023ffa4e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa4e:	4770      	bx	lr

023ffa50 <_Z17acquireWireBufferv>:
{
 23ffa50:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ffa52:	4b0a      	ldr	r3, [pc, #40]	; (23ffa7c <_Z17acquireWireBufferv+0x2c>)
{
 23ffa54:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ffa56:	6003      	str	r3, [r0, #0]
 23ffa58:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa5a:	4909      	ldr	r1, [pc, #36]	; (23ffa80 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ffa5c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa5e:	2020      	movs	r0, #32
 23ffa60:	f000 f8f4 	bl	23ffc4c <_ZnajRKSt9nothrow_t>
	};
 23ffa64:	2520      	movs	r5, #32
 23ffa66:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa68:	4905      	ldr	r1, [pc, #20]	; (23ffa80 <_Z17acquireWireBufferv+0x30>)
 23ffa6a:	4628      	mov	r0, r5
	};
 23ffa6c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa6e:	f000 f8ed 	bl	23ffc4c <_ZnajRKSt9nothrow_t>
	};
 23ffa72:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ffa76:	4620      	mov	r0, r4
 23ffa78:	bd38      	pop	{r3, r4, r5, pc}
 23ffa7a:	bf00      	nop
 23ffa7c:	00010018 	.word	0x00010018
 23ffa80:	023fff60 	.word	0x023fff60

023ffa84 <_Z19__fetch_global_Wirev>:
{
 23ffa84:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa86:	4d0e      	ldr	r5, [pc, #56]	; (23ffac0 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ffa88:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa8a:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa8e:	f011 0401 	ands.w	r4, r1, #1
 23ffa92:	d111      	bne.n	23ffab8 <_Z19__fetch_global_Wirev+0x34>
 23ffa94:	4628      	mov	r0, r5
 23ffa96:	f7fe fd84 	bl	23fe5a2 <__cxa_guard_acquire>
 23ffa9a:	b168      	cbz	r0, 23ffab8 <_Z19__fetch_global_Wirev+0x34>
 23ffa9c:	4668      	mov	r0, sp
 23ffa9e:	f7ff ffd7 	bl	23ffa50 <_Z17acquireWireBufferv>
 23ffaa2:	466a      	mov	r2, sp
 23ffaa4:	4621      	mov	r1, r4
 23ffaa6:	4807      	ldr	r0, [pc, #28]	; (23ffac4 <_Z19__fetch_global_Wirev+0x40>)
 23ffaa8:	f7ff fae8 	bl	23ff07c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ffaac:	4628      	mov	r0, r5
 23ffaae:	f7fe fd7d 	bl	23fe5ac <__cxa_guard_release>
 23ffab2:	4805      	ldr	r0, [pc, #20]	; (23ffac8 <_Z19__fetch_global_Wirev+0x44>)
 23ffab4:	f000 f8cc 	bl	23ffc50 <atexit>
	return wire;
}
 23ffab8:	4802      	ldr	r0, [pc, #8]	; (23ffac4 <_Z19__fetch_global_Wirev+0x40>)
 23ffaba:	b007      	add	sp, #28
 23ffabc:	bd30      	pop	{r4, r5, pc}
 23ffabe:	bf00      	nop
 23ffac0:	1007aef4 	.word	0x1007aef4
 23ffac4:	1007aef8 	.word	0x1007aef8
 23ffac8:	023ffa4f 	.word	0x023ffa4f

023ffacc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffacc:	4770      	bx	lr
	...

023ffad0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffad0:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ffad2:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffad4:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ffad6:	462a      	mov	r2, r5
 23ffad8:	2100      	movs	r1, #0
 23ffada:	f000 f8cc 	bl	23ffc76 <memset>
 23ffade:	8025      	strh	r5, [r4, #0]
 23ffae0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffae2:	4907      	ldr	r1, [pc, #28]	; (23ffb00 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ffae4:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ffae6:	8125      	strh	r5, [r4, #8]
 23ffae8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffaea:	f000 f8af 	bl	23ffc4c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffaee:	4904      	ldr	r1, [pc, #16]	; (23ffb00 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ffaf0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffaf2:	4628      	mov	r0, r5
 23ffaf4:	f000 f8aa 	bl	23ffc4c <_ZnajRKSt9nothrow_t>
    };
 23ffaf8:	60e0      	str	r0, [r4, #12]
}
 23ffafa:	4620      	mov	r0, r4
 23ffafc:	bd38      	pop	{r3, r4, r5, pc}
 23ffafe:	bf00      	nop
 23ffb00:	023fff60 	.word	0x023fff60

023ffb04 <__tcf_2>:
 23ffb04:	4770      	bx	lr

023ffb06 <__tcf_1>:
 23ffb06:	4770      	bx	lr

023ffb08 <_Z20acquireSerial1Bufferv>:
{
 23ffb08:	b510      	push	{r4, lr}
 23ffb0a:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ffb0c:	f7ff ffe0 	bl	23ffad0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ffb10:	4620      	mov	r0, r4
 23ffb12:	bd10      	pop	{r4, pc}

023ffb14 <_Z20acquireSerial2Bufferv>:
 23ffb14:	b510      	push	{r4, lr}
 23ffb16:	4604      	mov	r4, r0
 23ffb18:	f7ff ffda 	bl	23ffad0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb1c:	4620      	mov	r0, r4
 23ffb1e:	bd10      	pop	{r4, pc}

023ffb20 <_Z20acquireSerial3Bufferv>:
 23ffb20:	b510      	push	{r4, lr}
 23ffb22:	4604      	mov	r4, r0
 23ffb24:	f7ff ffd4 	bl	23ffad0 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb28:	4620      	mov	r0, r4
 23ffb2a:	bd10      	pop	{r4, pc}

023ffb2c <_Z22__fetch_global_Serial1v>:
{
 23ffb2c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb2e:	4d0e      	ldr	r5, [pc, #56]	; (23ffb68 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffb30:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb32:	e8d5 1f8f 	ldab	r1, [r5]
 23ffb36:	f011 0401 	ands.w	r4, r1, #1
 23ffb3a:	d111      	bne.n	23ffb60 <_Z22__fetch_global_Serial1v+0x34>
 23ffb3c:	4628      	mov	r0, r5
 23ffb3e:	f7fe fd30 	bl	23fe5a2 <__cxa_guard_acquire>
 23ffb42:	b168      	cbz	r0, 23ffb60 <_Z22__fetch_global_Serial1v+0x34>
 23ffb44:	a801      	add	r0, sp, #4
 23ffb46:	f7ff ffdf 	bl	23ffb08 <_Z20acquireSerial1Bufferv>
 23ffb4a:	4621      	mov	r1, r4
 23ffb4c:	aa01      	add	r2, sp, #4
 23ffb4e:	4807      	ldr	r0, [pc, #28]	; (23ffb6c <_Z22__fetch_global_Serial1v+0x40>)
 23ffb50:	f7ff fd9c 	bl	23ff68c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb54:	4628      	mov	r0, r5
 23ffb56:	f7fe fd29 	bl	23fe5ac <__cxa_guard_release>
 23ffb5a:	4805      	ldr	r0, [pc, #20]	; (23ffb70 <_Z22__fetch_global_Serial1v+0x44>)
 23ffb5c:	f000 f878 	bl	23ffc50 <atexit>
    return serial1;
}
 23ffb60:	4802      	ldr	r0, [pc, #8]	; (23ffb6c <_Z22__fetch_global_Serial1v+0x40>)
 23ffb62:	b007      	add	sp, #28
 23ffb64:	bd30      	pop	{r4, r5, pc}
 23ffb66:	bf00      	nop
 23ffb68:	1007af0c 	.word	0x1007af0c
 23ffb6c:	1007af18 	.word	0x1007af18
 23ffb70:	023ffacd 	.word	0x023ffacd

023ffb74 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffb74:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb76:	4c0d      	ldr	r4, [pc, #52]	; (23ffbac <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffb78:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb7a:	e8d4 3f8f 	ldab	r3, [r4]
 23ffb7e:	07db      	lsls	r3, r3, #31
 23ffb80:	d411      	bmi.n	23ffba6 <_Z22__fetch_global_Serial2v+0x32>
 23ffb82:	4620      	mov	r0, r4
 23ffb84:	f7fe fd0d 	bl	23fe5a2 <__cxa_guard_acquire>
 23ffb88:	b168      	cbz	r0, 23ffba6 <_Z22__fetch_global_Serial2v+0x32>
 23ffb8a:	a801      	add	r0, sp, #4
 23ffb8c:	f7ff ffc2 	bl	23ffb14 <_Z20acquireSerial2Bufferv>
 23ffb90:	2101      	movs	r1, #1
 23ffb92:	aa01      	add	r2, sp, #4
 23ffb94:	4806      	ldr	r0, [pc, #24]	; (23ffbb0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb96:	f7ff fd79 	bl	23ff68c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb9a:	4620      	mov	r0, r4
 23ffb9c:	f7fe fd06 	bl	23fe5ac <__cxa_guard_release>
 23ffba0:	4804      	ldr	r0, [pc, #16]	; (23ffbb4 <_Z22__fetch_global_Serial2v+0x40>)
 23ffba2:	f000 f855 	bl	23ffc50 <atexit>
	return serial2;
}
 23ffba6:	4802      	ldr	r0, [pc, #8]	; (23ffbb0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffba8:	b006      	add	sp, #24
 23ffbaa:	bd10      	pop	{r4, pc}
 23ffbac:	1007af10 	.word	0x1007af10
 23ffbb0:	1007af2c 	.word	0x1007af2c
 23ffbb4:	023ffb07 	.word	0x023ffb07

023ffbb8 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffbb8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffbba:	f7ff ffdb 	bl	23ffb74 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffbbe:	4b07      	ldr	r3, [pc, #28]	; (23ffbdc <_Z15serialEventRun2v+0x24>)
 23ffbc0:	4604      	mov	r4, r0
 23ffbc2:	b153      	cbz	r3, 23ffbda <_Z15serialEventRun2v+0x22>
 23ffbc4:	f7ff fd76 	bl	23ff6b4 <_ZN11USARTSerial9isEnabledEv>
 23ffbc8:	b138      	cbz	r0, 23ffbda <_Z15serialEventRun2v+0x22>
 23ffbca:	6823      	ldr	r3, [r4, #0]
 23ffbcc:	4620      	mov	r0, r4
 23ffbce:	691b      	ldr	r3, [r3, #16]
 23ffbd0:	4798      	blx	r3
 23ffbd2:	2800      	cmp	r0, #0
 23ffbd4:	dd01      	ble.n	23ffbda <_Z15serialEventRun2v+0x22>
        handler();
 23ffbd6:	e000      	b.n	23ffbda <_Z15serialEventRun2v+0x22>
 23ffbd8:	bf00      	nop
}
 23ffbda:	bd10      	pop	{r4, pc}
 23ffbdc:	00000000 	.word	0x00000000

023ffbe0 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffbe0:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffbe2:	4c0d      	ldr	r4, [pc, #52]	; (23ffc18 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffbe4:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffbe6:	e8d4 3f8f 	ldab	r3, [r4]
 23ffbea:	07db      	lsls	r3, r3, #31
 23ffbec:	d411      	bmi.n	23ffc12 <_Z22__fetch_global_Serial3v+0x32>
 23ffbee:	4620      	mov	r0, r4
 23ffbf0:	f7fe fcd7 	bl	23fe5a2 <__cxa_guard_acquire>
 23ffbf4:	b168      	cbz	r0, 23ffc12 <_Z22__fetch_global_Serial3v+0x32>
 23ffbf6:	a801      	add	r0, sp, #4
 23ffbf8:	f7ff ff92 	bl	23ffb20 <_Z20acquireSerial3Bufferv>
 23ffbfc:	2102      	movs	r1, #2
 23ffbfe:	aa01      	add	r2, sp, #4
 23ffc00:	4806      	ldr	r0, [pc, #24]	; (23ffc1c <_Z22__fetch_global_Serial3v+0x3c>)
 23ffc02:	f7ff fd43 	bl	23ff68c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffc06:	4620      	mov	r0, r4
 23ffc08:	f7fe fcd0 	bl	23fe5ac <__cxa_guard_release>
 23ffc0c:	4804      	ldr	r0, [pc, #16]	; (23ffc20 <_Z22__fetch_global_Serial3v+0x40>)
 23ffc0e:	f000 f81f 	bl	23ffc50 <atexit>
	return serial3;
}
 23ffc12:	4802      	ldr	r0, [pc, #8]	; (23ffc1c <_Z22__fetch_global_Serial3v+0x3c>)
 23ffc14:	b006      	add	sp, #24
 23ffc16:	bd10      	pop	{r4, pc}
 23ffc18:	1007af14 	.word	0x1007af14
 23ffc1c:	1007af40 	.word	0x1007af40
 23ffc20:	023ffb05 	.word	0x023ffb05

023ffc24 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffc24:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffc26:	f7ff ffdb 	bl	23ffbe0 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffc2a:	4b07      	ldr	r3, [pc, #28]	; (23ffc48 <_Z15serialEventRun3v+0x24>)
 23ffc2c:	4604      	mov	r4, r0
 23ffc2e:	b153      	cbz	r3, 23ffc46 <_Z15serialEventRun3v+0x22>
 23ffc30:	f7ff fd40 	bl	23ff6b4 <_ZN11USARTSerial9isEnabledEv>
 23ffc34:	b138      	cbz	r0, 23ffc46 <_Z15serialEventRun3v+0x22>
 23ffc36:	6823      	ldr	r3, [r4, #0]
 23ffc38:	4620      	mov	r0, r4
 23ffc3a:	691b      	ldr	r3, [r3, #16]
 23ffc3c:	4798      	blx	r3
 23ffc3e:	2800      	cmp	r0, #0
 23ffc40:	dd01      	ble.n	23ffc46 <_Z15serialEventRun3v+0x22>
        handler();
 23ffc42:	e000      	b.n	23ffc46 <_Z15serialEventRun3v+0x22>
 23ffc44:	bf00      	nop
}
 23ffc46:	bd10      	pop	{r4, pc}
 23ffc48:	00000000 	.word	0x00000000

023ffc4c <_ZnajRKSt9nothrow_t>:
 23ffc4c:	f7fe bca5 	b.w	23fe59a <_Znaj>

023ffc50 <atexit>:
 23ffc50:	2300      	movs	r3, #0
 23ffc52:	4601      	mov	r1, r0
 23ffc54:	461a      	mov	r2, r3
 23ffc56:	4618      	mov	r0, r3
 23ffc58:	f000 b844 	b.w	23ffce4 <__register_exitproc>

023ffc5c <memcpy>:
 23ffc5c:	440a      	add	r2, r1
 23ffc5e:	1e43      	subs	r3, r0, #1
 23ffc60:	4291      	cmp	r1, r2
 23ffc62:	d100      	bne.n	23ffc66 <memcpy+0xa>
 23ffc64:	4770      	bx	lr
 23ffc66:	b510      	push	{r4, lr}
 23ffc68:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffc6c:	4291      	cmp	r1, r2
 23ffc6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffc72:	d1f9      	bne.n	23ffc68 <memcpy+0xc>
 23ffc74:	bd10      	pop	{r4, pc}

023ffc76 <memset>:
 23ffc76:	4402      	add	r2, r0
 23ffc78:	4603      	mov	r3, r0
 23ffc7a:	4293      	cmp	r3, r2
 23ffc7c:	d100      	bne.n	23ffc80 <memset+0xa>
 23ffc7e:	4770      	bx	lr
 23ffc80:	f803 1b01 	strb.w	r1, [r3], #1
 23ffc84:	e7f9      	b.n	23ffc7a <memset+0x4>
	...

023ffc88 <srand>:
 23ffc88:	b538      	push	{r3, r4, r5, lr}
 23ffc8a:	4b10      	ldr	r3, [pc, #64]	; (23ffccc <srand+0x44>)
 23ffc8c:	4604      	mov	r4, r0
 23ffc8e:	681d      	ldr	r5, [r3, #0]
 23ffc90:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffc92:	b9b3      	cbnz	r3, 23ffcc2 <srand+0x3a>
 23ffc94:	2018      	movs	r0, #24
 23ffc96:	f7ff f929 	bl	23feeec <malloc>
 23ffc9a:	4602      	mov	r2, r0
 23ffc9c:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffc9e:	b920      	cbnz	r0, 23ffcaa <srand+0x22>
 23ffca0:	4b0b      	ldr	r3, [pc, #44]	; (23ffcd0 <srand+0x48>)
 23ffca2:	2142      	movs	r1, #66	; 0x42
 23ffca4:	480b      	ldr	r0, [pc, #44]	; (23ffcd4 <srand+0x4c>)
 23ffca6:	f7ff f93d 	bl	23fef24 <__assert_func>
 23ffcaa:	490b      	ldr	r1, [pc, #44]	; (23ffcd8 <srand+0x50>)
 23ffcac:	4b0b      	ldr	r3, [pc, #44]	; (23ffcdc <srand+0x54>)
 23ffcae:	e9c0 1300 	strd	r1, r3, [r0]
 23ffcb2:	4b0b      	ldr	r3, [pc, #44]	; (23ffce0 <srand+0x58>)
 23ffcb4:	2100      	movs	r1, #0
 23ffcb6:	6083      	str	r3, [r0, #8]
 23ffcb8:	230b      	movs	r3, #11
 23ffcba:	8183      	strh	r3, [r0, #12]
 23ffcbc:	2001      	movs	r0, #1
 23ffcbe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffcc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffcc4:	2200      	movs	r2, #0
 23ffcc6:	611c      	str	r4, [r3, #16]
 23ffcc8:	615a      	str	r2, [r3, #20]
 23ffcca:	bd38      	pop	{r3, r4, r5, pc}
 23ffccc:	1007ade8 	.word	0x1007ade8
 23ffcd0:	023fff61 	.word	0x023fff61
 23ffcd4:	023fff78 	.word	0x023fff78
 23ffcd8:	abcd330e 	.word	0xabcd330e
 23ffcdc:	e66d1234 	.word	0xe66d1234
 23ffce0:	0005deec 	.word	0x0005deec

023ffce4 <__register_exitproc>:
 23ffce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffce8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffda8 <__register_exitproc+0xc4>
 23ffcec:	4606      	mov	r6, r0
 23ffcee:	461f      	mov	r7, r3
 23ffcf0:	460d      	mov	r5, r1
 23ffcf2:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcf6:	4691      	mov	r9, r2
 23ffcf8:	f000 f858 	bl	23ffdac <__retarget_lock_acquire_recursive>
 23ffcfc:	4b26      	ldr	r3, [pc, #152]	; (23ffd98 <__register_exitproc+0xb4>)
 23ffcfe:	681c      	ldr	r4, [r3, #0]
 23ffd00:	b934      	cbnz	r4, 23ffd10 <__register_exitproc+0x2c>
 23ffd02:	4c26      	ldr	r4, [pc, #152]	; (23ffd9c <__register_exitproc+0xb8>)
 23ffd04:	601c      	str	r4, [r3, #0]
 23ffd06:	4b26      	ldr	r3, [pc, #152]	; (23ffda0 <__register_exitproc+0xbc>)
 23ffd08:	b113      	cbz	r3, 23ffd10 <__register_exitproc+0x2c>
 23ffd0a:	681b      	ldr	r3, [r3, #0]
 23ffd0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffd10:	6863      	ldr	r3, [r4, #4]
 23ffd12:	2b1f      	cmp	r3, #31
 23ffd14:	dd07      	ble.n	23ffd26 <__register_exitproc+0x42>
 23ffd16:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd1a:	f000 f849 	bl	23ffdb0 <__retarget_lock_release_recursive>
 23ffd1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffd26:	b35e      	cbz	r6, 23ffd80 <__register_exitproc+0x9c>
 23ffd28:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffd2c:	b988      	cbnz	r0, 23ffd52 <__register_exitproc+0x6e>
 23ffd2e:	4b1d      	ldr	r3, [pc, #116]	; (23ffda4 <__register_exitproc+0xc0>)
 23ffd30:	b923      	cbnz	r3, 23ffd3c <__register_exitproc+0x58>
 23ffd32:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd36:	f000 f83a 	bl	23ffdae <__retarget_lock_release>
 23ffd3a:	e7f0      	b.n	23ffd1e <__register_exitproc+0x3a>
 23ffd3c:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffd40:	f7ff f8d4 	bl	23feeec <malloc>
 23ffd44:	2800      	cmp	r0, #0
 23ffd46:	d0f4      	beq.n	23ffd32 <__register_exitproc+0x4e>
 23ffd48:	2300      	movs	r3, #0
 23ffd4a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffd4e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffd52:	6863      	ldr	r3, [r4, #4]
 23ffd54:	2201      	movs	r2, #1
 23ffd56:	2e02      	cmp	r6, #2
 23ffd58:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffd5c:	fa02 f203 	lsl.w	r2, r2, r3
 23ffd60:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffd64:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffd68:	ea43 0302 	orr.w	r3, r3, r2
 23ffd6c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffd70:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffd74:	bf02      	ittt	eq
 23ffd76:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffd7a:	4313      	orreq	r3, r2
 23ffd7c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffd80:	6863      	ldr	r3, [r4, #4]
 23ffd82:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd86:	1c5a      	adds	r2, r3, #1
 23ffd88:	3302      	adds	r3, #2
 23ffd8a:	6062      	str	r2, [r4, #4]
 23ffd8c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffd90:	f000 f80e 	bl	23ffdb0 <__retarget_lock_release_recursive>
 23ffd94:	2000      	movs	r0, #0
 23ffd96:	e7c4      	b.n	23ffd22 <__register_exitproc+0x3e>
 23ffd98:	1007afe0 	.word	0x1007afe0
 23ffd9c:	1007af54 	.word	0x1007af54
 23ffda0:	00000000 	.word	0x00000000
 23ffda4:	023feeed 	.word	0x023feeed
 23ffda8:	1007ae4c 	.word	0x1007ae4c

023ffdac <__retarget_lock_acquire_recursive>:
 23ffdac:	4770      	bx	lr

023ffdae <__retarget_lock_release>:
 23ffdae:	4770      	bx	lr

023ffdb0 <__retarget_lock_release_recursive>:
 23ffdb0:	4770      	bx	lr
	...

023ffdb4 <dynalib_user>:
 23ffdb4:	e561 023f e589 023f e58d 023f 0000 0000     a.?...?...?.....
 23ffdc4:	7543 7272 6e65 2074 6176 756c 2065 203d     Current value = 
 23ffdd4:	7600 6c6f 6174 6567 3d20 0020               .voltage = .

023ffde0 <_ZTVN5spark13EthernetClassE>:
	...
 23ffde8:	f007 023f effd 023f eff3 023f efe9 023f     ..?...?...?...?.
 23ffdf8:	efdd 023f efd1 023f f21d 023f f225 023f     ..?...?...?.%.?.
 23ffe08:	efc5 023f efbd 023f efb3 023f efa9 023f     ..?...?...?...?.
 23ffe18:	f255 023f                                   U.?.

023ffe1c <_ZTV7TwoWire>:
	...
 23ffe24:	f025 023f f06f 023f f047 023f f027 023f     %.?.o.?.G.?.'.?.
 23ffe34:	f04f 023f f057 023f f05f 023f f067 023f     O.?.W.?._.?.g.?.

023ffe44 <_ZTV9IPAddress>:
	...
 23ffe4c:	f0ed 023f f0dd 023f f0df 023f 7061 0070     ..?...?...?.app.

023ffe5c <_ZTVN5spark12NetworkClassE>:
	...
 23ffe64:	f1dd 023f f1e7 023f f1f1 023f f1fb 023f     ..?...?...?...?.
 23ffe74:	f205 023f f211 023f f21d 023f f225 023f     ..?...?...?.%.?.
 23ffe84:	f22d 023f f239 023f f241 023f f24b 023f     -.?.9.?.A.?.K.?.
 23ffe94:	f255 023f 616e 006e 6e69 0066 766f 0066     U.?.nan.inf.ovf.
 23ffea4:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
 23ffeb4:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

023ffec4 <_ZTV11USARTSerial>:
	...
 23ffecc:	f611 023f f67d 023f f655 023f f341 023f     ..?.}.?.U.?.A.?.
 23ffedc:	f625 023f f641 023f f633 023f f64f 023f     %.?.A.?.3.?.O.?.
 23ffeec:	f613 023f f617 023f                         ..?...?.

023ffef4 <_ZTV9USBSerial>:
	...
 23ffefc:	f6c1 023f f729 023f f6ff 023f f341 023f     ..?.).?...?.A.?.
 23fff0c:	f6f1 023f f6c3 023f f6d3 023f f723 023f     ..?...?...?.#.?.
 23fff1c:	f6e3 023f f6bb 023f                         ..?...?.

023fff24 <_ZTVN5spark9WiFiClassE>:
	...
 23fff2c:	f81f 023f f815 023f f80b 023f f7c1 023f     ..?...?...?...?.
 23fff3c:	f7ff 023f f7f3 023f f21d 023f f225 023f     ..?...?...?.%.?.
 23fff4c:	f7e7 023f f7df 023f f7d5 023f f7cb 023f     ..?...?...?...?.
 23fff5c:	f255 023f                                   U.?.

023fff60 <_ZSt7nothrow>:
 23fff60:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff70:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff80:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff90:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd1 <link_const_data_end>:
 23fffd1:	00          	.byte	0x00
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fe67d 	.word	0x023fe67d
 23fffd8:	023fef65 	.word	0x023fef65
 23fffdc:	023ff011 	.word	0x023ff011
 23fffe0:	023ff1cd 	.word	0x023ff1cd
 23fffe4:	023ff32d 	.word	0x023ff32d
 23fffe8:	023ff5b9 	.word	0x023ff5b9
 23fffec:	023ff5d9 	.word	0x023ff5d9
 23ffff0:	023ff5fd 	.word	0x023ff5fd
 23ffff4:	023ff829 	.word	0x023ff829
