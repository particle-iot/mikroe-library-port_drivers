
/Users/Erik-Home/Documents/GitHub/mikroe_port/mikroe_port/target/5.3.0/p2/mikroe_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fc000  085fc000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fc018  085fc018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fca68  085fc088  0000ca68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   0000358c  023fca70  085fc090  0000ca70  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007adc8  085ff61c  0001adc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a8  1007ae40  1007ae40  0002ae40  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff694  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000920  085ff698  085ff698  0001f698  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f698  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   0013fc09  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00014ea8  00000000  00000000  0015fc09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000396ff  00000000  00000000  00174ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002a50  00000000  00000000  001ae1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000acc0  00000000  00000000  001b0c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000291ae  00000000  00000000  001bb8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000469ab  00000000  00000000  001e4a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ca5d9  00000000  00000000  0022b419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007a54  00000000  00000000  002f59f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fc018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc018:	480e      	ldr	r0, [pc, #56]	; (85fc054 <module_user_pre_init+0x3c>)
 85fc01a:	490f      	ldr	r1, [pc, #60]	; (85fc058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fc01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc01e:	4288      	cmp	r0, r1
 85fc020:	d005      	beq.n	85fc02e <module_user_pre_init+0x16>
 85fc022:	4a0e      	ldr	r2, [pc, #56]	; (85fc05c <module_user_pre_init+0x44>)
 85fc024:	4282      	cmp	r2, r0
 85fc026:	d002      	beq.n	85fc02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fc028:	4b0d      	ldr	r3, [pc, #52]	; (85fc060 <module_user_pre_init+0x48>)
 85fc02a:	1a12      	subs	r2, r2, r0
 85fc02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fc02e:	480d      	ldr	r0, [pc, #52]	; (85fc064 <module_user_pre_init+0x4c>)
 85fc030:	4a0d      	ldr	r2, [pc, #52]	; (85fc068 <module_user_pre_init+0x50>)
 85fc032:	2100      	movs	r1, #0
 85fc034:	4b0d      	ldr	r3, [pc, #52]	; (85fc06c <module_user_pre_init+0x54>)
 85fc036:	1a12      	subs	r2, r2, r0
 85fc038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fc03a:	480d      	ldr	r0, [pc, #52]	; (85fc070 <module_user_pre_init+0x58>)
 85fc03c:	490d      	ldr	r1, [pc, #52]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc03e:	4288      	cmp	r0, r1
 85fc040:	d005      	beq.n	85fc04e <module_user_pre_init+0x36>
 85fc042:	4a0d      	ldr	r2, [pc, #52]	; (85fc078 <module_user_pre_init+0x60>)
 85fc044:	4282      	cmp	r2, r0
 85fc046:	d002      	beq.n	85fc04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fc048:	4b05      	ldr	r3, [pc, #20]	; (85fc060 <module_user_pre_init+0x48>)
 85fc04a:	1a12      	subs	r2, r2, r0
 85fc04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fc04e:	4801      	ldr	r0, [pc, #4]	; (85fc054 <module_user_pre_init+0x3c>)
 85fc050:	bd08      	pop	{r3, pc}
 85fc052:	bf00      	nop
 85fc054:	1007adc8 	.word	0x1007adc8
 85fc058:	085ff61c 	.word	0x085ff61c
 85fc05c:	1007ae40 	.word	0x1007ae40
 85fc060:	10110d2d 	.word	0x10110d2d
 85fc064:	1007ae40 	.word	0x1007ae40
 85fc068:	1007afe8 	.word	0x1007afe8
 85fc06c:	10110ea1 	.word	0x10110ea1
 85fc070:	023fca68 	.word	0x023fca68
 85fc074:	085fc088 	.word	0x085fc088
 85fc078:	023ffffc 	.word	0x023ffffc

085fc07c <dynalib_preinit>:
 85fc07c:	085fc019 00000000                       .._.....

Disassembly of section .psram_text:

023fca70 <__aeabi_drsub>:
 23fca70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fca74:	e002      	b.n	23fca7c <__adddf3>
 23fca76:	bf00      	nop

023fca78 <__aeabi_dsub>:
 23fca78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fca7c <__adddf3>:
 23fca7c:	b530      	push	{r4, r5, lr}
 23fca7e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fca82:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fca86:	ea94 0f05 	teq	r4, r5
 23fca8a:	bf08      	it	eq
 23fca8c:	ea90 0f02 	teqeq	r0, r2
 23fca90:	bf1f      	itttt	ne
 23fca92:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fca96:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fca9a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fca9e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fcaa2:	f000 80e2 	beq.w	23fcc6a <__adddf3+0x1ee>
 23fcaa6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fcaaa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fcaae:	bfb8      	it	lt
 23fcab0:	426d      	neglt	r5, r5
 23fcab2:	dd0c      	ble.n	23fcace <__adddf3+0x52>
 23fcab4:	442c      	add	r4, r5
 23fcab6:	ea80 0202 	eor.w	r2, r0, r2
 23fcaba:	ea81 0303 	eor.w	r3, r1, r3
 23fcabe:	ea82 0000 	eor.w	r0, r2, r0
 23fcac2:	ea83 0101 	eor.w	r1, r3, r1
 23fcac6:	ea80 0202 	eor.w	r2, r0, r2
 23fcaca:	ea81 0303 	eor.w	r3, r1, r3
 23fcace:	2d36      	cmp	r5, #54	; 0x36
 23fcad0:	bf88      	it	hi
 23fcad2:	bd30      	pophi	{r4, r5, pc}
 23fcad4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fcad8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fcadc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fcae0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fcae4:	d002      	beq.n	23fcaec <__adddf3+0x70>
 23fcae6:	4240      	negs	r0, r0
 23fcae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fcaec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fcaf0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fcaf4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fcaf8:	d002      	beq.n	23fcb00 <__adddf3+0x84>
 23fcafa:	4252      	negs	r2, r2
 23fcafc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fcb00:	ea94 0f05 	teq	r4, r5
 23fcb04:	f000 80a7 	beq.w	23fcc56 <__adddf3+0x1da>
 23fcb08:	f1a4 0401 	sub.w	r4, r4, #1
 23fcb0c:	f1d5 0e20 	rsbs	lr, r5, #32
 23fcb10:	db0d      	blt.n	23fcb2e <__adddf3+0xb2>
 23fcb12:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fcb16:	fa22 f205 	lsr.w	r2, r2, r5
 23fcb1a:	1880      	adds	r0, r0, r2
 23fcb1c:	f141 0100 	adc.w	r1, r1, #0
 23fcb20:	fa03 f20e 	lsl.w	r2, r3, lr
 23fcb24:	1880      	adds	r0, r0, r2
 23fcb26:	fa43 f305 	asr.w	r3, r3, r5
 23fcb2a:	4159      	adcs	r1, r3
 23fcb2c:	e00e      	b.n	23fcb4c <__adddf3+0xd0>
 23fcb2e:	f1a5 0520 	sub.w	r5, r5, #32
 23fcb32:	f10e 0e20 	add.w	lr, lr, #32
 23fcb36:	2a01      	cmp	r2, #1
 23fcb38:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fcb3c:	bf28      	it	cs
 23fcb3e:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fcb42:	fa43 f305 	asr.w	r3, r3, r5
 23fcb46:	18c0      	adds	r0, r0, r3
 23fcb48:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fcb4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fcb50:	d507      	bpl.n	23fcb62 <__adddf3+0xe6>
 23fcb52:	f04f 0e00 	mov.w	lr, #0
 23fcb56:	f1dc 0c00 	rsbs	ip, ip, #0
 23fcb5a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fcb5e:	eb6e 0101 	sbc.w	r1, lr, r1
 23fcb62:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fcb66:	d31b      	bcc.n	23fcba0 <__adddf3+0x124>
 23fcb68:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fcb6c:	d30c      	bcc.n	23fcb88 <__adddf3+0x10c>
 23fcb6e:	0849      	lsrs	r1, r1, #1
 23fcb70:	ea5f 0030 	movs.w	r0, r0, rrx
 23fcb74:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fcb78:	f104 0401 	add.w	r4, r4, #1
 23fcb7c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fcb80:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fcb84:	f080 809a 	bcs.w	23fccbc <__adddf3+0x240>
 23fcb88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fcb8c:	bf08      	it	eq
 23fcb8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fcb92:	f150 0000 	adcs.w	r0, r0, #0
 23fcb96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fcb9a:	ea41 0105 	orr.w	r1, r1, r5
 23fcb9e:	bd30      	pop	{r4, r5, pc}
 23fcba0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fcba4:	4140      	adcs	r0, r0
 23fcba6:	eb41 0101 	adc.w	r1, r1, r1
 23fcbaa:	3c01      	subs	r4, #1
 23fcbac:	bf28      	it	cs
 23fcbae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fcbb2:	d2e9      	bcs.n	23fcb88 <__adddf3+0x10c>
 23fcbb4:	f091 0f00 	teq	r1, #0
 23fcbb8:	bf04      	itt	eq
 23fcbba:	4601      	moveq	r1, r0
 23fcbbc:	2000      	moveq	r0, #0
 23fcbbe:	fab1 f381 	clz	r3, r1
 23fcbc2:	bf08      	it	eq
 23fcbc4:	3320      	addeq	r3, #32
 23fcbc6:	f1a3 030b 	sub.w	r3, r3, #11
 23fcbca:	f1b3 0220 	subs.w	r2, r3, #32
 23fcbce:	da0c      	bge.n	23fcbea <__adddf3+0x16e>
 23fcbd0:	320c      	adds	r2, #12
 23fcbd2:	dd08      	ble.n	23fcbe6 <__adddf3+0x16a>
 23fcbd4:	f102 0c14 	add.w	ip, r2, #20
 23fcbd8:	f1c2 020c 	rsb	r2, r2, #12
 23fcbdc:	fa01 f00c 	lsl.w	r0, r1, ip
 23fcbe0:	fa21 f102 	lsr.w	r1, r1, r2
 23fcbe4:	e00c      	b.n	23fcc00 <__adddf3+0x184>
 23fcbe6:	f102 0214 	add.w	r2, r2, #20
 23fcbea:	bfd8      	it	le
 23fcbec:	f1c2 0c20 	rsble	ip, r2, #32
 23fcbf0:	fa01 f102 	lsl.w	r1, r1, r2
 23fcbf4:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fcbf8:	bfdc      	itt	le
 23fcbfa:	ea41 010c 	orrle.w	r1, r1, ip
 23fcbfe:	4090      	lslle	r0, r2
 23fcc00:	1ae4      	subs	r4, r4, r3
 23fcc02:	bfa2      	ittt	ge
 23fcc04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fcc08:	4329      	orrge	r1, r5
 23fcc0a:	bd30      	popge	{r4, r5, pc}
 23fcc0c:	ea6f 0404 	mvn.w	r4, r4
 23fcc10:	3c1f      	subs	r4, #31
 23fcc12:	da1c      	bge.n	23fcc4e <__adddf3+0x1d2>
 23fcc14:	340c      	adds	r4, #12
 23fcc16:	dc0e      	bgt.n	23fcc36 <__adddf3+0x1ba>
 23fcc18:	f104 0414 	add.w	r4, r4, #20
 23fcc1c:	f1c4 0220 	rsb	r2, r4, #32
 23fcc20:	fa20 f004 	lsr.w	r0, r0, r4
 23fcc24:	fa01 f302 	lsl.w	r3, r1, r2
 23fcc28:	ea40 0003 	orr.w	r0, r0, r3
 23fcc2c:	fa21 f304 	lsr.w	r3, r1, r4
 23fcc30:	ea45 0103 	orr.w	r1, r5, r3
 23fcc34:	bd30      	pop	{r4, r5, pc}
 23fcc36:	f1c4 040c 	rsb	r4, r4, #12
 23fcc3a:	f1c4 0220 	rsb	r2, r4, #32
 23fcc3e:	fa20 f002 	lsr.w	r0, r0, r2
 23fcc42:	fa01 f304 	lsl.w	r3, r1, r4
 23fcc46:	ea40 0003 	orr.w	r0, r0, r3
 23fcc4a:	4629      	mov	r1, r5
 23fcc4c:	bd30      	pop	{r4, r5, pc}
 23fcc4e:	fa21 f004 	lsr.w	r0, r1, r4
 23fcc52:	4629      	mov	r1, r5
 23fcc54:	bd30      	pop	{r4, r5, pc}
 23fcc56:	f094 0f00 	teq	r4, #0
 23fcc5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fcc5e:	bf06      	itte	eq
 23fcc60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fcc64:	3401      	addeq	r4, #1
 23fcc66:	3d01      	subne	r5, #1
 23fcc68:	e74e      	b.n	23fcb08 <__adddf3+0x8c>
 23fcc6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fcc6e:	bf18      	it	ne
 23fcc70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fcc74:	d029      	beq.n	23fccca <__adddf3+0x24e>
 23fcc76:	ea94 0f05 	teq	r4, r5
 23fcc7a:	bf08      	it	eq
 23fcc7c:	ea90 0f02 	teqeq	r0, r2
 23fcc80:	d005      	beq.n	23fcc8e <__adddf3+0x212>
 23fcc82:	ea54 0c00 	orrs.w	ip, r4, r0
 23fcc86:	bf04      	itt	eq
 23fcc88:	4619      	moveq	r1, r3
 23fcc8a:	4610      	moveq	r0, r2
 23fcc8c:	bd30      	pop	{r4, r5, pc}
 23fcc8e:	ea91 0f03 	teq	r1, r3
 23fcc92:	bf1e      	ittt	ne
 23fcc94:	2100      	movne	r1, #0
 23fcc96:	2000      	movne	r0, #0
 23fcc98:	bd30      	popne	{r4, r5, pc}
 23fcc9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fcc9e:	d105      	bne.n	23fccac <__adddf3+0x230>
 23fcca0:	0040      	lsls	r0, r0, #1
 23fcca2:	4149      	adcs	r1, r1
 23fcca4:	bf28      	it	cs
 23fcca6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fccaa:	bd30      	pop	{r4, r5, pc}
 23fccac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fccb0:	bf3c      	itt	cc
 23fccb2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fccb6:	bd30      	popcc	{r4, r5, pc}
 23fccb8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fccbc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fccc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fccc4:	f04f 0000 	mov.w	r0, #0
 23fccc8:	bd30      	pop	{r4, r5, pc}
 23fccca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fccce:	bf1a      	itte	ne
 23fccd0:	4619      	movne	r1, r3
 23fccd2:	4610      	movne	r0, r2
 23fccd4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fccd8:	bf1c      	itt	ne
 23fccda:	460b      	movne	r3, r1
 23fccdc:	4602      	movne	r2, r0
 23fccde:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fcce2:	bf06      	itte	eq
 23fcce4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fcce8:	ea91 0f03 	teqeq	r1, r3
 23fccec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fccf0:	bd30      	pop	{r4, r5, pc}
 23fccf2:	bf00      	nop

023fccf4 <__aeabi_ui2d>:
 23fccf4:	f090 0f00 	teq	r0, #0
 23fccf8:	bf04      	itt	eq
 23fccfa:	2100      	moveq	r1, #0
 23fccfc:	4770      	bxeq	lr
 23fccfe:	b530      	push	{r4, r5, lr}
 23fcd00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fcd04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fcd08:	f04f 0500 	mov.w	r5, #0
 23fcd0c:	f04f 0100 	mov.w	r1, #0
 23fcd10:	e750      	b.n	23fcbb4 <__adddf3+0x138>
 23fcd12:	bf00      	nop

023fcd14 <__aeabi_i2d>:
 23fcd14:	f090 0f00 	teq	r0, #0
 23fcd18:	bf04      	itt	eq
 23fcd1a:	2100      	moveq	r1, #0
 23fcd1c:	4770      	bxeq	lr
 23fcd1e:	b530      	push	{r4, r5, lr}
 23fcd20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fcd24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fcd28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fcd2c:	bf48      	it	mi
 23fcd2e:	4240      	negmi	r0, r0
 23fcd30:	f04f 0100 	mov.w	r1, #0
 23fcd34:	e73e      	b.n	23fcbb4 <__adddf3+0x138>
 23fcd36:	bf00      	nop

023fcd38 <__aeabi_f2d>:
 23fcd38:	0042      	lsls	r2, r0, #1
 23fcd3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fcd3e:	ea4f 0131 	mov.w	r1, r1, rrx
 23fcd42:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fcd46:	bf1f      	itttt	ne
 23fcd48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fcd4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fcd50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fcd54:	4770      	bxne	lr
 23fcd56:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fcd5a:	bf08      	it	eq
 23fcd5c:	4770      	bxeq	lr
 23fcd5e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fcd62:	bf04      	itt	eq
 23fcd64:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fcd68:	4770      	bxeq	lr
 23fcd6a:	b530      	push	{r4, r5, lr}
 23fcd6c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fcd70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fcd74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fcd78:	e71c      	b.n	23fcbb4 <__adddf3+0x138>
 23fcd7a:	bf00      	nop

023fcd7c <__aeabi_ul2d>:
 23fcd7c:	ea50 0201 	orrs.w	r2, r0, r1
 23fcd80:	bf08      	it	eq
 23fcd82:	4770      	bxeq	lr
 23fcd84:	b530      	push	{r4, r5, lr}
 23fcd86:	f04f 0500 	mov.w	r5, #0
 23fcd8a:	e00a      	b.n	23fcda2 <__aeabi_l2d+0x16>

023fcd8c <__aeabi_l2d>:
 23fcd8c:	ea50 0201 	orrs.w	r2, r0, r1
 23fcd90:	bf08      	it	eq
 23fcd92:	4770      	bxeq	lr
 23fcd94:	b530      	push	{r4, r5, lr}
 23fcd96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fcd9a:	d502      	bpl.n	23fcda2 <__aeabi_l2d+0x16>
 23fcd9c:	4240      	negs	r0, r0
 23fcd9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fcda2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fcda6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fcdaa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fcdae:	f43f aed8 	beq.w	23fcb62 <__adddf3+0xe6>
 23fcdb2:	f04f 0203 	mov.w	r2, #3
 23fcdb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fcdba:	bf18      	it	ne
 23fcdbc:	3203      	addne	r2, #3
 23fcdbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fcdc2:	bf18      	it	ne
 23fcdc4:	3203      	addne	r2, #3
 23fcdc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fcdca:	f1c2 0320 	rsb	r3, r2, #32
 23fcdce:	fa00 fc03 	lsl.w	ip, r0, r3
 23fcdd2:	fa20 f002 	lsr.w	r0, r0, r2
 23fcdd6:	fa01 fe03 	lsl.w	lr, r1, r3
 23fcdda:	ea40 000e 	orr.w	r0, r0, lr
 23fcdde:	fa21 f102 	lsr.w	r1, r1, r2
 23fcde2:	4414      	add	r4, r2
 23fcde4:	e6bd      	b.n	23fcb62 <__adddf3+0xe6>
 23fcde6:	bf00      	nop

023fcde8 <__aeabi_dmul>:
 23fcde8:	b570      	push	{r4, r5, r6, lr}
 23fcdea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fcdee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fcdf2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fcdf6:	bf1d      	ittte	ne
 23fcdf8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fcdfc:	ea94 0f0c 	teqne	r4, ip
 23fce00:	ea95 0f0c 	teqne	r5, ip
 23fce04:	f000 f8de 	bleq	23fcfc4 <__aeabi_dmul+0x1dc>
 23fce08:	442c      	add	r4, r5
 23fce0a:	ea81 0603 	eor.w	r6, r1, r3
 23fce0e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fce12:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fce16:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fce1a:	bf18      	it	ne
 23fce1c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fce20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fce24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fce28:	d038      	beq.n	23fce9c <__aeabi_dmul+0xb4>
 23fce2a:	fba0 ce02 	umull	ip, lr, r0, r2
 23fce2e:	f04f 0500 	mov.w	r5, #0
 23fce32:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fce36:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fce3a:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fce3e:	f04f 0600 	mov.w	r6, #0
 23fce42:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fce46:	f09c 0f00 	teq	ip, #0
 23fce4a:	bf18      	it	ne
 23fce4c:	f04e 0e01 	orrne.w	lr, lr, #1
 23fce50:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fce54:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fce58:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fce5c:	d204      	bcs.n	23fce68 <__aeabi_dmul+0x80>
 23fce5e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fce62:	416d      	adcs	r5, r5
 23fce64:	eb46 0606 	adc.w	r6, r6, r6
 23fce68:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fce6c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fce70:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fce74:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fce78:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fce7c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fce80:	bf88      	it	hi
 23fce82:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fce86:	d81e      	bhi.n	23fcec6 <__aeabi_dmul+0xde>
 23fce88:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fce8c:	bf08      	it	eq
 23fce8e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fce92:	f150 0000 	adcs.w	r0, r0, #0
 23fce96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fce9a:	bd70      	pop	{r4, r5, r6, pc}
 23fce9c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fcea0:	ea46 0101 	orr.w	r1, r6, r1
 23fcea4:	ea40 0002 	orr.w	r0, r0, r2
 23fcea8:	ea81 0103 	eor.w	r1, r1, r3
 23fceac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fceb0:	bfc2      	ittt	gt
 23fceb2:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fceb6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fceba:	bd70      	popgt	{r4, r5, r6, pc}
 23fcebc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fcec0:	f04f 0e00 	mov.w	lr, #0
 23fcec4:	3c01      	subs	r4, #1
 23fcec6:	f300 80ab 	bgt.w	23fd020 <__aeabi_dmul+0x238>
 23fceca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fcece:	bfde      	ittt	le
 23fced0:	2000      	movle	r0, #0
 23fced2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fced6:	bd70      	pople	{r4, r5, r6, pc}
 23fced8:	f1c4 0400 	rsb	r4, r4, #0
 23fcedc:	3c20      	subs	r4, #32
 23fcede:	da35      	bge.n	23fcf4c <__aeabi_dmul+0x164>
 23fcee0:	340c      	adds	r4, #12
 23fcee2:	dc1b      	bgt.n	23fcf1c <__aeabi_dmul+0x134>
 23fcee4:	f104 0414 	add.w	r4, r4, #20
 23fcee8:	f1c4 0520 	rsb	r5, r4, #32
 23fceec:	fa00 f305 	lsl.w	r3, r0, r5
 23fcef0:	fa20 f004 	lsr.w	r0, r0, r4
 23fcef4:	fa01 f205 	lsl.w	r2, r1, r5
 23fcef8:	ea40 0002 	orr.w	r0, r0, r2
 23fcefc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fcf00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fcf04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fcf08:	fa21 f604 	lsr.w	r6, r1, r4
 23fcf0c:	eb42 0106 	adc.w	r1, r2, r6
 23fcf10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fcf14:	bf08      	it	eq
 23fcf16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fcf1a:	bd70      	pop	{r4, r5, r6, pc}
 23fcf1c:	f1c4 040c 	rsb	r4, r4, #12
 23fcf20:	f1c4 0520 	rsb	r5, r4, #32
 23fcf24:	fa00 f304 	lsl.w	r3, r0, r4
 23fcf28:	fa20 f005 	lsr.w	r0, r0, r5
 23fcf2c:	fa01 f204 	lsl.w	r2, r1, r4
 23fcf30:	ea40 0002 	orr.w	r0, r0, r2
 23fcf34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fcf38:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fcf3c:	f141 0100 	adc.w	r1, r1, #0
 23fcf40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fcf44:	bf08      	it	eq
 23fcf46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fcf4a:	bd70      	pop	{r4, r5, r6, pc}
 23fcf4c:	f1c4 0520 	rsb	r5, r4, #32
 23fcf50:	fa00 f205 	lsl.w	r2, r0, r5
 23fcf54:	ea4e 0e02 	orr.w	lr, lr, r2
 23fcf58:	fa20 f304 	lsr.w	r3, r0, r4
 23fcf5c:	fa01 f205 	lsl.w	r2, r1, r5
 23fcf60:	ea43 0302 	orr.w	r3, r3, r2
 23fcf64:	fa21 f004 	lsr.w	r0, r1, r4
 23fcf68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fcf6c:	fa21 f204 	lsr.w	r2, r1, r4
 23fcf70:	ea20 0002 	bic.w	r0, r0, r2
 23fcf74:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fcf78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fcf7c:	bf08      	it	eq
 23fcf7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fcf82:	bd70      	pop	{r4, r5, r6, pc}
 23fcf84:	f094 0f00 	teq	r4, #0
 23fcf88:	d10f      	bne.n	23fcfaa <__aeabi_dmul+0x1c2>
 23fcf8a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fcf8e:	0040      	lsls	r0, r0, #1
 23fcf90:	eb41 0101 	adc.w	r1, r1, r1
 23fcf94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fcf98:	bf08      	it	eq
 23fcf9a:	3c01      	subeq	r4, #1
 23fcf9c:	d0f7      	beq.n	23fcf8e <__aeabi_dmul+0x1a6>
 23fcf9e:	ea41 0106 	orr.w	r1, r1, r6
 23fcfa2:	f095 0f00 	teq	r5, #0
 23fcfa6:	bf18      	it	ne
 23fcfa8:	4770      	bxne	lr
 23fcfaa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fcfae:	0052      	lsls	r2, r2, #1
 23fcfb0:	eb43 0303 	adc.w	r3, r3, r3
 23fcfb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fcfb8:	bf08      	it	eq
 23fcfba:	3d01      	subeq	r5, #1
 23fcfbc:	d0f7      	beq.n	23fcfae <__aeabi_dmul+0x1c6>
 23fcfbe:	ea43 0306 	orr.w	r3, r3, r6
 23fcfc2:	4770      	bx	lr
 23fcfc4:	ea94 0f0c 	teq	r4, ip
 23fcfc8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fcfcc:	bf18      	it	ne
 23fcfce:	ea95 0f0c 	teqne	r5, ip
 23fcfd2:	d00c      	beq.n	23fcfee <__aeabi_dmul+0x206>
 23fcfd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fcfd8:	bf18      	it	ne
 23fcfda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fcfde:	d1d1      	bne.n	23fcf84 <__aeabi_dmul+0x19c>
 23fcfe0:	ea81 0103 	eor.w	r1, r1, r3
 23fcfe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fcfe8:	f04f 0000 	mov.w	r0, #0
 23fcfec:	bd70      	pop	{r4, r5, r6, pc}
 23fcfee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fcff2:	bf06      	itte	eq
 23fcff4:	4610      	moveq	r0, r2
 23fcff6:	4619      	moveq	r1, r3
 23fcff8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fcffc:	d019      	beq.n	23fd032 <__aeabi_dmul+0x24a>
 23fcffe:	ea94 0f0c 	teq	r4, ip
 23fd002:	d102      	bne.n	23fd00a <__aeabi_dmul+0x222>
 23fd004:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fd008:	d113      	bne.n	23fd032 <__aeabi_dmul+0x24a>
 23fd00a:	ea95 0f0c 	teq	r5, ip
 23fd00e:	d105      	bne.n	23fd01c <__aeabi_dmul+0x234>
 23fd010:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fd014:	bf1c      	itt	ne
 23fd016:	4610      	movne	r0, r2
 23fd018:	4619      	movne	r1, r3
 23fd01a:	d10a      	bne.n	23fd032 <__aeabi_dmul+0x24a>
 23fd01c:	ea81 0103 	eor.w	r1, r1, r3
 23fd020:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd024:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fd028:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fd02c:	f04f 0000 	mov.w	r0, #0
 23fd030:	bd70      	pop	{r4, r5, r6, pc}
 23fd032:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fd036:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fd03a:	bd70      	pop	{r4, r5, r6, pc}

023fd03c <__aeabi_ddiv>:
 23fd03c:	b570      	push	{r4, r5, r6, lr}
 23fd03e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fd042:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fd046:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fd04a:	bf1d      	ittte	ne
 23fd04c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fd050:	ea94 0f0c 	teqne	r4, ip
 23fd054:	ea95 0f0c 	teqne	r5, ip
 23fd058:	f000 f8a7 	bleq	23fd1aa <__aeabi_ddiv+0x16e>
 23fd05c:	eba4 0405 	sub.w	r4, r4, r5
 23fd060:	ea81 0e03 	eor.w	lr, r1, r3
 23fd064:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fd068:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fd06c:	f000 8088 	beq.w	23fd180 <__aeabi_ddiv+0x144>
 23fd070:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fd074:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fd078:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fd07c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fd080:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fd084:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fd088:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fd08c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fd090:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fd094:	429d      	cmp	r5, r3
 23fd096:	bf08      	it	eq
 23fd098:	4296      	cmpeq	r6, r2
 23fd09a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fd09e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fd0a2:	d202      	bcs.n	23fd0aa <__aeabi_ddiv+0x6e>
 23fd0a4:	085b      	lsrs	r3, r3, #1
 23fd0a6:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd0aa:	1ab6      	subs	r6, r6, r2
 23fd0ac:	eb65 0503 	sbc.w	r5, r5, r3
 23fd0b0:	085b      	lsrs	r3, r3, #1
 23fd0b2:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd0b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fd0ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fd0be:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd0c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd0c6:	bf22      	ittt	cs
 23fd0c8:	1ab6      	subcs	r6, r6, r2
 23fd0ca:	4675      	movcs	r5, lr
 23fd0cc:	ea40 000c 	orrcs.w	r0, r0, ip
 23fd0d0:	085b      	lsrs	r3, r3, #1
 23fd0d2:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd0d6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd0da:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd0de:	bf22      	ittt	cs
 23fd0e0:	1ab6      	subcs	r6, r6, r2
 23fd0e2:	4675      	movcs	r5, lr
 23fd0e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fd0e8:	085b      	lsrs	r3, r3, #1
 23fd0ea:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd0ee:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd0f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd0f6:	bf22      	ittt	cs
 23fd0f8:	1ab6      	subcs	r6, r6, r2
 23fd0fa:	4675      	movcs	r5, lr
 23fd0fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fd100:	085b      	lsrs	r3, r3, #1
 23fd102:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd106:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd10a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd10e:	bf22      	ittt	cs
 23fd110:	1ab6      	subcs	r6, r6, r2
 23fd112:	4675      	movcs	r5, lr
 23fd114:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fd118:	ea55 0e06 	orrs.w	lr, r5, r6
 23fd11c:	d018      	beq.n	23fd150 <__aeabi_ddiv+0x114>
 23fd11e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fd122:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fd126:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fd12a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fd12e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fd132:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fd136:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fd13a:	d1c0      	bne.n	23fd0be <__aeabi_ddiv+0x82>
 23fd13c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fd140:	d10b      	bne.n	23fd15a <__aeabi_ddiv+0x11e>
 23fd142:	ea41 0100 	orr.w	r1, r1, r0
 23fd146:	f04f 0000 	mov.w	r0, #0
 23fd14a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fd14e:	e7b6      	b.n	23fd0be <__aeabi_ddiv+0x82>
 23fd150:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fd154:	bf04      	itt	eq
 23fd156:	4301      	orreq	r1, r0
 23fd158:	2000      	moveq	r0, #0
 23fd15a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fd15e:	bf88      	it	hi
 23fd160:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fd164:	f63f aeaf 	bhi.w	23fcec6 <__aeabi_dmul+0xde>
 23fd168:	ebb5 0c03 	subs.w	ip, r5, r3
 23fd16c:	bf04      	itt	eq
 23fd16e:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fd172:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fd176:	f150 0000 	adcs.w	r0, r0, #0
 23fd17a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fd17e:	bd70      	pop	{r4, r5, r6, pc}
 23fd180:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fd184:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fd188:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fd18c:	bfc2      	ittt	gt
 23fd18e:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fd192:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fd196:	bd70      	popgt	{r4, r5, r6, pc}
 23fd198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd19c:	f04f 0e00 	mov.w	lr, #0
 23fd1a0:	3c01      	subs	r4, #1
 23fd1a2:	e690      	b.n	23fcec6 <__aeabi_dmul+0xde>
 23fd1a4:	ea45 0e06 	orr.w	lr, r5, r6
 23fd1a8:	e68d      	b.n	23fcec6 <__aeabi_dmul+0xde>
 23fd1aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fd1ae:	ea94 0f0c 	teq	r4, ip
 23fd1b2:	bf08      	it	eq
 23fd1b4:	ea95 0f0c 	teqeq	r5, ip
 23fd1b8:	f43f af3b 	beq.w	23fd032 <__aeabi_dmul+0x24a>
 23fd1bc:	ea94 0f0c 	teq	r4, ip
 23fd1c0:	d10a      	bne.n	23fd1d8 <__aeabi_ddiv+0x19c>
 23fd1c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fd1c6:	f47f af34 	bne.w	23fd032 <__aeabi_dmul+0x24a>
 23fd1ca:	ea95 0f0c 	teq	r5, ip
 23fd1ce:	f47f af25 	bne.w	23fd01c <__aeabi_dmul+0x234>
 23fd1d2:	4610      	mov	r0, r2
 23fd1d4:	4619      	mov	r1, r3
 23fd1d6:	e72c      	b.n	23fd032 <__aeabi_dmul+0x24a>
 23fd1d8:	ea95 0f0c 	teq	r5, ip
 23fd1dc:	d106      	bne.n	23fd1ec <__aeabi_ddiv+0x1b0>
 23fd1de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fd1e2:	f43f aefd 	beq.w	23fcfe0 <__aeabi_dmul+0x1f8>
 23fd1e6:	4610      	mov	r0, r2
 23fd1e8:	4619      	mov	r1, r3
 23fd1ea:	e722      	b.n	23fd032 <__aeabi_dmul+0x24a>
 23fd1ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fd1f0:	bf18      	it	ne
 23fd1f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fd1f6:	f47f aec5 	bne.w	23fcf84 <__aeabi_dmul+0x19c>
 23fd1fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fd1fe:	f47f af0d 	bne.w	23fd01c <__aeabi_dmul+0x234>
 23fd202:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fd206:	f47f aeeb 	bne.w	23fcfe0 <__aeabi_dmul+0x1f8>
 23fd20a:	e712      	b.n	23fd032 <__aeabi_dmul+0x24a>

023fd20c <__gedf2>:
 23fd20c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fd210:	e006      	b.n	23fd220 <__cmpdf2+0x4>
 23fd212:	bf00      	nop

023fd214 <__ledf2>:
 23fd214:	f04f 0c01 	mov.w	ip, #1
 23fd218:	e002      	b.n	23fd220 <__cmpdf2+0x4>
 23fd21a:	bf00      	nop

023fd21c <__cmpdf2>:
 23fd21c:	f04f 0c01 	mov.w	ip, #1
 23fd220:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fd224:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fd228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd22c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fd230:	bf18      	it	ne
 23fd232:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fd236:	d01b      	beq.n	23fd270 <__cmpdf2+0x54>
 23fd238:	b001      	add	sp, #4
 23fd23a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fd23e:	bf0c      	ite	eq
 23fd240:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fd244:	ea91 0f03 	teqne	r1, r3
 23fd248:	bf02      	ittt	eq
 23fd24a:	ea90 0f02 	teqeq	r0, r2
 23fd24e:	2000      	moveq	r0, #0
 23fd250:	4770      	bxeq	lr
 23fd252:	f110 0f00 	cmn.w	r0, #0
 23fd256:	ea91 0f03 	teq	r1, r3
 23fd25a:	bf58      	it	pl
 23fd25c:	4299      	cmppl	r1, r3
 23fd25e:	bf08      	it	eq
 23fd260:	4290      	cmpeq	r0, r2
 23fd262:	bf2c      	ite	cs
 23fd264:	17d8      	asrcs	r0, r3, #31
 23fd266:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fd26a:	f040 0001 	orr.w	r0, r0, #1
 23fd26e:	4770      	bx	lr
 23fd270:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fd274:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd278:	d102      	bne.n	23fd280 <__cmpdf2+0x64>
 23fd27a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fd27e:	d107      	bne.n	23fd290 <__cmpdf2+0x74>
 23fd280:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fd284:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd288:	d1d6      	bne.n	23fd238 <__cmpdf2+0x1c>
 23fd28a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fd28e:	d0d3      	beq.n	23fd238 <__cmpdf2+0x1c>
 23fd290:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fd294:	4770      	bx	lr
 23fd296:	bf00      	nop

023fd298 <__aeabi_cdrcmple>:
 23fd298:	4684      	mov	ip, r0
 23fd29a:	4610      	mov	r0, r2
 23fd29c:	4662      	mov	r2, ip
 23fd29e:	468c      	mov	ip, r1
 23fd2a0:	4619      	mov	r1, r3
 23fd2a2:	4663      	mov	r3, ip
 23fd2a4:	e000      	b.n	23fd2a8 <__aeabi_cdcmpeq>
 23fd2a6:	bf00      	nop

023fd2a8 <__aeabi_cdcmpeq>:
 23fd2a8:	b501      	push	{r0, lr}
 23fd2aa:	f7ff ffb7 	bl	23fd21c <__cmpdf2>
 23fd2ae:	2800      	cmp	r0, #0
 23fd2b0:	bf48      	it	mi
 23fd2b2:	f110 0f00 	cmnmi.w	r0, #0
 23fd2b6:	bd01      	pop	{r0, pc}

023fd2b8 <__aeabi_dcmpeq>:
 23fd2b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd2bc:	f7ff fff4 	bl	23fd2a8 <__aeabi_cdcmpeq>
 23fd2c0:	bf0c      	ite	eq
 23fd2c2:	2001      	moveq	r0, #1
 23fd2c4:	2000      	movne	r0, #0
 23fd2c6:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd2ca:	bf00      	nop

023fd2cc <__aeabi_dcmplt>:
 23fd2cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd2d0:	f7ff ffea 	bl	23fd2a8 <__aeabi_cdcmpeq>
 23fd2d4:	bf34      	ite	cc
 23fd2d6:	2001      	movcc	r0, #1
 23fd2d8:	2000      	movcs	r0, #0
 23fd2da:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd2de:	bf00      	nop

023fd2e0 <__aeabi_dcmple>:
 23fd2e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd2e4:	f7ff ffe0 	bl	23fd2a8 <__aeabi_cdcmpeq>
 23fd2e8:	bf94      	ite	ls
 23fd2ea:	2001      	movls	r0, #1
 23fd2ec:	2000      	movhi	r0, #0
 23fd2ee:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd2f2:	bf00      	nop

023fd2f4 <__aeabi_dcmpge>:
 23fd2f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd2f8:	f7ff ffce 	bl	23fd298 <__aeabi_cdrcmple>
 23fd2fc:	bf94      	ite	ls
 23fd2fe:	2001      	movls	r0, #1
 23fd300:	2000      	movhi	r0, #0
 23fd302:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd306:	bf00      	nop

023fd308 <__aeabi_dcmpgt>:
 23fd308:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd30c:	f7ff ffc4 	bl	23fd298 <__aeabi_cdrcmple>
 23fd310:	bf34      	ite	cc
 23fd312:	2001      	movcc	r0, #1
 23fd314:	2000      	movcs	r0, #0
 23fd316:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd31a:	bf00      	nop

023fd31c <__aeabi_dcmpun>:
 23fd31c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fd320:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd324:	d102      	bne.n	23fd32c <__aeabi_dcmpun+0x10>
 23fd326:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fd32a:	d10a      	bne.n	23fd342 <__aeabi_dcmpun+0x26>
 23fd32c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fd330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd334:	d102      	bne.n	23fd33c <__aeabi_dcmpun+0x20>
 23fd336:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fd33a:	d102      	bne.n	23fd342 <__aeabi_dcmpun+0x26>
 23fd33c:	f04f 0000 	mov.w	r0, #0
 23fd340:	4770      	bx	lr
 23fd342:	f04f 0001 	mov.w	r0, #1
 23fd346:	4770      	bx	lr

023fd348 <__aeabi_d2iz>:
 23fd348:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fd34c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fd350:	d215      	bcs.n	23fd37e <__aeabi_d2iz+0x36>
 23fd352:	d511      	bpl.n	23fd378 <__aeabi_d2iz+0x30>
 23fd354:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fd358:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fd35c:	d912      	bls.n	23fd384 <__aeabi_d2iz+0x3c>
 23fd35e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fd362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fd366:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fd36a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fd36e:	fa23 f002 	lsr.w	r0, r3, r2
 23fd372:	bf18      	it	ne
 23fd374:	4240      	negne	r0, r0
 23fd376:	4770      	bx	lr
 23fd378:	f04f 0000 	mov.w	r0, #0
 23fd37c:	4770      	bx	lr
 23fd37e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fd382:	d105      	bne.n	23fd390 <__aeabi_d2iz+0x48>
 23fd384:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23fd388:	bf08      	it	eq
 23fd38a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23fd38e:	4770      	bx	lr
 23fd390:	f04f 0000 	mov.w	r0, #0
 23fd394:	4770      	bx	lr
 23fd396:	bf00      	nop

023fd398 <__aeabi_d2f>:
 23fd398:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fd39c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fd3a0:	bf24      	itt	cs
 23fd3a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fd3a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fd3aa:	d90d      	bls.n	23fd3c8 <__aeabi_d2f+0x30>
 23fd3ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fd3b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fd3b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fd3b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fd3bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fd3c0:	bf08      	it	eq
 23fd3c2:	f020 0001 	biceq.w	r0, r0, #1
 23fd3c6:	4770      	bx	lr
 23fd3c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fd3cc:	d121      	bne.n	23fd412 <__aeabi_d2f+0x7a>
 23fd3ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fd3d2:	bfbc      	itt	lt
 23fd3d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fd3d8:	4770      	bxlt	lr
 23fd3da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd3de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fd3e2:	f1c2 0218 	rsb	r2, r2, #24
 23fd3e6:	f1c2 0c20 	rsb	ip, r2, #32
 23fd3ea:	fa10 f30c 	lsls.w	r3, r0, ip
 23fd3ee:	fa20 f002 	lsr.w	r0, r0, r2
 23fd3f2:	bf18      	it	ne
 23fd3f4:	f040 0001 	orrne.w	r0, r0, #1
 23fd3f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fd3fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fd400:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fd404:	ea40 000c 	orr.w	r0, r0, ip
 23fd408:	fa23 f302 	lsr.w	r3, r3, r2
 23fd40c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fd410:	e7cc      	b.n	23fd3ac <__aeabi_d2f+0x14>
 23fd412:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fd416:	d107      	bne.n	23fd428 <__aeabi_d2f+0x90>
 23fd418:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fd41c:	bf1e      	ittt	ne
 23fd41e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fd422:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fd426:	4770      	bxne	lr
 23fd428:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fd42c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fd430:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fd434:	4770      	bx	lr
 23fd436:	bf00      	nop

023fd438 <strlen>:
 23fd438:	4603      	mov	r3, r0
 23fd43a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd43e:	2a00      	cmp	r2, #0
 23fd440:	d1fb      	bne.n	23fd43a <strlen+0x2>
 23fd442:	1a18      	subs	r0, r3, r0
 23fd444:	3801      	subs	r0, #1
 23fd446:	4770      	bx	lr

023fd448 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fd448:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fd44a:	f001 f9a9 	bl	23fe7a0 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fd44e:	2500      	movs	r5, #0
 23fd450:	4e05      	ldr	r6, [pc, #20]	; (23fd468 <module_user_init+0x20>)
 23fd452:	4c06      	ldr	r4, [pc, #24]	; (23fd46c <module_user_init+0x24>)
 23fd454:	1ba4      	subs	r4, r4, r6
 23fd456:	08a4      	lsrs	r4, r4, #2
 23fd458:	42ac      	cmp	r4, r5
 23fd45a:	d100      	bne.n	23fd45e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fd45c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fd45e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fd462:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fd464:	3501      	adds	r5, #1
 23fd466:	e7f7      	b.n	23fd458 <module_user_init+0x10>
 23fd468:	023fffd8 	.word	0x023fffd8
 23fd46c:	023ffffc 	.word	0x023ffffc

023fd470 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fd470:	f000 b814 	b.w	23fd49c <setup>

023fd474 <module_user_loop>:
}

void module_user_loop() {
 23fd474:	b508      	push	{r3, lr}
    loop();
 23fd476:	f000 f883 	bl	23fd580 <loop>
    _post_loop();
}
 23fd47a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fd47e:	f001 b947 	b.w	23fe710 <_post_loop>

023fd482 <_Znaj>:
 23fd482:	f000 bd53 	b.w	23fdf2c <malloc>

023fd486 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fd486:	f000 bd5f 	b.w	23fdf48 <free>

023fd48a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fd48a:	7800      	ldrb	r0, [r0, #0]
 23fd48c:	fab0 f080 	clz	r0, r0
 23fd490:	0940      	lsrs	r0, r0, #5
 23fd492:	4770      	bx	lr

023fd494 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fd494:	2301      	movs	r3, #1
 23fd496:	7003      	strb	r3, [r0, #0]
 23fd498:	4770      	bx	lr
	...

023fd49c <setup>:
//defines from rs232 main.c
#define PROCESS_RX_BUFFER_SIZE 500
#define RS232_TRANSMITTER

void setup() 
{
 23fd49c:	b510      	push	{r4, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 23fd49e:	2400      	movs	r4, #0
 23fd4a0:	b086      	sub	sp, #24

  Serial.begin(9600);
 23fd4a2:	f001 f8a5 	bl	23fe5f0 <_Z16_fetch_usbserialv>
 23fd4a6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd4aa:	f001 f895 	bl	23fe5d8 <_ZN9USBSerial5beginEl>

  Particle.disconnect();
 23fd4ae:	a803      	add	r0, sp, #12
 23fd4b0:	e9cd 4403 	strd	r4, r4, [sp, #12]
        bool clearSession) :
 23fd4b4:	f8ad 4014 	strh.w	r4, [sp, #20]
 23fd4b8:	f000 fd8a 	bl	23fdfd0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 23fd4bc:	4814      	ldr	r0, [pc, #80]	; (23fd510 <setup+0x74>)
 23fd4be:	4622      	mov	r2, r4
 23fd4c0:	4623      	mov	r3, r4
 23fd4c2:	4621      	mov	r1, r4
 23fd4c4:	6840      	ldr	r0, [r0, #4]
 23fd4c6:	f000 fccf 	bl	23fde68 <network_off>
  eeprom7_default_cfg ( &eeprom7 );
  */

  //from temphum13
  temphum13_cfg_t temphum13_cfg;
  temphum13_cfg_setup( &temphum13_cfg );
 23fd4ca:	a803      	add	r0, sp, #12
 23fd4cc:	f000 f976 	bl	23fd7bc <temphum13_cfg_setup>
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fd4d0:	2301      	movs	r3, #1
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fd4d2:	4c10      	ldr	r4, [pc, #64]	; (23fd514 <setup+0x78>)
 23fd4d4:	a903      	add	r1, sp, #12
 23fd4d6:	4620      	mov	r0, r4
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fd4d8:	f8ad 300c 	strh.w	r3, [sp, #12]
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fd4dc:	f000 f976 	bl	23fd7cc <temphum13_init>
  temphum13_default_cfg( &temphum13 );
 23fd4e0:	4620      	mov	r0, r4
 23fd4e2:	f000 f9a3 	bl	23fd82c <temphum13_default_cfg>
  rs232_init( &rs232, &rs232_cfg );   //includes uart config
*/

  //from pwmdriver
  pwmdriver_cfg_t pwmdriver_cfg;
  pwmdriver_cfg_setup( &pwmdriver_cfg );
 23fd4e6:	a801      	add	r0, sp, #4
 23fd4e8:	f000 f944 	bl	23fd774 <pwmdriver_cfg_setup>
  PWMDRIVER_MAP_MIKROBUS( pwmdriver_cfg, MIKROBUS_1 );
 23fd4ec:	230e      	movs	r3, #14
  pwmdriver_init( &pwmdriver, &pwmdriver_cfg );   //inlcudes pwm default config
 23fd4ee:	4c0a      	ldr	r4, [pc, #40]	; (23fd518 <setup+0x7c>)
 23fd4f0:	a901      	add	r1, sp, #4
 23fd4f2:	4620      	mov	r0, r4
  PWMDRIVER_MAP_MIKROBUS( pwmdriver_cfg, MIKROBUS_1 );
 23fd4f4:	f88d 3004 	strb.w	r3, [sp, #4]
  pwmdriver_init( &pwmdriver, &pwmdriver_cfg );   //inlcudes pwm default config
 23fd4f8:	f000 f942 	bl	23fd780 <pwmdriver_init>
  pwmdriver_set_duty_cycle( &pwmdriver, 0.0 );
 23fd4fc:	ed9f 0a07 	vldr	s0, [pc, #28]	; 23fd51c <setup+0x80>
 23fd500:	4620      	mov	r0, r4
 23fd502:	f000 f954 	bl	23fd7ae <pwmdriver_set_duty_cycle>
  pwmdriver_pwm_start( &pwmdriver );
 23fd506:	4620      	mov	r0, r4
 23fd508:	f000 f953 	bl	23fd7b2 <pwmdriver_pwm_start>

}
 23fd50c:	b006      	add	sp, #24
 23fd50e:	bd10      	pop	{r4, pc}
 23fd510:	1007aee0 	.word	0x1007aee0
 23fd514:	1007ae5c 	.word	0x1007ae5c
 23fd518:	1007ae4c 	.word	0x1007ae4c
 23fd51c:	00000000 	.word	0x00000000

023fd520 <_Z14pwmdriver_mainv>:
  Delay_ms( 1000 );
}

//pwm testing
void pwmdriver_main()
{
 23fd520:	b510      	push	{r4, lr}
  static int8_t duty_cnt = 1;
  static int8_t duty_inc = 1;
  float duty = duty_cnt / 10.0;
 23fd522:	4c13      	ldr	r4, [pc, #76]	; (23fd570 <_Z14pwmdriver_mainv+0x50>)
 23fd524:	f994 0000 	ldrsb.w	r0, [r4]
 23fd528:	f7ff fbf4 	bl	23fcd14 <__aeabi_i2d>
 23fd52c:	2200      	movs	r2, #0
 23fd52e:	4b11      	ldr	r3, [pc, #68]	; (23fd574 <_Z14pwmdriver_mainv+0x54>)
 23fd530:	f7ff fd84 	bl	23fd03c <__aeabi_ddiv>
 23fd534:	f7ff ff30 	bl	23fd398 <__aeabi_d2f>



  pwmdriver_set_duty_cycle ( &pwmdriver, duty );
 23fd538:	ee00 0a10 	vmov	s0, r0
 23fd53c:	480e      	ldr	r0, [pc, #56]	; (23fd578 <_Z14pwmdriver_mainv+0x58>)
 23fd53e:	f000 f936 	bl	23fd7ae <pwmdriver_set_duty_cycle>
  pwmdriver_pwm_start( &pwmdriver );    //must include to pass new duty cycle value
 23fd542:	480d      	ldr	r0, [pc, #52]	; (23fd578 <_Z14pwmdriver_mainv+0x58>)
 23fd544:	f000 f935 	bl	23fd7b2 <pwmdriver_pwm_start>
//function for mikroE delays for libray port compability
inline void Delay_1ms( ) {delay(1);}
inline void Delay_10ms( ) {delay(10);}
inline void Delay_100ms( ) {delay(100);}
inline void Delay_1000ms( ) {delay(1000);}
inline void Delay_ms(unsigned long ms) {delay(ms);}
 23fd548:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fd54c:	f000 fd34 	bl	23fdfb8 <delay>
  Delay_ms( 500 );
    
  if (10 == duty_cnt) 
 23fd550:	f994 2000 	ldrsb.w	r2, [r4]
 23fd554:	4b09      	ldr	r3, [pc, #36]	; (23fd57c <_Z14pwmdriver_mainv+0x5c>)
 23fd556:	2a0a      	cmp	r2, #10
 23fd558:	d105      	bne.n	23fd566 <_Z14pwmdriver_mainv+0x46>
  {
    duty_inc = -1;
 23fd55a:	21ff      	movs	r1, #255	; 0xff
  }
  else if (0 == duty_cnt) 
  {
    duty_inc = 1;
 23fd55c:	7019      	strb	r1, [r3, #0]
  }
  duty_cnt += duty_inc;
 23fd55e:	781b      	ldrb	r3, [r3, #0]
 23fd560:	4413      	add	r3, r2
 23fd562:	7023      	strb	r3, [r4, #0]

 23fd564:	bd10      	pop	{r4, pc}
  else if (0 == duty_cnt) 
 23fd566:	2a00      	cmp	r2, #0
 23fd568:	d1f9      	bne.n	23fd55e <_Z14pwmdriver_mainv+0x3e>
    duty_inc = 1;
 23fd56a:	2101      	movs	r1, #1
 23fd56c:	e7f6      	b.n	23fd55c <_Z14pwmdriver_mainv+0x3c>
 23fd56e:	bf00      	nop
 23fd570:	1007adcc 	.word	0x1007adcc
 23fd574:	40240000 	.word	0x40240000
 23fd578:	1007ae4c 	.word	0x1007ae4c
 23fd57c:	1007adcd 	.word	0x1007adcd

023fd580 <loop>:
pwmdriver_main();
 23fd580:	f7ff bfce 	b.w	23fd520 <_Z14pwmdriver_mainv>

023fd584 <_GLOBAL__sub_I_SystemMode>:
 23fd584:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd586:	2400      	movs	r4, #0
 23fd588:	4b06      	ldr	r3, [pc, #24]	; (23fd5a4 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
 23fd58a:	4a07      	ldr	r2, [pc, #28]	; (23fd5a8 <_GLOBAL__sub_I_SystemMode+0x24>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd58c:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 23fd58e:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fd592:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fd594:	f000 fbc0 	bl	23fdd18 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fd598:	4621      	mov	r1, r4
 23fd59a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
 23fd59e:	2001      	movs	r0, #1
 23fd5a0:	f000 bbd6 	b.w	23fdd50 <system_thread_set_state>
 23fd5a4:	1007ae40 	.word	0x1007ae40
 23fd5a8:	ffff0000 	.word	0xffff0000

023fd5ac <_Z28i2c_master_configure_defaultP19i2c_master_config_t>:
static uint32_t set_speed;      //scl speed variable, static as previous value should be retained
static uint8_t addr;            //7-bit cleint address variable, status as previous value should be retained

//Configures i2c_master_config_t struct to default initialization values
void i2c_master_configure_default(i2c_master_config_t *config)
{
 23fd5ac:	b510      	push	{r4, lr}
    config->speed = I2C_MASTER_SPEED_STANDARD;
    config->timeout_pass_count = 10000;
    */
    
    
    addr = 0x00;                                    //set client address to 0x00
 23fd5ae:	2400      	movs	r4, #0
 23fd5b0:	4b05      	ldr	r3, [pc, #20]	; (23fd5c8 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x1c>)
 23fd5b2:	701c      	strb	r4, [r3, #0]
    set_speed = I2C_MASTER_SPEED_STANDARD;          //set static global variable to new speed value
 23fd5b4:	4b05      	ldr	r3, [pc, #20]	; (23fd5cc <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x20>)
 23fd5b6:	601c      	str	r4, [r3, #0]
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fd5b8:	f001 f9f8 	bl	23fe9ac <_Z19__fetch_global_Wirev>
 23fd5bc:	4621      	mov	r1, r4
}
 23fd5be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fd5c2:	f000 bda7 	b.w	23fe114 <_ZN7TwoWire8setSpeedEm>
 23fd5c6:	bf00      	nop
 23fd5c8:	1007ae6c 	.word	0x1007ae6c
 23fd5cc:	1007ae70 	.word	0x1007ae70

023fd5d0 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>:

//Opens the I2C Master driver object on selected pins
int8_t i2c_master_open(i2c_master_t *obj, i2c_master_config_t *config)
{
 23fd5d0:	b508      	push	{r3, lr}

    return _acquire( obj, true );
    */

    
    Wire.setSpeed(set_speed);       //set speed, must be done before Wire.begin() and set to whatever the static global variable is set to
 23fd5d2:	f001 f9eb 	bl	23fe9ac <_Z19__fetch_global_Wirev>
 23fd5d6:	4b05      	ldr	r3, [pc, #20]	; (23fd5ec <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t+0x1c>)
 23fd5d8:	6819      	ldr	r1, [r3, #0]
 23fd5da:	f000 fd9b 	bl	23fe114 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();                   //join i2c bus as host                   
 23fd5de:	f001 f9e5 	bl	23fe9ac <_Z19__fetch_global_Wirev>
 23fd5e2:	f000 fd9b 	bl	23fe11c <_ZN7TwoWire5beginEv>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fd5e6:	2000      	movs	r0, #0
 23fd5e8:	bd08      	pop	{r3, pc}
 23fd5ea:	bf00      	nop
 23fd5ec:	1007ae70 	.word	0x1007ae70

023fd5f0 <_Z20i2c_master_set_speedP12i2c_master_tm>:

//set scl speed
int8_t i2c_master_set_speed(i2c_master_t *obj, uint32_t speed)
{
 23fd5f0:	b510      	push	{r4, lr}
 23fd5f2:	460c      	mov	r4, r1
        return I2C_MASTER_ERROR;
    }
    */

    
    set_speed = speed;              //set static global variable to new speed value
 23fd5f4:	4b04      	ldr	r3, [pc, #16]	; (23fd608 <_Z20i2c_master_set_speedP12i2c_master_tm+0x18>)
 23fd5f6:	6019      	str	r1, [r3, #0]
    Wire.setSpeed(speed);           //set speed, must be done before Wire.begin()
 23fd5f8:	f001 f9d8 	bl	23fe9ac <_Z19__fetch_global_Wirev>
 23fd5fc:	4621      	mov	r1, r4
 23fd5fe:	f000 fd89 	bl	23fe114 <_ZN7TwoWire8setSpeedEm>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fd602:	2000      	movs	r0, #0
 23fd604:	bd10      	pop	{r4, pc}
 23fd606:	bf00      	nop
 23fd608:	1007ae70 	.word	0x1007ae70

023fd60c <_Z28i2c_master_set_slave_addressP12i2c_master_th>:
        return I2C_MASTER_ERROR;
    }
    */

    
    addr = address;                 //set function parameter to global variable
 23fd60c:	4b01      	ldr	r3, [pc, #4]	; (23fd614 <_Z28i2c_master_set_slave_addressP12i2c_master_th+0x8>)
    return I2C_MASTER_SUCCESS;      //return status
}
 23fd60e:	2000      	movs	r0, #0
    addr = address;                 //set function parameter to global variable
 23fd610:	7019      	strb	r1, [r3, #0]
}
 23fd612:	4770      	bx	lr
 23fd614:	1007ae6c 	.word	0x1007ae6c

023fd618 <_Z16i2c_master_writeP12i2c_master_tPhj>:

//i2c write operation, R/W = 0
int8_t i2c_master_write(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data)
{
 23fd618:	b513      	push	{r0, r1, r4, lr}
 23fd61a:	460c      	mov	r4, r1
 23fd61c:	9201      	str	r2, [sp, #4]
        return I2C_MASTER_ERROR;
    }
    */

    
    Wire.beginTransmission(addr);                       //send device address byte using 7-bit client address
 23fd61e:	f001 f9c5 	bl	23fe9ac <_Z19__fetch_global_Wirev>
 23fd622:	4b0b      	ldr	r3, [pc, #44]	; (23fd650 <_Z16i2c_master_writeP12i2c_master_tPhj+0x38>)
 23fd624:	7819      	ldrb	r1, [r3, #0]
 23fd626:	f000 fd7f 	bl	23fe128 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);
 23fd62a:	f001 f9bf 	bl	23fe9ac <_Z19__fetch_global_Wirev>
 23fd62e:	6803      	ldr	r3, [r0, #0]
 23fd630:	4621      	mov	r1, r4
 23fd632:	68db      	ldr	r3, [r3, #12]
 23fd634:	9a01      	ldr	r2, [sp, #4]
 23fd636:	4798      	blx	r3
    if (Wire.endTransmission(TRUE) == TRUE)     //send stop condition (true)
 23fd638:	f001 f9b8 	bl	23fe9ac <_Z19__fetch_global_Wirev>
 23fd63c:	2101      	movs	r1, #1
 23fd63e:	f000 fd77 	bl	23fe130 <_ZN7TwoWire15endTransmissionEh>
    {
        return I2C_MASTER_SUCCESS;      //return status
    }
    return I2C_MASTER_ERROR;        //return status    
}
 23fd642:	3801      	subs	r0, #1
 23fd644:	bf18      	it	ne
 23fd646:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fd64a:	b002      	add	sp, #8
 23fd64c:	bd10      	pop	{r4, pc}
 23fd64e:	bf00      	nop
 23fd650:	1007ae6c 	.word	0x1007ae6c

023fd654 <_Z21pwm_configure_defaultP12pwm_config_t>:
    config->pin = 0xFFFFFFFF;
    config->freq_hz = 0;
    */

    
    frequency = 0;              //set frequency to 0
 23fd654:	2300      	movs	r3, #0
 23fd656:	4a05      	ldr	r2, [pc, #20]	; (23fd66c <_Z21pwm_configure_defaultP12pwm_config_t+0x18>)
    duty_cycle = 0;             //set duty cycle to OFF
    pin = config->pin;          //set global variable to parameter
 23fd658:	7800      	ldrb	r0, [r0, #0]
    frequency = 0;              //set frequency to 0
 23fd65a:	6013      	str	r3, [r2, #0]
    duty_cycle = 0;             //set duty cycle to OFF
 23fd65c:	4a04      	ldr	r2, [pc, #16]	; (23fd670 <_Z21pwm_configure_defaultP12pwm_config_t+0x1c>)
    pinMode(pin, OUTPUT);       //set pin as output
 23fd65e:	2101      	movs	r1, #1
    duty_cycle = 0;             //set duty cycle to OFF
 23fd660:	6013      	str	r3, [r2, #0]
    pin = config->pin;          //set global variable to parameter
 23fd662:	4b04      	ldr	r3, [pc, #16]	; (23fd674 <_Z21pwm_configure_defaultP12pwm_config_t+0x20>)
 23fd664:	8018      	strh	r0, [r3, #0]
    pinMode(pin, OUTPUT);       //set pin as output
 23fd666:	f001 b90b 	b.w	23fe880 <pinMode>
 23fd66a:	bf00      	nop
 23fd66c:	1007ae7c 	.word	0x1007ae7c
 23fd670:	1007ae74 	.word	0x1007ae74
 23fd674:	1007ae78 	.word	0x1007ae78

023fd678 <_Z8pwm_openP5pwm_tP12pwm_config_t>:
}

//opens PWM driver on selected pin
int8_t pwm_open(pwm_t *obj, pwm_config_t *config)
{  
 23fd678:	b510      	push	{r4, lr}

    return _acquire( obj, true );
    */


    pin = config->pin;                  //set global variable to parameter
 23fd67a:	4c06      	ldr	r4, [pc, #24]	; (23fd694 <_Z8pwm_openP5pwm_tP12pwm_config_t+0x1c>)
 23fd67c:	7808      	ldrb	r0, [r1, #0]
    pinMode(config->pin, OUTPUT);       //added as a check in case default function isn't called before
 23fd67e:	2101      	movs	r1, #1
    pin = config->pin;                  //set global variable to parameter
 23fd680:	8020      	strh	r0, [r4, #0]
    pinMode(config->pin, OUTPUT);       //added as a check in case default function isn't called before
 23fd682:	f001 f8fd 	bl	23fe880 <pinMode>
    analogWrite(pin, LOW);              //set pin to analog write, LOW = 0 (always OFF)
 23fd686:	8820      	ldrh	r0, [r4, #0]
 23fd688:	2100      	movs	r1, #0
 23fd68a:	f001 f90a 	bl	23fe8a2 <_Z11analogWritetm>
    return PWM_SUCCESS;                 //return status
}
 23fd68e:	2000      	movs	r0, #0
 23fd690:	bd10      	pop	{r4, pc}
 23fd692:	bf00      	nop
 23fd694:	1007ae78 	.word	0x1007ae78

023fd698 <_Z12pwm_set_freqP5pwm_tm>:

//Set PWM frequency in Hertz
int8_t pwm_set_freq(pwm_t *obj, uint32_t freq_hz)
{
 23fd698:	b510      	push	{r4, lr}
    }
    */


    uint32_t maxFreq;                           //local variable for the max frequency
    maxFreq = analogWriteMaxFrequency(pin);     //returns max frequency for the pin
 23fd69a:	4b06      	ldr	r3, [pc, #24]	; (23fd6b4 <_Z12pwm_set_freqP5pwm_tm+0x1c>)
{
 23fd69c:	460c      	mov	r4, r1
    maxFreq = analogWriteMaxFrequency(pin);     //returns max frequency for the pin
 23fd69e:	8818      	ldrh	r0, [r3, #0]
 23fd6a0:	f001 f95e 	bl	23fe960 <_Z23analogWriteMaxFrequencyt>

    if(freq_hz <= maxFreq)      //check to make sure frequency is less than the max value for a pin
 23fd6a4:	42a0      	cmp	r0, r4
    {
        frequency = freq_hz;        //set new global variable value to function parameter
 23fd6a6:	bf23      	ittte	cs
 23fd6a8:	4b03      	ldrcs	r3, [pc, #12]	; (23fd6b8 <_Z12pwm_set_freqP5pwm_tm+0x20>)
        return PWM_SUCCESS;         //return status
 23fd6aa:	2000      	movcs	r0, #0
        frequency = freq_hz;        //set new global variable value to function parameter
 23fd6ac:	601c      	strcs	r4, [r3, #0]
    }

    return PWM_ERROR;     //return status
 23fd6ae:	f04f 30ff 	movcc.w	r0, #4294967295	; 0xffffffff
}
 23fd6b2:	bd10      	pop	{r4, pc}
 23fd6b4:	1007ae78 	.word	0x1007ae78
 23fd6b8:	1007ae7c 	.word	0x1007ae7c
 23fd6bc:	00000000 	.word	0x00000000

023fd6c0 <_Z12pwm_set_dutyP5pwm_tf>:


//Set PWM duty cycle as a percentage
int8_t pwm_set_duty(pwm_t *obj, float duty_ratio)
{
 23fd6c0:	b508      	push	{r3, lr}
 23fd6c2:	ed2d 8b02 	vpush	{d8}
        return PWM_ERROR;
    }
    */


    uint32_t temp = (int)(pow(2,analogWriteResolution(pin)) + 1e-9) - 1;      //set max value for conversion (default is 8-bit, 255)
 23fd6c6:	4b20      	ldr	r3, [pc, #128]	; (23fd748 <_Z12pwm_set_dutyP5pwm_tf+0x88>)
{
 23fd6c8:	eeb0 8a40 	vmov.f32	s16, s0
    uint32_t temp = (int)(pow(2,analogWriteResolution(pin)) + 1e-9) - 1;      //set max value for conversion (default is 8-bit, 255)
 23fd6cc:	8818      	ldrh	r0, [r3, #0]
 23fd6ce:	f001 f92a 	bl	23fe926 <_Z21analogWriteResolutiont>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 23fd6d2:	f7ff fb0f 	bl	23fccf4 <__aeabi_ui2d>
 23fd6d6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 23fd738 <_Z12pwm_set_dutyP5pwm_tf+0x78>
 23fd6da:	ec41 0b11 	vmov	d1, r0, r1
 23fd6de:	f001 fa4b 	bl	23feb78 <pow>
 23fd6e2:	a317      	add	r3, pc, #92	; (adr r3, 23fd740 <_Z12pwm_set_dutyP5pwm_tf+0x80>)
 23fd6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fd6e8:	ec51 0b10 	vmov	r0, r1, d0
 23fd6ec:	f7ff f9c6 	bl	23fca7c <__adddf3>
 23fd6f0:	f7ff fe2a 	bl	23fd348 <__aeabi_d2iz>
    if((duty_ratio >= 0) || (duty_ratio <= 1))      //check for valid percentage passed
 23fd6f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 23fd6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    uint32_t temp = (int)(pow(2,analogWriteResolution(pin)) + 1e-9) - 1;      //set max value for conversion (default is 8-bit, 255)
 23fd6fc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    if((duty_ratio >= 0) || (duty_ratio <= 1))      //check for valid percentage passed
 23fd700:	da06      	bge.n	23fd710 <_Z12pwm_set_dutyP5pwm_tf+0x50>
 23fd702:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 23fd706:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23fd70a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fd70e:	d80e      	bhi.n	23fd72e <_Z12pwm_set_dutyP5pwm_tf+0x6e>
    {
        duty_cycle = duty_ratio * temp;     //convert from float % to uint32_t value (for analogWrite() function)   
 23fd710:	ee07 0a90 	vmov	s15, r0
 23fd714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23fd718:	ee27 0a88 	vmul.f32	s0, s15, s16
 23fd71c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 23fd720:	4b0a      	ldr	r3, [pc, #40]	; (23fd74c <_Z12pwm_set_dutyP5pwm_tf+0x8c>)
        return PWM_SUCCESS;                 //return status
 23fd722:	2000      	movs	r0, #0
        duty_cycle = duty_ratio * temp;     //convert from float % to uint32_t value (for analogWrite() function)   
 23fd724:	ed83 0a00 	vstr	s0, [r3]
    }

    return PWM_ERROR;       //return status
}
 23fd728:	ecbd 8b02 	vpop	{d8}
 23fd72c:	bd08      	pop	{r3, pc}
    return PWM_ERROR;       //return status
 23fd72e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fd732:	e7f9      	b.n	23fd728 <_Z12pwm_set_dutyP5pwm_tf+0x68>
 23fd734:	f3af 8000 	nop.w
 23fd738:	00000000 	.word	0x00000000
 23fd73c:	40000000 	.word	0x40000000
 23fd740:	e826d695 	.word	0xe826d695
 23fd744:	3e112e0b 	.word	0x3e112e0b
 23fd748:	1007ae78 	.word	0x1007ae78
 23fd74c:	1007ae74 	.word	0x1007ae74

023fd750 <_Z9pwm_startP5pwm_t>:

//start PWM module
int8_t pwm_start(pwm_t *obj)
{
 23fd750:	b508      	push	{r3, lr}
        return PWM_ERROR;
    }
    */


    analogWrite(pin, duty_cycle, frequency);        //set duty cycle and frequency and start PWM
 23fd752:	4b05      	ldr	r3, [pc, #20]	; (23fd768 <_Z9pwm_startP5pwm_t+0x18>)
 23fd754:	681a      	ldr	r2, [r3, #0]
 23fd756:	4b05      	ldr	r3, [pc, #20]	; (23fd76c <_Z9pwm_startP5pwm_t+0x1c>)
 23fd758:	6819      	ldr	r1, [r3, #0]
 23fd75a:	4b05      	ldr	r3, [pc, #20]	; (23fd770 <_Z9pwm_startP5pwm_t+0x20>)
 23fd75c:	8818      	ldrh	r0, [r3, #0]
 23fd75e:	f001 f8c6 	bl	23fe8ee <_Z11analogWritetmm>
    return PWM_SUCCESS;                             //return status
}
 23fd762:	2000      	movs	r0, #0
 23fd764:	bd08      	pop	{r3, pc}
 23fd766:	bf00      	nop
 23fd768:	1007ae7c 	.word	0x1007ae7c
 23fd76c:	1007ae74 	.word	0x1007ae74
 23fd770:	1007ae78 	.word	0x1007ae78

023fd774 <pwmdriver_cfg_setup>:

void pwmdriver_cfg_setup ( pwmdriver_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->pwm = HAL_PIN_NC;
 23fd774:	23ff      	movs	r3, #255	; 0xff
 23fd776:	7003      	strb	r3, [r0, #0]
    
    // Additional gpio pins

	cfg->dev_pwm_freq 	  = 5000;
 23fd778:	f241 3388 	movw	r3, #5000	; 0x1388
 23fd77c:	6043      	str	r3, [r0, #4]
}
 23fd77e:	4770      	bx	lr

023fd780 <pwmdriver_init>:

PWMDRIVER_RETVAL pwmdriver_init ( pwmdriver_t *ctx, pwmdriver_cfg_t *cfg )
{
 23fd780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd782:	460d      	mov	r5, r1
 23fd784:	4604      	mov	r4, r0
    pwm_config_t pwm_cfg;
    
    pwm_configure_default( &pwm_cfg );
 23fd786:	4668      	mov	r0, sp
 23fd788:	f7ff ff64 	bl	23fd654 <_Z21pwm_configure_defaultP12pwm_config_t>

	pwm_cfg.pin      = cfg->pwm;
 23fd78c:	782b      	ldrb	r3, [r5, #0]
	pwm_cfg.freq_hz  = cfg->dev_pwm_freq;

    ctx->pwm_freq = cfg->dev_pwm_freq;
    pwm_open( &ctx->pwm, &pwm_cfg );
 23fd78e:	4669      	mov	r1, sp
	pwm_cfg.pin      = cfg->pwm;
 23fd790:	f88d 3000 	strb.w	r3, [sp]
	pwm_cfg.freq_hz  = cfg->dev_pwm_freq;
 23fd794:	686b      	ldr	r3, [r5, #4]
    pwm_open( &ctx->pwm, &pwm_cfg );
 23fd796:	4620      	mov	r0, r4
    ctx->pwm_freq = cfg->dev_pwm_freq;
 23fd798:	60e3      	str	r3, [r4, #12]
	pwm_cfg.freq_hz  = cfg->dev_pwm_freq;
 23fd79a:	9301      	str	r3, [sp, #4]
    pwm_open( &ctx->pwm, &pwm_cfg );
 23fd79c:	f7ff ff6c 	bl	23fd678 <_Z8pwm_openP5pwm_tP12pwm_config_t>
    pwm_set_freq( &ctx->pwm, pwm_cfg.freq_hz );
 23fd7a0:	4620      	mov	r0, r4
 23fd7a2:	9901      	ldr	r1, [sp, #4]
 23fd7a4:	f7ff ff78 	bl	23fd698 <_Z12pwm_set_freqP5pwm_tm>

    return PWMDRIVER_OK;
}
 23fd7a8:	2000      	movs	r0, #0
 23fd7aa:	b003      	add	sp, #12
 23fd7ac:	bd30      	pop	{r4, r5, pc}

023fd7ae <pwmdriver_set_duty_cycle>:

void pwmdriver_set_duty_cycle ( pwmdriver_t *ctx, float duty_cycle )
{
    pwm_set_duty( &ctx->pwm, duty_cycle ); 
 23fd7ae:	f7ff bf87 	b.w	23fd6c0 <_Z12pwm_set_dutyP5pwm_tf>

023fd7b2 <pwmdriver_pwm_start>:
    pwm_stop( &ctx->pwm ); 
}

void pwmdriver_pwm_start ( pwmdriver_t *ctx )
{
    pwm_start( &ctx->pwm ); 
 23fd7b2:	f7ff bfcd 	b.w	23fd750 <_Z9pwm_startP5pwm_t>

023fd7b6 <_Z11Delay_100msv>:
inline void Delay_100ms( ) {delay(100);}
 23fd7b6:	2064      	movs	r0, #100	; 0x64
 23fd7b8:	f000 bbfe 	b.w	23fdfb8 <delay>

023fd7bc <temphum13_cfg_setup>:

void temphum13_cfg_setup ( temphum13_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->scl = HAL_PIN_NC;
 23fd7bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd7c0:	8003      	strh	r3, [r0, #0]
    cfg->sda = HAL_PIN_NC;

    cfg->i2c_speed = I2C_MASTER_SPEED_STANDARD; 
 23fd7c2:	2300      	movs	r3, #0
 23fd7c4:	6043      	str	r3, [r0, #4]
    cfg->i2c_address = TEMPHUM13_DEVICE_ADDRESS;
 23fd7c6:	2340      	movs	r3, #64	; 0x40
 23fd7c8:	7203      	strb	r3, [r0, #8]
}
 23fd7ca:	4770      	bx	lr

023fd7cc <temphum13_init>:

TEMPHUM13_RETVAL temphum13_init ( temphum13_t *ctx, temphum13_cfg_t *cfg )
{
 23fd7cc:	b530      	push	{r4, r5, lr}
 23fd7ce:	460d      	mov	r5, r1
 23fd7d0:	4604      	mov	r4, r0
 23fd7d2:	b085      	sub	sp, #20
    i2c_master_config_t i2c_cfg;

    i2c_master_configure_default( &i2c_cfg );
 23fd7d4:	a801      	add	r0, sp, #4
 23fd7d6:	f7ff fee9 	bl	23fd5ac <_Z28i2c_master_configure_defaultP19i2c_master_config_t>
    i2c_cfg.speed  = cfg->i2c_speed;
 23fd7da:	686b      	ldr	r3, [r5, #4]
    i2c_cfg.scl    = cfg->scl;
    i2c_cfg.sda    = cfg->sda;

    ctx->slave_address = cfg->i2c_address;

    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fd7dc:	4620      	mov	r0, r4
    i2c_cfg.speed  = cfg->i2c_speed;
 23fd7de:	9302      	str	r3, [sp, #8]
    i2c_cfg.scl    = cfg->scl;
 23fd7e0:	782b      	ldrb	r3, [r5, #0]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fd7e2:	a901      	add	r1, sp, #4
    i2c_cfg.scl    = cfg->scl;
 23fd7e4:	f88d 3006 	strb.w	r3, [sp, #6]
    i2c_cfg.sda    = cfg->sda;
 23fd7e8:	786b      	ldrb	r3, [r5, #1]
 23fd7ea:	f88d 3005 	strb.w	r3, [sp, #5]
    ctx->slave_address = cfg->i2c_address;
 23fd7ee:	7a2b      	ldrb	r3, [r5, #8]
 23fd7f0:	7323      	strb	r3, [r4, #12]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fd7f2:	f7ff feed 	bl	23fd5d0 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>
 23fd7f6:	3001      	adds	r0, #1
 23fd7f8:	d00a      	beq.n	23fd810 <temphum13_init+0x44>
    {
        return TEMPHUM13_INIT_ERROR;
    }

    i2c_master_set_slave_address( &ctx->i2c, ctx->slave_address );
 23fd7fa:	7b21      	ldrb	r1, [r4, #12]
 23fd7fc:	4620      	mov	r0, r4
 23fd7fe:	f7ff ff05 	bl	23fd60c <_Z28i2c_master_set_slave_addressP12i2c_master_th>
    i2c_master_set_speed( &ctx->i2c, cfg->i2c_speed );
 23fd802:	4620      	mov	r0, r4
 23fd804:	6869      	ldr	r1, [r5, #4]
 23fd806:	f7ff fef3 	bl	23fd5f0 <_Z20i2c_master_set_speedP12i2c_master_tm>

    return TEMPHUM13_OK;
 23fd80a:	2000      	movs	r0, #0
}
 23fd80c:	b005      	add	sp, #20
 23fd80e:	bd30      	pop	{r4, r5, pc}
        return TEMPHUM13_INIT_ERROR;
 23fd810:	20ff      	movs	r0, #255	; 0xff
 23fd812:	e7fb      	b.n	23fd80c <temphum13_init+0x40>

023fd814 <temphum13_soft_reset>:

void temphum13_soft_reset ( temphum13_t *ctx )
{
    uint8_t aux_reg_address;

    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fd814:	23fe      	movs	r3, #254	; 0xfe
{
 23fd816:	b507      	push	{r0, r1, r2, lr}

    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fd818:	2201      	movs	r2, #1
 23fd81a:	f10d 0107 	add.w	r1, sp, #7
    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fd81e:	f88d 3007 	strb.w	r3, [sp, #7]
    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fd822:	f7ff fef9 	bl	23fd618 <_Z16i2c_master_writeP12i2c_master_tPhj>
}
 23fd826:	b003      	add	sp, #12
 23fd828:	f85d fb04 	ldr.w	pc, [sp], #4

023fd82c <temphum13_default_cfg>:
{
 23fd82c:	b507      	push	{r0, r1, r2, lr}
 23fd82e:	9001      	str	r0, [sp, #4]
    Delay_100ms( );
 23fd830:	f7ff ffc1 	bl	23fd7b6 <_Z11Delay_100msv>
    Delay_100ms( );
 23fd834:	f7ff ffbf 	bl	23fd7b6 <_Z11Delay_100msv>
    Delay_100ms( );
 23fd838:	f7ff ffbd 	bl	23fd7b6 <_Z11Delay_100msv>
    Delay_100ms( );
 23fd83c:	f7ff ffbb 	bl	23fd7b6 <_Z11Delay_100msv>
    Delay_100ms( );
 23fd840:	f7ff ffb9 	bl	23fd7b6 <_Z11Delay_100msv>
    temphum13_soft_reset( ctx );
 23fd844:	9801      	ldr	r0, [sp, #4]
 23fd846:	f7ff ffe5 	bl	23fd814 <temphum13_soft_reset>
    Delay_100ms( );
 23fd84a:	f7ff ffb4 	bl	23fd7b6 <_Z11Delay_100msv>
    Delay_100ms( );
 23fd84e:	f7ff ffb2 	bl	23fd7b6 <_Z11Delay_100msv>
    Delay_100ms( );
 23fd852:	f7ff ffb0 	bl	23fd7b6 <_Z11Delay_100msv>
    Delay_100ms( );
 23fd856:	f7ff ffae 	bl	23fd7b6 <_Z11Delay_100msv>
    Delay_100ms( );
 23fd85a:	f7ff ffac 	bl	23fd7b6 <_Z11Delay_100msv>
}
 23fd85e:	b003      	add	sp, #12
 23fd860:	f85d fb04 	ldr.w	pc, [sp], #4

023fd864 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fd864:	b509      	push	{r0, r3, lr}
 23fd866:	4804      	ldr	r0, [pc, #16]	; (23fd878 <os_mutex_recursive_create+0x14>)
 23fd868:	6800      	ldr	r0, [r0, #0]
 23fd86a:	4b04      	ldr	r3, [pc, #16]	; (23fd87c <os_mutex_recursive_create+0x18>)
 23fd86c:	4403      	add	r3, r0
 23fd86e:	681b      	ldr	r3, [r3, #0]
 23fd870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd872:	9302      	str	r3, [sp, #8]
 23fd874:	bd09      	pop	{r0, r3, pc}
 23fd876:	0000      	.short	0x0000
 23fd878:	1007adc8 	.word	0x1007adc8
 23fd87c:	00000030 	.word	0x00000030

023fd880 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fd880:	b509      	push	{r0, r3, lr}
 23fd882:	4804      	ldr	r0, [pc, #16]	; (23fd894 <HAL_RNG_GetRandomNumber+0x14>)
 23fd884:	6800      	ldr	r0, [r0, #0]
 23fd886:	4b04      	ldr	r3, [pc, #16]	; (23fd898 <HAL_RNG_GetRandomNumber+0x18>)
 23fd888:	4403      	add	r3, r0
 23fd88a:	681b      	ldr	r3, [r3, #0]
 23fd88c:	685b      	ldr	r3, [r3, #4]
 23fd88e:	9302      	str	r3, [sp, #8]
 23fd890:	bd09      	pop	{r0, r3, pc}
 23fd892:	0000      	.short	0x0000
 23fd894:	1007adc8 	.word	0x1007adc8
 23fd898:	00000000 	.word	0x00000000

023fd89c <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fd89c:	b509      	push	{r0, r3, lr}
 23fd89e:	4804      	ldr	r0, [pc, #16]	; (23fd8b0 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fd8a0:	6800      	ldr	r0, [r0, #0]
 23fd8a2:	4b04      	ldr	r3, [pc, #16]	; (23fd8b4 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fd8a4:	4403      	add	r3, r0
 23fd8a6:	681b      	ldr	r3, [r3, #0]
 23fd8a8:	695b      	ldr	r3, [r3, #20]
 23fd8aa:	9302      	str	r3, [sp, #8]
 23fd8ac:	bd09      	pop	{r0, r3, pc}
 23fd8ae:	0000      	.short	0x0000
 23fd8b0:	1007adc8 	.word	0x1007adc8
 23fd8b4:	00000000 	.word	0x00000000

023fd8b8 <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
 23fd8b8:	b509      	push	{r0, r3, lr}
 23fd8ba:	4804      	ldr	r0, [pc, #16]	; (23fd8cc <hal_pin_validate_function+0x14>)
 23fd8bc:	6800      	ldr	r0, [r0, #0]
 23fd8be:	4b04      	ldr	r3, [pc, #16]	; (23fd8d0 <hal_pin_validate_function+0x18>)
 23fd8c0:	4403      	add	r3, r0
 23fd8c2:	681b      	ldr	r3, [r3, #0]
 23fd8c4:	685b      	ldr	r3, [r3, #4]
 23fd8c6:	9302      	str	r3, [sp, #8]
 23fd8c8:	bd09      	pop	{r0, r3, pc}
 23fd8ca:	0000      	.short	0x0000
 23fd8cc:	1007adc8 	.word	0x1007adc8
 23fd8d0:	00000014 	.word	0x00000014

023fd8d4 <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fd8d4:	b509      	push	{r0, r3, lr}
 23fd8d6:	4804      	ldr	r0, [pc, #16]	; (23fd8e8 <hal_gpio_mode+0x14>)
 23fd8d8:	6800      	ldr	r0, [r0, #0]
 23fd8da:	4b04      	ldr	r3, [pc, #16]	; (23fd8ec <hal_gpio_mode+0x18>)
 23fd8dc:	4403      	add	r3, r0
 23fd8de:	681b      	ldr	r3, [r3, #0]
 23fd8e0:	689b      	ldr	r3, [r3, #8]
 23fd8e2:	9302      	str	r3, [sp, #8]
 23fd8e4:	bd09      	pop	{r0, r3, pc}
 23fd8e6:	0000      	.short	0x0000
 23fd8e8:	1007adc8 	.word	0x1007adc8
 23fd8ec:	00000014 	.word	0x00000014

023fd8f0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fd8f0:	b509      	push	{r0, r3, lr}
 23fd8f2:	4804      	ldr	r0, [pc, #16]	; (23fd904 <hal_gpio_get_mode+0x14>)
 23fd8f4:	6800      	ldr	r0, [r0, #0]
 23fd8f6:	4b04      	ldr	r3, [pc, #16]	; (23fd908 <hal_gpio_get_mode+0x18>)
 23fd8f8:	4403      	add	r3, r0
 23fd8fa:	681b      	ldr	r3, [r3, #0]
 23fd8fc:	68db      	ldr	r3, [r3, #12]
 23fd8fe:	9302      	str	r3, [sp, #8]
 23fd900:	bd09      	pop	{r0, r3, pc}
 23fd902:	0000      	.short	0x0000
 23fd904:	1007adc8 	.word	0x1007adc8
 23fd908:	00000014 	.word	0x00000014

023fd90c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
 23fd90c:	b509      	push	{r0, r3, lr}
 23fd90e:	4804      	ldr	r0, [pc, #16]	; (23fd920 <HAL_DAC_Write+0x14>)
 23fd910:	6800      	ldr	r0, [r0, #0]
 23fd912:	4b04      	ldr	r3, [pc, #16]	; (23fd924 <HAL_DAC_Write+0x18>)
 23fd914:	4403      	add	r3, r0
 23fd916:	681b      	ldr	r3, [r3, #0]
 23fd918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd91a:	9302      	str	r3, [sp, #8]
 23fd91c:	bd09      	pop	{r0, r3, pc}
 23fd91e:	0000      	.short	0x0000
 23fd920:	1007adc8 	.word	0x1007adc8
 23fd924:	00000014 	.word	0x00000014

023fd928 <HAL_DAC_Get_Resolution>:

DYNALIB_FN(22, hal_gpio, hal_pwm_write_with_frequency, void(uint16_t, uint8_t, uint16_t))
DYNALIB_FN(23, hal_gpio, HAL_DAC_Is_Enabled, uint8_t(hal_pin_t))
DYNALIB_FN(24, hal_gpio, HAL_DAC_Enable, uint8_t(hal_pin_t, uint8_t))

DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
 23fd928:	b509      	push	{r0, r3, lr}
 23fd92a:	4804      	ldr	r0, [pc, #16]	; (23fd93c <HAL_DAC_Get_Resolution+0x14>)
 23fd92c:	6800      	ldr	r0, [r0, #0]
 23fd92e:	4b04      	ldr	r3, [pc, #16]	; (23fd940 <HAL_DAC_Get_Resolution+0x18>)
 23fd930:	4403      	add	r3, r0
 23fd932:	681b      	ldr	r3, [r3, #0]
 23fd934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 23fd936:	9302      	str	r3, [sp, #8]
 23fd938:	bd09      	pop	{r0, r3, pc}
 23fd93a:	0000      	.short	0x0000
 23fd93c:	1007adc8 	.word	0x1007adc8
 23fd940:	00000014 	.word	0x00000014

023fd944 <hal_pwm_get_resolution>:
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
 23fd944:	b509      	push	{r0, r3, lr}
 23fd946:	4804      	ldr	r0, [pc, #16]	; (23fd958 <hal_pwm_get_resolution+0x14>)
 23fd948:	6800      	ldr	r0, [r0, #0]
 23fd94a:	4b04      	ldr	r3, [pc, #16]	; (23fd95c <hal_pwm_get_resolution+0x18>)
 23fd94c:	4403      	add	r3, r0
 23fd94e:	681b      	ldr	r3, [r3, #0]
 23fd950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fd952:	9302      	str	r3, [sp, #8]
 23fd954:	bd09      	pop	{r0, r3, pc}
 23fd956:	0000      	.short	0x0000
 23fd958:	1007adc8 	.word	0x1007adc8
 23fd95c:	00000014 	.word	0x00000014

023fd960 <hal_pwm_write_ext>:
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
 23fd960:	b509      	push	{r0, r3, lr}
 23fd962:	4804      	ldr	r0, [pc, #16]	; (23fd974 <hal_pwm_write_ext+0x14>)
 23fd964:	6800      	ldr	r0, [r0, #0]
 23fd966:	4b04      	ldr	r3, [pc, #16]	; (23fd978 <hal_pwm_write_ext+0x18>)
 23fd968:	4403      	add	r3, r0
 23fd96a:	681b      	ldr	r3, [r3, #0]
 23fd96c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 23fd96e:	9302      	str	r3, [sp, #8]
 23fd970:	bd09      	pop	{r0, r3, pc}
 23fd972:	0000      	.short	0x0000
 23fd974:	1007adc8 	.word	0x1007adc8
 23fd978:	00000014 	.word	0x00000014

023fd97c <hal_pwm_write_with_frequency_ext>:
DYNALIB_FN(31, hal_gpio, hal_pwm_write_with_frequency_ext, void(uint16_t, uint32_t, uint32_t))
 23fd97c:	b509      	push	{r0, r3, lr}
 23fd97e:	4804      	ldr	r0, [pc, #16]	; (23fd990 <hal_pwm_write_with_frequency_ext+0x14>)
 23fd980:	6800      	ldr	r0, [r0, #0]
 23fd982:	4b04      	ldr	r3, [pc, #16]	; (23fd994 <hal_pwm_write_with_frequency_ext+0x18>)
 23fd984:	4403      	add	r3, r0
 23fd986:	681b      	ldr	r3, [r3, #0]
 23fd988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 23fd98a:	9302      	str	r3, [sp, #8]
 23fd98c:	bd09      	pop	{r0, r3, pc}
 23fd98e:	0000      	.short	0x0000
 23fd990:	1007adc8 	.word	0x1007adc8
 23fd994:	00000014 	.word	0x00000014

023fd998 <hal_pwm_get_max_frequency>:
DYNALIB_FN(32, hal_gpio, hal_pwm_get_frequency_ext, uint32_t(uint16_t))
DYNALIB_FN(33, hal_gpio, hal_pwm_get_analog_value_ext, uint32_t(uint16_t))
DYNALIB_FN(34, hal_gpio, hal_pwm_get_max_frequency, uint32_t(uint16_t))
 23fd998:	b509      	push	{r0, r3, lr}
 23fd99a:	4804      	ldr	r0, [pc, #16]	; (23fd9ac <hal_pwm_get_max_frequency+0x14>)
 23fd99c:	6800      	ldr	r0, [r0, #0]
 23fd99e:	4b04      	ldr	r3, [pc, #16]	; (23fd9b0 <hal_pwm_get_max_frequency+0x18>)
 23fd9a0:	4403      	add	r3, r0
 23fd9a2:	681b      	ldr	r3, [r3, #0]
 23fd9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fd9a8:	9302      	str	r3, [sp, #8]
 23fd9aa:	bd09      	pop	{r0, r3, pc}
 23fd9ac:	1007adc8 	.word	0x1007adc8
 23fd9b0:	00000014 	.word	0x00000014

023fd9b4 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fd9b4:	b509      	push	{r0, r3, lr}
 23fd9b6:	4804      	ldr	r0, [pc, #16]	; (23fd9c8 <hal_i2c_set_speed+0x14>)
 23fd9b8:	6800      	ldr	r0, [r0, #0]
 23fd9ba:	4b04      	ldr	r3, [pc, #16]	; (23fd9cc <hal_i2c_set_speed+0x18>)
 23fd9bc:	4403      	add	r3, r0
 23fd9be:	681b      	ldr	r3, [r3, #0]
 23fd9c0:	681b      	ldr	r3, [r3, #0]
 23fd9c2:	9302      	str	r3, [sp, #8]
 23fd9c4:	bd09      	pop	{r0, r3, pc}
 23fd9c6:	0000      	.short	0x0000
 23fd9c8:	1007adc8 	.word	0x1007adc8
 23fd9cc:	00000010 	.word	0x00000010

023fd9d0 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fd9d0:	b509      	push	{r0, r3, lr}
 23fd9d2:	4804      	ldr	r0, [pc, #16]	; (23fd9e4 <hal_i2c_begin+0x14>)
 23fd9d4:	6800      	ldr	r0, [r0, #0]
 23fd9d6:	4b04      	ldr	r3, [pc, #16]	; (23fd9e8 <hal_i2c_begin+0x18>)
 23fd9d8:	4403      	add	r3, r0
 23fd9da:	681b      	ldr	r3, [r3, #0]
 23fd9dc:	68db      	ldr	r3, [r3, #12]
 23fd9de:	9302      	str	r3, [sp, #8]
 23fd9e0:	bd09      	pop	{r0, r3, pc}
 23fd9e2:	0000      	.short	0x0000
 23fd9e4:	1007adc8 	.word	0x1007adc8
 23fd9e8:	00000010 	.word	0x00000010

023fd9ec <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fd9ec:	b509      	push	{r0, r3, lr}
 23fd9ee:	4804      	ldr	r0, [pc, #16]	; (23fda00 <hal_i2c_begin_transmission+0x14>)
 23fd9f0:	6800      	ldr	r0, [r0, #0]
 23fd9f2:	4b04      	ldr	r3, [pc, #16]	; (23fda04 <hal_i2c_begin_transmission+0x18>)
 23fd9f4:	4403      	add	r3, r0
 23fd9f6:	681b      	ldr	r3, [r3, #0]
 23fd9f8:	699b      	ldr	r3, [r3, #24]
 23fd9fa:	9302      	str	r3, [sp, #8]
 23fd9fc:	bd09      	pop	{r0, r3, pc}
 23fd9fe:	0000      	.short	0x0000
 23fda00:	1007adc8 	.word	0x1007adc8
 23fda04:	00000010 	.word	0x00000010

023fda08 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fda08:	b509      	push	{r0, r3, lr}
 23fda0a:	4804      	ldr	r0, [pc, #16]	; (23fda1c <hal_i2c_end_transmission+0x14>)
 23fda0c:	6800      	ldr	r0, [r0, #0]
 23fda0e:	4b04      	ldr	r3, [pc, #16]	; (23fda20 <hal_i2c_end_transmission+0x18>)
 23fda10:	4403      	add	r3, r0
 23fda12:	681b      	ldr	r3, [r3, #0]
 23fda14:	69db      	ldr	r3, [r3, #28]
 23fda16:	9302      	str	r3, [sp, #8]
 23fda18:	bd09      	pop	{r0, r3, pc}
 23fda1a:	0000      	.short	0x0000
 23fda1c:	1007adc8 	.word	0x1007adc8
 23fda20:	00000010 	.word	0x00000010

023fda24 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fda24:	b509      	push	{r0, r3, lr}
 23fda26:	4804      	ldr	r0, [pc, #16]	; (23fda38 <hal_i2c_write+0x14>)
 23fda28:	6800      	ldr	r0, [r0, #0]
 23fda2a:	4b04      	ldr	r3, [pc, #16]	; (23fda3c <hal_i2c_write+0x18>)
 23fda2c:	4403      	add	r3, r0
 23fda2e:	681b      	ldr	r3, [r3, #0]
 23fda30:	6a1b      	ldr	r3, [r3, #32]
 23fda32:	9302      	str	r3, [sp, #8]
 23fda34:	bd09      	pop	{r0, r3, pc}
 23fda36:	0000      	.short	0x0000
 23fda38:	1007adc8 	.word	0x1007adc8
 23fda3c:	00000010 	.word	0x00000010

023fda40 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fda40:	b509      	push	{r0, r3, lr}
 23fda42:	4804      	ldr	r0, [pc, #16]	; (23fda54 <hal_i2c_available+0x14>)
 23fda44:	6800      	ldr	r0, [r0, #0]
 23fda46:	4b04      	ldr	r3, [pc, #16]	; (23fda58 <hal_i2c_available+0x18>)
 23fda48:	4403      	add	r3, r0
 23fda4a:	681b      	ldr	r3, [r3, #0]
 23fda4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fda4e:	9302      	str	r3, [sp, #8]
 23fda50:	bd09      	pop	{r0, r3, pc}
 23fda52:	0000      	.short	0x0000
 23fda54:	1007adc8 	.word	0x1007adc8
 23fda58:	00000010 	.word	0x00000010

023fda5c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fda5c:	b509      	push	{r0, r3, lr}
 23fda5e:	4804      	ldr	r0, [pc, #16]	; (23fda70 <hal_i2c_read+0x14>)
 23fda60:	6800      	ldr	r0, [r0, #0]
 23fda62:	4b04      	ldr	r3, [pc, #16]	; (23fda74 <hal_i2c_read+0x18>)
 23fda64:	4403      	add	r3, r0
 23fda66:	681b      	ldr	r3, [r3, #0]
 23fda68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fda6a:	9302      	str	r3, [sp, #8]
 23fda6c:	bd09      	pop	{r0, r3, pc}
 23fda6e:	0000      	.short	0x0000
 23fda70:	1007adc8 	.word	0x1007adc8
 23fda74:	00000010 	.word	0x00000010

023fda78 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fda78:	b509      	push	{r0, r3, lr}
 23fda7a:	4804      	ldr	r0, [pc, #16]	; (23fda8c <hal_i2c_peek+0x14>)
 23fda7c:	6800      	ldr	r0, [r0, #0]
 23fda7e:	4b04      	ldr	r3, [pc, #16]	; (23fda90 <hal_i2c_peek+0x18>)
 23fda80:	4403      	add	r3, r0
 23fda82:	681b      	ldr	r3, [r3, #0]
 23fda84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fda86:	9302      	str	r3, [sp, #8]
 23fda88:	bd09      	pop	{r0, r3, pc}
 23fda8a:	0000      	.short	0x0000
 23fda8c:	1007adc8 	.word	0x1007adc8
 23fda90:	00000010 	.word	0x00000010

023fda94 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fda94:	b509      	push	{r0, r3, lr}
 23fda96:	4804      	ldr	r0, [pc, #16]	; (23fdaa8 <hal_i2c_flush+0x14>)
 23fda98:	6800      	ldr	r0, [r0, #0]
 23fda9a:	4b04      	ldr	r3, [pc, #16]	; (23fdaac <hal_i2c_flush+0x18>)
 23fda9c:	4403      	add	r3, r0
 23fda9e:	681b      	ldr	r3, [r3, #0]
 23fdaa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fdaa2:	9302      	str	r3, [sp, #8]
 23fdaa4:	bd09      	pop	{r0, r3, pc}
 23fdaa6:	0000      	.short	0x0000
 23fdaa8:	1007adc8 	.word	0x1007adc8
 23fdaac:	00000010 	.word	0x00000010

023fdab0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fdab0:	b509      	push	{r0, r3, lr}
 23fdab2:	4804      	ldr	r0, [pc, #16]	; (23fdac4 <hal_i2c_is_enabled+0x14>)
 23fdab4:	6800      	ldr	r0, [r0, #0]
 23fdab6:	4b04      	ldr	r3, [pc, #16]	; (23fdac8 <hal_i2c_is_enabled+0x18>)
 23fdab8:	4403      	add	r3, r0
 23fdaba:	681b      	ldr	r3, [r3, #0]
 23fdabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fdabe:	9302      	str	r3, [sp, #8]
 23fdac0:	bd09      	pop	{r0, r3, pc}
 23fdac2:	0000      	.short	0x0000
 23fdac4:	1007adc8 	.word	0x1007adc8
 23fdac8:	00000010 	.word	0x00000010

023fdacc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fdacc:	b509      	push	{r0, r3, lr}
 23fdace:	4804      	ldr	r0, [pc, #16]	; (23fdae0 <hal_i2c_init+0x14>)
 23fdad0:	6800      	ldr	r0, [r0, #0]
 23fdad2:	4b04      	ldr	r3, [pc, #16]	; (23fdae4 <hal_i2c_init+0x18>)
 23fdad4:	4403      	add	r3, r0
 23fdad6:	681b      	ldr	r3, [r3, #0]
 23fdad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fdada:	9302      	str	r3, [sp, #8]
 23fdadc:	bd09      	pop	{r0, r3, pc}
 23fdade:	0000      	.short	0x0000
 23fdae0:	1007adc8 	.word	0x1007adc8
 23fdae4:	00000010 	.word	0x00000010

023fdae8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fdae8:	b509      	push	{r0, r3, lr}
 23fdaea:	4804      	ldr	r0, [pc, #16]	; (23fdafc <inet_inet_ntop+0x14>)
 23fdaec:	6800      	ldr	r0, [r0, #0]
 23fdaee:	4b04      	ldr	r3, [pc, #16]	; (23fdb00 <inet_inet_ntop+0x18>)
 23fdaf0:	4403      	add	r3, r0
 23fdaf2:	681b      	ldr	r3, [r3, #0]
 23fdaf4:	695b      	ldr	r3, [r3, #20]
 23fdaf6:	9302      	str	r3, [sp, #8]
 23fdaf8:	bd09      	pop	{r0, r3, pc}
 23fdafa:	0000      	.short	0x0000
 23fdafc:	1007adc8 	.word	0x1007adc8
 23fdb00:	0000004c 	.word	0x0000004c

023fdb04 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fdb04:	b509      	push	{r0, r3, lr}
 23fdb06:	4804      	ldr	r0, [pc, #16]	; (23fdb18 <netdb_freeaddrinfo+0x14>)
 23fdb08:	6800      	ldr	r0, [r0, #0]
 23fdb0a:	4b04      	ldr	r3, [pc, #16]	; (23fdb1c <netdb_freeaddrinfo+0x18>)
 23fdb0c:	4403      	add	r3, r0
 23fdb0e:	681b      	ldr	r3, [r3, #0]
 23fdb10:	689b      	ldr	r3, [r3, #8]
 23fdb12:	9302      	str	r3, [sp, #8]
 23fdb14:	bd09      	pop	{r0, r3, pc}
 23fdb16:	0000      	.short	0x0000
 23fdb18:	1007adc8 	.word	0x1007adc8
 23fdb1c:	00000050 	.word	0x00000050

023fdb20 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fdb20:	b509      	push	{r0, r3, lr}
 23fdb22:	4804      	ldr	r0, [pc, #16]	; (23fdb34 <netdb_getaddrinfo+0x14>)
 23fdb24:	6800      	ldr	r0, [r0, #0]
 23fdb26:	4b04      	ldr	r3, [pc, #16]	; (23fdb38 <netdb_getaddrinfo+0x18>)
 23fdb28:	4403      	add	r3, r0
 23fdb2a:	681b      	ldr	r3, [r3, #0]
 23fdb2c:	68db      	ldr	r3, [r3, #12]
 23fdb2e:	9302      	str	r3, [sp, #8]
 23fdb30:	bd09      	pop	{r0, r3, pc}
 23fdb32:	0000      	.short	0x0000
 23fdb34:	1007adc8 	.word	0x1007adc8
 23fdb38:	00000050 	.word	0x00000050

023fdb3c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fdb3c:	b509      	push	{r0, r3, lr}
 23fdb3e:	4804      	ldr	r0, [pc, #16]	; (23fdb50 <hal_spi_init+0x14>)
 23fdb40:	6800      	ldr	r0, [r0, #0]
 23fdb42:	4b04      	ldr	r3, [pc, #16]	; (23fdb54 <hal_spi_init+0x18>)
 23fdb44:	4403      	add	r3, r0
 23fdb46:	681b      	ldr	r3, [r3, #0]
 23fdb48:	69db      	ldr	r3, [r3, #28]
 23fdb4a:	9302      	str	r3, [sp, #8]
 23fdb4c:	bd09      	pop	{r0, r3, pc}
 23fdb4e:	0000      	.short	0x0000
 23fdb50:	1007adc8 	.word	0x1007adc8
 23fdb54:	00000018 	.word	0x00000018

023fdb58 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fdb58:	b509      	push	{r0, r3, lr}
 23fdb5a:	4804      	ldr	r0, [pc, #16]	; (23fdb6c <hal_spi_is_enabled+0x14>)
 23fdb5c:	6800      	ldr	r0, [r0, #0]
 23fdb5e:	4b04      	ldr	r3, [pc, #16]	; (23fdb70 <hal_spi_is_enabled+0x18>)
 23fdb60:	4403      	add	r3, r0
 23fdb62:	681b      	ldr	r3, [r3, #0]
 23fdb64:	6a1b      	ldr	r3, [r3, #32]
 23fdb66:	9302      	str	r3, [sp, #8]
 23fdb68:	bd09      	pop	{r0, r3, pc}
 23fdb6a:	0000      	.short	0x0000
 23fdb6c:	1007adc8 	.word	0x1007adc8
 23fdb70:	00000018 	.word	0x00000018

023fdb74 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fdb74:	b509      	push	{r0, r3, lr}
 23fdb76:	4804      	ldr	r0, [pc, #16]	; (23fdb88 <hal_usart_write+0x14>)
 23fdb78:	6800      	ldr	r0, [r0, #0]
 23fdb7a:	4b04      	ldr	r3, [pc, #16]	; (23fdb8c <hal_usart_write+0x18>)
 23fdb7c:	4403      	add	r3, r0
 23fdb7e:	681b      	ldr	r3, [r3, #0]
 23fdb80:	68db      	ldr	r3, [r3, #12]
 23fdb82:	9302      	str	r3, [sp, #8]
 23fdb84:	bd09      	pop	{r0, r3, pc}
 23fdb86:	0000      	.short	0x0000
 23fdb88:	1007adc8 	.word	0x1007adc8
 23fdb8c:	00000024 	.word	0x00000024

023fdb90 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fdb90:	b509      	push	{r0, r3, lr}
 23fdb92:	4804      	ldr	r0, [pc, #16]	; (23fdba4 <hal_usart_available+0x14>)
 23fdb94:	6800      	ldr	r0, [r0, #0]
 23fdb96:	4b04      	ldr	r3, [pc, #16]	; (23fdba8 <hal_usart_available+0x18>)
 23fdb98:	4403      	add	r3, r0
 23fdb9a:	681b      	ldr	r3, [r3, #0]
 23fdb9c:	691b      	ldr	r3, [r3, #16]
 23fdb9e:	9302      	str	r3, [sp, #8]
 23fdba0:	bd09      	pop	{r0, r3, pc}
 23fdba2:	0000      	.short	0x0000
 23fdba4:	1007adc8 	.word	0x1007adc8
 23fdba8:	00000024 	.word	0x00000024

023fdbac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fdbac:	b509      	push	{r0, r3, lr}
 23fdbae:	4804      	ldr	r0, [pc, #16]	; (23fdbc0 <hal_usart_read+0x14>)
 23fdbb0:	6800      	ldr	r0, [r0, #0]
 23fdbb2:	4b04      	ldr	r3, [pc, #16]	; (23fdbc4 <hal_usart_read+0x18>)
 23fdbb4:	4403      	add	r3, r0
 23fdbb6:	681b      	ldr	r3, [r3, #0]
 23fdbb8:	695b      	ldr	r3, [r3, #20]
 23fdbba:	9302      	str	r3, [sp, #8]
 23fdbbc:	bd09      	pop	{r0, r3, pc}
 23fdbbe:	0000      	.short	0x0000
 23fdbc0:	1007adc8 	.word	0x1007adc8
 23fdbc4:	00000024 	.word	0x00000024

023fdbc8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fdbc8:	b509      	push	{r0, r3, lr}
 23fdbca:	4804      	ldr	r0, [pc, #16]	; (23fdbdc <hal_usart_peek+0x14>)
 23fdbcc:	6800      	ldr	r0, [r0, #0]
 23fdbce:	4b04      	ldr	r3, [pc, #16]	; (23fdbe0 <hal_usart_peek+0x18>)
 23fdbd0:	4403      	add	r3, r0
 23fdbd2:	681b      	ldr	r3, [r3, #0]
 23fdbd4:	699b      	ldr	r3, [r3, #24]
 23fdbd6:	9302      	str	r3, [sp, #8]
 23fdbd8:	bd09      	pop	{r0, r3, pc}
 23fdbda:	0000      	.short	0x0000
 23fdbdc:	1007adc8 	.word	0x1007adc8
 23fdbe0:	00000024 	.word	0x00000024

023fdbe4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fdbe4:	b509      	push	{r0, r3, lr}
 23fdbe6:	4804      	ldr	r0, [pc, #16]	; (23fdbf8 <hal_usart_flush+0x14>)
 23fdbe8:	6800      	ldr	r0, [r0, #0]
 23fdbea:	4b04      	ldr	r3, [pc, #16]	; (23fdbfc <hal_usart_flush+0x18>)
 23fdbec:	4403      	add	r3, r0
 23fdbee:	681b      	ldr	r3, [r3, #0]
 23fdbf0:	69db      	ldr	r3, [r3, #28]
 23fdbf2:	9302      	str	r3, [sp, #8]
 23fdbf4:	bd09      	pop	{r0, r3, pc}
 23fdbf6:	0000      	.short	0x0000
 23fdbf8:	1007adc8 	.word	0x1007adc8
 23fdbfc:	00000024 	.word	0x00000024

023fdc00 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fdc00:	b509      	push	{r0, r3, lr}
 23fdc02:	4804      	ldr	r0, [pc, #16]	; (23fdc14 <hal_usart_is_enabled+0x14>)
 23fdc04:	6800      	ldr	r0, [r0, #0]
 23fdc06:	4b04      	ldr	r3, [pc, #16]	; (23fdc18 <hal_usart_is_enabled+0x18>)
 23fdc08:	4403      	add	r3, r0
 23fdc0a:	681b      	ldr	r3, [r3, #0]
 23fdc0c:	6a1b      	ldr	r3, [r3, #32]
 23fdc0e:	9302      	str	r3, [sp, #8]
 23fdc10:	bd09      	pop	{r0, r3, pc}
 23fdc12:	0000      	.short	0x0000
 23fdc14:	1007adc8 	.word	0x1007adc8
 23fdc18:	00000024 	.word	0x00000024

023fdc1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fdc1c:	b509      	push	{r0, r3, lr}
 23fdc1e:	4804      	ldr	r0, [pc, #16]	; (23fdc30 <hal_usart_available_data_for_write+0x14>)
 23fdc20:	6800      	ldr	r0, [r0, #0]
 23fdc22:	4b04      	ldr	r3, [pc, #16]	; (23fdc34 <hal_usart_available_data_for_write+0x18>)
 23fdc24:	4403      	add	r3, r0
 23fdc26:	681b      	ldr	r3, [r3, #0]
 23fdc28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fdc2a:	9302      	str	r3, [sp, #8]
 23fdc2c:	bd09      	pop	{r0, r3, pc}
 23fdc2e:	0000      	.short	0x0000
 23fdc30:	1007adc8 	.word	0x1007adc8
 23fdc34:	00000024 	.word	0x00000024

023fdc38 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fdc38:	b509      	push	{r0, r3, lr}
 23fdc3a:	4804      	ldr	r0, [pc, #16]	; (23fdc4c <hal_usart_init_ex+0x14>)
 23fdc3c:	6800      	ldr	r0, [r0, #0]
 23fdc3e:	4b04      	ldr	r3, [pc, #16]	; (23fdc50 <hal_usart_init_ex+0x18>)
 23fdc40:	4403      	add	r3, r0
 23fdc42:	681b      	ldr	r3, [r3, #0]
 23fdc44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fdc46:	9302      	str	r3, [sp, #8]
 23fdc48:	bd09      	pop	{r0, r3, pc}
 23fdc4a:	0000      	.short	0x0000
 23fdc4c:	1007adc8 	.word	0x1007adc8
 23fdc50:	00000024 	.word	0x00000024

023fdc54 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fdc54:	b509      	push	{r0, r3, lr}
 23fdc56:	4804      	ldr	r0, [pc, #16]	; (23fdc68 <HAL_USB_USART_Init+0x14>)
 23fdc58:	6800      	ldr	r0, [r0, #0]
 23fdc5a:	4b04      	ldr	r3, [pc, #16]	; (23fdc6c <HAL_USB_USART_Init+0x18>)
 23fdc5c:	4403      	add	r3, r0
 23fdc5e:	681b      	ldr	r3, [r3, #0]
 23fdc60:	681b      	ldr	r3, [r3, #0]
 23fdc62:	9302      	str	r3, [sp, #8]
 23fdc64:	bd09      	pop	{r0, r3, pc}
 23fdc66:	0000      	.short	0x0000
 23fdc68:	1007adc8 	.word	0x1007adc8
 23fdc6c:	00000034 	.word	0x00000034

023fdc70 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fdc70:	b509      	push	{r0, r3, lr}
 23fdc72:	4804      	ldr	r0, [pc, #16]	; (23fdc84 <HAL_USB_USART_Begin+0x14>)
 23fdc74:	6800      	ldr	r0, [r0, #0]
 23fdc76:	4b04      	ldr	r3, [pc, #16]	; (23fdc88 <HAL_USB_USART_Begin+0x18>)
 23fdc78:	4403      	add	r3, r0
 23fdc7a:	681b      	ldr	r3, [r3, #0]
 23fdc7c:	685b      	ldr	r3, [r3, #4]
 23fdc7e:	9302      	str	r3, [sp, #8]
 23fdc80:	bd09      	pop	{r0, r3, pc}
 23fdc82:	0000      	.short	0x0000
 23fdc84:	1007adc8 	.word	0x1007adc8
 23fdc88:	00000034 	.word	0x00000034

023fdc8c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fdc8c:	b509      	push	{r0, r3, lr}
 23fdc8e:	4804      	ldr	r0, [pc, #16]	; (23fdca0 <HAL_USB_USART_Available_Data+0x14>)
 23fdc90:	6800      	ldr	r0, [r0, #0]
 23fdc92:	4b04      	ldr	r3, [pc, #16]	; (23fdca4 <HAL_USB_USART_Available_Data+0x18>)
 23fdc94:	4403      	add	r3, r0
 23fdc96:	681b      	ldr	r3, [r3, #0]
 23fdc98:	691b      	ldr	r3, [r3, #16]
 23fdc9a:	9302      	str	r3, [sp, #8]
 23fdc9c:	bd09      	pop	{r0, r3, pc}
 23fdc9e:	0000      	.short	0x0000
 23fdca0:	1007adc8 	.word	0x1007adc8
 23fdca4:	00000034 	.word	0x00000034

023fdca8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fdca8:	b509      	push	{r0, r3, lr}
 23fdcaa:	4804      	ldr	r0, [pc, #16]	; (23fdcbc <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fdcac:	6800      	ldr	r0, [r0, #0]
 23fdcae:	4b04      	ldr	r3, [pc, #16]	; (23fdcc0 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fdcb0:	4403      	add	r3, r0
 23fdcb2:	681b      	ldr	r3, [r3, #0]
 23fdcb4:	695b      	ldr	r3, [r3, #20]
 23fdcb6:	9302      	str	r3, [sp, #8]
 23fdcb8:	bd09      	pop	{r0, r3, pc}
 23fdcba:	0000      	.short	0x0000
 23fdcbc:	1007adc8 	.word	0x1007adc8
 23fdcc0:	00000034 	.word	0x00000034

023fdcc4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fdcc4:	b509      	push	{r0, r3, lr}
 23fdcc6:	4804      	ldr	r0, [pc, #16]	; (23fdcd8 <HAL_USB_USART_Receive_Data+0x14>)
 23fdcc8:	6800      	ldr	r0, [r0, #0]
 23fdcca:	4b04      	ldr	r3, [pc, #16]	; (23fdcdc <HAL_USB_USART_Receive_Data+0x18>)
 23fdccc:	4403      	add	r3, r0
 23fdcce:	681b      	ldr	r3, [r3, #0]
 23fdcd0:	699b      	ldr	r3, [r3, #24]
 23fdcd2:	9302      	str	r3, [sp, #8]
 23fdcd4:	bd09      	pop	{r0, r3, pc}
 23fdcd6:	0000      	.short	0x0000
 23fdcd8:	1007adc8 	.word	0x1007adc8
 23fdcdc:	00000034 	.word	0x00000034

023fdce0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fdce0:	b509      	push	{r0, r3, lr}
 23fdce2:	4804      	ldr	r0, [pc, #16]	; (23fdcf4 <HAL_USB_USART_Send_Data+0x14>)
 23fdce4:	6800      	ldr	r0, [r0, #0]
 23fdce6:	4b04      	ldr	r3, [pc, #16]	; (23fdcf8 <HAL_USB_USART_Send_Data+0x18>)
 23fdce8:	4403      	add	r3, r0
 23fdcea:	681b      	ldr	r3, [r3, #0]
 23fdcec:	69db      	ldr	r3, [r3, #28]
 23fdcee:	9302      	str	r3, [sp, #8]
 23fdcf0:	bd09      	pop	{r0, r3, pc}
 23fdcf2:	0000      	.short	0x0000
 23fdcf4:	1007adc8 	.word	0x1007adc8
 23fdcf8:	00000034 	.word	0x00000034

023fdcfc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fdcfc:	b509      	push	{r0, r3, lr}
 23fdcfe:	4804      	ldr	r0, [pc, #16]	; (23fdd10 <HAL_USB_USART_Flush_Data+0x14>)
 23fdd00:	6800      	ldr	r0, [r0, #0]
 23fdd02:	4b04      	ldr	r3, [pc, #16]	; (23fdd14 <HAL_USB_USART_Flush_Data+0x18>)
 23fdd04:	4403      	add	r3, r0
 23fdd06:	681b      	ldr	r3, [r3, #0]
 23fdd08:	6a1b      	ldr	r3, [r3, #32]
 23fdd0a:	9302      	str	r3, [sp, #8]
 23fdd0c:	bd09      	pop	{r0, r3, pc}
 23fdd0e:	0000      	.short	0x0000
 23fdd10:	1007adc8 	.word	0x1007adc8
 23fdd14:	00000034 	.word	0x00000034

023fdd18 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fdd18:	b509      	push	{r0, r3, lr}
 23fdd1a:	4804      	ldr	r0, [pc, #16]	; (23fdd2c <set_system_mode+0x14>)
 23fdd1c:	6800      	ldr	r0, [r0, #0]
 23fdd1e:	4b04      	ldr	r3, [pc, #16]	; (23fdd30 <set_system_mode+0x18>)
 23fdd20:	4403      	add	r3, r0
 23fdd22:	681b      	ldr	r3, [r3, #0]
 23fdd24:	685b      	ldr	r3, [r3, #4]
 23fdd26:	9302      	str	r3, [sp, #8]
 23fdd28:	bd09      	pop	{r0, r3, pc}
 23fdd2a:	0000      	.short	0x0000
 23fdd2c:	1007adc8 	.word	0x1007adc8
 23fdd30:	00000008 	.word	0x00000008

023fdd34 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fdd34:	b509      	push	{r0, r3, lr}
 23fdd36:	4804      	ldr	r0, [pc, #16]	; (23fdd48 <system_delay_ms+0x14>)
 23fdd38:	6800      	ldr	r0, [r0, #0]
 23fdd3a:	4b04      	ldr	r3, [pc, #16]	; (23fdd4c <system_delay_ms+0x18>)
 23fdd3c:	4403      	add	r3, r0
 23fdd3e:	681b      	ldr	r3, [r3, #0]
 23fdd40:	695b      	ldr	r3, [r3, #20]
 23fdd42:	9302      	str	r3, [sp, #8]
 23fdd44:	bd09      	pop	{r0, r3, pc}
 23fdd46:	0000      	.short	0x0000
 23fdd48:	1007adc8 	.word	0x1007adc8
 23fdd4c:	00000008 	.word	0x00000008

023fdd50 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fdd50:	b509      	push	{r0, r3, lr}
 23fdd52:	4804      	ldr	r0, [pc, #16]	; (23fdd64 <system_thread_set_state+0x14>)
 23fdd54:	6800      	ldr	r0, [r0, #0]
 23fdd56:	4b04      	ldr	r3, [pc, #16]	; (23fdd68 <system_thread_set_state+0x18>)
 23fdd58:	4403      	add	r3, r0
 23fdd5a:	681b      	ldr	r3, [r3, #0]
 23fdd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fdd5e:	9302      	str	r3, [sp, #8]
 23fdd60:	bd09      	pop	{r0, r3, pc}
 23fdd62:	0000      	.short	0x0000
 23fdd64:	1007adc8 	.word	0x1007adc8
 23fdd68:	00000008 	.word	0x00000008

023fdd6c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fdd6c:	b509      	push	{r0, r3, lr}
 23fdd6e:	4804      	ldr	r0, [pc, #16]	; (23fdd80 <system_ctrl_set_app_request_handler+0x14>)
 23fdd70:	6800      	ldr	r0, [r0, #0]
 23fdd72:	4b04      	ldr	r3, [pc, #16]	; (23fdd84 <system_ctrl_set_app_request_handler+0x18>)
 23fdd74:	4403      	add	r3, r0
 23fdd76:	681b      	ldr	r3, [r3, #0]
 23fdd78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fdd7c:	9302      	str	r3, [sp, #8]
 23fdd7e:	bd09      	pop	{r0, r3, pc}
 23fdd80:	1007adc8 	.word	0x1007adc8
 23fdd84:	00000008 	.word	0x00000008

023fdd88 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fdd88:	b509      	push	{r0, r3, lr}
 23fdd8a:	4804      	ldr	r0, [pc, #16]	; (23fdd9c <system_ctrl_set_result+0x14>)
 23fdd8c:	6800      	ldr	r0, [r0, #0]
 23fdd8e:	4b04      	ldr	r3, [pc, #16]	; (23fdda0 <system_ctrl_set_result+0x18>)
 23fdd90:	4403      	add	r3, r0
 23fdd92:	681b      	ldr	r3, [r3, #0]
 23fdd94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fdd98:	9302      	str	r3, [sp, #8]
 23fdd9a:	bd09      	pop	{r0, r3, pc}
 23fdd9c:	1007adc8 	.word	0x1007adc8
 23fdda0:	00000008 	.word	0x00000008

023fdda4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fdda4:	b509      	push	{r0, r3, lr}
 23fdda6:	4804      	ldr	r0, [pc, #16]	; (23fddb8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fdda8:	6800      	ldr	r0, [r0, #0]
 23fddaa:	4b04      	ldr	r3, [pc, #16]	; (23fddbc <spark_set_random_seed_from_cloud_handler+0x18>)
 23fddac:	4403      	add	r3, r0
 23fddae:	681b      	ldr	r3, [r3, #0]
 23fddb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fddb2:	9302      	str	r3, [sp, #8]
 23fddb4:	bd09      	pop	{r0, r3, pc}
 23fddb6:	0000      	.short	0x0000
 23fddb8:	1007adc8 	.word	0x1007adc8
 23fddbc:	0000002c 	.word	0x0000002c

023fddc0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23fddc0:	b509      	push	{r0, r3, lr}
 23fddc2:	4804      	ldr	r0, [pc, #16]	; (23fddd4 <spark_cloud_disconnect+0x14>)
 23fddc4:	6800      	ldr	r0, [r0, #0]
 23fddc6:	4b04      	ldr	r3, [pc, #16]	; (23fddd8 <spark_cloud_disconnect+0x18>)
 23fddc8:	4403      	add	r3, r0
 23fddca:	681b      	ldr	r3, [r3, #0]
 23fddcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fddce:	9302      	str	r3, [sp, #8]
 23fddd0:	bd09      	pop	{r0, r3, pc}
 23fddd2:	0000      	.short	0x0000
 23fddd4:	1007adc8 	.word	0x1007adc8
 23fddd8:	0000002c 	.word	0x0000002c

023fdddc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fdddc:	b509      	push	{r0, r3, lr}
 23fddde:	4804      	ldr	r0, [pc, #16]	; (23fddf0 <network_connect+0x14>)
 23fdde0:	6800      	ldr	r0, [r0, #0]
 23fdde2:	4b04      	ldr	r3, [pc, #16]	; (23fddf4 <network_connect+0x18>)
 23fdde4:	4403      	add	r3, r0
 23fdde6:	681b      	ldr	r3, [r3, #0]
 23fdde8:	685b      	ldr	r3, [r3, #4]
 23fddea:	9302      	str	r3, [sp, #8]
 23fddec:	bd09      	pop	{r0, r3, pc}
 23fddee:	0000      	.short	0x0000
 23fddf0:	1007adc8 	.word	0x1007adc8
 23fddf4:	00000028 	.word	0x00000028

023fddf8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fddf8:	b509      	push	{r0, r3, lr}
 23fddfa:	4804      	ldr	r0, [pc, #16]	; (23fde0c <network_connecting+0x14>)
 23fddfc:	6800      	ldr	r0, [r0, #0]
 23fddfe:	4b04      	ldr	r3, [pc, #16]	; (23fde10 <network_connecting+0x18>)
 23fde00:	4403      	add	r3, r0
 23fde02:	681b      	ldr	r3, [r3, #0]
 23fde04:	689b      	ldr	r3, [r3, #8]
 23fde06:	9302      	str	r3, [sp, #8]
 23fde08:	bd09      	pop	{r0, r3, pc}
 23fde0a:	0000      	.short	0x0000
 23fde0c:	1007adc8 	.word	0x1007adc8
 23fde10:	00000028 	.word	0x00000028

023fde14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fde14:	b509      	push	{r0, r3, lr}
 23fde16:	4804      	ldr	r0, [pc, #16]	; (23fde28 <network_disconnect+0x14>)
 23fde18:	6800      	ldr	r0, [r0, #0]
 23fde1a:	4b04      	ldr	r3, [pc, #16]	; (23fde2c <network_disconnect+0x18>)
 23fde1c:	4403      	add	r3, r0
 23fde1e:	681b      	ldr	r3, [r3, #0]
 23fde20:	68db      	ldr	r3, [r3, #12]
 23fde22:	9302      	str	r3, [sp, #8]
 23fde24:	bd09      	pop	{r0, r3, pc}
 23fde26:	0000      	.short	0x0000
 23fde28:	1007adc8 	.word	0x1007adc8
 23fde2c:	00000028 	.word	0x00000028

023fde30 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fde30:	b509      	push	{r0, r3, lr}
 23fde32:	4804      	ldr	r0, [pc, #16]	; (23fde44 <network_ready+0x14>)
 23fde34:	6800      	ldr	r0, [r0, #0]
 23fde36:	4b04      	ldr	r3, [pc, #16]	; (23fde48 <network_ready+0x18>)
 23fde38:	4403      	add	r3, r0
 23fde3a:	681b      	ldr	r3, [r3, #0]
 23fde3c:	691b      	ldr	r3, [r3, #16]
 23fde3e:	9302      	str	r3, [sp, #8]
 23fde40:	bd09      	pop	{r0, r3, pc}
 23fde42:	0000      	.short	0x0000
 23fde44:	1007adc8 	.word	0x1007adc8
 23fde48:	00000028 	.word	0x00000028

023fde4c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fde4c:	b509      	push	{r0, r3, lr}
 23fde4e:	4804      	ldr	r0, [pc, #16]	; (23fde60 <network_on+0x14>)
 23fde50:	6800      	ldr	r0, [r0, #0]
 23fde52:	4b04      	ldr	r3, [pc, #16]	; (23fde64 <network_on+0x18>)
 23fde54:	4403      	add	r3, r0
 23fde56:	681b      	ldr	r3, [r3, #0]
 23fde58:	695b      	ldr	r3, [r3, #20]
 23fde5a:	9302      	str	r3, [sp, #8]
 23fde5c:	bd09      	pop	{r0, r3, pc}
 23fde5e:	0000      	.short	0x0000
 23fde60:	1007adc8 	.word	0x1007adc8
 23fde64:	00000028 	.word	0x00000028

023fde68 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fde68:	b509      	push	{r0, r3, lr}
 23fde6a:	4804      	ldr	r0, [pc, #16]	; (23fde7c <network_off+0x14>)
 23fde6c:	6800      	ldr	r0, [r0, #0]
 23fde6e:	4b04      	ldr	r3, [pc, #16]	; (23fde80 <network_off+0x18>)
 23fde70:	4403      	add	r3, r0
 23fde72:	681b      	ldr	r3, [r3, #0]
 23fde74:	699b      	ldr	r3, [r3, #24]
 23fde76:	9302      	str	r3, [sp, #8]
 23fde78:	bd09      	pop	{r0, r3, pc}
 23fde7a:	0000      	.short	0x0000
 23fde7c:	1007adc8 	.word	0x1007adc8
 23fde80:	00000028 	.word	0x00000028

023fde84 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fde84:	b509      	push	{r0, r3, lr}
 23fde86:	4804      	ldr	r0, [pc, #16]	; (23fde98 <network_listen+0x14>)
 23fde88:	6800      	ldr	r0, [r0, #0]
 23fde8a:	4b04      	ldr	r3, [pc, #16]	; (23fde9c <network_listen+0x18>)
 23fde8c:	4403      	add	r3, r0
 23fde8e:	681b      	ldr	r3, [r3, #0]
 23fde90:	69db      	ldr	r3, [r3, #28]
 23fde92:	9302      	str	r3, [sp, #8]
 23fde94:	bd09      	pop	{r0, r3, pc}
 23fde96:	0000      	.short	0x0000
 23fde98:	1007adc8 	.word	0x1007adc8
 23fde9c:	00000028 	.word	0x00000028

023fdea0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fdea0:	b509      	push	{r0, r3, lr}
 23fdea2:	4804      	ldr	r0, [pc, #16]	; (23fdeb4 <network_listening+0x14>)
 23fdea4:	6800      	ldr	r0, [r0, #0]
 23fdea6:	4b04      	ldr	r3, [pc, #16]	; (23fdeb8 <network_listening+0x18>)
 23fdea8:	4403      	add	r3, r0
 23fdeaa:	681b      	ldr	r3, [r3, #0]
 23fdeac:	6a1b      	ldr	r3, [r3, #32]
 23fdeae:	9302      	str	r3, [sp, #8]
 23fdeb0:	bd09      	pop	{r0, r3, pc}
 23fdeb2:	0000      	.short	0x0000
 23fdeb4:	1007adc8 	.word	0x1007adc8
 23fdeb8:	00000028 	.word	0x00000028

023fdebc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fdebc:	b509      	push	{r0, r3, lr}
 23fdebe:	4804      	ldr	r0, [pc, #16]	; (23fded0 <network_set_listen_timeout+0x14>)
 23fdec0:	6800      	ldr	r0, [r0, #0]
 23fdec2:	4b04      	ldr	r3, [pc, #16]	; (23fded4 <network_set_listen_timeout+0x18>)
 23fdec4:	4403      	add	r3, r0
 23fdec6:	681b      	ldr	r3, [r3, #0]
 23fdec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fdeca:	9302      	str	r3, [sp, #8]
 23fdecc:	bd09      	pop	{r0, r3, pc}
 23fdece:	0000      	.short	0x0000
 23fded0:	1007adc8 	.word	0x1007adc8
 23fded4:	00000028 	.word	0x00000028

023fded8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fded8:	b509      	push	{r0, r3, lr}
 23fdeda:	4804      	ldr	r0, [pc, #16]	; (23fdeec <network_get_listen_timeout+0x14>)
 23fdedc:	6800      	ldr	r0, [r0, #0]
 23fdede:	4b04      	ldr	r3, [pc, #16]	; (23fdef0 <network_get_listen_timeout+0x18>)
 23fdee0:	4403      	add	r3, r0
 23fdee2:	681b      	ldr	r3, [r3, #0]
 23fdee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fdee6:	9302      	str	r3, [sp, #8]
 23fdee8:	bd09      	pop	{r0, r3, pc}
 23fdeea:	0000      	.short	0x0000
 23fdeec:	1007adc8 	.word	0x1007adc8
 23fdef0:	00000028 	.word	0x00000028

023fdef4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fdef4:	b509      	push	{r0, r3, lr}
 23fdef6:	4804      	ldr	r0, [pc, #16]	; (23fdf08 <network_is_on+0x14>)
 23fdef8:	6800      	ldr	r0, [r0, #0]
 23fdefa:	4b04      	ldr	r3, [pc, #16]	; (23fdf0c <network_is_on+0x18>)
 23fdefc:	4403      	add	r3, r0
 23fdefe:	681b      	ldr	r3, [r3, #0]
 23fdf00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fdf02:	9302      	str	r3, [sp, #8]
 23fdf04:	bd09      	pop	{r0, r3, pc}
 23fdf06:	0000      	.short	0x0000
 23fdf08:	1007adc8 	.word	0x1007adc8
 23fdf0c:	00000028 	.word	0x00000028

023fdf10 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fdf10:	b509      	push	{r0, r3, lr}
 23fdf12:	4804      	ldr	r0, [pc, #16]	; (23fdf24 <network_is_off+0x14>)
 23fdf14:	6800      	ldr	r0, [r0, #0]
 23fdf16:	4b04      	ldr	r3, [pc, #16]	; (23fdf28 <network_is_off+0x18>)
 23fdf18:	4403      	add	r3, r0
 23fdf1a:	681b      	ldr	r3, [r3, #0]
 23fdf1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fdf1e:	9302      	str	r3, [sp, #8]
 23fdf20:	bd09      	pop	{r0, r3, pc}
 23fdf22:	0000      	.short	0x0000
 23fdf24:	1007adc8 	.word	0x1007adc8
 23fdf28:	00000028 	.word	0x00000028

023fdf2c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fdf2c:	b509      	push	{r0, r3, lr}
 23fdf2e:	4804      	ldr	r0, [pc, #16]	; (23fdf40 <malloc+0x14>)
 23fdf30:	6800      	ldr	r0, [r0, #0]
 23fdf32:	4b04      	ldr	r3, [pc, #16]	; (23fdf44 <malloc+0x18>)
 23fdf34:	4403      	add	r3, r0
 23fdf36:	681b      	ldr	r3, [r3, #0]
 23fdf38:	681b      	ldr	r3, [r3, #0]
 23fdf3a:	9302      	str	r3, [sp, #8]
 23fdf3c:	bd09      	pop	{r0, r3, pc}
 23fdf3e:	0000      	.short	0x0000
 23fdf40:	1007adc8 	.word	0x1007adc8
 23fdf44:	00000004 	.word	0x00000004

023fdf48 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fdf48:	b509      	push	{r0, r3, lr}
 23fdf4a:	4804      	ldr	r0, [pc, #16]	; (23fdf5c <free+0x14>)
 23fdf4c:	6800      	ldr	r0, [r0, #0]
 23fdf4e:	4b04      	ldr	r3, [pc, #16]	; (23fdf60 <free+0x18>)
 23fdf50:	4403      	add	r3, r0
 23fdf52:	681b      	ldr	r3, [r3, #0]
 23fdf54:	685b      	ldr	r3, [r3, #4]
 23fdf56:	9302      	str	r3, [sp, #8]
 23fdf58:	bd09      	pop	{r0, r3, pc}
 23fdf5a:	0000      	.short	0x0000
 23fdf5c:	1007adc8 	.word	0x1007adc8
 23fdf60:	00000004 	.word	0x00000004

023fdf64 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fdf64:	b509      	push	{r0, r3, lr}
 23fdf66:	4804      	ldr	r0, [pc, #16]	; (23fdf78 <__errno+0x14>)
 23fdf68:	6800      	ldr	r0, [r0, #0]
 23fdf6a:	4b04      	ldr	r3, [pc, #16]	; (23fdf7c <__errno+0x18>)
 23fdf6c:	4403      	add	r3, r0
 23fdf6e:	681b      	ldr	r3, [r3, #0]
 23fdf70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fdf72:	9302      	str	r3, [sp, #8]
 23fdf74:	bd09      	pop	{r0, r3, pc}
 23fdf76:	0000      	.short	0x0000
 23fdf78:	1007adc8 	.word	0x1007adc8
 23fdf7c:	00000004 	.word	0x00000004

023fdf80 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fdf80:	b509      	push	{r0, r3, lr}
 23fdf82:	4804      	ldr	r0, [pc, #16]	; (23fdf94 <__assert_func+0x14>)
 23fdf84:	6800      	ldr	r0, [r0, #0]
 23fdf86:	4b04      	ldr	r3, [pc, #16]	; (23fdf98 <__assert_func+0x18>)
 23fdf88:	4403      	add	r3, r0
 23fdf8a:	681b      	ldr	r3, [r3, #0]
 23fdf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fdf8e:	9302      	str	r3, [sp, #8]
 23fdf90:	bd09      	pop	{r0, r3, pc}
 23fdf92:	0000      	.short	0x0000
 23fdf94:	1007adc8 	.word	0x1007adc8
 23fdf98:	00000004 	.word	0x00000004

023fdf9c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fdf9c:	b509      	push	{r0, r3, lr}
 23fdf9e:	4804      	ldr	r0, [pc, #16]	; (23fdfb0 <newlib_impure_ptr_callback+0x14>)
 23fdfa0:	6800      	ldr	r0, [r0, #0]
 23fdfa2:	4b04      	ldr	r3, [pc, #16]	; (23fdfb4 <newlib_impure_ptr_callback+0x18>)
 23fdfa4:	4403      	add	r3, r0
 23fdfa6:	681b      	ldr	r3, [r3, #0]
 23fdfa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fdfaa:	9302      	str	r3, [sp, #8]
 23fdfac:	bd09      	pop	{r0, r3, pc}
 23fdfae:	0000      	.short	0x0000
 23fdfb0:	1007adc8 	.word	0x1007adc8
 23fdfb4:	00000004 	.word	0x00000004

023fdfb8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fdfb8:	2100      	movs	r1, #0
 23fdfba:	f7ff bebb 	b.w	23fdd34 <system_delay_ms>
	...

023fdfc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fdfc0:	2300      	movs	r3, #0
 23fdfc2:	4802      	ldr	r0, [pc, #8]	; (23fdfcc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fdfc4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fdfc6:	f7ff bc4d 	b.w	23fd864 <os_mutex_recursive_create>
 23fdfca:	bf00      	nop
 23fdfcc:	1007ae8c 	.word	0x1007ae8c

023fdfd0 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23fdfd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 23fdfd2:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 23fdfd4:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 23fdfd6:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 23fdfda:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 23fdfdc:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 23fdfe0:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 23fdfe4:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 23fdfe6:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 23fdfea:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 23fdfee:	6843      	ldr	r3, [r0, #4]
 23fdff0:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 23fdff2:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fdff4:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 23fdff6:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fdffa:	f7ff fee1 	bl	23fddc0 <spark_cloud_disconnect>
}
 23fdffe:	b005      	add	sp, #20
 23fe000:	f85d fb04 	ldr.w	pc, [sp], #4

023fe004 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe004:	2200      	movs	r2, #0
 23fe006:	6840      	ldr	r0, [r0, #4]
 23fe008:	4611      	mov	r1, r2
 23fe00a:	f7ff bf49 	b.w	23fdea0 <network_listening>

023fe00e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fe00e:	2200      	movs	r2, #0
 23fe010:	6840      	ldr	r0, [r0, #4]
 23fe012:	4611      	mov	r1, r2
 23fe014:	f7ff bf60 	b.w	23fded8 <network_get_listen_timeout>

023fe018 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fe018:	2200      	movs	r2, #0
 23fe01a:	6840      	ldr	r0, [r0, #4]
 23fe01c:	f7ff bf4e 	b.w	23fdebc <network_set_listen_timeout>

023fe020 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fe020:	2200      	movs	r2, #0
 23fe022:	6840      	ldr	r0, [r0, #4]
 23fe024:	f081 0101 	eor.w	r1, r1, #1
 23fe028:	f7ff bf2c 	b.w	23fde84 <network_listen>

023fe02c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fe02c:	2300      	movs	r3, #0
 23fe02e:	6840      	ldr	r0, [r0, #4]
 23fe030:	461a      	mov	r2, r3
 23fe032:	4619      	mov	r1, r3
 23fe034:	f7ff bf18 	b.w	23fde68 <network_off>

023fe038 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fe038:	2300      	movs	r3, #0
 23fe03a:	6840      	ldr	r0, [r0, #4]
 23fe03c:	461a      	mov	r2, r3
 23fe03e:	4619      	mov	r1, r3
 23fe040:	f7ff bf04 	b.w	23fde4c <network_on>

023fe044 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fe044:	2200      	movs	r2, #0
 23fe046:	6840      	ldr	r0, [r0, #4]
 23fe048:	4611      	mov	r1, r2
 23fe04a:	f7ff bef1 	b.w	23fde30 <network_ready>

023fe04e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fe04e:	2200      	movs	r2, #0
 23fe050:	6840      	ldr	r0, [r0, #4]
 23fe052:	4611      	mov	r1, r2
 23fe054:	f7ff bed0 	b.w	23fddf8 <network_connecting>

023fe058 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fe058:	2200      	movs	r2, #0
 23fe05a:	2102      	movs	r1, #2
 23fe05c:	6840      	ldr	r0, [r0, #4]
 23fe05e:	f7ff bed9 	b.w	23fde14 <network_disconnect>

023fe062 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fe062:	2300      	movs	r3, #0
 23fe064:	6840      	ldr	r0, [r0, #4]
 23fe066:	461a      	mov	r2, r3
 23fe068:	f7ff beb8 	b.w	23fdddc <network_connect>

023fe06c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fe06c:	2203      	movs	r2, #3
 23fe06e:	4b02      	ldr	r3, [pc, #8]	; (23fe078 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fe070:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fe072:	4a02      	ldr	r2, [pc, #8]	; (23fe07c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fe074:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fe076:	4770      	bx	lr
 23fe078:	1007ae90 	.word	0x1007ae90
 23fe07c:	023ffde4 	.word	0x023ffde4

023fe080 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fe080:	4770      	bx	lr

023fe082 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fe082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe084:	4606      	mov	r6, r0
 23fe086:	4615      	mov	r5, r2
 23fe088:	460c      	mov	r4, r1
 23fe08a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fe08c:	42bc      	cmp	r4, r7
 23fe08e:	d006      	beq.n	23fe09e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fe090:	6833      	ldr	r3, [r6, #0]
 23fe092:	4630      	mov	r0, r6
 23fe094:	689b      	ldr	r3, [r3, #8]
 23fe096:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fe09a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fe09c:	e7f6      	b.n	23fe08c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fe09e:	4628      	mov	r0, r5
 23fe0a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe0a2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fe0a2:	2200      	movs	r2, #0
 23fe0a4:	7c00      	ldrb	r0, [r0, #16]
 23fe0a6:	f7ff bcbd 	b.w	23fda24 <hal_i2c_write>

023fe0aa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fe0aa:	2100      	movs	r1, #0
 23fe0ac:	7c00      	ldrb	r0, [r0, #16]
 23fe0ae:	f7ff bcc7 	b.w	23fda40 <hal_i2c_available>

023fe0b2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fe0b2:	2100      	movs	r1, #0
 23fe0b4:	7c00      	ldrb	r0, [r0, #16]
 23fe0b6:	f7ff bcd1 	b.w	23fda5c <hal_i2c_read>

023fe0ba <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fe0ba:	2100      	movs	r1, #0
 23fe0bc:	7c00      	ldrb	r0, [r0, #16]
 23fe0be:	f7ff bcdb 	b.w	23fda78 <hal_i2c_peek>

023fe0c2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fe0c2:	2100      	movs	r1, #0
 23fe0c4:	7c00      	ldrb	r0, [r0, #16]
 23fe0c6:	f7ff bce5 	b.w	23fda94 <hal_i2c_flush>

023fe0ca <_ZN7TwoWireD0Ev>:
 23fe0ca:	b510      	push	{r4, lr}
 23fe0cc:	4604      	mov	r4, r0
 23fe0ce:	2114      	movs	r1, #20
 23fe0d0:	f7ff f9d9 	bl	23fd486 <_ZdlPvj>
 23fe0d4:	4620      	mov	r0, r4
 23fe0d6:	bd10      	pop	{r4, pc}

023fe0d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe0d8:	b538      	push	{r3, r4, r5, lr}
 23fe0da:	4604      	mov	r4, r0
 23fe0dc:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fe0de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe0e2:	2200      	movs	r2, #0
 23fe0e4:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe0e8:	4b09      	ldr	r3, [pc, #36]	; (23fe110 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fe0ea:	4608      	mov	r0, r1
  _i2c = i2c;
 23fe0ec:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fe0ee:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fe0f0:	4629      	mov	r1, r5
 23fe0f2:	f7ff fceb 	bl	23fdacc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe0f6:	30bf      	adds	r0, #191	; 0xbf
 23fe0f8:	d108      	bne.n	23fe10c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fe0fa:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fe0fc:	07db      	lsls	r3, r3, #31
 23fe0fe:	d505      	bpl.n	23fe10c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fe100:	6868      	ldr	r0, [r5, #4]
 23fe102:	f7ff ff21 	bl	23fdf48 <free>
    free(conf.tx_buffer);
 23fe106:	68e8      	ldr	r0, [r5, #12]
 23fe108:	f7ff ff1e 	bl	23fdf48 <free>
}
 23fe10c:	4620      	mov	r0, r4
 23fe10e:	bd38      	pop	{r3, r4, r5, pc}
 23fe110:	023ffe20 	.word	0x023ffe20

023fe114 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23fe114:	2200      	movs	r2, #0
 23fe116:	7c00      	ldrb	r0, [r0, #16]
 23fe118:	f7ff bc4c 	b.w	23fd9b4 <hal_i2c_set_speed>

023fe11c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fe11c:	2300      	movs	r3, #0
 23fe11e:	7c00      	ldrb	r0, [r0, #16]
 23fe120:	461a      	mov	r2, r3
 23fe122:	4619      	mov	r1, r3
 23fe124:	f7ff bc54 	b.w	23fd9d0 <hal_i2c_begin>

023fe128 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fe128:	2200      	movs	r2, #0
 23fe12a:	7c00      	ldrb	r0, [r0, #16]
 23fe12c:	f7ff bc5e 	b.w	23fd9ec <hal_i2c_begin_transmission>

023fe130 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fe130:	2200      	movs	r2, #0
 23fe132:	7c00      	ldrb	r0, [r0, #16]
 23fe134:	f7ff bc68 	b.w	23fda08 <hal_i2c_end_transmission>

023fe138 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fe138:	4770      	bx	lr

023fe13a <_ZN9IPAddressD0Ev>:
 23fe13a:	b510      	push	{r4, lr}
 23fe13c:	4604      	mov	r4, r0
 23fe13e:	2118      	movs	r1, #24
 23fe140:	f7ff f9a1 	bl	23fd486 <_ZdlPvj>
 23fe144:	4620      	mov	r0, r4
 23fe146:	bd10      	pop	{r4, pc}

023fe148 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fe148:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fe14a:	7d03      	ldrb	r3, [r0, #20]
{
 23fe14c:	460e      	mov	r6, r1
	if (address.v==6) {
 23fe14e:	2b06      	cmp	r3, #6
 23fe150:	f04f 0400 	mov.w	r4, #0
{
 23fe154:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe156:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fe15a:	d012      	beq.n	23fe182 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fe15c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fe160:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fe164:	220a      	movs	r2, #10
 23fe166:	4630      	mov	r0, r6
 23fe168:	f000 f943 	bl	23fe3f2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fe16c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fe16e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fe170:	d019      	beq.n	23fe1a6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fe172:	2c00      	cmp	r4, #0
 23fe174:	d0f4      	beq.n	23fe160 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fe176:	212e      	movs	r1, #46	; 0x2e
 23fe178:	4630      	mov	r0, r6
 23fe17a:	f000 f937 	bl	23fe3ec <_ZN5Print5printEc>
 23fe17e:	4404      	add	r4, r0
 23fe180:	e7ee      	b.n	23fe160 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe182:	232f      	movs	r3, #47	; 0x2f
 23fe184:	466a      	mov	r2, sp
 23fe186:	4639      	mov	r1, r7
 23fe188:	200a      	movs	r0, #10
		buf[0] = 0;
 23fe18a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fe18e:	f7ff fcab 	bl	23fdae8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fe192:	4668      	mov	r0, sp
 23fe194:	f7ff f950 	bl	23fd438 <strlen>
 23fe198:	6833      	ldr	r3, [r6, #0]
 23fe19a:	4602      	mov	r2, r0
 23fe19c:	4669      	mov	r1, sp
 23fe19e:	4630      	mov	r0, r6
 23fe1a0:	68db      	ldr	r3, [r3, #12]
 23fe1a2:	4798      	blx	r3
 23fe1a4:	4604      	mov	r4, r0
    }
    return n;
}
 23fe1a6:	4620      	mov	r0, r4
 23fe1a8:	b00d      	add	sp, #52	; 0x34
 23fe1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fe1ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fe1ac:	b510      	push	{r4, lr}
 23fe1ae:	4604      	mov	r4, r0
 23fe1b0:	4b04      	ldr	r3, [pc, #16]	; (23fe1c4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fe1b2:	2211      	movs	r2, #17
 23fe1b4:	2100      	movs	r1, #0
 23fe1b6:	f840 3b04 	str.w	r3, [r0], #4
 23fe1ba:	f001 fd68 	bl	23ffc8e <memset>
}
 23fe1be:	4620      	mov	r0, r4
 23fe1c0:	bd10      	pop	{r4, pc}
 23fe1c2:	bf00      	nop
 23fe1c4:	023ffe48 	.word	0x023ffe48

023fe1c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fe1c8:	4603      	mov	r3, r0
 23fe1ca:	4a07      	ldr	r2, [pc, #28]	; (23fe1e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fe1cc:	b510      	push	{r4, lr}
 23fe1ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fe1d2:	f101 0210 	add.w	r2, r1, #16
 23fe1d6:	f851 4b04 	ldr.w	r4, [r1], #4
 23fe1da:	4291      	cmp	r1, r2
 23fe1dc:	f843 4b04 	str.w	r4, [r3], #4
 23fe1e0:	d1f9      	bne.n	23fe1d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fe1e2:	780a      	ldrb	r2, [r1, #0]
 23fe1e4:	701a      	strb	r2, [r3, #0]
}
 23fe1e6:	bd10      	pop	{r4, pc}
 23fe1e8:	023ffe48 	.word	0x023ffe48

023fe1ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fe1ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fe1ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fe1f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fe1f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fe1fa:	2304      	movs	r3, #4
 23fe1fc:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fe200:	6041      	str	r1, [r0, #4]
 23fe202:	7503      	strb	r3, [r0, #20]
}
 23fe204:	bd10      	pop	{r4, pc}
	...

023fe208 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fe208:	b507      	push	{r0, r1, r2, lr}
 23fe20a:	4b06      	ldr	r3, [pc, #24]	; (23fe224 <_ZN9IPAddressC1EPKh+0x1c>)
 23fe20c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fe20e:	78cb      	ldrb	r3, [r1, #3]
 23fe210:	9300      	str	r3, [sp, #0]
 23fe212:	788b      	ldrb	r3, [r1, #2]
 23fe214:	784a      	ldrb	r2, [r1, #1]
 23fe216:	7809      	ldrb	r1, [r1, #0]
 23fe218:	f7ff ffe8 	bl	23fe1ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fe21c:	b003      	add	sp, #12
 23fe21e:	f85d fb04 	ldr.w	pc, [sp], #4
 23fe222:	bf00      	nop
 23fe224:	023ffe48 	.word	0x023ffe48

023fe228 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fe228:	4b01      	ldr	r3, [pc, #4]	; (23fe230 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe22a:	4a02      	ldr	r2, [pc, #8]	; (23fe234 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe22c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe22e:	4770      	bx	lr
 23fe230:	1007ae98 	.word	0x1007ae98
 23fe234:	023ffe54 	.word	0x023ffe54

023fe238 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fe238:	2300      	movs	r3, #0
 23fe23a:	6840      	ldr	r0, [r0, #4]
 23fe23c:	461a      	mov	r2, r3
 23fe23e:	f7ff bdcd 	b.w	23fdddc <network_connect>

023fe242 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fe242:	2200      	movs	r2, #0
 23fe244:	2102      	movs	r1, #2
 23fe246:	6840      	ldr	r0, [r0, #4]
 23fe248:	f7ff bde4 	b.w	23fde14 <network_disconnect>

023fe24c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fe24c:	2200      	movs	r2, #0
 23fe24e:	6840      	ldr	r0, [r0, #4]
 23fe250:	4611      	mov	r1, r2
 23fe252:	f7ff bdd1 	b.w	23fddf8 <network_connecting>

023fe256 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fe256:	2200      	movs	r2, #0
 23fe258:	6840      	ldr	r0, [r0, #4]
 23fe25a:	4611      	mov	r1, r2
 23fe25c:	f7ff bde8 	b.w	23fde30 <network_ready>

023fe260 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fe260:	2300      	movs	r3, #0
 23fe262:	6840      	ldr	r0, [r0, #4]
 23fe264:	461a      	mov	r2, r3
 23fe266:	4619      	mov	r1, r3
 23fe268:	f7ff bdf0 	b.w	23fde4c <network_on>

023fe26c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fe26c:	2300      	movs	r3, #0
 23fe26e:	6840      	ldr	r0, [r0, #4]
 23fe270:	461a      	mov	r2, r3
 23fe272:	4619      	mov	r1, r3
 23fe274:	f7ff bdf8 	b.w	23fde68 <network_off>

023fe278 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fe278:	2100      	movs	r1, #0
 23fe27a:	6840      	ldr	r0, [r0, #4]
 23fe27c:	f7ff be3a 	b.w	23fdef4 <network_is_on>

023fe280 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fe280:	2100      	movs	r1, #0
 23fe282:	6840      	ldr	r0, [r0, #4]
 23fe284:	f7ff be44 	b.w	23fdf10 <network_is_off>

023fe288 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fe288:	2200      	movs	r2, #0
 23fe28a:	6840      	ldr	r0, [r0, #4]
 23fe28c:	f081 0101 	eor.w	r1, r1, #1
 23fe290:	f7ff bdf8 	b.w	23fde84 <network_listen>

023fe294 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fe294:	2200      	movs	r2, #0
 23fe296:	6840      	ldr	r0, [r0, #4]
 23fe298:	f7ff be10 	b.w	23fdebc <network_set_listen_timeout>

023fe29c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fe29c:	2200      	movs	r2, #0
 23fe29e:	6840      	ldr	r0, [r0, #4]
 23fe2a0:	4611      	mov	r1, r2
 23fe2a2:	f7ff be19 	b.w	23fded8 <network_get_listen_timeout>

023fe2a6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fe2a6:	2200      	movs	r2, #0
 23fe2a8:	6840      	ldr	r0, [r0, #4]
 23fe2aa:	4611      	mov	r1, r2
 23fe2ac:	f7ff bdf8 	b.w	23fdea0 <network_listening>

023fe2b0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fe2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe2b4:	b095      	sub	sp, #84	; 0x54
 23fe2b6:	4614      	mov	r4, r2
 23fe2b8:	460d      	mov	r5, r1
 23fe2ba:	4607      	mov	r7, r0
    IPAddress addr;
 23fe2bc:	f7ff ff76 	bl	23fe1ac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fe2c0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fe2c2:	221c      	movs	r2, #28
 23fe2c4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fe2c6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fe2c8:	f001 fce1 	bl	23ffc8e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fe2cc:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe2ce:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fe2d0:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fe2d2:	2100      	movs	r1, #0
 23fe2d4:	466b      	mov	r3, sp
 23fe2d6:	aa0c      	add	r2, sp, #48	; 0x30
 23fe2d8:	f7ff fc22 	bl	23fdb20 <netdb_getaddrinfo>
    if (!r) {
 23fe2dc:	4604      	mov	r4, r0
 23fe2de:	2800      	cmp	r0, #0
 23fe2e0:	d14b      	bne.n	23fe37a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe2e2:	4602      	mov	r2, r0
 23fe2e4:	2101      	movs	r1, #1
 23fe2e6:	6868      	ldr	r0, [r5, #4]
 23fe2e8:	f7ff fda2 	bl	23fde30 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe2ec:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fe2ee:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe2f0:	4622      	mov	r2, r4
 23fe2f2:	6868      	ldr	r0, [r5, #4]
 23fe2f4:	f7ff fd9c 	bl	23fde30 <network_ready>
        bool ok = false;
 23fe2f8:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fe2fa:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe2fc:	9e00      	ldr	r6, [sp, #0]
 23fe2fe:	2e00      	cmp	r6, #0
 23fe300:	d03b      	beq.n	23fe37a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fe302:	2900      	cmp	r1, #0
 23fe304:	d139      	bne.n	23fe37a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fe306:	6873      	ldr	r3, [r6, #4]
 23fe308:	2b02      	cmp	r3, #2
 23fe30a:	d003      	beq.n	23fe314 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fe30c:	2b0a      	cmp	r3, #10
 23fe30e:	d011      	beq.n	23fe334 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fe310:	69f6      	ldr	r6, [r6, #28]
 23fe312:	e7f4      	b.n	23fe2fe <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fe314:	f1b8 0f00 	cmp.w	r8, #0
 23fe318:	d0fa      	beq.n	23fe310 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fe31a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fe31c:	a806      	add	r0, sp, #24
 23fe31e:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fe320:	1d3c      	adds	r4, r7, #4
 23fe322:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fe324:	f7ff ff70 	bl	23fe208 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fe328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe32a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe32c:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe32e:	4641      	mov	r1, r8
 23fe330:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fe332:	e7ed      	b.n	23fe310 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fe334:	f1b9 0f00 	cmp.w	r9, #0
 23fe338:	d0ea      	beq.n	23fe310 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fe33a:	2210      	movs	r2, #16
 23fe33c:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fe33e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fe340:	f001 fca5 	bl	23ffc8e <memset>
                    a.v = 6;
 23fe344:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe346:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fe348:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fe34c:	f104 0308 	add.w	r3, r4, #8
 23fe350:	3418      	adds	r4, #24
 23fe352:	462a      	mov	r2, r5
 23fe354:	6818      	ldr	r0, [r3, #0]
 23fe356:	6859      	ldr	r1, [r3, #4]
 23fe358:	3308      	adds	r3, #8
 23fe35a:	c203      	stmia	r2!, {r0, r1}
 23fe35c:	42a3      	cmp	r3, r4
 23fe35e:	4615      	mov	r5, r2
 23fe360:	d1f7      	bne.n	23fe352 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fe362:	a901      	add	r1, sp, #4
 23fe364:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fe366:	1d3c      	adds	r4, r7, #4
 23fe368:	ad07      	add	r5, sp, #28
 23fe36a:	f7ff ff2d 	bl	23fe1c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fe36e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fe370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fe372:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fe374:	4649      	mov	r1, r9
 23fe376:	7023      	strb	r3, [r4, #0]
                    break;
 23fe378:	e7ca      	b.n	23fe310 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fe37a:	9800      	ldr	r0, [sp, #0]
 23fe37c:	f7ff fbc2 	bl	23fdb04 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fe380:	4638      	mov	r0, r7
 23fe382:	b015      	add	sp, #84	; 0x54
 23fe384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fe388 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fe388:	4b02      	ldr	r3, [pc, #8]	; (23fe394 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fe38a:	4a03      	ldr	r2, [pc, #12]	; (23fe398 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fe38c:	601a      	str	r2, [r3, #0]
 23fe38e:	2200      	movs	r2, #0
 23fe390:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fe392:	4770      	bx	lr
 23fe394:	1007ae9c 	.word	0x1007ae9c
 23fe398:	023ffe60 	.word	0x023ffe60

023fe39c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fe39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe39e:	4606      	mov	r6, r0
 23fe3a0:	460d      	mov	r5, r1
  size_t n = 0;
 23fe3a2:	2400      	movs	r4, #0
 23fe3a4:	188f      	adds	r7, r1, r2
  while (size--) {
 23fe3a6:	42bd      	cmp	r5, r7
 23fe3a8:	d00c      	beq.n	23fe3c4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fe3aa:	6833      	ldr	r3, [r6, #0]
 23fe3ac:	4630      	mov	r0, r6
 23fe3ae:	689b      	ldr	r3, [r3, #8]
 23fe3b0:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe3b4:	4798      	blx	r3
     if (chunk>=0)
 23fe3b6:	1e03      	subs	r3, r0, #0
 23fe3b8:	db01      	blt.n	23fe3be <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fe3ba:	441c      	add	r4, r3
  while (size--) {
 23fe3bc:	e7f3      	b.n	23fe3a6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fe3be:	2c00      	cmp	r4, #0
 23fe3c0:	bf08      	it	eq
 23fe3c2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fe3c4:	4620      	mov	r0, r4
 23fe3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe3c8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fe3c8:	b513      	push	{r0, r1, r4, lr}
 23fe3ca:	4604      	mov	r4, r0
    }
 23fe3cc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fe3ce:	b159      	cbz	r1, 23fe3e8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fe3d0:	9101      	str	r1, [sp, #4]
 23fe3d2:	f7ff f831 	bl	23fd438 <strlen>
 23fe3d6:	4602      	mov	r2, r0
 23fe3d8:	4620      	mov	r0, r4
 23fe3da:	6823      	ldr	r3, [r4, #0]
 23fe3dc:	9901      	ldr	r1, [sp, #4]
 23fe3de:	68db      	ldr	r3, [r3, #12]
    }
 23fe3e0:	b002      	add	sp, #8
 23fe3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fe3e6:	4718      	bx	r3
    }
 23fe3e8:	b002      	add	sp, #8
 23fe3ea:	bd10      	pop	{r4, pc}

023fe3ec <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fe3ec:	6803      	ldr	r3, [r0, #0]
 23fe3ee:	689b      	ldr	r3, [r3, #8]
 23fe3f0:	4718      	bx	r3

023fe3f2 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fe3f2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fe3f4:	2a01      	cmp	r2, #1
 23fe3f6:	bf98      	it	ls
 23fe3f8:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe3fa:	b530      	push	{r4, r5, lr}
 23fe3fc:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe3fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe402:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fe404:	460d      	mov	r5, r1
 23fe406:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe40a:	fb01 5312 	mls	r3, r1, r2, r5
 23fe40e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe412:	2b09      	cmp	r3, #9
 23fe414:	bf94      	ite	ls
 23fe416:	3330      	addls	r3, #48	; 0x30
 23fe418:	3337      	addhi	r3, #55	; 0x37
 23fe41a:	b2db      	uxtb	r3, r3
  } while(n);
 23fe41c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe41e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe422:	d9ef      	bls.n	23fe404 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fe424:	4621      	mov	r1, r4
 23fe426:	f7ff ffcf 	bl	23fe3c8 <_ZN5Print5writeEPKc>
}
 23fe42a:	b00b      	add	sp, #44	; 0x2c
 23fe42c:	bd30      	pop	{r4, r5, pc}
	...

023fe430 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fe430:	2200      	movs	r2, #0
 23fe432:	4b01      	ldr	r3, [pc, #4]	; (23fe438 <_GLOBAL__sub_I_RGB+0x8>)
 23fe434:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe436:	4770      	bx	lr
 23fe438:	1007aea4 	.word	0x1007aea4

023fe43c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fe43c:	b510      	push	{r4, lr}
 23fe43e:	4604      	mov	r4, r0
 23fe440:	4608      	mov	r0, r1
{
    _spi = spi;
 23fe442:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fe444:	f7ff fb7a 	bl	23fdb3c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe448:	2300      	movs	r3, #0
}
 23fe44a:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fe44c:	6063      	str	r3, [r4, #4]
}
 23fe44e:	bd10      	pop	{r4, pc}

023fe450 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fe450:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe452:	2000      	movs	r0, #0
 23fe454:	4b04      	ldr	r3, [pc, #16]	; (23fe468 <_GLOBAL__sub_I_System+0x18>)
 23fe456:	601a      	str	r2, [r3, #0]
 23fe458:	4b04      	ldr	r3, [pc, #16]	; (23fe46c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fe45a:	4a05      	ldr	r2, [pc, #20]	; (23fe470 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fe45c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fe460:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe462:	f7ff bc59 	b.w	23fdd18 <set_system_mode>
 23fe466:	bf00      	nop
 23fe468:	1007aec0 	.word	0x1007aec0
 23fe46c:	1007aeb4 	.word	0x1007aeb4
 23fe470:	ffff0000 	.word	0xffff0000

023fe474 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fe474:	4b02      	ldr	r3, [pc, #8]	; (23fe480 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fe476:	681a      	ldr	r2, [r3, #0]
 23fe478:	4b02      	ldr	r3, [pc, #8]	; (23fe484 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fe47a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fe47c:	4770      	bx	lr
 23fe47e:	bf00      	nop
 23fe480:	1007add0 	.word	0x1007add0
 23fe484:	1007aec4 	.word	0x1007aec4

023fe488 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fe488:	4770      	bx	lr

023fe48a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe48a:	7441      	strb	r1, [r0, #17]
}
 23fe48c:	4770      	bx	lr

023fe48e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fe48e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fe490:	7c00      	ldrb	r0, [r0, #16]
 23fe492:	f7ff fbc3 	bl	23fdc1c <hal_usart_available_data_for_write>
}
 23fe496:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe49a:	bd08      	pop	{r3, pc}

023fe49c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fe49c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fe49e:	7c00      	ldrb	r0, [r0, #16]
 23fe4a0:	f7ff fb76 	bl	23fdb90 <hal_usart_available>
}
 23fe4a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe4a8:	bd08      	pop	{r3, pc}

023fe4aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fe4aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fe4ac:	7c00      	ldrb	r0, [r0, #16]
 23fe4ae:	f7ff fb8b 	bl	23fdbc8 <hal_usart_peek>
}
 23fe4b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe4b6:	bd08      	pop	{r3, pc}

023fe4b8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fe4b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fe4ba:	7c00      	ldrb	r0, [r0, #16]
 23fe4bc:	f7ff fb76 	bl	23fdbac <hal_usart_read>
}
 23fe4c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe4c4:	bd08      	pop	{r3, pc}

023fe4c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fe4c6:	7c00      	ldrb	r0, [r0, #16]
 23fe4c8:	f7ff bb8c 	b.w	23fdbe4 <hal_usart_flush>

023fe4cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fe4cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe4ce:	7c45      	ldrb	r5, [r0, #17]
{
 23fe4d0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe4d2:	b12d      	cbz	r5, 23fe4e0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fe4d4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fe4d6:	b003      	add	sp, #12
 23fe4d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fe4dc:	f7ff bb4a 	b.w	23fdb74 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe4e0:	7c00      	ldrb	r0, [r0, #16]
 23fe4e2:	9101      	str	r1, [sp, #4]
 23fe4e4:	f7ff fb9a 	bl	23fdc1c <hal_usart_available_data_for_write>
 23fe4e8:	2800      	cmp	r0, #0
 23fe4ea:	9901      	ldr	r1, [sp, #4]
 23fe4ec:	dcf2      	bgt.n	23fe4d4 <_ZN11USARTSerial5writeEh+0x8>
}
 23fe4ee:	4628      	mov	r0, r5
 23fe4f0:	b003      	add	sp, #12
 23fe4f2:	bd30      	pop	{r4, r5, pc}

023fe4f4 <_ZN11USARTSerialD0Ev>:
 23fe4f4:	b510      	push	{r4, lr}
 23fe4f6:	4604      	mov	r4, r0
 23fe4f8:	2114      	movs	r1, #20
 23fe4fa:	f7fe ffc4 	bl	23fd486 <_ZdlPvj>
 23fe4fe:	4620      	mov	r0, r4
 23fe500:	bd10      	pop	{r4, pc}
	...

023fe504 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe504:	b510      	push	{r4, lr}
 23fe506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe50a:	4604      	mov	r4, r0
 23fe50c:	4608      	mov	r0, r1
 23fe50e:	4611      	mov	r1, r2
 23fe510:	2200      	movs	r2, #0
 23fe512:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe516:	4b04      	ldr	r3, [pc, #16]	; (23fe528 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fe518:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe51a:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe51c:	2301      	movs	r3, #1
 23fe51e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fe520:	f7ff fb8a 	bl	23fdc38 <hal_usart_init_ex>
}
 23fe524:	4620      	mov	r0, r4
 23fe526:	bd10      	pop	{r4, pc}
 23fe528:	023ffeb8 	.word	0x023ffeb8

023fe52c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fe52c:	7c00      	ldrb	r0, [r0, #16]
 23fe52e:	f7ff bb67 	b.w	23fdc00 <hal_usart_is_enabled>

023fe532 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe532:	7441      	strb	r1, [r0, #17]
}
 23fe534:	4770      	bx	lr

023fe536 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe536:	4770      	bx	lr

023fe538 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fe538:	4770      	bx	lr

023fe53a <_ZN9USBSerial4readEv>:
{
 23fe53a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fe53c:	2100      	movs	r1, #0
 23fe53e:	7c00      	ldrb	r0, [r0, #16]
 23fe540:	f7ff fbc0 	bl	23fdcc4 <HAL_USB_USART_Receive_Data>
}
 23fe544:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe548:	bd08      	pop	{r3, pc}

023fe54a <_ZN9USBSerial4peekEv>:
{
 23fe54a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fe54c:	2101      	movs	r1, #1
 23fe54e:	7c00      	ldrb	r0, [r0, #16]
 23fe550:	f7ff fbb8 	bl	23fdcc4 <HAL_USB_USART_Receive_Data>
}
 23fe554:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe558:	bd08      	pop	{r3, pc}

023fe55a <_ZN9USBSerial17availableForWriteEv>:
{
 23fe55a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fe55c:	7c00      	ldrb	r0, [r0, #16]
 23fe55e:	f7ff fba3 	bl	23fdca8 <HAL_USB_USART_Available_Data_For_Write>
}
 23fe562:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe566:	bd08      	pop	{r3, pc}

023fe568 <_ZN9USBSerial9availableEv>:
{
 23fe568:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fe56a:	7c00      	ldrb	r0, [r0, #16]
 23fe56c:	f7ff fb8e 	bl	23fdc8c <HAL_USB_USART_Available_Data>
}
 23fe570:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe574:	bd08      	pop	{r3, pc}

023fe576 <_ZN9USBSerial5writeEh>:
{
 23fe576:	b513      	push	{r0, r1, r4, lr}
 23fe578:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe57a:	7c00      	ldrb	r0, [r0, #16]
{
 23fe57c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe57e:	f7ff fb93 	bl	23fdca8 <HAL_USB_USART_Available_Data_For_Write>
 23fe582:	2800      	cmp	r0, #0
 23fe584:	9901      	ldr	r1, [sp, #4]
 23fe586:	dc01      	bgt.n	23fe58c <_ZN9USBSerial5writeEh+0x16>
 23fe588:	7c60      	ldrb	r0, [r4, #17]
 23fe58a:	b120      	cbz	r0, 23fe596 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fe58c:	7c20      	ldrb	r0, [r4, #16]
 23fe58e:	f7ff fba7 	bl	23fdce0 <HAL_USB_USART_Send_Data>
 23fe592:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fe596:	b002      	add	sp, #8
 23fe598:	bd10      	pop	{r4, pc}

023fe59a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fe59a:	7c00      	ldrb	r0, [r0, #16]
 23fe59c:	f7ff bbae 	b.w	23fdcfc <HAL_USB_USART_Flush_Data>

023fe5a0 <_ZN9USBSerialD0Ev>:
 23fe5a0:	b510      	push	{r4, lr}
 23fe5a2:	4604      	mov	r4, r0
 23fe5a4:	2114      	movs	r1, #20
 23fe5a6:	f7fe ff6e 	bl	23fd486 <_ZdlPvj>
 23fe5aa:	4620      	mov	r0, r4
 23fe5ac:	bd10      	pop	{r4, pc}
	...

023fe5b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe5b0:	b510      	push	{r4, lr}
 23fe5b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe5b6:	4604      	mov	r4, r0
 23fe5b8:	4608      	mov	r0, r1
 23fe5ba:	2100      	movs	r1, #0
 23fe5bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fe5c0:	4b04      	ldr	r3, [pc, #16]	; (23fe5d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fe5c2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe5c4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe5c6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fe5c8:	4611      	mov	r1, r2
  _blocking = true;
 23fe5ca:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fe5cc:	f7ff fb42 	bl	23fdc54 <HAL_USB_USART_Init>
}
 23fe5d0:	4620      	mov	r0, r4
 23fe5d2:	bd10      	pop	{r4, pc}
 23fe5d4:	023ffee8 	.word	0x023ffee8

023fe5d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fe5d8:	2200      	movs	r2, #0
 23fe5da:	7c00      	ldrb	r0, [r0, #16]
 23fe5dc:	f7ff bb48 	b.w	23fdc70 <HAL_USB_USART_Begin>

023fe5e0 <_Z19acquireSerialBufferv>:
{
 23fe5e0:	b510      	push	{r4, lr}
 23fe5e2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fe5e4:	2214      	movs	r2, #20
 23fe5e6:	2100      	movs	r1, #0
 23fe5e8:	f001 fb51 	bl	23ffc8e <memset>
}
 23fe5ec:	4620      	mov	r0, r4
 23fe5ee:	bd10      	pop	{r4, pc}

023fe5f0 <_Z16_fetch_usbserialv>:
{
 23fe5f0:	b510      	push	{r4, lr}
 23fe5f2:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fe5f4:	a803      	add	r0, sp, #12
 23fe5f6:	f7ff fff3 	bl	23fe5e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe5fa:	4c0c      	ldr	r4, [pc, #48]	; (23fe62c <_Z16_fetch_usbserialv+0x3c>)
 23fe5fc:	e8d4 1f8f 	ldab	r1, [r4]
 23fe600:	f011 0101 	ands.w	r1, r1, #1
 23fe604:	d10f      	bne.n	23fe626 <_Z16_fetch_usbserialv+0x36>
 23fe606:	4620      	mov	r0, r4
 23fe608:	9101      	str	r1, [sp, #4]
 23fe60a:	f7fe ff3e 	bl	23fd48a <__cxa_guard_acquire>
 23fe60e:	9901      	ldr	r1, [sp, #4]
 23fe610:	b148      	cbz	r0, 23fe626 <_Z16_fetch_usbserialv+0x36>
 23fe612:	aa03      	add	r2, sp, #12
 23fe614:	4806      	ldr	r0, [pc, #24]	; (23fe630 <_Z16_fetch_usbserialv+0x40>)
 23fe616:	f7ff ffcb 	bl	23fe5b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fe61a:	4620      	mov	r0, r4
 23fe61c:	f7fe ff3a 	bl	23fd494 <__cxa_guard_release>
 23fe620:	4804      	ldr	r0, [pc, #16]	; (23fe634 <_Z16_fetch_usbserialv+0x44>)
 23fe622:	f001 fb21 	bl	23ffc68 <atexit>
	return _usbserial;
}
 23fe626:	4802      	ldr	r0, [pc, #8]	; (23fe630 <_Z16_fetch_usbserialv+0x40>)
 23fe628:	b008      	add	sp, #32
 23fe62a:	bd10      	pop	{r4, pc}
 23fe62c:	1007aec8 	.word	0x1007aec8
 23fe630:	1007aecc 	.word	0x1007aecc
 23fe634:	023fe537 	.word	0x023fe537

023fe638 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fe638:	2200      	movs	r2, #0
 23fe63a:	6840      	ldr	r0, [r0, #4]
 23fe63c:	4611      	mov	r1, r2
 23fe63e:	f7ff bbf7 	b.w	23fde30 <network_ready>

023fe642 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fe642:	2200      	movs	r2, #0
 23fe644:	6840      	ldr	r0, [r0, #4]
 23fe646:	4611      	mov	r1, r2
 23fe648:	f7ff bc2a 	b.w	23fdea0 <network_listening>

023fe64c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fe64c:	2200      	movs	r2, #0
 23fe64e:	6840      	ldr	r0, [r0, #4]
 23fe650:	4611      	mov	r1, r2
 23fe652:	f7ff bc41 	b.w	23fded8 <network_get_listen_timeout>

023fe656 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fe656:	2200      	movs	r2, #0
 23fe658:	6840      	ldr	r0, [r0, #4]
 23fe65a:	f7ff bc2f 	b.w	23fdebc <network_set_listen_timeout>

023fe65e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fe65e:	2200      	movs	r2, #0
 23fe660:	6840      	ldr	r0, [r0, #4]
 23fe662:	f081 0101 	eor.w	r1, r1, #1
 23fe666:	f7ff bc0d 	b.w	23fde84 <network_listen>

023fe66a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fe66a:	2300      	movs	r3, #0
 23fe66c:	6840      	ldr	r0, [r0, #4]
 23fe66e:	461a      	mov	r2, r3
 23fe670:	4619      	mov	r1, r3
 23fe672:	f7ff bbf9 	b.w	23fde68 <network_off>

023fe676 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fe676:	2300      	movs	r3, #0
 23fe678:	6840      	ldr	r0, [r0, #4]
 23fe67a:	461a      	mov	r2, r3
 23fe67c:	4619      	mov	r1, r3
 23fe67e:	f7ff bbe5 	b.w	23fde4c <network_on>

023fe682 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fe682:	2200      	movs	r2, #0
 23fe684:	6840      	ldr	r0, [r0, #4]
 23fe686:	4611      	mov	r1, r2
 23fe688:	f7ff bbb6 	b.w	23fddf8 <network_connecting>

023fe68c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fe68c:	2200      	movs	r2, #0
 23fe68e:	2102      	movs	r1, #2
 23fe690:	6840      	ldr	r0, [r0, #4]
 23fe692:	f7ff bbbf 	b.w	23fde14 <network_disconnect>

023fe696 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fe696:	2300      	movs	r3, #0
 23fe698:	6840      	ldr	r0, [r0, #4]
 23fe69a:	461a      	mov	r2, r3
 23fe69c:	f7ff bb9e 	b.w	23fdddc <network_connect>

023fe6a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fe6a0:	2204      	movs	r2, #4
 23fe6a2:	4b02      	ldr	r3, [pc, #8]	; (23fe6ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fe6a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fe6a6:	4a02      	ldr	r2, [pc, #8]	; (23fe6b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fe6a8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fe6aa:	4770      	bx	lr
 23fe6ac:	1007aee0 	.word	0x1007aee0
 23fe6b0:	023fff18 	.word	0x023fff18

023fe6b4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fe6b4:	4b01      	ldr	r3, [pc, #4]	; (23fe6bc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fe6b6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fe6b8:	4770      	bx	lr
 23fe6ba:	bf00      	nop
 23fe6bc:	1007add8 	.word	0x1007add8

023fe6c0 <serialEventRun>:
{
 23fe6c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fe6c2:	4b0f      	ldr	r3, [pc, #60]	; (23fe700 <serialEventRun+0x40>)
 23fe6c4:	b143      	cbz	r3, 23fe6d8 <serialEventRun+0x18>
 23fe6c6:	f7ff ff93 	bl	23fe5f0 <_Z16_fetch_usbserialv>
 23fe6ca:	6803      	ldr	r3, [r0, #0]
 23fe6cc:	691b      	ldr	r3, [r3, #16]
 23fe6ce:	4798      	blx	r3
 23fe6d0:	2800      	cmp	r0, #0
 23fe6d2:	dd01      	ble.n	23fe6d8 <serialEventRun+0x18>
        serialEvent();
 23fe6d4:	e000      	b.n	23fe6d8 <serialEventRun+0x18>
 23fe6d6:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fe6d8:	4b0a      	ldr	r3, [pc, #40]	; (23fe704 <serialEventRun+0x44>)
 23fe6da:	b143      	cbz	r3, 23fe6ee <serialEventRun+0x2e>
 23fe6dc:	f000 f9ba 	bl	23fea54 <_Z22__fetch_global_Serial1v>
 23fe6e0:	6803      	ldr	r3, [r0, #0]
 23fe6e2:	691b      	ldr	r3, [r3, #16]
 23fe6e4:	4798      	blx	r3
 23fe6e6:	2800      	cmp	r0, #0
 23fe6e8:	dd01      	ble.n	23fe6ee <serialEventRun+0x2e>
        serialEvent1();
 23fe6ea:	e000      	b.n	23fe6ee <serialEventRun+0x2e>
 23fe6ec:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fe6ee:	4b06      	ldr	r3, [pc, #24]	; (23fe708 <serialEventRun+0x48>)
 23fe6f0:	b10b      	cbz	r3, 23fe6f6 <serialEventRun+0x36>
 23fe6f2:	f000 f9f5 	bl	23feae0 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fe6f6:	4b05      	ldr	r3, [pc, #20]	; (23fe70c <serialEventRun+0x4c>)
 23fe6f8:	b10b      	cbz	r3, 23fe6fe <serialEventRun+0x3e>
 23fe6fa:	f000 fa27 	bl	23feb4c <_Z15serialEventRun3v>
}
 23fe6fe:	bd08      	pop	{r3, pc}
	...

023fe710 <_post_loop>:
{
 23fe710:	b508      	push	{r3, lr}
	serialEventRun();
 23fe712:	f7ff ffd5 	bl	23fe6c0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fe716:	f7ff f8c1 	bl	23fd89c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fe71a:	4b01      	ldr	r3, [pc, #4]	; (23fe720 <_post_loop+0x10>)
 23fe71c:	6018      	str	r0, [r3, #0]
}
 23fe71e:	bd08      	pop	{r3, pc}
 23fe720:	1007aef0 	.word	0x1007aef0

023fe724 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe724:	4805      	ldr	r0, [pc, #20]	; (23fe73c <_Z33system_initialize_user_backup_ramv+0x18>)
 23fe726:	4a06      	ldr	r2, [pc, #24]	; (23fe740 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fe728:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe72a:	1a12      	subs	r2, r2, r0
 23fe72c:	4905      	ldr	r1, [pc, #20]	; (23fe744 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fe72e:	f001 faa1 	bl	23ffc74 <memcpy>
    __backup_sram_signature = signature;
 23fe732:	4b05      	ldr	r3, [pc, #20]	; (23fe748 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fe734:	4a05      	ldr	r2, [pc, #20]	; (23fe74c <_Z33system_initialize_user_backup_ramv+0x28>)
 23fe736:	601a      	str	r2, [r3, #0]
}
 23fe738:	bd08      	pop	{r3, pc}
 23fe73a:	bf00      	nop
 23fe73c:	1007b400 	.word	0x1007b400
 23fe740:	1007b404 	.word	0x1007b404
 23fe744:	085ff694 	.word	0x085ff694
 23fe748:	1007b400 	.word	0x1007b400
 23fe74c:	9a271c1e 	.word	0x9a271c1e

023fe750 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe750:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fe752:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe754:	461a      	mov	r2, r3
 23fe756:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe75a:	9300      	str	r3, [sp, #0]
 23fe75c:	f7ff fb14 	bl	23fdd88 <system_ctrl_set_result>
}
 23fe760:	b003      	add	sp, #12
 23fe762:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fe768 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fe768:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fe76a:	8843      	ldrh	r3, [r0, #2]
 23fe76c:	2b0a      	cmp	r3, #10
 23fe76e:	d008      	beq.n	23fe782 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fe770:	2b50      	cmp	r3, #80	; 0x50
 23fe772:	d10b      	bne.n	23fe78c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fe774:	4b09      	ldr	r3, [pc, #36]	; (23fe79c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fe776:	681b      	ldr	r3, [r3, #0]
 23fe778:	b14b      	cbz	r3, 23fe78e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fe77a:	b003      	add	sp, #12
 23fe77c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fe780:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fe782:	f7ff ffe5 	bl	23fe750 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fe786:	b003      	add	sp, #12
 23fe788:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fe78c:	2300      	movs	r3, #0
 23fe78e:	461a      	mov	r2, r3
 23fe790:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fe794:	9300      	str	r3, [sp, #0]
 23fe796:	f7ff faf7 	bl	23fdd88 <system_ctrl_set_result>
}
 23fe79a:	e7f4      	b.n	23fe786 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fe79c:	1007aeec 	.word	0x1007aeec

023fe7a0 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe7a0:	2100      	movs	r1, #0
{
 23fe7a2:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fe7a4:	4811      	ldr	r0, [pc, #68]	; (23fe7ec <module_user_init_hook+0x4c>)
 23fe7a6:	f7ff fbf9 	bl	23fdf9c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fe7aa:	4b11      	ldr	r3, [pc, #68]	; (23fe7f0 <module_user_init_hook+0x50>)
 23fe7ac:	681a      	ldr	r2, [r3, #0]
 23fe7ae:	4b11      	ldr	r3, [pc, #68]	; (23fe7f4 <module_user_init_hook+0x54>)
 23fe7b0:	429a      	cmp	r2, r3
 23fe7b2:	bf0c      	ite	eq
 23fe7b4:	2201      	moveq	r2, #1
 23fe7b6:	2200      	movne	r2, #0
 23fe7b8:	4b0f      	ldr	r3, [pc, #60]	; (23fe7f8 <module_user_init_hook+0x58>)
 23fe7ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fe7bc:	d001      	beq.n	23fe7c2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fe7be:	f7ff ffb1 	bl	23fe724 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fe7c2:	f7ff f85d 	bl	23fd880 <HAL_RNG_GetRandomNumber>
 23fe7c6:	4604      	mov	r4, r0
    srand(seed);
 23fe7c8:	f001 fa6a 	bl	23ffca0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fe7cc:	4b0b      	ldr	r3, [pc, #44]	; (23fe7fc <module_user_init_hook+0x5c>)
 23fe7ce:	b113      	cbz	r3, 23fe7d6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fe7d0:	4620      	mov	r0, r4
 23fe7d2:	e000      	b.n	23fe7d6 <module_user_init_hook+0x36>
 23fe7d4:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fe7d6:	2100      	movs	r1, #0
 23fe7d8:	4808      	ldr	r0, [pc, #32]	; (23fe7fc <module_user_init_hook+0x5c>)
 23fe7da:	f7ff fae3 	bl	23fdda4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fe7de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fe7e2:	2100      	movs	r1, #0
 23fe7e4:	4806      	ldr	r0, [pc, #24]	; (23fe800 <module_user_init_hook+0x60>)
 23fe7e6:	f7ff bac1 	b.w	23fdd6c <system_ctrl_set_app_request_handler>
 23fe7ea:	bf00      	nop
 23fe7ec:	023fe6b5 	.word	0x023fe6b5
 23fe7f0:	1007b400 	.word	0x1007b400
 23fe7f4:	9a271c1e 	.word	0x9a271c1e
 23fe7f8:	1007aee8 	.word	0x1007aee8
 23fe7fc:	00000000 	.word	0x00000000
 23fe800:	023fe769 	.word	0x023fe769

023fe804 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fe804:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fe806:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe808:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fe80a:	d902      	bls.n	23fe812 <pinAvailable+0xe>
    return false;
 23fe80c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fe80e:	b003      	add	sp, #12
 23fe810:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe812:	f1a0 030f 	sub.w	r3, r0, #15
 23fe816:	2b02      	cmp	r3, #2
 23fe818:	d90b      	bls.n	23fe832 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fe81a:	2801      	cmp	r0, #1
 23fe81c:	d821      	bhi.n	23fe862 <pinAvailable+0x5e>
 23fe81e:	f000 f8c5 	bl	23fe9ac <_Z19__fetch_global_Wirev>
 23fe822:	2100      	movs	r1, #0
 23fe824:	7c00      	ldrb	r0, [r0, #16]
 23fe826:	f7ff f943 	bl	23fdab0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe82a:	f080 0001 	eor.w	r0, r0, #1
 23fe82e:	b2c0      	uxtb	r0, r0
 23fe830:	e7ed      	b.n	23fe80e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fe832:	4d11      	ldr	r5, [pc, #68]	; (23fe878 <pinAvailable+0x74>)
 23fe834:	e8d5 1f8f 	ldab	r1, [r5]
 23fe838:	f011 0101 	ands.w	r1, r1, #1
 23fe83c:	d10b      	bne.n	23fe856 <pinAvailable+0x52>
 23fe83e:	4628      	mov	r0, r5
 23fe840:	9101      	str	r1, [sp, #4]
 23fe842:	f7fe fe22 	bl	23fd48a <__cxa_guard_acquire>
 23fe846:	9901      	ldr	r1, [sp, #4]
 23fe848:	b128      	cbz	r0, 23fe856 <pinAvailable+0x52>
 23fe84a:	480c      	ldr	r0, [pc, #48]	; (23fe87c <pinAvailable+0x78>)
 23fe84c:	f7ff fdf6 	bl	23fe43c <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe850:	4628      	mov	r0, r5
 23fe852:	f7fe fe1f 	bl	23fd494 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fe856:	4b09      	ldr	r3, [pc, #36]	; (23fe87c <pinAvailable+0x78>)
 23fe858:	7818      	ldrb	r0, [r3, #0]
 23fe85a:	f7ff f97d 	bl	23fdb58 <hal_spi_is_enabled>
 23fe85e:	2800      	cmp	r0, #0
 23fe860:	d1d4      	bne.n	23fe80c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fe862:	3c08      	subs	r4, #8
 23fe864:	2c01      	cmp	r4, #1
 23fe866:	d805      	bhi.n	23fe874 <pinAvailable+0x70>
 23fe868:	f000 f8f4 	bl	23fea54 <_Z22__fetch_global_Serial1v>
 23fe86c:	7c00      	ldrb	r0, [r0, #16]
 23fe86e:	f7ff f9c7 	bl	23fdc00 <hal_usart_is_enabled>
 23fe872:	e7da      	b.n	23fe82a <pinAvailable+0x26>
  return true; // 'pin' is available
 23fe874:	2001      	movs	r0, #1
 23fe876:	e7ca      	b.n	23fe80e <pinAvailable+0xa>
 23fe878:	1007ae80 	.word	0x1007ae80
 23fe87c:	1007ae84 	.word	0x1007ae84

023fe880 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe880:	281b      	cmp	r0, #27
{
 23fe882:	b538      	push	{r3, r4, r5, lr}
 23fe884:	4604      	mov	r4, r0
 23fe886:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fe888:	d80a      	bhi.n	23fe8a0 <pinMode+0x20>
 23fe88a:	29ff      	cmp	r1, #255	; 0xff
 23fe88c:	d008      	beq.n	23fe8a0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fe88e:	f7ff ffb9 	bl	23fe804 <pinAvailable>
 23fe892:	b128      	cbz	r0, 23fe8a0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fe894:	4629      	mov	r1, r5
 23fe896:	4620      	mov	r0, r4
}
 23fe898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fe89c:	f7ff b81a 	b.w	23fd8d4 <hal_gpio_mode>
}
 23fe8a0:	bd38      	pop	{r3, r4, r5, pc}

023fe8a2 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
 23fe8a2:	b538      	push	{r3, r4, r5, lr}
 23fe8a4:	4604      	mov	r4, r0
 23fe8a6:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 23fe8a8:	f7ff ffac 	bl	23fe804 <pinAvailable>
 23fe8ac:	b1f0      	cbz	r0, 23fe8ec <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
 23fe8ae:	2104      	movs	r1, #4
 23fe8b0:	4620      	mov	r0, r4
 23fe8b2:	f7ff f801 	bl	23fd8b8 <hal_pin_validate_function>
 23fe8b6:	2804      	cmp	r0, #4
 23fe8b8:	d105      	bne.n	23fe8c6 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 23fe8ba:	4620      	mov	r0, r4
 23fe8bc:	b2a9      	uxth	r1, r5
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
 23fe8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
 23fe8c2:	f7ff b823 	b.w	23fd90c <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
 23fe8c6:	2102      	movs	r1, #2
 23fe8c8:	4620      	mov	r0, r4
 23fe8ca:	f7fe fff5 	bl	23fd8b8 <hal_pin_validate_function>
 23fe8ce:	2802      	cmp	r0, #2
 23fe8d0:	d10c      	bne.n	23fe8ec <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
 23fe8d2:	4620      	mov	r0, r4
 23fe8d4:	f7ff f80c 	bl	23fd8f0 <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 23fe8d8:	2801      	cmp	r0, #1
 23fe8da:	d001      	beq.n	23fe8e0 <_Z11analogWritetm+0x3e>
 23fe8dc:	2804      	cmp	r0, #4
 23fe8de:	d105      	bne.n	23fe8ec <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
 23fe8e0:	4629      	mov	r1, r5
 23fe8e2:	4620      	mov	r0, r4
}
 23fe8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
 23fe8e8:	f7ff b83a 	b.w	23fd960 <hal_pwm_write_ext>
}
 23fe8ec:	bd38      	pop	{r3, r4, r5, pc}

023fe8ee <_Z11analogWritetmm>:
/*
 * @brief Should take an integer 0-255 and create a PWM signal with a duty cycle from 0-100%
 * and frequency from 1 to 65535 Hz.
 */
void analogWrite(hal_pin_t pin, uint32_t value, uint32_t pwm_frequency)
{
 23fe8ee:	b570      	push	{r4, r5, r6, lr}
 23fe8f0:	4604      	mov	r4, r0
 23fe8f2:	460d      	mov	r5, r1
 23fe8f4:	4616      	mov	r6, r2
    // Safety check
    if (!pinAvailable(pin))
 23fe8f6:	f7ff ff85 	bl	23fe804 <pinAvailable>
 23fe8fa:	b198      	cbz	r0, 23fe924 <_Z11analogWritetmm+0x36>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
 23fe8fc:	2102      	movs	r1, #2
 23fe8fe:	4620      	mov	r0, r4
 23fe900:	f7fe ffda 	bl	23fd8b8 <hal_pin_validate_function>
 23fe904:	2802      	cmp	r0, #2
 23fe906:	d10d      	bne.n	23fe924 <_Z11analogWritetmm+0x36>
    {
        PinMode mode = hal_gpio_get_mode(pin);
 23fe908:	4620      	mov	r0, r4
 23fe90a:	f7fe fff1 	bl	23fd8f0 <hal_gpio_get_mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 23fe90e:	2801      	cmp	r0, #1
 23fe910:	d001      	beq.n	23fe916 <_Z11analogWritetmm+0x28>
 23fe912:	2804      	cmp	r0, #4
 23fe914:	d106      	bne.n	23fe924 <_Z11analogWritetmm+0x36>
        {
            return;
        }

        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
 23fe916:	4632      	mov	r2, r6
 23fe918:	4629      	mov	r1, r5
 23fe91a:	4620      	mov	r0, r4
    }
}
 23fe91c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hal_pwm_write_with_frequency_ext(pin, value, pwm_frequency);
 23fe920:	f7ff b82c 	b.w	23fd97c <hal_pwm_write_with_frequency_ext>
}
 23fe924:	bd70      	pop	{r4, r5, r6, pc}

023fe926 <_Z21analogWriteResolutiont>:

  return 0;
}

uint8_t analogWriteResolution(hal_pin_t pin)
{
 23fe926:	b510      	push	{r4, lr}
 23fe928:	4604      	mov	r4, r0
  // Safety check
  if (!pinAvailable(pin))
 23fe92a:	f7ff ff6b 	bl	23fe804 <pinAvailable>
 23fe92e:	b1a8      	cbz	r0, 23fe95c <_Z21analogWriteResolutiont+0x36>
  {
      return 0;
  }

  if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
 23fe930:	2104      	movs	r1, #4
 23fe932:	4620      	mov	r0, r4
 23fe934:	f7fe ffc0 	bl	23fd8b8 <hal_pin_validate_function>
 23fe938:	2804      	cmp	r0, #4
 23fe93a:	d104      	bne.n	23fe946 <_Z21analogWriteResolutiont+0x20>
  {
    return HAL_DAC_Get_Resolution(pin);
 23fe93c:	4620      	mov	r0, r4
  {
    return hal_pwm_get_resolution(pin);
  }

  return 0;
}
 23fe93e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_DAC_Get_Resolution(pin);
 23fe942:	f7fe bff1 	b.w	23fd928 <HAL_DAC_Get_Resolution>
  else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
 23fe946:	2102      	movs	r1, #2
 23fe948:	4620      	mov	r0, r4
 23fe94a:	f7fe ffb5 	bl	23fd8b8 <hal_pin_validate_function>
 23fe94e:	2802      	cmp	r0, #2
 23fe950:	d104      	bne.n	23fe95c <_Z21analogWriteResolutiont+0x36>
    return hal_pwm_get_resolution(pin);
 23fe952:	4620      	mov	r0, r4
}
 23fe954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_pwm_get_resolution(pin);
 23fe958:	f7fe bff4 	b.w	23fd944 <hal_pwm_get_resolution>
}
 23fe95c:	2000      	movs	r0, #0
 23fe95e:	bd10      	pop	{r4, pc}

023fe960 <_Z23analogWriteMaxFrequencyt>:

uint32_t analogWriteMaxFrequency(hal_pin_t pin)
{
 23fe960:	b510      	push	{r4, lr}
 23fe962:	4604      	mov	r4, r0
  // Safety check
  if (!pinAvailable(pin))
 23fe964:	f7ff ff4e 	bl	23fe804 <pinAvailable>
 23fe968:	b120      	cbz	r0, 23fe974 <_Z23analogWriteMaxFrequencyt+0x14>
  {
      return 0;
  }

  return hal_pwm_get_max_frequency(pin);
 23fe96a:	4620      	mov	r0, r4
}
 23fe96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_pwm_get_max_frequency(pin);
 23fe970:	f7ff b812 	b.w	23fd998 <hal_pwm_get_max_frequency>
}
 23fe974:	bd10      	pop	{r4, pc}

023fe976 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe976:	4770      	bx	lr

023fe978 <_Z17acquireWireBufferv>:
{
 23fe978:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fe97a:	4b0a      	ldr	r3, [pc, #40]	; (23fe9a4 <_Z17acquireWireBufferv+0x2c>)
{
 23fe97c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fe97e:	6003      	str	r3, [r0, #0]
 23fe980:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe982:	4909      	ldr	r1, [pc, #36]	; (23fe9a8 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fe984:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe986:	2020      	movs	r0, #32
 23fe988:	f000 f8f4 	bl	23feb74 <_ZnajRKSt9nothrow_t>
	};
 23fe98c:	2520      	movs	r5, #32
 23fe98e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe990:	4905      	ldr	r1, [pc, #20]	; (23fe9a8 <_Z17acquireWireBufferv+0x30>)
 23fe992:	4628      	mov	r0, r5
	};
 23fe994:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fe996:	f000 f8ed 	bl	23feb74 <_ZnajRKSt9nothrow_t>
	};
 23fe99a:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fe99e:	4620      	mov	r0, r4
 23fe9a0:	bd38      	pop	{r3, r4, r5, pc}
 23fe9a2:	bf00      	nop
 23fe9a4:	00010018 	.word	0x00010018
 23fe9a8:	023fff4c 	.word	0x023fff4c

023fe9ac <_Z19__fetch_global_Wirev>:
{
 23fe9ac:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe9ae:	4d0e      	ldr	r5, [pc, #56]	; (23fe9e8 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fe9b0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fe9b2:	e8d5 1f8f 	ldab	r1, [r5]
 23fe9b6:	f011 0401 	ands.w	r4, r1, #1
 23fe9ba:	d111      	bne.n	23fe9e0 <_Z19__fetch_global_Wirev+0x34>
 23fe9bc:	4628      	mov	r0, r5
 23fe9be:	f7fe fd64 	bl	23fd48a <__cxa_guard_acquire>
 23fe9c2:	b168      	cbz	r0, 23fe9e0 <_Z19__fetch_global_Wirev+0x34>
 23fe9c4:	4668      	mov	r0, sp
 23fe9c6:	f7ff ffd7 	bl	23fe978 <_Z17acquireWireBufferv>
 23fe9ca:	466a      	mov	r2, sp
 23fe9cc:	4621      	mov	r1, r4
 23fe9ce:	4807      	ldr	r0, [pc, #28]	; (23fe9ec <_Z19__fetch_global_Wirev+0x40>)
 23fe9d0:	f7ff fb82 	bl	23fe0d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fe9d4:	4628      	mov	r0, r5
 23fe9d6:	f7fe fd5d 	bl	23fd494 <__cxa_guard_release>
 23fe9da:	4805      	ldr	r0, [pc, #20]	; (23fe9f0 <_Z19__fetch_global_Wirev+0x44>)
 23fe9dc:	f001 f944 	bl	23ffc68 <atexit>
	return wire;
}
 23fe9e0:	4802      	ldr	r0, [pc, #8]	; (23fe9ec <_Z19__fetch_global_Wirev+0x40>)
 23fe9e2:	b007      	add	sp, #28
 23fe9e4:	bd30      	pop	{r4, r5, pc}
 23fe9e6:	bf00      	nop
 23fe9e8:	1007aef4 	.word	0x1007aef4
 23fe9ec:	1007aef8 	.word	0x1007aef8
 23fe9f0:	023fe977 	.word	0x023fe977

023fe9f4 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fe9f4:	4770      	bx	lr
	...

023fe9f8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe9f8:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fe9fa:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fe9fc:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fe9fe:	462a      	mov	r2, r5
 23fea00:	2100      	movs	r1, #0
 23fea02:	f001 f944 	bl	23ffc8e <memset>
 23fea06:	8025      	strh	r5, [r4, #0]
 23fea08:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fea0a:	4907      	ldr	r1, [pc, #28]	; (23fea28 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fea0c:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fea0e:	8125      	strh	r5, [r4, #8]
 23fea10:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fea12:	f000 f8af 	bl	23feb74 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fea16:	4904      	ldr	r1, [pc, #16]	; (23fea28 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fea18:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fea1a:	4628      	mov	r0, r5
 23fea1c:	f000 f8aa 	bl	23feb74 <_ZnajRKSt9nothrow_t>
    };
 23fea20:	60e0      	str	r0, [r4, #12]
}
 23fea22:	4620      	mov	r0, r4
 23fea24:	bd38      	pop	{r3, r4, r5, pc}
 23fea26:	bf00      	nop
 23fea28:	023fff4c 	.word	0x023fff4c

023fea2c <__tcf_2>:
 23fea2c:	4770      	bx	lr

023fea2e <__tcf_1>:
 23fea2e:	4770      	bx	lr

023fea30 <_Z20acquireSerial1Bufferv>:
{
 23fea30:	b510      	push	{r4, lr}
 23fea32:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fea34:	f7ff ffe0 	bl	23fe9f8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fea38:	4620      	mov	r0, r4
 23fea3a:	bd10      	pop	{r4, pc}

023fea3c <_Z20acquireSerial2Bufferv>:
 23fea3c:	b510      	push	{r4, lr}
 23fea3e:	4604      	mov	r4, r0
 23fea40:	f7ff ffda 	bl	23fe9f8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fea44:	4620      	mov	r0, r4
 23fea46:	bd10      	pop	{r4, pc}

023fea48 <_Z20acquireSerial3Bufferv>:
 23fea48:	b510      	push	{r4, lr}
 23fea4a:	4604      	mov	r4, r0
 23fea4c:	f7ff ffd4 	bl	23fe9f8 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fea50:	4620      	mov	r0, r4
 23fea52:	bd10      	pop	{r4, pc}

023fea54 <_Z22__fetch_global_Serial1v>:
{
 23fea54:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fea56:	4d0e      	ldr	r5, [pc, #56]	; (23fea90 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fea58:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fea5a:	e8d5 1f8f 	ldab	r1, [r5]
 23fea5e:	f011 0401 	ands.w	r4, r1, #1
 23fea62:	d111      	bne.n	23fea88 <_Z22__fetch_global_Serial1v+0x34>
 23fea64:	4628      	mov	r0, r5
 23fea66:	f7fe fd10 	bl	23fd48a <__cxa_guard_acquire>
 23fea6a:	b168      	cbz	r0, 23fea88 <_Z22__fetch_global_Serial1v+0x34>
 23fea6c:	a801      	add	r0, sp, #4
 23fea6e:	f7ff ffdf 	bl	23fea30 <_Z20acquireSerial1Bufferv>
 23fea72:	4621      	mov	r1, r4
 23fea74:	aa01      	add	r2, sp, #4
 23fea76:	4807      	ldr	r0, [pc, #28]	; (23fea94 <_Z22__fetch_global_Serial1v+0x40>)
 23fea78:	f7ff fd44 	bl	23fe504 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fea7c:	4628      	mov	r0, r5
 23fea7e:	f7fe fd09 	bl	23fd494 <__cxa_guard_release>
 23fea82:	4805      	ldr	r0, [pc, #20]	; (23fea98 <_Z22__fetch_global_Serial1v+0x44>)
 23fea84:	f001 f8f0 	bl	23ffc68 <atexit>
    return serial1;
}
 23fea88:	4802      	ldr	r0, [pc, #8]	; (23fea94 <_Z22__fetch_global_Serial1v+0x40>)
 23fea8a:	b007      	add	sp, #28
 23fea8c:	bd30      	pop	{r4, r5, pc}
 23fea8e:	bf00      	nop
 23fea90:	1007af0c 	.word	0x1007af0c
 23fea94:	1007af18 	.word	0x1007af18
 23fea98:	023fe9f5 	.word	0x023fe9f5

023fea9c <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fea9c:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fea9e:	4c0d      	ldr	r4, [pc, #52]	; (23fead4 <_Z22__fetch_global_Serial2v+0x38>)
{
 23feaa0:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23feaa2:	e8d4 3f8f 	ldab	r3, [r4]
 23feaa6:	07db      	lsls	r3, r3, #31
 23feaa8:	d411      	bmi.n	23feace <_Z22__fetch_global_Serial2v+0x32>
 23feaaa:	4620      	mov	r0, r4
 23feaac:	f7fe fced 	bl	23fd48a <__cxa_guard_acquire>
 23feab0:	b168      	cbz	r0, 23feace <_Z22__fetch_global_Serial2v+0x32>
 23feab2:	a801      	add	r0, sp, #4
 23feab4:	f7ff ffc2 	bl	23fea3c <_Z20acquireSerial2Bufferv>
 23feab8:	2101      	movs	r1, #1
 23feaba:	aa01      	add	r2, sp, #4
 23feabc:	4806      	ldr	r0, [pc, #24]	; (23fead8 <_Z22__fetch_global_Serial2v+0x3c>)
 23feabe:	f7ff fd21 	bl	23fe504 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23feac2:	4620      	mov	r0, r4
 23feac4:	f7fe fce6 	bl	23fd494 <__cxa_guard_release>
 23feac8:	4804      	ldr	r0, [pc, #16]	; (23feadc <_Z22__fetch_global_Serial2v+0x40>)
 23feaca:	f001 f8cd 	bl	23ffc68 <atexit>
	return serial2;
}
 23feace:	4802      	ldr	r0, [pc, #8]	; (23fead8 <_Z22__fetch_global_Serial2v+0x3c>)
 23fead0:	b006      	add	sp, #24
 23fead2:	bd10      	pop	{r4, pc}
 23fead4:	1007af10 	.word	0x1007af10
 23fead8:	1007af2c 	.word	0x1007af2c
 23feadc:	023fea2f 	.word	0x023fea2f

023feae0 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23feae0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23feae2:	f7ff ffdb 	bl	23fea9c <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23feae6:	4b07      	ldr	r3, [pc, #28]	; (23feb04 <_Z15serialEventRun2v+0x24>)
 23feae8:	4604      	mov	r4, r0
 23feaea:	b153      	cbz	r3, 23feb02 <_Z15serialEventRun2v+0x22>
 23feaec:	f7ff fd1e 	bl	23fe52c <_ZN11USARTSerial9isEnabledEv>
 23feaf0:	b138      	cbz	r0, 23feb02 <_Z15serialEventRun2v+0x22>
 23feaf2:	6823      	ldr	r3, [r4, #0]
 23feaf4:	4620      	mov	r0, r4
 23feaf6:	691b      	ldr	r3, [r3, #16]
 23feaf8:	4798      	blx	r3
 23feafa:	2800      	cmp	r0, #0
 23feafc:	dd01      	ble.n	23feb02 <_Z15serialEventRun2v+0x22>
        handler();
 23feafe:	e000      	b.n	23feb02 <_Z15serialEventRun2v+0x22>
 23feb00:	bf00      	nop
}
 23feb02:	bd10      	pop	{r4, pc}
 23feb04:	00000000 	.word	0x00000000

023feb08 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23feb08:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23feb0a:	4c0d      	ldr	r4, [pc, #52]	; (23feb40 <_Z22__fetch_global_Serial3v+0x38>)
{
 23feb0c:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23feb0e:	e8d4 3f8f 	ldab	r3, [r4]
 23feb12:	07db      	lsls	r3, r3, #31
 23feb14:	d411      	bmi.n	23feb3a <_Z22__fetch_global_Serial3v+0x32>
 23feb16:	4620      	mov	r0, r4
 23feb18:	f7fe fcb7 	bl	23fd48a <__cxa_guard_acquire>
 23feb1c:	b168      	cbz	r0, 23feb3a <_Z22__fetch_global_Serial3v+0x32>
 23feb1e:	a801      	add	r0, sp, #4
 23feb20:	f7ff ff92 	bl	23fea48 <_Z20acquireSerial3Bufferv>
 23feb24:	2102      	movs	r1, #2
 23feb26:	aa01      	add	r2, sp, #4
 23feb28:	4806      	ldr	r0, [pc, #24]	; (23feb44 <_Z22__fetch_global_Serial3v+0x3c>)
 23feb2a:	f7ff fceb 	bl	23fe504 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23feb2e:	4620      	mov	r0, r4
 23feb30:	f7fe fcb0 	bl	23fd494 <__cxa_guard_release>
 23feb34:	4804      	ldr	r0, [pc, #16]	; (23feb48 <_Z22__fetch_global_Serial3v+0x40>)
 23feb36:	f001 f897 	bl	23ffc68 <atexit>
	return serial3;
}
 23feb3a:	4802      	ldr	r0, [pc, #8]	; (23feb44 <_Z22__fetch_global_Serial3v+0x3c>)
 23feb3c:	b006      	add	sp, #24
 23feb3e:	bd10      	pop	{r4, pc}
 23feb40:	1007af14 	.word	0x1007af14
 23feb44:	1007af40 	.word	0x1007af40
 23feb48:	023fea2d 	.word	0x023fea2d

023feb4c <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23feb4c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23feb4e:	f7ff ffdb 	bl	23feb08 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23feb52:	4b07      	ldr	r3, [pc, #28]	; (23feb70 <_Z15serialEventRun3v+0x24>)
 23feb54:	4604      	mov	r4, r0
 23feb56:	b153      	cbz	r3, 23feb6e <_Z15serialEventRun3v+0x22>
 23feb58:	f7ff fce8 	bl	23fe52c <_ZN11USARTSerial9isEnabledEv>
 23feb5c:	b138      	cbz	r0, 23feb6e <_Z15serialEventRun3v+0x22>
 23feb5e:	6823      	ldr	r3, [r4, #0]
 23feb60:	4620      	mov	r0, r4
 23feb62:	691b      	ldr	r3, [r3, #16]
 23feb64:	4798      	blx	r3
 23feb66:	2800      	cmp	r0, #0
 23feb68:	dd01      	ble.n	23feb6e <_Z15serialEventRun3v+0x22>
        handler();
 23feb6a:	e000      	b.n	23feb6e <_Z15serialEventRun3v+0x22>
 23feb6c:	bf00      	nop
}
 23feb6e:	bd10      	pop	{r4, pc}
 23feb70:	00000000 	.word	0x00000000

023feb74 <_ZnajRKSt9nothrow_t>:
 23feb74:	f7fe bc85 	b.w	23fd482 <_Znaj>

023feb78 <pow>:
 23feb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23feb7a:	ed2d 8b02 	vpush	{d8}
 23feb7e:	ec57 6b10 	vmov	r6, r7, d0
 23feb82:	ec55 4b11 	vmov	r4, r5, d1
 23feb86:	f000 f8cb 	bl	23fed20 <__ieee754_pow>
 23feb8a:	4b63      	ldr	r3, [pc, #396]	; (23fed18 <pow+0x1a0>)
 23feb8c:	eeb0 8a40 	vmov.f32	s16, s0
 23feb90:	eef0 8a60 	vmov.f32	s17, s1
 23feb94:	f993 3000 	ldrsb.w	r3, [r3]
 23feb98:	3301      	adds	r3, #1
 23feb9a:	d02a      	beq.n	23febf2 <pow+0x7a>
 23feb9c:	4622      	mov	r2, r4
 23feb9e:	462b      	mov	r3, r5
 23feba0:	4620      	mov	r0, r4
 23feba2:	4629      	mov	r1, r5
 23feba4:	f7fe fbba 	bl	23fd31c <__aeabi_dcmpun>
 23feba8:	bb18      	cbnz	r0, 23febf2 <pow+0x7a>
 23febaa:	4632      	mov	r2, r6
 23febac:	463b      	mov	r3, r7
 23febae:	4630      	mov	r0, r6
 23febb0:	4639      	mov	r1, r7
 23febb2:	f7fe fbb3 	bl	23fd31c <__aeabi_dcmpun>
 23febb6:	2800      	cmp	r0, #0
 23febb8:	d144      	bne.n	23fec44 <pow+0xcc>
 23febba:	2200      	movs	r2, #0
 23febbc:	2300      	movs	r3, #0
 23febbe:	4630      	mov	r0, r6
 23febc0:	4639      	mov	r1, r7
 23febc2:	f7fe fb79 	bl	23fd2b8 <__aeabi_dcmpeq>
 23febc6:	b1d8      	cbz	r0, 23fec00 <pow+0x88>
 23febc8:	2200      	movs	r2, #0
 23febca:	2300      	movs	r3, #0
 23febcc:	4620      	mov	r0, r4
 23febce:	4629      	mov	r1, r5
 23febd0:	f7fe fb72 	bl	23fd2b8 <__aeabi_dcmpeq>
 23febd4:	2800      	cmp	r0, #0
 23febd6:	d13d      	bne.n	23fec54 <pow+0xdc>
 23febd8:	ec45 4b10 	vmov	d0, r4, r5
 23febdc:	f000 fefe 	bl	23ff9dc <finite>
 23febe0:	b138      	cbz	r0, 23febf2 <pow+0x7a>
 23febe2:	4620      	mov	r0, r4
 23febe4:	4629      	mov	r1, r5
 23febe6:	2200      	movs	r2, #0
 23febe8:	2300      	movs	r3, #0
 23febea:	f7fe fb6f 	bl	23fd2cc <__aeabi_dcmplt>
 23febee:	2800      	cmp	r0, #0
 23febf0:	d15c      	bne.n	23fecac <pow+0x134>
 23febf2:	eeb0 0a48 	vmov.f32	s0, s16
 23febf6:	eef0 0a68 	vmov.f32	s1, s17
 23febfa:	ecbd 8b02 	vpop	{d8}
 23febfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fec00:	eeb0 0a48 	vmov.f32	s0, s16
 23fec04:	eef0 0a68 	vmov.f32	s1, s17
 23fec08:	f000 fee8 	bl	23ff9dc <finite>
 23fec0c:	b358      	cbz	r0, 23fec66 <pow+0xee>
 23fec0e:	2200      	movs	r2, #0
 23fec10:	2300      	movs	r3, #0
 23fec12:	ec51 0b18 	vmov	r0, r1, d8
 23fec16:	f7fe fb4f 	bl	23fd2b8 <__aeabi_dcmpeq>
 23fec1a:	2800      	cmp	r0, #0
 23fec1c:	d0e9      	beq.n	23febf2 <pow+0x7a>
 23fec1e:	ec47 6b10 	vmov	d0, r6, r7
 23fec22:	f000 fedb 	bl	23ff9dc <finite>
 23fec26:	2800      	cmp	r0, #0
 23fec28:	d0e3      	beq.n	23febf2 <pow+0x7a>
 23fec2a:	ec45 4b10 	vmov	d0, r4, r5
 23fec2e:	f000 fed5 	bl	23ff9dc <finite>
 23fec32:	2800      	cmp	r0, #0
 23fec34:	d0dd      	beq.n	23febf2 <pow+0x7a>
 23fec36:	f7ff f995 	bl	23fdf64 <__errno>
 23fec3a:	2322      	movs	r3, #34	; 0x22
 23fec3c:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 23fecf8 <pow+0x180>
 23fec40:	6003      	str	r3, [r0, #0]
 23fec42:	e7d6      	b.n	23febf2 <pow+0x7a>
 23fec44:	4620      	mov	r0, r4
 23fec46:	4629      	mov	r1, r5
 23fec48:	2200      	movs	r2, #0
 23fec4a:	2300      	movs	r3, #0
 23fec4c:	f7fe fb34 	bl	23fd2b8 <__aeabi_dcmpeq>
 23fec50:	2800      	cmp	r0, #0
 23fec52:	d0ce      	beq.n	23febf2 <pow+0x7a>
 23fec54:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 23fed00 <pow+0x188>
 23fec58:	eeb0 0a48 	vmov.f32	s0, s16
 23fec5c:	eef0 0a68 	vmov.f32	s1, s17
 23fec60:	ecbd 8b02 	vpop	{d8}
 23fec64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fec66:	ec47 6b10 	vmov	d0, r6, r7
 23fec6a:	f000 feb7 	bl	23ff9dc <finite>
 23fec6e:	2800      	cmp	r0, #0
 23fec70:	d0cd      	beq.n	23fec0e <pow+0x96>
 23fec72:	ec45 4b10 	vmov	d0, r4, r5
 23fec76:	f000 feb1 	bl	23ff9dc <finite>
 23fec7a:	2800      	cmp	r0, #0
 23fec7c:	d0c7      	beq.n	23fec0e <pow+0x96>
 23fec7e:	ee18 0a10 	vmov	r0, s16
 23fec82:	ec53 2b18 	vmov	r2, r3, d8
 23fec86:	4619      	mov	r1, r3
 23fec88:	f7fe fb48 	bl	23fd31c <__aeabi_dcmpun>
 23fec8c:	bb20      	cbnz	r0, 23fecd8 <pow+0x160>
 23fec8e:	f7ff f969 	bl	23fdf64 <__errno>
 23fec92:	2222      	movs	r2, #34	; 0x22
 23fec94:	4603      	mov	r3, r0
 23fec96:	4639      	mov	r1, r7
 23fec98:	4630      	mov	r0, r6
 23fec9a:	601a      	str	r2, [r3, #0]
 23fec9c:	2200      	movs	r2, #0
 23fec9e:	2300      	movs	r3, #0
 23feca0:	f7fe fb14 	bl	23fd2cc <__aeabi_dcmplt>
 23feca4:	b948      	cbnz	r0, 23fecba <pow+0x142>
 23feca6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 23fed08 <pow+0x190>
 23fecaa:	e7a2      	b.n	23febf2 <pow+0x7a>
 23fecac:	f7ff f95a 	bl	23fdf64 <__errno>
 23fecb0:	2321      	movs	r3, #33	; 0x21
 23fecb2:	ed9f 8b17 	vldr	d8, [pc, #92]	; 23fed10 <pow+0x198>
 23fecb6:	6003      	str	r3, [r0, #0]
 23fecb8:	e79b      	b.n	23febf2 <pow+0x7a>
 23fecba:	ec45 4b10 	vmov	d0, r4, r5
 23fecbe:	f000 fea3 	bl	23ffa08 <rint>
 23fecc2:	4622      	mov	r2, r4
 23fecc4:	462b      	mov	r3, r5
 23fecc6:	ec51 0b10 	vmov	r0, r1, d0
 23fecca:	f7fe faf5 	bl	23fd2b8 <__aeabi_dcmpeq>
 23fecce:	2800      	cmp	r0, #0
 23fecd0:	d1e9      	bne.n	23feca6 <pow+0x12e>
 23fecd2:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 23fed10 <pow+0x198>
 23fecd6:	e78c      	b.n	23febf2 <pow+0x7a>
 23fecd8:	f7ff f944 	bl	23fdf64 <__errno>
 23fecdc:	2200      	movs	r2, #0
 23fecde:	2300      	movs	r3, #0
 23fece0:	2121      	movs	r1, #33	; 0x21
 23fece2:	6001      	str	r1, [r0, #0]
 23fece4:	4610      	mov	r0, r2
 23fece6:	4619      	mov	r1, r3
 23fece8:	f7fe f9a8 	bl	23fd03c <__aeabi_ddiv>
 23fecec:	ec41 0b18 	vmov	d8, r0, r1
 23fecf0:	e77f      	b.n	23febf2 <pow+0x7a>
 23fecf2:	bf00      	nop
 23fecf4:	f3af 8000 	nop.w
	...
 23fed04:	3ff00000 	.word	0x3ff00000
 23fed08:	00000000 	.word	0x00000000
 23fed0c:	7ff00000 	.word	0x7ff00000
 23fed10:	00000000 	.word	0x00000000
 23fed14:	fff00000 	.word	0xfff00000
 23fed18:	1007add4 	.word	0x1007add4
 23fed1c:	00000000 	.word	0x00000000

023fed20 <__ieee754_pow>:
 23fed20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fed24:	ec55 4b11 	vmov	r4, r5, d1
 23fed28:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 23fed2c:	ea5a 0204 	orrs.w	r2, sl, r4
 23fed30:	ed2d 8b0c 	vpush	{d8-d13}
 23fed34:	b087      	sub	sp, #28
 23fed36:	d01f      	beq.n	23fed78 <__ieee754_pow+0x58>
 23fed38:	495d      	ldr	r1, [pc, #372]	; (23feeb0 <__ieee754_pow+0x190>)
 23fed3a:	ee10 2a10 	vmov	r2, s0
 23fed3e:	ec57 6b10 	vmov	r6, r7, d0
 23fed42:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 23fed46:	46b9      	mov	r9, r7
 23fed48:	4588      	cmp	r8, r1
 23fed4a:	dc11      	bgt.n	23fed70 <__ieee754_pow+0x50>
 23fed4c:	46ab      	mov	fp, r5
 23fed4e:	ee11 3a10 	vmov	r3, s2
 23fed52:	d108      	bne.n	23fed66 <__ieee754_pow+0x46>
 23fed54:	b13e      	cbz	r6, 23fed66 <__ieee754_pow+0x46>
 23fed56:	4857      	ldr	r0, [pc, #348]	; (23feeb4 <__ieee754_pow+0x194>)
 23fed58:	b007      	add	sp, #28
 23fed5a:	ecbd 8b0c 	vpop	{d8-d13}
 23fed5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fed62:	f000 be49 	b.w	23ff9f8 <nan>
 23fed66:	4952      	ldr	r1, [pc, #328]	; (23feeb0 <__ieee754_pow+0x190>)
 23fed68:	458a      	cmp	sl, r1
 23fed6a:	dc01      	bgt.n	23fed70 <__ieee754_pow+0x50>
 23fed6c:	d10b      	bne.n	23fed86 <__ieee754_pow+0x66>
 23fed6e:	b153      	cbz	r3, 23fed86 <__ieee754_pow+0x66>
 23fed70:	4b51      	ldr	r3, [pc, #324]	; (23feeb8 <__ieee754_pow+0x198>)
 23fed72:	4443      	add	r3, r8
 23fed74:	4313      	orrs	r3, r2
 23fed76:	d1ee      	bne.n	23fed56 <__ieee754_pow+0x36>
 23fed78:	ed9f 0b49 	vldr	d0, [pc, #292]	; 23feea0 <__ieee754_pow+0x180>
 23fed7c:	b007      	add	sp, #28
 23fed7e:	ecbd 8b0c 	vpop	{d8-d13}
 23fed82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fed86:	f1b9 0f00 	cmp.w	r9, #0
 23fed8a:	db45      	blt.n	23fee18 <__ieee754_pow+0xf8>
 23fed8c:	2100      	movs	r1, #0
 23fed8e:	9100      	str	r1, [sp, #0]
 23fed90:	b983      	cbnz	r3, 23fedb4 <__ieee754_pow+0x94>
 23fed92:	4b47      	ldr	r3, [pc, #284]	; (23feeb0 <__ieee754_pow+0x190>)
 23fed94:	459a      	cmp	sl, r3
 23fed96:	d05b      	beq.n	23fee50 <__ieee754_pow+0x130>
 23fed98:	4b48      	ldr	r3, [pc, #288]	; (23feebc <__ieee754_pow+0x19c>)
 23fed9a:	459a      	cmp	sl, r3
 23fed9c:	d06a      	beq.n	23fee74 <__ieee754_pow+0x154>
 23fed9e:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 23feda2:	f000 84b0 	beq.w	23ff706 <__ieee754_pow+0x9e6>
 23feda6:	4b46      	ldr	r3, [pc, #280]	; (23feec0 <__ieee754_pow+0x1a0>)
 23feda8:	459b      	cmp	fp, r3
 23fedaa:	d103      	bne.n	23fedb4 <__ieee754_pow+0x94>
 23fedac:	f1b9 0f00 	cmp.w	r9, #0
 23fedb0:	f280 850d 	bge.w	23ff7ce <__ieee754_pow+0xaae>
 23fedb4:	9202      	str	r2, [sp, #8]
 23fedb6:	ec47 6b10 	vmov	d0, r6, r7
 23fedba:	f000 fe05 	bl	23ff9c8 <fabs>
 23fedbe:	9a02      	ldr	r2, [sp, #8]
 23fedc0:	b94a      	cbnz	r2, 23fedd6 <__ieee754_pow+0xb6>
 23fedc2:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23fedc6:	4a3d      	ldr	r2, [pc, #244]	; (23feebc <__ieee754_pow+0x19c>)
 23fedc8:	4293      	cmp	r3, r2
 23fedca:	f000 83a8 	beq.w	23ff51e <__ieee754_pow+0x7fe>
 23fedce:	f1b8 0f00 	cmp.w	r8, #0
 23fedd2:	f000 83a4 	beq.w	23ff51e <__ieee754_pow+0x7fe>
 23fedd6:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 23fedda:	9a00      	ldr	r2, [sp, #0]
 23feddc:	3b01      	subs	r3, #1
 23fedde:	9304      	str	r3, [sp, #16]
 23fede0:	4313      	orrs	r3, r2
 23fede2:	d04e      	beq.n	23fee82 <__ieee754_pow+0x162>
 23fede4:	4b37      	ldr	r3, [pc, #220]	; (23feec4 <__ieee754_pow+0x1a4>)
 23fede6:	459a      	cmp	sl, r3
 23fede8:	dd72      	ble.n	23feed0 <__ieee754_pow+0x1b0>
 23fedea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 23fedee:	459a      	cmp	sl, r3
 23fedf0:	4b35      	ldr	r3, [pc, #212]	; (23feec8 <__ieee754_pow+0x1a8>)
 23fedf2:	f340 842b 	ble.w	23ff64c <__ieee754_pow+0x92c>
 23fedf6:	4598      	cmp	r8, r3
 23fedf8:	f340 83a9 	ble.w	23ff54e <__ieee754_pow+0x82e>
 23fedfc:	f1bb 0f00 	cmp.w	fp, #0
 23fee00:	f340 83a9 	ble.w	23ff556 <__ieee754_pow+0x836>
 23fee04:	a328      	add	r3, pc, #160	; (adr r3, 23feea8 <__ieee754_pow+0x188>)
 23fee06:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fee0a:	4610      	mov	r0, r2
 23fee0c:	4619      	mov	r1, r3
 23fee0e:	f7fd ffeb 	bl	23fcde8 <__aeabi_dmul>
 23fee12:	ec41 0b10 	vmov	d0, r0, r1
 23fee16:	e7b1      	b.n	23fed7c <__ieee754_pow+0x5c>
 23fee18:	492c      	ldr	r1, [pc, #176]	; (23feecc <__ieee754_pow+0x1ac>)
 23fee1a:	458a      	cmp	sl, r1
 23fee1c:	dc27      	bgt.n	23fee6e <__ieee754_pow+0x14e>
 23fee1e:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 23fee22:	458a      	cmp	sl, r1
 23fee24:	ddb2      	ble.n	23fed8c <__ieee754_pow+0x6c>
 23fee26:	ea4f 512a 	mov.w	r1, sl, asr #20
 23fee2a:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 23fee2e:	2914      	cmp	r1, #20
 23fee30:	f340 847d 	ble.w	23ff72e <__ieee754_pow+0xa0e>
 23fee34:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 23fee38:	fa23 f001 	lsr.w	r0, r3, r1
 23fee3c:	fa00 f101 	lsl.w	r1, r0, r1
 23fee40:	4299      	cmp	r1, r3
 23fee42:	d1a3      	bne.n	23fed8c <__ieee754_pow+0x6c>
 23fee44:	f000 0001 	and.w	r0, r0, #1
 23fee48:	f1c0 0102 	rsb	r1, r0, #2
 23fee4c:	9100      	str	r1, [sp, #0]
 23fee4e:	e79f      	b.n	23fed90 <__ieee754_pow+0x70>
 23fee50:	4b19      	ldr	r3, [pc, #100]	; (23feeb8 <__ieee754_pow+0x198>)
 23fee52:	4443      	add	r3, r8
 23fee54:	4313      	orrs	r3, r2
 23fee56:	d08f      	beq.n	23fed78 <__ieee754_pow+0x58>
 23fee58:	4b1b      	ldr	r3, [pc, #108]	; (23feec8 <__ieee754_pow+0x1a8>)
 23fee5a:	4598      	cmp	r8, r3
 23fee5c:	f340 83ab 	ble.w	23ff5b6 <__ieee754_pow+0x896>
 23fee60:	f1bb 0f00 	cmp.w	fp, #0
 23fee64:	f2c0 8377 	blt.w	23ff556 <__ieee754_pow+0x836>
 23fee68:	ec45 4b10 	vmov	d0, r4, r5
 23fee6c:	e786      	b.n	23fed7c <__ieee754_pow+0x5c>
 23fee6e:	2102      	movs	r1, #2
 23fee70:	9100      	str	r1, [sp, #0]
 23fee72:	e78d      	b.n	23fed90 <__ieee754_pow+0x70>
 23fee74:	f1bb 0f00 	cmp.w	fp, #0
 23fee78:	f2c0 844f 	blt.w	23ff71a <__ieee754_pow+0x9fa>
 23fee7c:	ec47 6b10 	vmov	d0, r6, r7
 23fee80:	e77c      	b.n	23fed7c <__ieee754_pow+0x5c>
 23fee82:	4632      	mov	r2, r6
 23fee84:	463b      	mov	r3, r7
 23fee86:	4610      	mov	r0, r2
 23fee88:	4619      	mov	r1, r3
 23fee8a:	f7fd fdf5 	bl	23fca78 <__aeabi_dsub>
 23fee8e:	4602      	mov	r2, r0
 23fee90:	460b      	mov	r3, r1
 23fee92:	f7fe f8d3 	bl	23fd03c <__aeabi_ddiv>
 23fee96:	ec41 0b10 	vmov	d0, r0, r1
 23fee9a:	e76f      	b.n	23fed7c <__ieee754_pow+0x5c>
 23fee9c:	f3af 8000 	nop.w
 23feea0:	00000000 	.word	0x00000000
 23feea4:	3ff00000 	.word	0x3ff00000
 23feea8:	8800759c 	.word	0x8800759c
 23feeac:	7e37e43c 	.word	0x7e37e43c
 23feeb0:	7ff00000 	.word	0x7ff00000
 23feeb4:	023fff50 	.word	0x023fff50
 23feeb8:	c0100000 	.word	0xc0100000
 23feebc:	3ff00000 	.word	0x3ff00000
 23feec0:	3fe00000 	.word	0x3fe00000
 23feec4:	41e00000 	.word	0x41e00000
 23feec8:	3fefffff 	.word	0x3fefffff
 23feecc:	433fffff 	.word	0x433fffff
 23feed0:	4be3      	ldr	r3, [pc, #908]	; (23ff260 <__ieee754_pow+0x540>)
 23feed2:	2200      	movs	r2, #0
 23feed4:	ea09 0303 	and.w	r3, r9, r3
 23feed8:	b953      	cbnz	r3, 23feef0 <__ieee754_pow+0x1d0>
 23feeda:	4be2      	ldr	r3, [pc, #904]	; (23ff264 <__ieee754_pow+0x544>)
 23feedc:	ec51 0b10 	vmov	r0, r1, d0
 23feee0:	f7fd ff82 	bl	23fcde8 <__aeabi_dmul>
 23feee4:	f06f 0234 	mvn.w	r2, #52	; 0x34
 23feee8:	ec41 0b10 	vmov	d0, r0, r1
 23feeec:	ee10 8a90 	vmov	r8, s1
 23feef0:	ea4f 5328 	mov.w	r3, r8, asr #20
 23feef4:	f3c8 0813 	ubfx	r8, r8, #0, #20
 23feef8:	4edb      	ldr	r6, [pc, #876]	; (23ff268 <__ieee754_pow+0x548>)
 23feefa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 23feefe:	ea48 0606 	orr.w	r6, r8, r6
 23fef02:	189a      	adds	r2, r3, r2
 23fef04:	4bd9      	ldr	r3, [pc, #868]	; (23ff26c <__ieee754_pow+0x54c>)
 23fef06:	4598      	cmp	r8, r3
 23fef08:	9205      	str	r2, [sp, #20]
 23fef0a:	dd07      	ble.n	23fef1c <__ieee754_pow+0x1fc>
 23fef0c:	4bd8      	ldr	r3, [pc, #864]	; (23ff270 <__ieee754_pow+0x550>)
 23fef0e:	4598      	cmp	r8, r3
 23fef10:	f340 8433 	ble.w	23ff77a <__ieee754_pow+0xa5a>
 23fef14:	3201      	adds	r2, #1
 23fef16:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 23fef1a:	9205      	str	r2, [sp, #20]
 23fef1c:	2700      	movs	r7, #0
 23fef1e:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 23ff200 <__ieee754_pow+0x4e0>
 23fef22:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 23ff208 <__ieee754_pow+0x4e8>
 23fef26:	eeb0 da47 	vmov.f32	s26, s14
 23fef2a:	eef0 da67 	vmov.f32	s27, s15
 23fef2e:	eeb0 ca47 	vmov.f32	s24, s14
 23fef32:	eef0 ca67 	vmov.f32	s25, s15
 23fef36:	ec51 0b16 	vmov	r0, r1, d6
 23fef3a:	ec53 2b10 	vmov	r2, r3, d0
 23fef3e:	4633      	mov	r3, r6
 23fef40:	1076      	asrs	r6, r6, #1
 23fef42:	ec43 2b19 	vmov	d9, r2, r3
 23fef46:	ec41 0b1a 	vmov	d10, r0, r1
 23fef4a:	4602      	mov	r2, r0
 23fef4c:	460b      	mov	r3, r1
 23fef4e:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 23fef52:	ec51 0b19 	vmov	r0, r1, d9
 23fef56:	f7fd fd8f 	bl	23fca78 <__aeabi_dsub>
 23fef5a:	4680      	mov	r8, r0
 23fef5c:	4689      	mov	r9, r1
 23fef5e:	ec53 2b1a 	vmov	r2, r3, d10
 23fef62:	ec51 0b19 	vmov	r0, r1, d9
 23fef66:	f7fd fd89 	bl	23fca7c <__adddf3>
 23fef6a:	4602      	mov	r2, r0
 23fef6c:	460b      	mov	r3, r1
 23fef6e:	2000      	movs	r0, #0
 23fef70:	49bd      	ldr	r1, [pc, #756]	; (23ff268 <__ieee754_pow+0x548>)
 23fef72:	f7fe f863 	bl	23fd03c <__aeabi_ddiv>
 23fef76:	ec41 0b1b 	vmov	d11, r0, r1
 23fef7a:	ec53 2b1b 	vmov	r2, r3, d11
 23fef7e:	4640      	mov	r0, r8
 23fef80:	4649      	mov	r1, r9
 23fef82:	f7fd ff31 	bl	23fcde8 <__aeabi_dmul>
 23fef86:	460a      	mov	r2, r1
 23fef88:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 23fef8c:	ec41 0b18 	vmov	d8, r0, r1
 23fef90:	4601      	mov	r1, r0
 23fef92:	2000      	movs	r0, #0
 23fef94:	e9cd 1202 	strd	r1, r2, [sp, #8]
 23fef98:	2100      	movs	r1, #0
 23fef9a:	4606      	mov	r6, r0
 23fef9c:	4602      	mov	r2, r0
 23fef9e:	9102      	str	r1, [sp, #8]
 23fefa0:	19d9      	adds	r1, r3, r7
 23fefa2:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 23fefa6:	460f      	mov	r7, r1
 23fefa8:	460b      	mov	r3, r1
 23fefaa:	4650      	mov	r0, sl
 23fefac:	4659      	mov	r1, fp
 23fefae:	f7fd ff1b 	bl	23fcde8 <__aeabi_dmul>
 23fefb2:	4602      	mov	r2, r0
 23fefb4:	460b      	mov	r3, r1
 23fefb6:	4640      	mov	r0, r8
 23fefb8:	4649      	mov	r1, r9
 23fefba:	f7fd fd5d 	bl	23fca78 <__aeabi_dsub>
 23fefbe:	4680      	mov	r8, r0
 23fefc0:	4689      	mov	r9, r1
 23fefc2:	4630      	mov	r0, r6
 23fefc4:	4639      	mov	r1, r7
 23fefc6:	ec53 2b1a 	vmov	r2, r3, d10
 23fefca:	f7fd fd55 	bl	23fca78 <__aeabi_dsub>
 23fefce:	4602      	mov	r2, r0
 23fefd0:	460b      	mov	r3, r1
 23fefd2:	ec51 0b19 	vmov	r0, r1, d9
 23fefd6:	f7fd fd4f 	bl	23fca78 <__aeabi_dsub>
 23fefda:	4652      	mov	r2, sl
 23fefdc:	465b      	mov	r3, fp
 23fefde:	f7fd ff03 	bl	23fcde8 <__aeabi_dmul>
 23fefe2:	4602      	mov	r2, r0
 23fefe4:	460b      	mov	r3, r1
 23fefe6:	4640      	mov	r0, r8
 23fefe8:	4649      	mov	r1, r9
 23fefea:	f7fd fd45 	bl	23fca78 <__aeabi_dsub>
 23fefee:	ec53 2b1b 	vmov	r2, r3, d11
 23feff2:	f7fd fef9 	bl	23fcde8 <__aeabi_dmul>
 23feff6:	ec53 2b18 	vmov	r2, r3, d8
 23feffa:	ec41 0b1a 	vmov	d10, r0, r1
 23feffe:	ec51 0b18 	vmov	r0, r1, d8
 23ff002:	f7fd fef1 	bl	23fcde8 <__aeabi_dmul>
 23ff006:	4606      	mov	r6, r0
 23ff008:	460f      	mov	r7, r1
 23ff00a:	a381      	add	r3, pc, #516	; (adr r3, 23ff210 <__ieee754_pow+0x4f0>)
 23ff00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff010:	f7fd feea 	bl	23fcde8 <__aeabi_dmul>
 23ff014:	a380      	add	r3, pc, #512	; (adr r3, 23ff218 <__ieee754_pow+0x4f8>)
 23ff016:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff01a:	f7fd fd2f 	bl	23fca7c <__adddf3>
 23ff01e:	4632      	mov	r2, r6
 23ff020:	463b      	mov	r3, r7
 23ff022:	f7fd fee1 	bl	23fcde8 <__aeabi_dmul>
 23ff026:	a37e      	add	r3, pc, #504	; (adr r3, 23ff220 <__ieee754_pow+0x500>)
 23ff028:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff02c:	f7fd fd26 	bl	23fca7c <__adddf3>
 23ff030:	4632      	mov	r2, r6
 23ff032:	463b      	mov	r3, r7
 23ff034:	f7fd fed8 	bl	23fcde8 <__aeabi_dmul>
 23ff038:	a37b      	add	r3, pc, #492	; (adr r3, 23ff228 <__ieee754_pow+0x508>)
 23ff03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff03e:	f7fd fd1d 	bl	23fca7c <__adddf3>
 23ff042:	4632      	mov	r2, r6
 23ff044:	463b      	mov	r3, r7
 23ff046:	f7fd fecf 	bl	23fcde8 <__aeabi_dmul>
 23ff04a:	a379      	add	r3, pc, #484	; (adr r3, 23ff230 <__ieee754_pow+0x510>)
 23ff04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff050:	f7fd fd14 	bl	23fca7c <__adddf3>
 23ff054:	4632      	mov	r2, r6
 23ff056:	463b      	mov	r3, r7
 23ff058:	f7fd fec6 	bl	23fcde8 <__aeabi_dmul>
 23ff05c:	a376      	add	r3, pc, #472	; (adr r3, 23ff238 <__ieee754_pow+0x518>)
 23ff05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff062:	f7fd fd0b 	bl	23fca7c <__adddf3>
 23ff066:	4680      	mov	r8, r0
 23ff068:	4689      	mov	r9, r1
 23ff06a:	4632      	mov	r2, r6
 23ff06c:	463b      	mov	r3, r7
 23ff06e:	4630      	mov	r0, r6
 23ff070:	4639      	mov	r1, r7
 23ff072:	f7fd feb9 	bl	23fcde8 <__aeabi_dmul>
 23ff076:	4602      	mov	r2, r0
 23ff078:	460b      	mov	r3, r1
 23ff07a:	4640      	mov	r0, r8
 23ff07c:	4649      	mov	r1, r9
 23ff07e:	f04f 0800 	mov.w	r8, #0
 23ff082:	f7fd feb1 	bl	23fcde8 <__aeabi_dmul>
 23ff086:	4652      	mov	r2, sl
 23ff088:	4606      	mov	r6, r0
 23ff08a:	460f      	mov	r7, r1
 23ff08c:	465b      	mov	r3, fp
 23ff08e:	ec51 0b18 	vmov	r0, r1, d8
 23ff092:	f7fd fcf3 	bl	23fca7c <__adddf3>
 23ff096:	ec53 2b1a 	vmov	r2, r3, d10
 23ff09a:	f7fd fea5 	bl	23fcde8 <__aeabi_dmul>
 23ff09e:	4632      	mov	r2, r6
 23ff0a0:	463b      	mov	r3, r7
 23ff0a2:	f7fd fceb 	bl	23fca7c <__adddf3>
 23ff0a6:	4652      	mov	r2, sl
 23ff0a8:	465b      	mov	r3, fp
 23ff0aa:	ec41 0b19 	vmov	d9, r0, r1
 23ff0ae:	4650      	mov	r0, sl
 23ff0b0:	4659      	mov	r1, fp
 23ff0b2:	f7fd fe99 	bl	23fcde8 <__aeabi_dmul>
 23ff0b6:	2200      	movs	r2, #0
 23ff0b8:	4b6e      	ldr	r3, [pc, #440]	; (23ff274 <__ieee754_pow+0x554>)
 23ff0ba:	4606      	mov	r6, r0
 23ff0bc:	460f      	mov	r7, r1
 23ff0be:	f7fd fcdd 	bl	23fca7c <__adddf3>
 23ff0c2:	ec53 2b19 	vmov	r2, r3, d9
 23ff0c6:	f7fd fcd9 	bl	23fca7c <__adddf3>
 23ff0ca:	4689      	mov	r9, r1
 23ff0cc:	4642      	mov	r2, r8
 23ff0ce:	4650      	mov	r0, sl
 23ff0d0:	464b      	mov	r3, r9
 23ff0d2:	4659      	mov	r1, fp
 23ff0d4:	f7fd fe88 	bl	23fcde8 <__aeabi_dmul>
 23ff0d8:	2200      	movs	r2, #0
 23ff0da:	4682      	mov	sl, r0
 23ff0dc:	468b      	mov	fp, r1
 23ff0de:	4b65      	ldr	r3, [pc, #404]	; (23ff274 <__ieee754_pow+0x554>)
 23ff0e0:	4640      	mov	r0, r8
 23ff0e2:	4649      	mov	r1, r9
 23ff0e4:	f7fd fcc8 	bl	23fca78 <__aeabi_dsub>
 23ff0e8:	4632      	mov	r2, r6
 23ff0ea:	463b      	mov	r3, r7
 23ff0ec:	f7fd fcc4 	bl	23fca78 <__aeabi_dsub>
 23ff0f0:	4602      	mov	r2, r0
 23ff0f2:	460b      	mov	r3, r1
 23ff0f4:	ec51 0b19 	vmov	r0, r1, d9
 23ff0f8:	f7fd fcbe 	bl	23fca78 <__aeabi_dsub>
 23ff0fc:	ec53 2b18 	vmov	r2, r3, d8
 23ff100:	f7fd fe72 	bl	23fcde8 <__aeabi_dmul>
 23ff104:	4606      	mov	r6, r0
 23ff106:	460f      	mov	r7, r1
 23ff108:	4642      	mov	r2, r8
 23ff10a:	464b      	mov	r3, r9
 23ff10c:	ec51 0b1a 	vmov	r0, r1, d10
 23ff110:	f7fd fe6a 	bl	23fcde8 <__aeabi_dmul>
 23ff114:	4602      	mov	r2, r0
 23ff116:	460b      	mov	r3, r1
 23ff118:	4630      	mov	r0, r6
 23ff11a:	4639      	mov	r1, r7
 23ff11c:	f7fd fcae 	bl	23fca7c <__adddf3>
 23ff120:	4680      	mov	r8, r0
 23ff122:	4689      	mov	r9, r1
 23ff124:	4650      	mov	r0, sl
 23ff126:	4642      	mov	r2, r8
 23ff128:	4659      	mov	r1, fp
 23ff12a:	464b      	mov	r3, r9
 23ff12c:	f7fd fca6 	bl	23fca7c <__adddf3>
 23ff130:	2000      	movs	r0, #0
 23ff132:	460f      	mov	r7, r1
 23ff134:	4606      	mov	r6, r0
 23ff136:	a342      	add	r3, pc, #264	; (adr r3, 23ff240 <__ieee754_pow+0x520>)
 23ff138:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff13c:	f7fd fe54 	bl	23fcde8 <__aeabi_dmul>
 23ff140:	4652      	mov	r2, sl
 23ff142:	465b      	mov	r3, fp
 23ff144:	ec41 0b19 	vmov	d9, r0, r1
 23ff148:	4630      	mov	r0, r6
 23ff14a:	4639      	mov	r1, r7
 23ff14c:	f7fd fc94 	bl	23fca78 <__aeabi_dsub>
 23ff150:	4602      	mov	r2, r0
 23ff152:	460b      	mov	r3, r1
 23ff154:	4640      	mov	r0, r8
 23ff156:	4649      	mov	r1, r9
 23ff158:	f7fd fc8e 	bl	23fca78 <__aeabi_dsub>
 23ff15c:	a33a      	add	r3, pc, #232	; (adr r3, 23ff248 <__ieee754_pow+0x528>)
 23ff15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff162:	f7fd fe41 	bl	23fcde8 <__aeabi_dmul>
 23ff166:	4680      	mov	r8, r0
 23ff168:	4689      	mov	r9, r1
 23ff16a:	4630      	mov	r0, r6
 23ff16c:	4639      	mov	r1, r7
 23ff16e:	a338      	add	r3, pc, #224	; (adr r3, 23ff250 <__ieee754_pow+0x530>)
 23ff170:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff174:	f7fd fe38 	bl	23fcde8 <__aeabi_dmul>
 23ff178:	4602      	mov	r2, r0
 23ff17a:	460b      	mov	r3, r1
 23ff17c:	4640      	mov	r0, r8
 23ff17e:	4649      	mov	r1, r9
 23ff180:	f7fd fc7c 	bl	23fca7c <__adddf3>
 23ff184:	ec53 2b1c 	vmov	r2, r3, d12
 23ff188:	f7fd fc78 	bl	23fca7c <__adddf3>
 23ff18c:	4606      	mov	r6, r0
 23ff18e:	460f      	mov	r7, r1
 23ff190:	9805      	ldr	r0, [sp, #20]
 23ff192:	f7fd fdbf 	bl	23fcd14 <__aeabi_i2d>
 23ff196:	4632      	mov	r2, r6
 23ff198:	4680      	mov	r8, r0
 23ff19a:	4689      	mov	r9, r1
 23ff19c:	463b      	mov	r3, r7
 23ff19e:	ec51 0b19 	vmov	r0, r1, d9
 23ff1a2:	f7fd fc6b 	bl	23fca7c <__adddf3>
 23ff1a6:	ec53 2b1d 	vmov	r2, r3, d13
 23ff1aa:	f7fd fc67 	bl	23fca7c <__adddf3>
 23ff1ae:	4642      	mov	r2, r8
 23ff1b0:	464b      	mov	r3, r9
 23ff1b2:	f7fd fc63 	bl	23fca7c <__adddf3>
 23ff1b6:	2000      	movs	r0, #0
 23ff1b8:	4642      	mov	r2, r8
 23ff1ba:	464b      	mov	r3, r9
 23ff1bc:	4682      	mov	sl, r0
 23ff1be:	468b      	mov	fp, r1
 23ff1c0:	f7fd fc5a 	bl	23fca78 <__aeabi_dsub>
 23ff1c4:	ec53 2b1d 	vmov	r2, r3, d13
 23ff1c8:	f7fd fc56 	bl	23fca78 <__aeabi_dsub>
 23ff1cc:	ec53 2b19 	vmov	r2, r3, d9
 23ff1d0:	f7fd fc52 	bl	23fca78 <__aeabi_dsub>
 23ff1d4:	4602      	mov	r2, r0
 23ff1d6:	460b      	mov	r3, r1
 23ff1d8:	4630      	mov	r0, r6
 23ff1da:	4639      	mov	r1, r7
 23ff1dc:	f7fd fc4c 	bl	23fca78 <__aeabi_dsub>
 23ff1e0:	9b00      	ldr	r3, [sp, #0]
 23ff1e2:	9a04      	ldr	r2, [sp, #16]
 23ff1e4:	3b01      	subs	r3, #1
 23ff1e6:	4313      	orrs	r3, r2
 23ff1e8:	ec41 0b18 	vmov	d8, r0, r1
 23ff1ec:	f040 81dc 	bne.w	23ff5a8 <__ieee754_pow+0x888>
 23ff1f0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 23ff258 <__ieee754_pow+0x538>
 23ff1f4:	eeb0 9a47 	vmov.f32	s18, s14
 23ff1f8:	eef0 9a67 	vmov.f32	s19, s15
 23ff1fc:	e03c      	b.n	23ff278 <__ieee754_pow+0x558>
 23ff1fe:	bf00      	nop
	...
 23ff20c:	3ff00000 	.word	0x3ff00000
 23ff210:	4a454eef 	.word	0x4a454eef
 23ff214:	3fca7e28 	.word	0x3fca7e28
 23ff218:	93c9db65 	.word	0x93c9db65
 23ff21c:	3fcd864a 	.word	0x3fcd864a
 23ff220:	a91d4101 	.word	0xa91d4101
 23ff224:	3fd17460 	.word	0x3fd17460
 23ff228:	518f264d 	.word	0x518f264d
 23ff22c:	3fd55555 	.word	0x3fd55555
 23ff230:	db6fabff 	.word	0xdb6fabff
 23ff234:	3fdb6db6 	.word	0x3fdb6db6
 23ff238:	33333303 	.word	0x33333303
 23ff23c:	3fe33333 	.word	0x3fe33333
 23ff240:	e0000000 	.word	0xe0000000
 23ff244:	3feec709 	.word	0x3feec709
 23ff248:	dc3a03fd 	.word	0xdc3a03fd
 23ff24c:	3feec709 	.word	0x3feec709
 23ff250:	145b01f5 	.word	0x145b01f5
 23ff254:	be3e2fe0 	.word	0xbe3e2fe0
 23ff258:	00000000 	.word	0x00000000
 23ff25c:	bff00000 	.word	0xbff00000
 23ff260:	7ff00000 	.word	0x7ff00000
 23ff264:	43400000 	.word	0x43400000
 23ff268:	3ff00000 	.word	0x3ff00000
 23ff26c:	0003988e 	.word	0x0003988e
 23ff270:	000bb679 	.word	0x000bb679
 23ff274:	40080000 	.word	0x40080000
 23ff278:	2300      	movs	r3, #0
 23ff27a:	4620      	mov	r0, r4
 23ff27c:	4629      	mov	r1, r5
 23ff27e:	e9cd 4500 	strd	r4, r5, [sp]
 23ff282:	9300      	str	r3, [sp, #0]
 23ff284:	e9dd 8900 	ldrd	r8, r9, [sp]
 23ff288:	4642      	mov	r2, r8
 23ff28a:	464b      	mov	r3, r9
 23ff28c:	f7fd fbf4 	bl	23fca78 <__aeabi_dsub>
 23ff290:	465b      	mov	r3, fp
 23ff292:	4652      	mov	r2, sl
 23ff294:	f7fd fda8 	bl	23fcde8 <__aeabi_dmul>
 23ff298:	4606      	mov	r6, r0
 23ff29a:	460f      	mov	r7, r1
 23ff29c:	4622      	mov	r2, r4
 23ff29e:	462b      	mov	r3, r5
 23ff2a0:	ec51 0b18 	vmov	r0, r1, d8
 23ff2a4:	f7fd fda0 	bl	23fcde8 <__aeabi_dmul>
 23ff2a8:	4602      	mov	r2, r0
 23ff2aa:	460b      	mov	r3, r1
 23ff2ac:	4630      	mov	r0, r6
 23ff2ae:	4639      	mov	r1, r7
 23ff2b0:	f7fd fbe4 	bl	23fca7c <__adddf3>
 23ff2b4:	4642      	mov	r2, r8
 23ff2b6:	4604      	mov	r4, r0
 23ff2b8:	460d      	mov	r5, r1
 23ff2ba:	464b      	mov	r3, r9
 23ff2bc:	4659      	mov	r1, fp
 23ff2be:	4650      	mov	r0, sl
 23ff2c0:	46a0      	mov	r8, r4
 23ff2c2:	f7fd fd91 	bl	23fcde8 <__aeabi_dmul>
 23ff2c6:	4606      	mov	r6, r0
 23ff2c8:	460f      	mov	r7, r1
 23ff2ca:	4620      	mov	r0, r4
 23ff2cc:	4629      	mov	r1, r5
 23ff2ce:	4632      	mov	r2, r6
 23ff2d0:	463b      	mov	r3, r7
 23ff2d2:	46a9      	mov	r9, r5
 23ff2d4:	f7fd fbd2 	bl	23fca7c <__adddf3>
 23ff2d8:	4bd5      	ldr	r3, [pc, #852]	; (23ff630 <__ieee754_pow+0x910>)
 23ff2da:	4604      	mov	r4, r0
 23ff2dc:	460d      	mov	r5, r1
 23ff2de:	4299      	cmp	r1, r3
 23ff2e0:	468b      	mov	fp, r1
 23ff2e2:	f340 813b 	ble.w	23ff55c <__ieee754_pow+0x83c>
 23ff2e6:	4bd3      	ldr	r3, [pc, #844]	; (23ff634 <__ieee754_pow+0x914>)
 23ff2e8:	440b      	add	r3, r1
 23ff2ea:	4303      	orrs	r3, r0
 23ff2ec:	f040 8235 	bne.w	23ff75a <__ieee754_pow+0xa3a>
 23ff2f0:	4640      	mov	r0, r8
 23ff2f2:	4649      	mov	r1, r9
 23ff2f4:	a3b6      	add	r3, pc, #728	; (adr r3, 23ff5d0 <__ieee754_pow+0x8b0>)
 23ff2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff2fa:	f7fd fbbf 	bl	23fca7c <__adddf3>
 23ff2fe:	4632      	mov	r2, r6
 23ff300:	463b      	mov	r3, r7
 23ff302:	ec41 0b18 	vmov	d8, r0, r1
 23ff306:	4620      	mov	r0, r4
 23ff308:	4629      	mov	r1, r5
 23ff30a:	f7fd fbb5 	bl	23fca78 <__aeabi_dsub>
 23ff30e:	4602      	mov	r2, r0
 23ff310:	460b      	mov	r3, r1
 23ff312:	ec51 0b18 	vmov	r0, r1, d8
 23ff316:	f7fd fff7 	bl	23fd308 <__aeabi_dcmpgt>
 23ff31a:	2800      	cmp	r0, #0
 23ff31c:	f040 821d 	bne.w	23ff75a <__ieee754_pow+0xa3a>
 23ff320:	f3cb 530a 	ubfx	r3, fp, #20, #11
 23ff324:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 23ff328:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 23ff32c:	4cc2      	ldr	r4, [pc, #776]	; (23ff638 <__ieee754_pow+0x918>)
 23ff32e:	f1bb 0f00 	cmp.w	fp, #0
 23ff332:	fa42 f303 	asr.w	r3, r2, r3
 23ff336:	f04f 0000 	mov.w	r0, #0
 23ff33a:	445b      	add	r3, fp
 23ff33c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 23ff340:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 23ff344:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 23ff348:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 23ff34c:	fa44 f402 	asr.w	r4, r4, r2
 23ff350:	f1c2 0214 	rsb	r2, r2, #20
 23ff354:	ea23 0104 	bic.w	r1, r3, r4
 23ff358:	fa4a fa02 	asr.w	sl, sl, r2
 23ff35c:	4602      	mov	r2, r0
 23ff35e:	4630      	mov	r0, r6
 23ff360:	460b      	mov	r3, r1
 23ff362:	bfb8      	it	lt
 23ff364:	f1ca 0a00 	rsblt	sl, sl, #0
 23ff368:	4639      	mov	r1, r7
 23ff36a:	f7fd fb85 	bl	23fca78 <__aeabi_dsub>
 23ff36e:	4602      	mov	r2, r0
 23ff370:	460b      	mov	r3, r1
 23ff372:	4606      	mov	r6, r0
 23ff374:	460f      	mov	r7, r1
 23ff376:	4640      	mov	r0, r8
 23ff378:	4649      	mov	r1, r9
 23ff37a:	ea4f 5b0a 	mov.w	fp, sl, lsl #20
 23ff37e:	f7fd fb7d 	bl	23fca7c <__adddf3>
 23ff382:	460d      	mov	r5, r1
 23ff384:	2400      	movs	r4, #0
 23ff386:	4629      	mov	r1, r5
 23ff388:	a393      	add	r3, pc, #588	; (adr r3, 23ff5d8 <__ieee754_pow+0x8b8>)
 23ff38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff38e:	4620      	mov	r0, r4
 23ff390:	f7fd fd2a 	bl	23fcde8 <__aeabi_dmul>
 23ff394:	4632      	mov	r2, r6
 23ff396:	463b      	mov	r3, r7
 23ff398:	4606      	mov	r6, r0
 23ff39a:	460f      	mov	r7, r1
 23ff39c:	4620      	mov	r0, r4
 23ff39e:	4629      	mov	r1, r5
 23ff3a0:	f7fd fb6a 	bl	23fca78 <__aeabi_dsub>
 23ff3a4:	4602      	mov	r2, r0
 23ff3a6:	460b      	mov	r3, r1
 23ff3a8:	4640      	mov	r0, r8
 23ff3aa:	4649      	mov	r1, r9
 23ff3ac:	f7fd fb64 	bl	23fca78 <__aeabi_dsub>
 23ff3b0:	a38b      	add	r3, pc, #556	; (adr r3, 23ff5e0 <__ieee754_pow+0x8c0>)
 23ff3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff3b6:	f7fd fd17 	bl	23fcde8 <__aeabi_dmul>
 23ff3ba:	4680      	mov	r8, r0
 23ff3bc:	4689      	mov	r9, r1
 23ff3be:	4620      	mov	r0, r4
 23ff3c0:	4629      	mov	r1, r5
 23ff3c2:	a389      	add	r3, pc, #548	; (adr r3, 23ff5e8 <__ieee754_pow+0x8c8>)
 23ff3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff3c8:	f7fd fd0e 	bl	23fcde8 <__aeabi_dmul>
 23ff3cc:	4602      	mov	r2, r0
 23ff3ce:	460b      	mov	r3, r1
 23ff3d0:	4640      	mov	r0, r8
 23ff3d2:	4649      	mov	r1, r9
 23ff3d4:	f7fd fb52 	bl	23fca7c <__adddf3>
 23ff3d8:	4680      	mov	r8, r0
 23ff3da:	4689      	mov	r9, r1
 23ff3dc:	4630      	mov	r0, r6
 23ff3de:	4642      	mov	r2, r8
 23ff3e0:	4639      	mov	r1, r7
 23ff3e2:	464b      	mov	r3, r9
 23ff3e4:	f7fd fb4a 	bl	23fca7c <__adddf3>
 23ff3e8:	4632      	mov	r2, r6
 23ff3ea:	4604      	mov	r4, r0
 23ff3ec:	460d      	mov	r5, r1
 23ff3ee:	463b      	mov	r3, r7
 23ff3f0:	f7fd fb42 	bl	23fca78 <__aeabi_dsub>
 23ff3f4:	4602      	mov	r2, r0
 23ff3f6:	460b      	mov	r3, r1
 23ff3f8:	4640      	mov	r0, r8
 23ff3fa:	4649      	mov	r1, r9
 23ff3fc:	f7fd fb3c 	bl	23fca78 <__aeabi_dsub>
 23ff400:	4622      	mov	r2, r4
 23ff402:	4680      	mov	r8, r0
 23ff404:	4689      	mov	r9, r1
 23ff406:	462b      	mov	r3, r5
 23ff408:	4620      	mov	r0, r4
 23ff40a:	4629      	mov	r1, r5
 23ff40c:	f7fd fcec 	bl	23fcde8 <__aeabi_dmul>
 23ff410:	4606      	mov	r6, r0
 23ff412:	460f      	mov	r7, r1
 23ff414:	a376      	add	r3, pc, #472	; (adr r3, 23ff5f0 <__ieee754_pow+0x8d0>)
 23ff416:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff41a:	f7fd fce5 	bl	23fcde8 <__aeabi_dmul>
 23ff41e:	a376      	add	r3, pc, #472	; (adr r3, 23ff5f8 <__ieee754_pow+0x8d8>)
 23ff420:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff424:	f7fd fb28 	bl	23fca78 <__aeabi_dsub>
 23ff428:	4632      	mov	r2, r6
 23ff42a:	463b      	mov	r3, r7
 23ff42c:	f7fd fcdc 	bl	23fcde8 <__aeabi_dmul>
 23ff430:	a373      	add	r3, pc, #460	; (adr r3, 23ff600 <__ieee754_pow+0x8e0>)
 23ff432:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff436:	f7fd fb21 	bl	23fca7c <__adddf3>
 23ff43a:	4632      	mov	r2, r6
 23ff43c:	463b      	mov	r3, r7
 23ff43e:	f7fd fcd3 	bl	23fcde8 <__aeabi_dmul>
 23ff442:	a371      	add	r3, pc, #452	; (adr r3, 23ff608 <__ieee754_pow+0x8e8>)
 23ff444:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff448:	f7fd fb16 	bl	23fca78 <__aeabi_dsub>
 23ff44c:	4632      	mov	r2, r6
 23ff44e:	463b      	mov	r3, r7
 23ff450:	f7fd fcca 	bl	23fcde8 <__aeabi_dmul>
 23ff454:	a36e      	add	r3, pc, #440	; (adr r3, 23ff610 <__ieee754_pow+0x8f0>)
 23ff456:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff45a:	f7fd fb0f 	bl	23fca7c <__adddf3>
 23ff45e:	4632      	mov	r2, r6
 23ff460:	463b      	mov	r3, r7
 23ff462:	f7fd fcc1 	bl	23fcde8 <__aeabi_dmul>
 23ff466:	4602      	mov	r2, r0
 23ff468:	460b      	mov	r3, r1
 23ff46a:	4620      	mov	r0, r4
 23ff46c:	4629      	mov	r1, r5
 23ff46e:	f7fd fb03 	bl	23fca78 <__aeabi_dsub>
 23ff472:	4606      	mov	r6, r0
 23ff474:	460f      	mov	r7, r1
 23ff476:	4620      	mov	r0, r4
 23ff478:	4632      	mov	r2, r6
 23ff47a:	4629      	mov	r1, r5
 23ff47c:	463b      	mov	r3, r7
 23ff47e:	f7fd fcb3 	bl	23fcde8 <__aeabi_dmul>
 23ff482:	2200      	movs	r2, #0
 23ff484:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 23ff488:	ec41 0b18 	vmov	d8, r0, r1
 23ff48c:	4630      	mov	r0, r6
 23ff48e:	4639      	mov	r1, r7
 23ff490:	f7fd faf2 	bl	23fca78 <__aeabi_dsub>
 23ff494:	4602      	mov	r2, r0
 23ff496:	460b      	mov	r3, r1
 23ff498:	ec51 0b18 	vmov	r0, r1, d8
 23ff49c:	f7fd fdce 	bl	23fd03c <__aeabi_ddiv>
 23ff4a0:	4642      	mov	r2, r8
 23ff4a2:	4606      	mov	r6, r0
 23ff4a4:	460f      	mov	r7, r1
 23ff4a6:	464b      	mov	r3, r9
 23ff4a8:	4620      	mov	r0, r4
 23ff4aa:	4629      	mov	r1, r5
 23ff4ac:	f7fd fc9c 	bl	23fcde8 <__aeabi_dmul>
 23ff4b0:	4642      	mov	r2, r8
 23ff4b2:	464b      	mov	r3, r9
 23ff4b4:	f7fd fae2 	bl	23fca7c <__adddf3>
 23ff4b8:	4602      	mov	r2, r0
 23ff4ba:	460b      	mov	r3, r1
 23ff4bc:	4630      	mov	r0, r6
 23ff4be:	4639      	mov	r1, r7
 23ff4c0:	f7fd fada 	bl	23fca78 <__aeabi_dsub>
 23ff4c4:	4622      	mov	r2, r4
 23ff4c6:	462b      	mov	r3, r5
 23ff4c8:	f7fd fad6 	bl	23fca78 <__aeabi_dsub>
 23ff4cc:	4602      	mov	r2, r0
 23ff4ce:	460b      	mov	r3, r1
 23ff4d0:	2000      	movs	r0, #0
 23ff4d2:	495a      	ldr	r1, [pc, #360]	; (23ff63c <__ieee754_pow+0x91c>)
 23ff4d4:	f7fd fad0 	bl	23fca78 <__aeabi_dsub>
 23ff4d8:	448b      	add	fp, r1
 23ff4da:	4602      	mov	r2, r0
 23ff4dc:	460b      	mov	r3, r1
 23ff4de:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
 23ff4e2:	f2c0 816c 	blt.w	23ff7be <__ieee754_pow+0xa9e>
 23ff4e6:	4659      	mov	r1, fp
 23ff4e8:	ec53 2b19 	vmov	r2, r3, d9
 23ff4ec:	f7fd fc7c 	bl	23fcde8 <__aeabi_dmul>
 23ff4f0:	ec41 0b10 	vmov	d0, r0, r1
 23ff4f4:	e442      	b.n	23fed7c <__ieee754_pow+0x5c>
 23ff4f6:	ec47 6b10 	vmov	d0, r6, r7
 23ff4fa:	9200      	str	r2, [sp, #0]
 23ff4fc:	f000 fa64 	bl	23ff9c8 <fabs>
 23ff500:	9a00      	ldr	r2, [sp, #0]
 23ff502:	2a00      	cmp	r2, #0
 23ff504:	f47f acbd 	bne.w	23fee82 <__ieee754_pow+0x162>
 23ff508:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 23ff50c:	4a4b      	ldr	r2, [pc, #300]	; (23ff63c <__ieee754_pow+0x91c>)
 23ff50e:	4293      	cmp	r3, r2
 23ff510:	d003      	beq.n	23ff51a <__ieee754_pow+0x7fa>
 23ff512:	f1b8 0f00 	cmp.w	r8, #0
 23ff516:	f47f acb4 	bne.w	23fee82 <__ieee754_pow+0x162>
 23ff51a:	2300      	movs	r3, #0
 23ff51c:	9300      	str	r3, [sp, #0]
 23ff51e:	f1bb 0f00 	cmp.w	fp, #0
 23ff522:	da07      	bge.n	23ff534 <__ieee754_pow+0x814>
 23ff524:	2000      	movs	r0, #0
 23ff526:	4945      	ldr	r1, [pc, #276]	; (23ff63c <__ieee754_pow+0x91c>)
 23ff528:	ec53 2b10 	vmov	r2, r3, d0
 23ff52c:	f7fd fd86 	bl	23fd03c <__aeabi_ddiv>
 23ff530:	ec41 0b10 	vmov	d0, r0, r1
 23ff534:	f1b9 0f00 	cmp.w	r9, #0
 23ff538:	f6bf ac20 	bge.w	23fed7c <__ieee754_pow+0x5c>
 23ff53c:	4b40      	ldr	r3, [pc, #256]	; (23ff640 <__ieee754_pow+0x920>)
 23ff53e:	9a00      	ldr	r2, [sp, #0]
 23ff540:	4443      	add	r3, r8
 23ff542:	4313      	orrs	r3, r2
 23ff544:	f040 812d 	bne.w	23ff7a2 <__ieee754_pow+0xa82>
 23ff548:	ec53 2b10 	vmov	r2, r3, d0
 23ff54c:	e49b      	b.n	23fee86 <__ieee754_pow+0x166>
 23ff54e:	f1bb 0f00 	cmp.w	fp, #0
 23ff552:	f6ff ac57 	blt.w	23fee04 <__ieee754_pow+0xe4>
 23ff556:	ed9f 0b30 	vldr	d0, [pc, #192]	; 23ff618 <__ieee754_pow+0x8f8>
 23ff55a:	e40f      	b.n	23fed7c <__ieee754_pow+0x5c>
 23ff55c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23ff560:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 23ff648 <__ieee754_pow+0x928>
 23ff564:	4563      	cmp	r3, ip
 23ff566:	f340 80f0 	ble.w	23ff74a <__ieee754_pow+0xa2a>
 23ff56a:	4b36      	ldr	r3, [pc, #216]	; (23ff644 <__ieee754_pow+0x924>)
 23ff56c:	440b      	add	r3, r1
 23ff56e:	4303      	orrs	r3, r0
 23ff570:	d10a      	bne.n	23ff588 <__ieee754_pow+0x868>
 23ff572:	4632      	mov	r2, r6
 23ff574:	463b      	mov	r3, r7
 23ff576:	f7fd fa7f 	bl	23fca78 <__aeabi_dsub>
 23ff57a:	4642      	mov	r2, r8
 23ff57c:	464b      	mov	r3, r9
 23ff57e:	f7fd feb9 	bl	23fd2f4 <__aeabi_dcmpge>
 23ff582:	2800      	cmp	r0, #0
 23ff584:	f43f aecc 	beq.w	23ff320 <__ieee754_pow+0x600>
 23ff588:	a325      	add	r3, pc, #148	; (adr r3, 23ff620 <__ieee754_pow+0x900>)
 23ff58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff58e:	ec51 0b19 	vmov	r0, r1, d9
 23ff592:	f7fd fc29 	bl	23fcde8 <__aeabi_dmul>
 23ff596:	a322      	add	r3, pc, #136	; (adr r3, 23ff620 <__ieee754_pow+0x900>)
 23ff598:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff59c:	f7fd fc24 	bl	23fcde8 <__aeabi_dmul>
 23ff5a0:	ec41 0b10 	vmov	d0, r0, r1
 23ff5a4:	f7ff bbea 	b.w	23fed7c <__ieee754_pow+0x5c>
 23ff5a8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 23ff628 <__ieee754_pow+0x908>
 23ff5ac:	eeb0 9a47 	vmov.f32	s18, s14
 23ff5b0:	eef0 9a67 	vmov.f32	s19, s15
 23ff5b4:	e660      	b.n	23ff278 <__ieee754_pow+0x558>
 23ff5b6:	f1bb 0f00 	cmp.w	fp, #0
 23ff5ba:	dacc      	bge.n	23ff556 <__ieee754_pow+0x836>
 23ff5bc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 23ff5c0:	ee00 4a10 	vmov	s0, r4
 23ff5c4:	ee00 3a90 	vmov	s1, r3
 23ff5c8:	f7ff bbd8 	b.w	23fed7c <__ieee754_pow+0x5c>
 23ff5cc:	f3af 8000 	nop.w
 23ff5d0:	652b82fe 	.word	0x652b82fe
 23ff5d4:	3c971547 	.word	0x3c971547
 23ff5d8:	00000000 	.word	0x00000000
 23ff5dc:	3fe62e43 	.word	0x3fe62e43
 23ff5e0:	fefa39ef 	.word	0xfefa39ef
 23ff5e4:	3fe62e42 	.word	0x3fe62e42
 23ff5e8:	0ca86c39 	.word	0x0ca86c39
 23ff5ec:	be205c61 	.word	0xbe205c61
 23ff5f0:	72bea4d0 	.word	0x72bea4d0
 23ff5f4:	3e663769 	.word	0x3e663769
 23ff5f8:	c5d26bf1 	.word	0xc5d26bf1
 23ff5fc:	3ebbbd41 	.word	0x3ebbbd41
 23ff600:	af25de2c 	.word	0xaf25de2c
 23ff604:	3f11566a 	.word	0x3f11566a
 23ff608:	16bebd93 	.word	0x16bebd93
 23ff60c:	3f66c16c 	.word	0x3f66c16c
 23ff610:	5555553e 	.word	0x5555553e
 23ff614:	3fc55555 	.word	0x3fc55555
	...
 23ff620:	c2f8f359 	.word	0xc2f8f359
 23ff624:	01a56e1f 	.word	0x01a56e1f
 23ff628:	00000000 	.word	0x00000000
 23ff62c:	3ff00000 	.word	0x3ff00000
 23ff630:	408fffff 	.word	0x408fffff
 23ff634:	bf700000 	.word	0xbf700000
 23ff638:	000fffff 	.word	0x000fffff
 23ff63c:	3ff00000 	.word	0x3ff00000
 23ff640:	c0100000 	.word	0xc0100000
 23ff644:	3f6f3400 	.word	0x3f6f3400
 23ff648:	4090cbff 	.word	0x4090cbff
 23ff64c:	4598      	cmp	r8, r3
 23ff64e:	f6ff af7e 	blt.w	23ff54e <__ieee754_pow+0x82e>
 23ff652:	4b79      	ldr	r3, [pc, #484]	; (23ff838 <__ieee754_pow+0xb18>)
 23ff654:	4598      	cmp	r8, r3
 23ff656:	f73f abd1 	bgt.w	23fedfc <__ieee754_pow+0xdc>
 23ff65a:	2200      	movs	r2, #0
 23ff65c:	4b76      	ldr	r3, [pc, #472]	; (23ff838 <__ieee754_pow+0xb18>)
 23ff65e:	ec51 0b10 	vmov	r0, r1, d0
 23ff662:	f7fd fa09 	bl	23fca78 <__aeabi_dsub>
 23ff666:	4606      	mov	r6, r0
 23ff668:	460f      	mov	r7, r1
 23ff66a:	a363      	add	r3, pc, #396	; (adr r3, 23ff7f8 <__ieee754_pow+0xad8>)
 23ff66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff670:	f7fd fbba 	bl	23fcde8 <__aeabi_dmul>
 23ff674:	4682      	mov	sl, r0
 23ff676:	468b      	mov	fp, r1
 23ff678:	4630      	mov	r0, r6
 23ff67a:	4639      	mov	r1, r7
 23ff67c:	a360      	add	r3, pc, #384	; (adr r3, 23ff800 <__ieee754_pow+0xae0>)
 23ff67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff682:	f7fd fbb1 	bl	23fcde8 <__aeabi_dmul>
 23ff686:	2200      	movs	r2, #0
 23ff688:	4b6c      	ldr	r3, [pc, #432]	; (23ff83c <__ieee754_pow+0xb1c>)
 23ff68a:	ec41 0b18 	vmov	d8, r0, r1
 23ff68e:	4630      	mov	r0, r6
 23ff690:	4639      	mov	r1, r7
 23ff692:	f7fd fba9 	bl	23fcde8 <__aeabi_dmul>
 23ff696:	4602      	mov	r2, r0
 23ff698:	460b      	mov	r3, r1
 23ff69a:	a15b      	add	r1, pc, #364	; (adr r1, 23ff808 <__ieee754_pow+0xae8>)
 23ff69c:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ff6a0:	f7fd f9ea 	bl	23fca78 <__aeabi_dsub>
 23ff6a4:	4632      	mov	r2, r6
 23ff6a6:	463b      	mov	r3, r7
 23ff6a8:	f7fd fb9e 	bl	23fcde8 <__aeabi_dmul>
 23ff6ac:	4602      	mov	r2, r0
 23ff6ae:	460b      	mov	r3, r1
 23ff6b0:	2000      	movs	r0, #0
 23ff6b2:	4963      	ldr	r1, [pc, #396]	; (23ff840 <__ieee754_pow+0xb20>)
 23ff6b4:	f7fd f9e0 	bl	23fca78 <__aeabi_dsub>
 23ff6b8:	4680      	mov	r8, r0
 23ff6ba:	4689      	mov	r9, r1
 23ff6bc:	4632      	mov	r2, r6
 23ff6be:	463b      	mov	r3, r7
 23ff6c0:	4630      	mov	r0, r6
 23ff6c2:	4639      	mov	r1, r7
 23ff6c4:	f7fd fb90 	bl	23fcde8 <__aeabi_dmul>
 23ff6c8:	4602      	mov	r2, r0
 23ff6ca:	460b      	mov	r3, r1
 23ff6cc:	4640      	mov	r0, r8
 23ff6ce:	4649      	mov	r1, r9
 23ff6d0:	f7fd fb8a 	bl	23fcde8 <__aeabi_dmul>
 23ff6d4:	a34e      	add	r3, pc, #312	; (adr r3, 23ff810 <__ieee754_pow+0xaf0>)
 23ff6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff6da:	f7fd fb85 	bl	23fcde8 <__aeabi_dmul>
 23ff6de:	4602      	mov	r2, r0
 23ff6e0:	460b      	mov	r3, r1
 23ff6e2:	ec51 0b18 	vmov	r0, r1, d8
 23ff6e6:	f7fd f9c7 	bl	23fca78 <__aeabi_dsub>
 23ff6ea:	4606      	mov	r6, r0
 23ff6ec:	460f      	mov	r7, r1
 23ff6ee:	4650      	mov	r0, sl
 23ff6f0:	4659      	mov	r1, fp
 23ff6f2:	4632      	mov	r2, r6
 23ff6f4:	463b      	mov	r3, r7
 23ff6f6:	f7fd f9c1 	bl	23fca7c <__adddf3>
 23ff6fa:	2000      	movs	r0, #0
 23ff6fc:	4652      	mov	r2, sl
 23ff6fe:	465b      	mov	r3, fp
 23ff700:	4682      	mov	sl, r0
 23ff702:	468b      	mov	fp, r1
 23ff704:	e564      	b.n	23ff1d0 <__ieee754_pow+0x4b0>
 23ff706:	4632      	mov	r2, r6
 23ff708:	463b      	mov	r3, r7
 23ff70a:	4630      	mov	r0, r6
 23ff70c:	4639      	mov	r1, r7
 23ff70e:	f7fd fb6b 	bl	23fcde8 <__aeabi_dmul>
 23ff712:	ec41 0b10 	vmov	d0, r0, r1
 23ff716:	f7ff bb31 	b.w	23fed7c <__ieee754_pow+0x5c>
 23ff71a:	2000      	movs	r0, #0
 23ff71c:	4946      	ldr	r1, [pc, #280]	; (23ff838 <__ieee754_pow+0xb18>)
 23ff71e:	4632      	mov	r2, r6
 23ff720:	463b      	mov	r3, r7
 23ff722:	f7fd fc8b 	bl	23fd03c <__aeabi_ddiv>
 23ff726:	ec41 0b10 	vmov	d0, r0, r1
 23ff72a:	f7ff bb27 	b.w	23fed7c <__ieee754_pow+0x5c>
 23ff72e:	2b00      	cmp	r3, #0
 23ff730:	f47f aee1 	bne.w	23ff4f6 <__ieee754_pow+0x7d6>
 23ff734:	f1c1 0114 	rsb	r1, r1, #20
 23ff738:	fa4a f001 	asr.w	r0, sl, r1
 23ff73c:	fa00 f101 	lsl.w	r1, r0, r1
 23ff740:	4551      	cmp	r1, sl
 23ff742:	d04d      	beq.n	23ff7e0 <__ieee754_pow+0xac0>
 23ff744:	9300      	str	r3, [sp, #0]
 23ff746:	f7ff bb27 	b.w	23fed98 <__ieee754_pow+0x78>
 23ff74a:	4a3d      	ldr	r2, [pc, #244]	; (23ff840 <__ieee754_pow+0xb20>)
 23ff74c:	4293      	cmp	r3, r2
 23ff74e:	dc4e      	bgt.n	23ff7ee <__ieee754_pow+0xace>
 23ff750:	e9dd 2300 	ldrd	r2, r3, [sp]
 23ff754:	4693      	mov	fp, r2
 23ff756:	4692      	mov	sl, r2
 23ff758:	e614      	b.n	23ff384 <__ieee754_pow+0x664>
 23ff75a:	a32f      	add	r3, pc, #188	; (adr r3, 23ff818 <__ieee754_pow+0xaf8>)
 23ff75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff760:	ec51 0b19 	vmov	r0, r1, d9
 23ff764:	f7fd fb40 	bl	23fcde8 <__aeabi_dmul>
 23ff768:	a32b      	add	r3, pc, #172	; (adr r3, 23ff818 <__ieee754_pow+0xaf8>)
 23ff76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ff76e:	f7fd fb3b 	bl	23fcde8 <__aeabi_dmul>
 23ff772:	ec41 0b10 	vmov	d0, r0, r1
 23ff776:	f7ff bb01 	b.w	23fed7c <__ieee754_pow+0x5c>
 23ff77a:	ed9f 7b29 	vldr	d7, [pc, #164]	; 23ff820 <__ieee754_pow+0xb00>
 23ff77e:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 23ff782:	eeb0 da47 	vmov.f32	s26, s14
 23ff786:	eef0 da67 	vmov.f32	s27, s15
 23ff78a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 23ff828 <__ieee754_pow+0xb08>
 23ff78e:	eeb0 ca47 	vmov.f32	s24, s14
 23ff792:	eef0 ca67 	vmov.f32	s25, s15
 23ff796:	ed9f 7b26 	vldr	d7, [pc, #152]	; 23ff830 <__ieee754_pow+0xb10>
 23ff79a:	ec51 0b17 	vmov	r0, r1, d7
 23ff79e:	f7ff bbcc 	b.w	23fef3a <__ieee754_pow+0x21a>
 23ff7a2:	9b00      	ldr	r3, [sp, #0]
 23ff7a4:	2b01      	cmp	r3, #1
 23ff7a6:	f47f aae9 	bne.w	23fed7c <__ieee754_pow+0x5c>
 23ff7aa:	ee10 1a90 	vmov	r1, s1
 23ff7ae:	ee10 2a10 	vmov	r2, s0
 23ff7b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 23ff7b6:	ec43 2b10 	vmov	d0, r2, r3
 23ff7ba:	f7ff badf 	b.w	23fed7c <__ieee754_pow+0x5c>
 23ff7be:	4650      	mov	r0, sl
 23ff7c0:	ec43 2b10 	vmov	d0, r2, r3
 23ff7c4:	f000 f9bc 	bl	23ffb40 <scalbn>
 23ff7c8:	ec51 0b10 	vmov	r0, r1, d0
 23ff7cc:	e68c      	b.n	23ff4e8 <__ieee754_pow+0x7c8>
 23ff7ce:	ec47 6b10 	vmov	d0, r6, r7
 23ff7d2:	b007      	add	sp, #28
 23ff7d4:	ecbd 8b0c 	vpop	{d8-d13}
 23ff7d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff7dc:	f000 b832 	b.w	23ff844 <__ieee754_sqrt>
 23ff7e0:	f000 0001 	and.w	r0, r0, #1
 23ff7e4:	f1c0 0302 	rsb	r3, r0, #2
 23ff7e8:	9300      	str	r3, [sp, #0]
 23ff7ea:	f7ff bad5 	b.w	23fed98 <__ieee754_pow+0x78>
 23ff7ee:	151b      	asrs	r3, r3, #20
 23ff7f0:	e598      	b.n	23ff324 <__ieee754_pow+0x604>
 23ff7f2:	bf00      	nop
 23ff7f4:	f3af 8000 	nop.w
 23ff7f8:	60000000 	.word	0x60000000
 23ff7fc:	3ff71547 	.word	0x3ff71547
 23ff800:	f85ddf44 	.word	0xf85ddf44
 23ff804:	3e54ae0b 	.word	0x3e54ae0b
 23ff808:	55555555 	.word	0x55555555
 23ff80c:	3fd55555 	.word	0x3fd55555
 23ff810:	652b82fe 	.word	0x652b82fe
 23ff814:	3ff71547 	.word	0x3ff71547
 23ff818:	8800759c 	.word	0x8800759c
 23ff81c:	7e37e43c 	.word	0x7e37e43c
 23ff820:	40000000 	.word	0x40000000
 23ff824:	3fe2b803 	.word	0x3fe2b803
 23ff828:	43cfd006 	.word	0x43cfd006
 23ff82c:	3e4cfdeb 	.word	0x3e4cfdeb
 23ff830:	00000000 	.word	0x00000000
 23ff834:	3ff80000 	.word	0x3ff80000
 23ff838:	3ff00000 	.word	0x3ff00000
 23ff83c:	3fd00000 	.word	0x3fd00000
 23ff840:	3fe00000 	.word	0x3fe00000

023ff844 <__ieee754_sqrt>:
 23ff844:	495e      	ldr	r1, [pc, #376]	; (23ff9c0 <__ieee754_sqrt+0x17c>)
 23ff846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff84a:	ec55 4b10 	vmov	r4, r5, d0
 23ff84e:	43a9      	bics	r1, r5
 23ff850:	f000 8094 	beq.w	23ff97c <__ieee754_sqrt+0x138>
 23ff854:	2d00      	cmp	r5, #0
 23ff856:	462b      	mov	r3, r5
 23ff858:	ee10 2a10 	vmov	r2, s0
 23ff85c:	dd5a      	ble.n	23ff914 <__ieee754_sqrt+0xd0>
 23ff85e:	1528      	asrs	r0, r5, #20
 23ff860:	d067      	beq.n	23ff932 <__ieee754_sqrt+0xee>
 23ff862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23ff866:	07c1      	lsls	r1, r0, #31
 23ff868:	f2a0 37ff 	subw	r7, r0, #1023	; 0x3ff
 23ff86c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23ff870:	d403      	bmi.n	23ff87a <__ieee754_sqrt+0x36>
 23ff872:	005b      	lsls	r3, r3, #1
 23ff874:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23ff878:	0052      	lsls	r2, r2, #1
 23ff87a:	0fd1      	lsrs	r1, r2, #31
 23ff87c:	2600      	movs	r6, #0
 23ff87e:	107f      	asrs	r7, r7, #1
 23ff880:	f04f 0c16 	mov.w	ip, #22
 23ff884:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 23ff888:	46b6      	mov	lr, r6
 23ff88a:	0052      	lsls	r2, r2, #1
 23ff88c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 23ff890:	eb0e 0001 	add.w	r0, lr, r1
 23ff894:	4298      	cmp	r0, r3
 23ff896:	dc03      	bgt.n	23ff8a0 <__ieee754_sqrt+0x5c>
 23ff898:	1a1b      	subs	r3, r3, r0
 23ff89a:	eb00 0e01 	add.w	lr, r0, r1
 23ff89e:	440e      	add	r6, r1
 23ff8a0:	005b      	lsls	r3, r3, #1
 23ff8a2:	f1bc 0c01 	subs.w	ip, ip, #1
 23ff8a6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23ff8aa:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 23ff8ae:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23ff8b2:	d1ed      	bne.n	23ff890 <__ieee754_sqrt+0x4c>
 23ff8b4:	4665      	mov	r5, ip
 23ff8b6:	2420      	movs	r4, #32
 23ff8b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 23ff8bc:	e014      	b.n	23ff8e8 <__ieee754_sqrt+0xa4>
 23ff8be:	d10a      	bne.n	23ff8d6 <__ieee754_sqrt+0x92>
 23ff8c0:	4290      	cmp	r0, r2
 23ff8c2:	d808      	bhi.n	23ff8d6 <__ieee754_sqrt+0x92>
 23ff8c4:	2800      	cmp	r0, #0
 23ff8c6:	eb00 0c01 	add.w	ip, r0, r1
 23ff8ca:	db1d      	blt.n	23ff908 <__ieee754_sqrt+0xc4>
 23ff8cc:	46f0      	mov	r8, lr
 23ff8ce:	2300      	movs	r3, #0
 23ff8d0:	1a12      	subs	r2, r2, r0
 23ff8d2:	440d      	add	r5, r1
 23ff8d4:	46c6      	mov	lr, r8
 23ff8d6:	0fd0      	lsrs	r0, r2, #31
 23ff8d8:	3c01      	subs	r4, #1
 23ff8da:	ea4f 0151 	mov.w	r1, r1, lsr #1
 23ff8de:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 23ff8e2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 23ff8e6:	d033      	beq.n	23ff950 <__ieee754_sqrt+0x10c>
 23ff8e8:	4573      	cmp	r3, lr
 23ff8ea:	eb01 000c 	add.w	r0, r1, ip
 23ff8ee:	dde6      	ble.n	23ff8be <__ieee754_sqrt+0x7a>
 23ff8f0:	2800      	cmp	r0, #0
 23ff8f2:	eb00 0c01 	add.w	ip, r0, r1
 23ff8f6:	db07      	blt.n	23ff908 <__ieee754_sqrt+0xc4>
 23ff8f8:	46f0      	mov	r8, lr
 23ff8fa:	eba3 030e 	sub.w	r3, r3, lr
 23ff8fe:	4290      	cmp	r0, r2
 23ff900:	bf88      	it	hi
 23ff902:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 23ff906:	e7e3      	b.n	23ff8d0 <__ieee754_sqrt+0x8c>
 23ff908:	f1bc 0f00 	cmp.w	ip, #0
 23ff90c:	dbf4      	blt.n	23ff8f8 <__ieee754_sqrt+0xb4>
 23ff90e:	f10e 0801 	add.w	r8, lr, #1
 23ff912:	e7f2      	b.n	23ff8fa <__ieee754_sqrt+0xb6>
 23ff914:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 23ff918:	4321      	orrs	r1, r4
 23ff91a:	d028      	beq.n	23ff96e <__ieee754_sqrt+0x12a>
 23ff91c:	2d00      	cmp	r5, #0
 23ff91e:	d13d      	bne.n	23ff99c <__ieee754_sqrt+0x158>
 23ff920:	4628      	mov	r0, r5
 23ff922:	0ad1      	lsrs	r1, r2, #11
 23ff924:	3815      	subs	r0, #21
 23ff926:	0552      	lsls	r2, r2, #21
 23ff928:	460b      	mov	r3, r1
 23ff92a:	2900      	cmp	r1, #0
 23ff92c:	d0f9      	beq.n	23ff922 <__ieee754_sqrt+0xde>
 23ff92e:	02cf      	lsls	r7, r1, #11
 23ff930:	d441      	bmi.n	23ff9b6 <__ieee754_sqrt+0x172>
 23ff932:	2400      	movs	r4, #0
 23ff934:	005b      	lsls	r3, r3, #1
 23ff936:	4625      	mov	r5, r4
 23ff938:	3401      	adds	r4, #1
 23ff93a:	02de      	lsls	r6, r3, #11
 23ff93c:	d5fa      	bpl.n	23ff934 <__ieee754_sqrt+0xf0>
 23ff93e:	4619      	mov	r1, r3
 23ff940:	4613      	mov	r3, r2
 23ff942:	40a2      	lsls	r2, r4
 23ff944:	f1c4 0420 	rsb	r4, r4, #32
 23ff948:	40e3      	lsrs	r3, r4
 23ff94a:	1b40      	subs	r0, r0, r5
 23ff94c:	430b      	orrs	r3, r1
 23ff94e:	e788      	b.n	23ff862 <__ieee754_sqrt+0x1e>
 23ff950:	4313      	orrs	r3, r2
 23ff952:	d10e      	bne.n	23ff972 <__ieee754_sqrt+0x12e>
 23ff954:	086c      	lsrs	r4, r5, #1
 23ff956:	07f3      	lsls	r3, r6, #31
 23ff958:	491a      	ldr	r1, [pc, #104]	; (23ff9c4 <__ieee754_sqrt+0x180>)
 23ff95a:	bf48      	it	mi
 23ff95c:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 23ff960:	eb01 0166 	add.w	r1, r1, r6, asr #1
 23ff964:	4622      	mov	r2, r4
 23ff966:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 23ff96a:	ec43 2b10 	vmov	d0, r2, r3
 23ff96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff972:	1c6a      	adds	r2, r5, #1
 23ff974:	d01d      	beq.n	23ff9b2 <__ieee754_sqrt+0x16e>
 23ff976:	1c6c      	adds	r4, r5, #1
 23ff978:	0864      	lsrs	r4, r4, #1
 23ff97a:	e7ec      	b.n	23ff956 <__ieee754_sqrt+0x112>
 23ff97c:	ee10 2a10 	vmov	r2, s0
 23ff980:	462b      	mov	r3, r5
 23ff982:	ee10 0a10 	vmov	r0, s0
 23ff986:	4629      	mov	r1, r5
 23ff988:	f7fd fa2e 	bl	23fcde8 <__aeabi_dmul>
 23ff98c:	4622      	mov	r2, r4
 23ff98e:	462b      	mov	r3, r5
 23ff990:	f7fd f874 	bl	23fca7c <__adddf3>
 23ff994:	ec41 0b10 	vmov	d0, r0, r1
 23ff998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23ff99c:	4620      	mov	r0, r4
 23ff99e:	4629      	mov	r1, r5
 23ff9a0:	f7fd f86a 	bl	23fca78 <__aeabi_dsub>
 23ff9a4:	4602      	mov	r2, r0
 23ff9a6:	460b      	mov	r3, r1
 23ff9a8:	f7fd fb48 	bl	23fd03c <__aeabi_ddiv>
 23ff9ac:	ec41 0b10 	vmov	d0, r0, r1
 23ff9b0:	e7dd      	b.n	23ff96e <__ieee754_sqrt+0x12a>
 23ff9b2:	3601      	adds	r6, #1
 23ff9b4:	e7cf      	b.n	23ff956 <__ieee754_sqrt+0x112>
 23ff9b6:	4613      	mov	r3, r2
 23ff9b8:	2420      	movs	r4, #32
 23ff9ba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 23ff9be:	e7c3      	b.n	23ff948 <__ieee754_sqrt+0x104>
 23ff9c0:	7ff00000 	.word	0x7ff00000
 23ff9c4:	3fe00000 	.word	0x3fe00000

023ff9c8 <fabs>:
 23ff9c8:	ec51 0b10 	vmov	r0, r1, d0
 23ff9cc:	ee10 2a10 	vmov	r2, s0
 23ff9d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 23ff9d4:	ec43 2b10 	vmov	d0, r2, r3
 23ff9d8:	4770      	bx	lr
 23ff9da:	bf00      	nop

023ff9dc <finite>:
 23ff9dc:	b082      	sub	sp, #8
 23ff9de:	4805      	ldr	r0, [pc, #20]	; (23ff9f4 <finite+0x18>)
 23ff9e0:	ed8d 0b00 	vstr	d0, [sp]
 23ff9e4:	9b01      	ldr	r3, [sp, #4]
 23ff9e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 23ff9ea:	4418      	add	r0, r3
 23ff9ec:	0fc0      	lsrs	r0, r0, #31
 23ff9ee:	b002      	add	sp, #8
 23ff9f0:	4770      	bx	lr
 23ff9f2:	bf00      	nop
 23ff9f4:	80100000 	.word	0x80100000

023ff9f8 <nan>:
 23ff9f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 23ffa00 <nan+0x8>
 23ff9fc:	4770      	bx	lr
 23ff9fe:	bf00      	nop
 23ffa00:	00000000 	.word	0x00000000
 23ffa04:	7ff80000 	.word	0x7ff80000

023ffa08 <rint>:
 23ffa08:	ec53 2b10 	vmov	r2, r3, d0
 23ffa0c:	f3c3 5c0a 	ubfx	ip, r3, #20, #11
 23ffa10:	ee10 0a10 	vmov	r0, s0
 23ffa14:	f2ac 31ff 	subw	r1, ip, #1023	; 0x3ff
 23ffa18:	2913      	cmp	r1, #19
 23ffa1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ffa1c:	461c      	mov	r4, r3
 23ffa1e:	b083      	sub	sp, #12
 23ffa20:	ea4f 7ed3 	mov.w	lr, r3, lsr #31
 23ffa24:	dc3a      	bgt.n	23ffa9c <rint+0x94>
 23ffa26:	2900      	cmp	r1, #0
 23ffa28:	db30      	blt.n	23ffa8c <rint+0x84>
 23ffa2a:	4d42      	ldr	r5, [pc, #264]	; (23ffb34 <rint+0x12c>)
 23ffa2c:	fa45 fc01 	asr.w	ip, r5, r1
 23ffa30:	ea03 050c 	and.w	r5, r3, ip
 23ffa34:	4315      	orrs	r5, r2
 23ffa36:	d02d      	beq.n	23ffa94 <rint+0x8c>
 23ffa38:	ea03 035c 	and.w	r3, r3, ip, lsr #1
 23ffa3c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 23ffa40:	4318      	orrs	r0, r3
 23ffa42:	d00c      	beq.n	23ffa5e <rint+0x56>
 23ffa44:	ea24 0c0c 	bic.w	ip, r4, ip
 23ffa48:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 23ffa4c:	2913      	cmp	r1, #19
 23ffa4e:	fa44 f101 	asr.w	r1, r4, r1
 23ffa52:	bf0c      	ite	eq
 23ffa54:	f04f 4000 	moveq.w	r0, #2147483648	; 0x80000000
 23ffa58:	2000      	movne	r0, #0
 23ffa5a:	ea4c 0401 	orr.w	r4, ip, r1
 23ffa5e:	4936      	ldr	r1, [pc, #216]	; (23ffb38 <rint+0x130>)
 23ffa60:	4623      	mov	r3, r4
 23ffa62:	4602      	mov	r2, r0
 23ffa64:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 23ffa68:	e9de 4500 	ldrd	r4, r5, [lr]
 23ffa6c:	4620      	mov	r0, r4
 23ffa6e:	4629      	mov	r1, r5
 23ffa70:	f7fd f804 	bl	23fca7c <__adddf3>
 23ffa74:	4622      	mov	r2, r4
 23ffa76:	462b      	mov	r3, r5
 23ffa78:	e9cd 0100 	strd	r0, r1, [sp]
 23ffa7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ffa80:	f7fc fffa 	bl	23fca78 <__aeabi_dsub>
 23ffa84:	ec41 0b10 	vmov	d0, r0, r1
 23ffa88:	b003      	add	sp, #12
 23ffa8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ffa8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 23ffa90:	4311      	orrs	r1, r2
 23ffa92:	d124      	bne.n	23ffade <rint+0xd6>
 23ffa94:	ec43 2b10 	vmov	d0, r2, r3
 23ffa98:	b003      	add	sp, #12
 23ffa9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ffa9c:	2933      	cmp	r1, #51	; 0x33
 23ffa9e:	dd08      	ble.n	23ffab2 <rint+0xaa>
 23ffaa0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 23ffaa4:	d1f6      	bne.n	23ffa94 <rint+0x8c>
 23ffaa6:	4619      	mov	r1, r3
 23ffaa8:	f7fc ffe8 	bl	23fca7c <__adddf3>
 23ffaac:	ec41 0b10 	vmov	d0, r0, r1
 23ffab0:	e7f2      	b.n	23ffa98 <rint+0x90>
 23ffab2:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 23ffab6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 23ffaba:	fa21 f10c 	lsr.w	r1, r1, ip
 23ffabe:	420a      	tst	r2, r1
 23ffac0:	d0e8      	beq.n	23ffa94 <rint+0x8c>
 23ffac2:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 23ffac6:	ea4f 0351 	mov.w	r3, r1, lsr #1
 23ffaca:	d0c8      	beq.n	23ffa5e <rint+0x56>
 23ffacc:	ea20 0303 	bic.w	r3, r0, r3
 23ffad0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23ffad4:	fa40 fc0c 	asr.w	ip, r0, ip
 23ffad8:	ea43 000c 	orr.w	r0, r3, ip
 23ffadc:	e7bf      	b.n	23ffa5e <rint+0x56>
 23ffade:	f3c3 0313 	ubfx	r3, r3, #0, #20
 23ffae2:	4a16      	ldr	r2, [pc, #88]	; (23ffb3c <rint+0x134>)
 23ffae4:	4318      	orrs	r0, r3
 23ffae6:	4022      	ands	r2, r4
 23ffae8:	f004 4400 	and.w	r4, r4, #2147483648	; 0x80000000
 23ffaec:	4243      	negs	r3, r0
 23ffaee:	4303      	orrs	r3, r0
 23ffaf0:	0b1b      	lsrs	r3, r3, #12
 23ffaf2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 23ffaf6:	ea43 0702 	orr.w	r7, r3, r2
 23ffafa:	4b0f      	ldr	r3, [pc, #60]	; (23ffb38 <rint+0x130>)
 23ffafc:	ee10 2a10 	vmov	r2, s0
 23ffb00:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 23ffb04:	463b      	mov	r3, r7
 23ffb06:	e9de 6700 	ldrd	r6, r7, [lr]
 23ffb0a:	4630      	mov	r0, r6
 23ffb0c:	4639      	mov	r1, r7
 23ffb0e:	f7fc ffb5 	bl	23fca7c <__adddf3>
 23ffb12:	4632      	mov	r2, r6
 23ffb14:	463b      	mov	r3, r7
 23ffb16:	e9cd 0100 	strd	r0, r1, [sp]
 23ffb1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 23ffb1e:	f7fc ffab 	bl	23fca78 <__aeabi_dsub>
 23ffb22:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23ffb26:	4602      	mov	r2, r0
 23ffb28:	ea41 0304 	orr.w	r3, r1, r4
 23ffb2c:	ec43 2b10 	vmov	d0, r2, r3
 23ffb30:	b003      	add	sp, #12
 23ffb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23ffb34:	000fffff 	.word	0x000fffff
 23ffb38:	023fff58 	.word	0x023fff58
 23ffb3c:	fffe0000 	.word	0xfffe0000

023ffb40 <scalbn>:
 23ffb40:	b538      	push	{r3, r4, r5, lr}
 23ffb42:	ec53 2b10 	vmov	r2, r3, d0
 23ffb46:	f3c3 510a 	ubfx	r1, r3, #20, #11
 23ffb4a:	469c      	mov	ip, r3
 23ffb4c:	4604      	mov	r4, r0
 23ffb4e:	bb89      	cbnz	r1, 23ffbb4 <scalbn+0x74>
 23ffb50:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 23ffb54:	ee10 1a10 	vmov	r1, s0
 23ffb58:	ea5c 0101 	orrs.w	r1, ip, r1
 23ffb5c:	d029      	beq.n	23ffbb2 <scalbn+0x72>
 23ffb5e:	4d3e      	ldr	r5, [pc, #248]	; (23ffc58 <scalbn+0x118>)
 23ffb60:	4619      	mov	r1, r3
 23ffb62:	2200      	movs	r2, #0
 23ffb64:	4b3d      	ldr	r3, [pc, #244]	; (23ffc5c <scalbn+0x11c>)
 23ffb66:	ee10 0a10 	vmov	r0, s0
 23ffb6a:	f7fd f93d 	bl	23fcde8 <__aeabi_dmul>
 23ffb6e:	42ac      	cmp	r4, r5
 23ffb70:	4602      	mov	r2, r0
 23ffb72:	460b      	mov	r3, r1
 23ffb74:	db16      	blt.n	23ffba4 <scalbn+0x64>
 23ffb76:	468c      	mov	ip, r1
 23ffb78:	f3c1 510a 	ubfx	r1, r1, #20, #11
 23ffb7c:	3936      	subs	r1, #54	; 0x36
 23ffb7e:	4421      	add	r1, r4
 23ffb80:	f240 70fe 	movw	r0, #2046	; 0x7fe
 23ffb84:	4281      	cmp	r1, r0
 23ffb86:	dc21      	bgt.n	23ffbcc <scalbn+0x8c>
 23ffb88:	2900      	cmp	r1, #0
 23ffb8a:	dc47      	bgt.n	23ffc1c <scalbn+0xdc>
 23ffb8c:	f111 0f35 	cmn.w	r1, #53	; 0x35
 23ffb90:	da34      	bge.n	23ffbfc <scalbn+0xbc>
 23ffb92:	f24c 3150 	movw	r1, #50000	; 0xc350
 23ffb96:	428c      	cmp	r4, r1
 23ffb98:	dc18      	bgt.n	23ffbcc <scalbn+0x8c>
 23ffb9a:	2b00      	cmp	r3, #0
 23ffb9c:	a126      	add	r1, pc, #152	; (adr r1, 23ffc38 <scalbn+0xf8>)
 23ffb9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ffba2:	db43      	blt.n	23ffc2c <scalbn+0xec>
 23ffba4:	a324      	add	r3, pc, #144	; (adr r3, 23ffc38 <scalbn+0xf8>)
 23ffba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ffbaa:	f7fd f91d 	bl	23fcde8 <__aeabi_dmul>
 23ffbae:	ec41 0b10 	vmov	d0, r0, r1
 23ffbb2:	bd38      	pop	{r3, r4, r5, pc}
 23ffbb4:	f240 7eff 	movw	lr, #2047	; 0x7ff
 23ffbb8:	4571      	cmp	r1, lr
 23ffbba:	d1e0      	bne.n	23ffb7e <scalbn+0x3e>
 23ffbbc:	ee10 0a10 	vmov	r0, s0
 23ffbc0:	4619      	mov	r1, r3
 23ffbc2:	f7fc ff5b 	bl	23fca7c <__adddf3>
 23ffbc6:	ec41 0b10 	vmov	d0, r0, r1
 23ffbca:	bd38      	pop	{r3, r4, r5, pc}
 23ffbcc:	2b00      	cmp	r3, #0
 23ffbce:	a11c      	add	r1, pc, #112	; (adr r1, 23ffc40 <scalbn+0x100>)
 23ffbd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ffbd4:	db07      	blt.n	23ffbe6 <scalbn+0xa6>
 23ffbd6:	a31a      	add	r3, pc, #104	; (adr r3, 23ffc40 <scalbn+0x100>)
 23ffbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ffbdc:	f7fd f904 	bl	23fcde8 <__aeabi_dmul>
 23ffbe0:	ec41 0b10 	vmov	d0, r0, r1
 23ffbe4:	bd38      	pop	{r3, r4, r5, pc}
 23ffbe6:	a118      	add	r1, pc, #96	; (adr r1, 23ffc48 <scalbn+0x108>)
 23ffbe8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ffbec:	a314      	add	r3, pc, #80	; (adr r3, 23ffc40 <scalbn+0x100>)
 23ffbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 23ffbf2:	f7fd f8f9 	bl	23fcde8 <__aeabi_dmul>
 23ffbf6:	ec41 0b10 	vmov	d0, r0, r1
 23ffbfa:	e7f3      	b.n	23ffbe4 <scalbn+0xa4>
 23ffbfc:	4818      	ldr	r0, [pc, #96]	; (23ffc60 <scalbn+0x120>)
 23ffbfe:	3136      	adds	r1, #54	; 0x36
 23ffc00:	4614      	mov	r4, r2
 23ffc02:	4b18      	ldr	r3, [pc, #96]	; (23ffc64 <scalbn+0x124>)
 23ffc04:	ea0c 0000 	and.w	r0, ip, r0
 23ffc08:	2200      	movs	r2, #0
 23ffc0a:	ea40 5501 	orr.w	r5, r0, r1, lsl #20
 23ffc0e:	4620      	mov	r0, r4
 23ffc10:	4629      	mov	r1, r5
 23ffc12:	f7fd f8e9 	bl	23fcde8 <__aeabi_dmul>
 23ffc16:	ec41 0b10 	vmov	d0, r0, r1
 23ffc1a:	bd38      	pop	{r3, r4, r5, pc}
 23ffc1c:	4810      	ldr	r0, [pc, #64]	; (23ffc60 <scalbn+0x120>)
 23ffc1e:	ea0c 0000 	and.w	r0, ip, r0
 23ffc22:	ea40 5301 	orr.w	r3, r0, r1, lsl #20
 23ffc26:	ec43 2b10 	vmov	d0, r2, r3
 23ffc2a:	bd38      	pop	{r3, r4, r5, pc}
 23ffc2c:	a108      	add	r1, pc, #32	; (adr r1, 23ffc50 <scalbn+0x110>)
 23ffc2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 23ffc32:	e7b7      	b.n	23ffba4 <scalbn+0x64>
 23ffc34:	f3af 8000 	nop.w
 23ffc38:	c2f8f359 	.word	0xc2f8f359
 23ffc3c:	01a56e1f 	.word	0x01a56e1f
 23ffc40:	8800759c 	.word	0x8800759c
 23ffc44:	7e37e43c 	.word	0x7e37e43c
 23ffc48:	8800759c 	.word	0x8800759c
 23ffc4c:	fe37e43c 	.word	0xfe37e43c
 23ffc50:	c2f8f359 	.word	0xc2f8f359
 23ffc54:	81a56e1f 	.word	0x81a56e1f
 23ffc58:	ffff3cb0 	.word	0xffff3cb0
 23ffc5c:	43500000 	.word	0x43500000
 23ffc60:	800fffff 	.word	0x800fffff
 23ffc64:	3c900000 	.word	0x3c900000

023ffc68 <atexit>:
 23ffc68:	2300      	movs	r3, #0
 23ffc6a:	4601      	mov	r1, r0
 23ffc6c:	461a      	mov	r2, r3
 23ffc6e:	4618      	mov	r0, r3
 23ffc70:	f000 b844 	b.w	23ffcfc <__register_exitproc>

023ffc74 <memcpy>:
 23ffc74:	440a      	add	r2, r1
 23ffc76:	1e43      	subs	r3, r0, #1
 23ffc78:	4291      	cmp	r1, r2
 23ffc7a:	d100      	bne.n	23ffc7e <memcpy+0xa>
 23ffc7c:	4770      	bx	lr
 23ffc7e:	b510      	push	{r4, lr}
 23ffc80:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffc84:	4291      	cmp	r1, r2
 23ffc86:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffc8a:	d1f9      	bne.n	23ffc80 <memcpy+0xc>
 23ffc8c:	bd10      	pop	{r4, pc}

023ffc8e <memset>:
 23ffc8e:	4402      	add	r2, r0
 23ffc90:	4603      	mov	r3, r0
 23ffc92:	4293      	cmp	r3, r2
 23ffc94:	d100      	bne.n	23ffc98 <memset+0xa>
 23ffc96:	4770      	bx	lr
 23ffc98:	f803 1b01 	strb.w	r1, [r3], #1
 23ffc9c:	e7f9      	b.n	23ffc92 <memset+0x4>
	...

023ffca0 <srand>:
 23ffca0:	b538      	push	{r3, r4, r5, lr}
 23ffca2:	4b10      	ldr	r3, [pc, #64]	; (23ffce4 <srand+0x44>)
 23ffca4:	4604      	mov	r4, r0
 23ffca6:	681d      	ldr	r5, [r3, #0]
 23ffca8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffcaa:	b9b3      	cbnz	r3, 23ffcda <srand+0x3a>
 23ffcac:	2018      	movs	r0, #24
 23ffcae:	f7fe f93d 	bl	23fdf2c <malloc>
 23ffcb2:	4602      	mov	r2, r0
 23ffcb4:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffcb6:	b920      	cbnz	r0, 23ffcc2 <srand+0x22>
 23ffcb8:	4b0b      	ldr	r3, [pc, #44]	; (23ffce8 <srand+0x48>)
 23ffcba:	2142      	movs	r1, #66	; 0x42
 23ffcbc:	480b      	ldr	r0, [pc, #44]	; (23ffcec <srand+0x4c>)
 23ffcbe:	f7fe f95f 	bl	23fdf80 <__assert_func>
 23ffcc2:	490b      	ldr	r1, [pc, #44]	; (23ffcf0 <srand+0x50>)
 23ffcc4:	4b0b      	ldr	r3, [pc, #44]	; (23ffcf4 <srand+0x54>)
 23ffcc6:	e9c0 1300 	strd	r1, r3, [r0]
 23ffcca:	4b0b      	ldr	r3, [pc, #44]	; (23ffcf8 <srand+0x58>)
 23ffccc:	2100      	movs	r1, #0
 23ffcce:	6083      	str	r3, [r0, #8]
 23ffcd0:	230b      	movs	r3, #11
 23ffcd2:	8183      	strh	r3, [r0, #12]
 23ffcd4:	2001      	movs	r0, #1
 23ffcd6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffcda:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffcdc:	2200      	movs	r2, #0
 23ffcde:	611c      	str	r4, [r3, #16]
 23ffce0:	615a      	str	r2, [r3, #20]
 23ffce2:	bd38      	pop	{r3, r4, r5, pc}
 23ffce4:	1007add8 	.word	0x1007add8
 23ffce8:	023fff68 	.word	0x023fff68
 23ffcec:	023fff7f 	.word	0x023fff7f
 23ffcf0:	abcd330e 	.word	0xabcd330e
 23ffcf4:	e66d1234 	.word	0xe66d1234
 23ffcf8:	0005deec 	.word	0x0005deec

023ffcfc <__register_exitproc>:
 23ffcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffd00:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffdc0 <__register_exitproc+0xc4>
 23ffd04:	4606      	mov	r6, r0
 23ffd06:	461f      	mov	r7, r3
 23ffd08:	460d      	mov	r5, r1
 23ffd0a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd0e:	4691      	mov	r9, r2
 23ffd10:	f000 f858 	bl	23ffdc4 <__retarget_lock_acquire_recursive>
 23ffd14:	4b26      	ldr	r3, [pc, #152]	; (23ffdb0 <__register_exitproc+0xb4>)
 23ffd16:	681c      	ldr	r4, [r3, #0]
 23ffd18:	b934      	cbnz	r4, 23ffd28 <__register_exitproc+0x2c>
 23ffd1a:	4c26      	ldr	r4, [pc, #152]	; (23ffdb4 <__register_exitproc+0xb8>)
 23ffd1c:	601c      	str	r4, [r3, #0]
 23ffd1e:	4b26      	ldr	r3, [pc, #152]	; (23ffdb8 <__register_exitproc+0xbc>)
 23ffd20:	b113      	cbz	r3, 23ffd28 <__register_exitproc+0x2c>
 23ffd22:	681b      	ldr	r3, [r3, #0]
 23ffd24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffd28:	6863      	ldr	r3, [r4, #4]
 23ffd2a:	2b1f      	cmp	r3, #31
 23ffd2c:	dd07      	ble.n	23ffd3e <__register_exitproc+0x42>
 23ffd2e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd32:	f000 f849 	bl	23ffdc8 <__retarget_lock_release_recursive>
 23ffd36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffd3e:	b35e      	cbz	r6, 23ffd98 <__register_exitproc+0x9c>
 23ffd40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffd44:	b988      	cbnz	r0, 23ffd6a <__register_exitproc+0x6e>
 23ffd46:	4b1d      	ldr	r3, [pc, #116]	; (23ffdbc <__register_exitproc+0xc0>)
 23ffd48:	b923      	cbnz	r3, 23ffd54 <__register_exitproc+0x58>
 23ffd4a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd4e:	f000 f83a 	bl	23ffdc6 <__retarget_lock_release>
 23ffd52:	e7f0      	b.n	23ffd36 <__register_exitproc+0x3a>
 23ffd54:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffd58:	f7fe f8e8 	bl	23fdf2c <malloc>
 23ffd5c:	2800      	cmp	r0, #0
 23ffd5e:	d0f4      	beq.n	23ffd4a <__register_exitproc+0x4e>
 23ffd60:	2300      	movs	r3, #0
 23ffd62:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffd66:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffd6a:	6863      	ldr	r3, [r4, #4]
 23ffd6c:	2201      	movs	r2, #1
 23ffd6e:	2e02      	cmp	r6, #2
 23ffd70:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffd74:	fa02 f203 	lsl.w	r2, r2, r3
 23ffd78:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffd7c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffd80:	ea43 0302 	orr.w	r3, r3, r2
 23ffd84:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffd88:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffd8c:	bf02      	ittt	eq
 23ffd8e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffd92:	4313      	orreq	r3, r2
 23ffd94:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffd98:	6863      	ldr	r3, [r4, #4]
 23ffd9a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd9e:	1c5a      	adds	r2, r3, #1
 23ffda0:	3302      	adds	r3, #2
 23ffda2:	6062      	str	r2, [r4, #4]
 23ffda4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffda8:	f000 f80e 	bl	23ffdc8 <__retarget_lock_release_recursive>
 23ffdac:	2000      	movs	r0, #0
 23ffdae:	e7c4      	b.n	23ffd3a <__register_exitproc+0x3e>
 23ffdb0:	1007afe0 	.word	0x1007afe0
 23ffdb4:	1007af54 	.word	0x1007af54
 23ffdb8:	00000000 	.word	0x00000000
 23ffdbc:	023fdf2d 	.word	0x023fdf2d
 23ffdc0:	1007ae3c 	.word	0x1007ae3c

023ffdc4 <__retarget_lock_acquire_recursive>:
 23ffdc4:	4770      	bx	lr

023ffdc6 <__retarget_lock_release>:
 23ffdc6:	4770      	bx	lr

023ffdc8 <__retarget_lock_release_recursive>:
 23ffdc8:	4770      	bx	lr
	...

023ffdcc <dynalib_user>:
 23ffdcc:	d449 023f d471 023f d475 023f 0000 0000     I.?.q.?.u.?.....

023ffddc <_ZTVN5spark13EthernetClassE>:
	...
 23ffde4:	e063 023f e059 023f e04f 023f e045 023f     c.?.Y.?.O.?.E.?.
 23ffdf4:	e039 023f e02d 023f e279 023f e281 023f     9.?.-.?.y.?...?.
 23ffe04:	e021 023f e019 023f e00f 023f e005 023f     !.?...?...?...?.
 23ffe14:	e2b1 023f                                   ..?.

023ffe18 <_ZTV7TwoWire>:
	...
 23ffe20:	e081 023f e0cb 023f e0a3 023f e083 023f     ..?...?...?...?.
 23ffe30:	e0ab 023f e0b3 023f e0bb 023f e0c3 023f     ..?...?...?...?.

023ffe40 <_ZTV9IPAddress>:
	...
 23ffe48:	e149 023f e139 023f e13b 023f 7061 0070     I.?.9.?.;.?.app.

023ffe58 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe60:	e239 023f e243 023f e24d 023f e257 023f     9.?.C.?.M.?.W.?.
 23ffe70:	e261 023f e26d 023f e279 023f e281 023f     a.?.m.?.y.?...?.
 23ffe80:	e289 023f e295 023f e29d 023f e2a7 023f     ..?...?...?...?.
 23ffe90:	e2b1 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffea0:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffeb0 <_ZTV11USARTSerial>:
	...
 23ffeb8:	e489 023f e4f5 023f e4cd 023f e39d 023f     ..?...?...?...?.
 23ffec8:	e49d 023f e4b9 023f e4ab 023f e4c7 023f     ..?...?...?...?.
 23ffed8:	e48b 023f e48f 023f                         ..?...?.

023ffee0 <_ZTV9USBSerial>:
	...
 23ffee8:	e539 023f e5a1 023f e577 023f e39d 023f     9.?...?.w.?...?.
 23ffef8:	e569 023f e53b 023f e54b 023f e59b 023f     i.?.;.?.K.?...?.
 23fff08:	e55b 023f e533 023f                         [.?.3.?.

023fff10 <_ZTVN5spark9WiFiClassE>:
	...
 23fff18:	e697 023f e68d 023f e683 023f e639 023f     ..?...?...?.9.?.
 23fff28:	e677 023f e66b 023f e279 023f e281 023f     w.?.k.?.y.?...?.
 23fff38:	e65f 023f e657 023f e64d 023f e643 023f     _.?.W.?.M.?.C.?.
 23fff48:	e2b1 023f                                   ..?.

023fff4c <_ZSt7nothrow>:
	...

023fff58 <TWO52>:
 23fff58:	0000 0000 0000 4330 0000 0000 0000 c330     ......0C......0.
 23fff68:	4552 4e45 2054 616d 6c6c 636f 7320 6375     REENT malloc suc
 23fff78:	6563 6465 6465 2f00 6d74 2f70 656a 6b6e     ceeded./tmp/jenk
 23fff88:	6e69 2d73 4347 2d43 3031 702d 7069 6c65     ins-GCC-10-pipel
 23fff98:	6e69 2d65 3834 325f 3230 3130 3231 5f34     ine-48_20201124_
 23fffa8:	3631 3630 3831 3630 3933 732f 6372 6e2f     1606180639/src/n
 23fffb8:	7765 696c 2f62 656e 6c77 6269 6c2f 6269     ewlib/newlib/lib
 23fffc8:	2f63 7473 6c64 6269 722f 6e61 2e64 0063     c/stdlib/rand.c.

023fffd8 <link_const_data_end>:
 23fffd8:	023fd585 	.word	0x023fd585
 23fffdc:	023fdfc1 	.word	0x023fdfc1
 23fffe0:	023fe06d 	.word	0x023fe06d
 23fffe4:	023fe229 	.word	0x023fe229
 23fffe8:	023fe389 	.word	0x023fe389
 23fffec:	023fe431 	.word	0x023fe431
 23ffff0:	023fe451 	.word	0x023fe451
 23ffff4:	023fe475 	.word	0x023fe475
 23ffff8:	023fe6a1 	.word	0x023fe6a1
