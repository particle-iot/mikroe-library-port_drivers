
/Users/Erik-Home/Documents/GitHub/mikroe_port/mikroe_port/target/5.3.0/p2/mikroe_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fd000  085fd000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fd018  085fd018  0000d018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fd4e0  085fd088  0000d4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00002b10  023fd4e8  085fd090  0000d4e8  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         0000007c  1007adc0  085ffba0  0001adc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001ac  1007ae3c  1007ae3c  0002ae3c  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffc1c  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000398  085ffc20  085ffc20  0001fc20  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fc20  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00136e10  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00014bdc  00000000  00000000  00156e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003959f  00000000  00000000  0016b9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002a08  00000000  00000000  001a4f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000ac78  00000000  00000000  001a7993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002892c  00000000  00000000  001b260b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00045c16  00000000  00000000  001daf37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c9e6a  00000000  00000000  00220b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000774c  00000000  00000000  002ea9b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fd018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd018:	480e      	ldr	r0, [pc, #56]	; (85fd054 <module_user_pre_init+0x3c>)
 85fd01a:	490f      	ldr	r1, [pc, #60]	; (85fd058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fd01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fd01e:	4288      	cmp	r0, r1
 85fd020:	d005      	beq.n	85fd02e <module_user_pre_init+0x16>
 85fd022:	4a0e      	ldr	r2, [pc, #56]	; (85fd05c <module_user_pre_init+0x44>)
 85fd024:	4282      	cmp	r2, r0
 85fd026:	d002      	beq.n	85fd02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fd028:	4b0d      	ldr	r3, [pc, #52]	; (85fd060 <module_user_pre_init+0x48>)
 85fd02a:	1a12      	subs	r2, r2, r0
 85fd02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fd02e:	480d      	ldr	r0, [pc, #52]	; (85fd064 <module_user_pre_init+0x4c>)
 85fd030:	4a0d      	ldr	r2, [pc, #52]	; (85fd068 <module_user_pre_init+0x50>)
 85fd032:	2100      	movs	r1, #0
 85fd034:	4b0d      	ldr	r3, [pc, #52]	; (85fd06c <module_user_pre_init+0x54>)
 85fd036:	1a12      	subs	r2, r2, r0
 85fd038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fd03a:	480d      	ldr	r0, [pc, #52]	; (85fd070 <module_user_pre_init+0x58>)
 85fd03c:	490d      	ldr	r1, [pc, #52]	; (85fd074 <module_user_pre_init+0x5c>)
 85fd03e:	4288      	cmp	r0, r1
 85fd040:	d005      	beq.n	85fd04e <module_user_pre_init+0x36>
 85fd042:	4a0d      	ldr	r2, [pc, #52]	; (85fd078 <module_user_pre_init+0x60>)
 85fd044:	4282      	cmp	r2, r0
 85fd046:	d002      	beq.n	85fd04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fd048:	4b05      	ldr	r3, [pc, #20]	; (85fd060 <module_user_pre_init+0x48>)
 85fd04a:	1a12      	subs	r2, r2, r0
 85fd04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fd04e:	4801      	ldr	r0, [pc, #4]	; (85fd054 <module_user_pre_init+0x3c>)
 85fd050:	bd08      	pop	{r3, pc}
 85fd052:	bf00      	nop
 85fd054:	1007adc0 	.word	0x1007adc0
 85fd058:	085ffba0 	.word	0x085ffba0
 85fd05c:	1007ae3c 	.word	0x1007ae3c
 85fd060:	10110d2d 	.word	0x10110d2d
 85fd064:	1007ae3c 	.word	0x1007ae3c
 85fd068:	1007afe8 	.word	0x1007afe8
 85fd06c:	10110ea1 	.word	0x10110ea1
 85fd070:	023fd4e0 	.word	0x023fd4e0
 85fd074:	085fd088 	.word	0x085fd088
 85fd078:	023ffff8 	.word	0x023ffff8

085fd07c <dynalib_preinit>:
 85fd07c:	085fd019 00000000                       .._.....

Disassembly of section .psram_text:

023fd4e8 <__aeabi_drsub>:
 23fd4e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fd4ec:	e002      	b.n	23fd4f4 <__adddf3>
 23fd4ee:	bf00      	nop

023fd4f0 <__aeabi_dsub>:
 23fd4f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fd4f4 <__adddf3>:
 23fd4f4:	b530      	push	{r4, r5, lr}
 23fd4f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fd4fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fd4fe:	ea94 0f05 	teq	r4, r5
 23fd502:	bf08      	it	eq
 23fd504:	ea90 0f02 	teqeq	r0, r2
 23fd508:	bf1f      	itttt	ne
 23fd50a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fd50e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fd512:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fd516:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fd51a:	f000 80e2 	beq.w	23fd6e2 <__adddf3+0x1ee>
 23fd51e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fd522:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fd526:	bfb8      	it	lt
 23fd528:	426d      	neglt	r5, r5
 23fd52a:	dd0c      	ble.n	23fd546 <__adddf3+0x52>
 23fd52c:	442c      	add	r4, r5
 23fd52e:	ea80 0202 	eor.w	r2, r0, r2
 23fd532:	ea81 0303 	eor.w	r3, r1, r3
 23fd536:	ea82 0000 	eor.w	r0, r2, r0
 23fd53a:	ea83 0101 	eor.w	r1, r3, r1
 23fd53e:	ea80 0202 	eor.w	r2, r0, r2
 23fd542:	ea81 0303 	eor.w	r3, r1, r3
 23fd546:	2d36      	cmp	r5, #54	; 0x36
 23fd548:	bf88      	it	hi
 23fd54a:	bd30      	pophi	{r4, r5, pc}
 23fd54c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fd550:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fd554:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fd558:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fd55c:	d002      	beq.n	23fd564 <__adddf3+0x70>
 23fd55e:	4240      	negs	r0, r0
 23fd560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fd564:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fd568:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fd56c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fd570:	d002      	beq.n	23fd578 <__adddf3+0x84>
 23fd572:	4252      	negs	r2, r2
 23fd574:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fd578:	ea94 0f05 	teq	r4, r5
 23fd57c:	f000 80a7 	beq.w	23fd6ce <__adddf3+0x1da>
 23fd580:	f1a4 0401 	sub.w	r4, r4, #1
 23fd584:	f1d5 0e20 	rsbs	lr, r5, #32
 23fd588:	db0d      	blt.n	23fd5a6 <__adddf3+0xb2>
 23fd58a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fd58e:	fa22 f205 	lsr.w	r2, r2, r5
 23fd592:	1880      	adds	r0, r0, r2
 23fd594:	f141 0100 	adc.w	r1, r1, #0
 23fd598:	fa03 f20e 	lsl.w	r2, r3, lr
 23fd59c:	1880      	adds	r0, r0, r2
 23fd59e:	fa43 f305 	asr.w	r3, r3, r5
 23fd5a2:	4159      	adcs	r1, r3
 23fd5a4:	e00e      	b.n	23fd5c4 <__adddf3+0xd0>
 23fd5a6:	f1a5 0520 	sub.w	r5, r5, #32
 23fd5aa:	f10e 0e20 	add.w	lr, lr, #32
 23fd5ae:	2a01      	cmp	r2, #1
 23fd5b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fd5b4:	bf28      	it	cs
 23fd5b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fd5ba:	fa43 f305 	asr.w	r3, r3, r5
 23fd5be:	18c0      	adds	r0, r0, r3
 23fd5c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fd5c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fd5c8:	d507      	bpl.n	23fd5da <__adddf3+0xe6>
 23fd5ca:	f04f 0e00 	mov.w	lr, #0
 23fd5ce:	f1dc 0c00 	rsbs	ip, ip, #0
 23fd5d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fd5d6:	eb6e 0101 	sbc.w	r1, lr, r1
 23fd5da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fd5de:	d31b      	bcc.n	23fd618 <__adddf3+0x124>
 23fd5e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fd5e4:	d30c      	bcc.n	23fd600 <__adddf3+0x10c>
 23fd5e6:	0849      	lsrs	r1, r1, #1
 23fd5e8:	ea5f 0030 	movs.w	r0, r0, rrx
 23fd5ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fd5f0:	f104 0401 	add.w	r4, r4, #1
 23fd5f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fd5f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fd5fc:	f080 809a 	bcs.w	23fd734 <__adddf3+0x240>
 23fd600:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fd604:	bf08      	it	eq
 23fd606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fd60a:	f150 0000 	adcs.w	r0, r0, #0
 23fd60e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fd612:	ea41 0105 	orr.w	r1, r1, r5
 23fd616:	bd30      	pop	{r4, r5, pc}
 23fd618:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fd61c:	4140      	adcs	r0, r0
 23fd61e:	eb41 0101 	adc.w	r1, r1, r1
 23fd622:	3c01      	subs	r4, #1
 23fd624:	bf28      	it	cs
 23fd626:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fd62a:	d2e9      	bcs.n	23fd600 <__adddf3+0x10c>
 23fd62c:	f091 0f00 	teq	r1, #0
 23fd630:	bf04      	itt	eq
 23fd632:	4601      	moveq	r1, r0
 23fd634:	2000      	moveq	r0, #0
 23fd636:	fab1 f381 	clz	r3, r1
 23fd63a:	bf08      	it	eq
 23fd63c:	3320      	addeq	r3, #32
 23fd63e:	f1a3 030b 	sub.w	r3, r3, #11
 23fd642:	f1b3 0220 	subs.w	r2, r3, #32
 23fd646:	da0c      	bge.n	23fd662 <__adddf3+0x16e>
 23fd648:	320c      	adds	r2, #12
 23fd64a:	dd08      	ble.n	23fd65e <__adddf3+0x16a>
 23fd64c:	f102 0c14 	add.w	ip, r2, #20
 23fd650:	f1c2 020c 	rsb	r2, r2, #12
 23fd654:	fa01 f00c 	lsl.w	r0, r1, ip
 23fd658:	fa21 f102 	lsr.w	r1, r1, r2
 23fd65c:	e00c      	b.n	23fd678 <__adddf3+0x184>
 23fd65e:	f102 0214 	add.w	r2, r2, #20
 23fd662:	bfd8      	it	le
 23fd664:	f1c2 0c20 	rsble	ip, r2, #32
 23fd668:	fa01 f102 	lsl.w	r1, r1, r2
 23fd66c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fd670:	bfdc      	itt	le
 23fd672:	ea41 010c 	orrle.w	r1, r1, ip
 23fd676:	4090      	lslle	r0, r2
 23fd678:	1ae4      	subs	r4, r4, r3
 23fd67a:	bfa2      	ittt	ge
 23fd67c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fd680:	4329      	orrge	r1, r5
 23fd682:	bd30      	popge	{r4, r5, pc}
 23fd684:	ea6f 0404 	mvn.w	r4, r4
 23fd688:	3c1f      	subs	r4, #31
 23fd68a:	da1c      	bge.n	23fd6c6 <__adddf3+0x1d2>
 23fd68c:	340c      	adds	r4, #12
 23fd68e:	dc0e      	bgt.n	23fd6ae <__adddf3+0x1ba>
 23fd690:	f104 0414 	add.w	r4, r4, #20
 23fd694:	f1c4 0220 	rsb	r2, r4, #32
 23fd698:	fa20 f004 	lsr.w	r0, r0, r4
 23fd69c:	fa01 f302 	lsl.w	r3, r1, r2
 23fd6a0:	ea40 0003 	orr.w	r0, r0, r3
 23fd6a4:	fa21 f304 	lsr.w	r3, r1, r4
 23fd6a8:	ea45 0103 	orr.w	r1, r5, r3
 23fd6ac:	bd30      	pop	{r4, r5, pc}
 23fd6ae:	f1c4 040c 	rsb	r4, r4, #12
 23fd6b2:	f1c4 0220 	rsb	r2, r4, #32
 23fd6b6:	fa20 f002 	lsr.w	r0, r0, r2
 23fd6ba:	fa01 f304 	lsl.w	r3, r1, r4
 23fd6be:	ea40 0003 	orr.w	r0, r0, r3
 23fd6c2:	4629      	mov	r1, r5
 23fd6c4:	bd30      	pop	{r4, r5, pc}
 23fd6c6:	fa21 f004 	lsr.w	r0, r1, r4
 23fd6ca:	4629      	mov	r1, r5
 23fd6cc:	bd30      	pop	{r4, r5, pc}
 23fd6ce:	f094 0f00 	teq	r4, #0
 23fd6d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fd6d6:	bf06      	itte	eq
 23fd6d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fd6dc:	3401      	addeq	r4, #1
 23fd6de:	3d01      	subne	r5, #1
 23fd6e0:	e74e      	b.n	23fd580 <__adddf3+0x8c>
 23fd6e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fd6e6:	bf18      	it	ne
 23fd6e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fd6ec:	d029      	beq.n	23fd742 <__adddf3+0x24e>
 23fd6ee:	ea94 0f05 	teq	r4, r5
 23fd6f2:	bf08      	it	eq
 23fd6f4:	ea90 0f02 	teqeq	r0, r2
 23fd6f8:	d005      	beq.n	23fd706 <__adddf3+0x212>
 23fd6fa:	ea54 0c00 	orrs.w	ip, r4, r0
 23fd6fe:	bf04      	itt	eq
 23fd700:	4619      	moveq	r1, r3
 23fd702:	4610      	moveq	r0, r2
 23fd704:	bd30      	pop	{r4, r5, pc}
 23fd706:	ea91 0f03 	teq	r1, r3
 23fd70a:	bf1e      	ittt	ne
 23fd70c:	2100      	movne	r1, #0
 23fd70e:	2000      	movne	r0, #0
 23fd710:	bd30      	popne	{r4, r5, pc}
 23fd712:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fd716:	d105      	bne.n	23fd724 <__adddf3+0x230>
 23fd718:	0040      	lsls	r0, r0, #1
 23fd71a:	4149      	adcs	r1, r1
 23fd71c:	bf28      	it	cs
 23fd71e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fd722:	bd30      	pop	{r4, r5, pc}
 23fd724:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fd728:	bf3c      	itt	cc
 23fd72a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fd72e:	bd30      	popcc	{r4, r5, pc}
 23fd730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fd734:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fd738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fd73c:	f04f 0000 	mov.w	r0, #0
 23fd740:	bd30      	pop	{r4, r5, pc}
 23fd742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fd746:	bf1a      	itte	ne
 23fd748:	4619      	movne	r1, r3
 23fd74a:	4610      	movne	r0, r2
 23fd74c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fd750:	bf1c      	itt	ne
 23fd752:	460b      	movne	r3, r1
 23fd754:	4602      	movne	r2, r0
 23fd756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fd75a:	bf06      	itte	eq
 23fd75c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fd760:	ea91 0f03 	teqeq	r1, r3
 23fd764:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fd768:	bd30      	pop	{r4, r5, pc}
 23fd76a:	bf00      	nop

023fd76c <__aeabi_ui2d>:
 23fd76c:	f090 0f00 	teq	r0, #0
 23fd770:	bf04      	itt	eq
 23fd772:	2100      	moveq	r1, #0
 23fd774:	4770      	bxeq	lr
 23fd776:	b530      	push	{r4, r5, lr}
 23fd778:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fd77c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fd780:	f04f 0500 	mov.w	r5, #0
 23fd784:	f04f 0100 	mov.w	r1, #0
 23fd788:	e750      	b.n	23fd62c <__adddf3+0x138>
 23fd78a:	bf00      	nop

023fd78c <__aeabi_i2d>:
 23fd78c:	f090 0f00 	teq	r0, #0
 23fd790:	bf04      	itt	eq
 23fd792:	2100      	moveq	r1, #0
 23fd794:	4770      	bxeq	lr
 23fd796:	b530      	push	{r4, r5, lr}
 23fd798:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fd79c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fd7a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fd7a4:	bf48      	it	mi
 23fd7a6:	4240      	negmi	r0, r0
 23fd7a8:	f04f 0100 	mov.w	r1, #0
 23fd7ac:	e73e      	b.n	23fd62c <__adddf3+0x138>
 23fd7ae:	bf00      	nop

023fd7b0 <__aeabi_f2d>:
 23fd7b0:	0042      	lsls	r2, r0, #1
 23fd7b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fd7b6:	ea4f 0131 	mov.w	r1, r1, rrx
 23fd7ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fd7be:	bf1f      	itttt	ne
 23fd7c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fd7c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fd7c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fd7cc:	4770      	bxne	lr
 23fd7ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fd7d2:	bf08      	it	eq
 23fd7d4:	4770      	bxeq	lr
 23fd7d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fd7da:	bf04      	itt	eq
 23fd7dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fd7e0:	4770      	bxeq	lr
 23fd7e2:	b530      	push	{r4, r5, lr}
 23fd7e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fd7e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fd7ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fd7f0:	e71c      	b.n	23fd62c <__adddf3+0x138>
 23fd7f2:	bf00      	nop

023fd7f4 <__aeabi_ul2d>:
 23fd7f4:	ea50 0201 	orrs.w	r2, r0, r1
 23fd7f8:	bf08      	it	eq
 23fd7fa:	4770      	bxeq	lr
 23fd7fc:	b530      	push	{r4, r5, lr}
 23fd7fe:	f04f 0500 	mov.w	r5, #0
 23fd802:	e00a      	b.n	23fd81a <__aeabi_l2d+0x16>

023fd804 <__aeabi_l2d>:
 23fd804:	ea50 0201 	orrs.w	r2, r0, r1
 23fd808:	bf08      	it	eq
 23fd80a:	4770      	bxeq	lr
 23fd80c:	b530      	push	{r4, r5, lr}
 23fd80e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fd812:	d502      	bpl.n	23fd81a <__aeabi_l2d+0x16>
 23fd814:	4240      	negs	r0, r0
 23fd816:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fd81a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fd81e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fd822:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fd826:	f43f aed8 	beq.w	23fd5da <__adddf3+0xe6>
 23fd82a:	f04f 0203 	mov.w	r2, #3
 23fd82e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fd832:	bf18      	it	ne
 23fd834:	3203      	addne	r2, #3
 23fd836:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fd83a:	bf18      	it	ne
 23fd83c:	3203      	addne	r2, #3
 23fd83e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fd842:	f1c2 0320 	rsb	r3, r2, #32
 23fd846:	fa00 fc03 	lsl.w	ip, r0, r3
 23fd84a:	fa20 f002 	lsr.w	r0, r0, r2
 23fd84e:	fa01 fe03 	lsl.w	lr, r1, r3
 23fd852:	ea40 000e 	orr.w	r0, r0, lr
 23fd856:	fa21 f102 	lsr.w	r1, r1, r2
 23fd85a:	4414      	add	r4, r2
 23fd85c:	e6bd      	b.n	23fd5da <__adddf3+0xe6>
 23fd85e:	bf00      	nop

023fd860 <__aeabi_dmul>:
 23fd860:	b570      	push	{r4, r5, r6, lr}
 23fd862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fd866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fd86a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fd86e:	bf1d      	ittte	ne
 23fd870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fd874:	ea94 0f0c 	teqne	r4, ip
 23fd878:	ea95 0f0c 	teqne	r5, ip
 23fd87c:	f000 f8de 	bleq	23fda3c <__aeabi_dmul+0x1dc>
 23fd880:	442c      	add	r4, r5
 23fd882:	ea81 0603 	eor.w	r6, r1, r3
 23fd886:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fd88a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fd88e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fd892:	bf18      	it	ne
 23fd894:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fd898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd89c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fd8a0:	d038      	beq.n	23fd914 <__aeabi_dmul+0xb4>
 23fd8a2:	fba0 ce02 	umull	ip, lr, r0, r2
 23fd8a6:	f04f 0500 	mov.w	r5, #0
 23fd8aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fd8ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fd8b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fd8b6:	f04f 0600 	mov.w	r6, #0
 23fd8ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fd8be:	f09c 0f00 	teq	ip, #0
 23fd8c2:	bf18      	it	ne
 23fd8c4:	f04e 0e01 	orrne.w	lr, lr, #1
 23fd8c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fd8cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fd8d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fd8d4:	d204      	bcs.n	23fd8e0 <__aeabi_dmul+0x80>
 23fd8d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fd8da:	416d      	adcs	r5, r5
 23fd8dc:	eb46 0606 	adc.w	r6, r6, r6
 23fd8e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fd8e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fd8e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fd8ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fd8f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fd8f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fd8f8:	bf88      	it	hi
 23fd8fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fd8fe:	d81e      	bhi.n	23fd93e <__aeabi_dmul+0xde>
 23fd900:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fd904:	bf08      	it	eq
 23fd906:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fd90a:	f150 0000 	adcs.w	r0, r0, #0
 23fd90e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fd912:	bd70      	pop	{r4, r5, r6, pc}
 23fd914:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fd918:	ea46 0101 	orr.w	r1, r6, r1
 23fd91c:	ea40 0002 	orr.w	r0, r0, r2
 23fd920:	ea81 0103 	eor.w	r1, r1, r3
 23fd924:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fd928:	bfc2      	ittt	gt
 23fd92a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fd92e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fd932:	bd70      	popgt	{r4, r5, r6, pc}
 23fd934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd938:	f04f 0e00 	mov.w	lr, #0
 23fd93c:	3c01      	subs	r4, #1
 23fd93e:	f300 80ab 	bgt.w	23fda98 <__aeabi_dmul+0x238>
 23fd942:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fd946:	bfde      	ittt	le
 23fd948:	2000      	movle	r0, #0
 23fd94a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fd94e:	bd70      	pople	{r4, r5, r6, pc}
 23fd950:	f1c4 0400 	rsb	r4, r4, #0
 23fd954:	3c20      	subs	r4, #32
 23fd956:	da35      	bge.n	23fd9c4 <__aeabi_dmul+0x164>
 23fd958:	340c      	adds	r4, #12
 23fd95a:	dc1b      	bgt.n	23fd994 <__aeabi_dmul+0x134>
 23fd95c:	f104 0414 	add.w	r4, r4, #20
 23fd960:	f1c4 0520 	rsb	r5, r4, #32
 23fd964:	fa00 f305 	lsl.w	r3, r0, r5
 23fd968:	fa20 f004 	lsr.w	r0, r0, r4
 23fd96c:	fa01 f205 	lsl.w	r2, r1, r5
 23fd970:	ea40 0002 	orr.w	r0, r0, r2
 23fd974:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fd978:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fd97c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fd980:	fa21 f604 	lsr.w	r6, r1, r4
 23fd984:	eb42 0106 	adc.w	r1, r2, r6
 23fd988:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fd98c:	bf08      	it	eq
 23fd98e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fd992:	bd70      	pop	{r4, r5, r6, pc}
 23fd994:	f1c4 040c 	rsb	r4, r4, #12
 23fd998:	f1c4 0520 	rsb	r5, r4, #32
 23fd99c:	fa00 f304 	lsl.w	r3, r0, r4
 23fd9a0:	fa20 f005 	lsr.w	r0, r0, r5
 23fd9a4:	fa01 f204 	lsl.w	r2, r1, r4
 23fd9a8:	ea40 0002 	orr.w	r0, r0, r2
 23fd9ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd9b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fd9b4:	f141 0100 	adc.w	r1, r1, #0
 23fd9b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fd9bc:	bf08      	it	eq
 23fd9be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fd9c2:	bd70      	pop	{r4, r5, r6, pc}
 23fd9c4:	f1c4 0520 	rsb	r5, r4, #32
 23fd9c8:	fa00 f205 	lsl.w	r2, r0, r5
 23fd9cc:	ea4e 0e02 	orr.w	lr, lr, r2
 23fd9d0:	fa20 f304 	lsr.w	r3, r0, r4
 23fd9d4:	fa01 f205 	lsl.w	r2, r1, r5
 23fd9d8:	ea43 0302 	orr.w	r3, r3, r2
 23fd9dc:	fa21 f004 	lsr.w	r0, r1, r4
 23fd9e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd9e4:	fa21 f204 	lsr.w	r2, r1, r4
 23fd9e8:	ea20 0002 	bic.w	r0, r0, r2
 23fd9ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fd9f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fd9f4:	bf08      	it	eq
 23fd9f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fd9fa:	bd70      	pop	{r4, r5, r6, pc}
 23fd9fc:	f094 0f00 	teq	r4, #0
 23fda00:	d10f      	bne.n	23fda22 <__aeabi_dmul+0x1c2>
 23fda02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fda06:	0040      	lsls	r0, r0, #1
 23fda08:	eb41 0101 	adc.w	r1, r1, r1
 23fda0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fda10:	bf08      	it	eq
 23fda12:	3c01      	subeq	r4, #1
 23fda14:	d0f7      	beq.n	23fda06 <__aeabi_dmul+0x1a6>
 23fda16:	ea41 0106 	orr.w	r1, r1, r6
 23fda1a:	f095 0f00 	teq	r5, #0
 23fda1e:	bf18      	it	ne
 23fda20:	4770      	bxne	lr
 23fda22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fda26:	0052      	lsls	r2, r2, #1
 23fda28:	eb43 0303 	adc.w	r3, r3, r3
 23fda2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fda30:	bf08      	it	eq
 23fda32:	3d01      	subeq	r5, #1
 23fda34:	d0f7      	beq.n	23fda26 <__aeabi_dmul+0x1c6>
 23fda36:	ea43 0306 	orr.w	r3, r3, r6
 23fda3a:	4770      	bx	lr
 23fda3c:	ea94 0f0c 	teq	r4, ip
 23fda40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fda44:	bf18      	it	ne
 23fda46:	ea95 0f0c 	teqne	r5, ip
 23fda4a:	d00c      	beq.n	23fda66 <__aeabi_dmul+0x206>
 23fda4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fda50:	bf18      	it	ne
 23fda52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fda56:	d1d1      	bne.n	23fd9fc <__aeabi_dmul+0x19c>
 23fda58:	ea81 0103 	eor.w	r1, r1, r3
 23fda5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fda60:	f04f 0000 	mov.w	r0, #0
 23fda64:	bd70      	pop	{r4, r5, r6, pc}
 23fda66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fda6a:	bf06      	itte	eq
 23fda6c:	4610      	moveq	r0, r2
 23fda6e:	4619      	moveq	r1, r3
 23fda70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fda74:	d019      	beq.n	23fdaaa <__aeabi_dmul+0x24a>
 23fda76:	ea94 0f0c 	teq	r4, ip
 23fda7a:	d102      	bne.n	23fda82 <__aeabi_dmul+0x222>
 23fda7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fda80:	d113      	bne.n	23fdaaa <__aeabi_dmul+0x24a>
 23fda82:	ea95 0f0c 	teq	r5, ip
 23fda86:	d105      	bne.n	23fda94 <__aeabi_dmul+0x234>
 23fda88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fda8c:	bf1c      	itt	ne
 23fda8e:	4610      	movne	r0, r2
 23fda90:	4619      	movne	r1, r3
 23fda92:	d10a      	bne.n	23fdaaa <__aeabi_dmul+0x24a>
 23fda94:	ea81 0103 	eor.w	r1, r1, r3
 23fda98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fda9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fdaa0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fdaa4:	f04f 0000 	mov.w	r0, #0
 23fdaa8:	bd70      	pop	{r4, r5, r6, pc}
 23fdaaa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fdaae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fdab2:	bd70      	pop	{r4, r5, r6, pc}

023fdab4 <__aeabi_ddiv>:
 23fdab4:	b570      	push	{r4, r5, r6, lr}
 23fdab6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fdaba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fdabe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fdac2:	bf1d      	ittte	ne
 23fdac4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fdac8:	ea94 0f0c 	teqne	r4, ip
 23fdacc:	ea95 0f0c 	teqne	r5, ip
 23fdad0:	f000 f8a7 	bleq	23fdc22 <__aeabi_ddiv+0x16e>
 23fdad4:	eba4 0405 	sub.w	r4, r4, r5
 23fdad8:	ea81 0e03 	eor.w	lr, r1, r3
 23fdadc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fdae0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fdae4:	f000 8088 	beq.w	23fdbf8 <__aeabi_ddiv+0x144>
 23fdae8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fdaec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fdaf0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fdaf4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fdaf8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fdafc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fdb00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fdb04:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fdb08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fdb0c:	429d      	cmp	r5, r3
 23fdb0e:	bf08      	it	eq
 23fdb10:	4296      	cmpeq	r6, r2
 23fdb12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fdb16:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fdb1a:	d202      	bcs.n	23fdb22 <__aeabi_ddiv+0x6e>
 23fdb1c:	085b      	lsrs	r3, r3, #1
 23fdb1e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fdb22:	1ab6      	subs	r6, r6, r2
 23fdb24:	eb65 0503 	sbc.w	r5, r5, r3
 23fdb28:	085b      	lsrs	r3, r3, #1
 23fdb2a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fdb2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fdb32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fdb36:	ebb6 0e02 	subs.w	lr, r6, r2
 23fdb3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fdb3e:	bf22      	ittt	cs
 23fdb40:	1ab6      	subcs	r6, r6, r2
 23fdb42:	4675      	movcs	r5, lr
 23fdb44:	ea40 000c 	orrcs.w	r0, r0, ip
 23fdb48:	085b      	lsrs	r3, r3, #1
 23fdb4a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fdb4e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fdb52:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fdb56:	bf22      	ittt	cs
 23fdb58:	1ab6      	subcs	r6, r6, r2
 23fdb5a:	4675      	movcs	r5, lr
 23fdb5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fdb60:	085b      	lsrs	r3, r3, #1
 23fdb62:	ea4f 0232 	mov.w	r2, r2, rrx
 23fdb66:	ebb6 0e02 	subs.w	lr, r6, r2
 23fdb6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fdb6e:	bf22      	ittt	cs
 23fdb70:	1ab6      	subcs	r6, r6, r2
 23fdb72:	4675      	movcs	r5, lr
 23fdb74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fdb78:	085b      	lsrs	r3, r3, #1
 23fdb7a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fdb7e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fdb82:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fdb86:	bf22      	ittt	cs
 23fdb88:	1ab6      	subcs	r6, r6, r2
 23fdb8a:	4675      	movcs	r5, lr
 23fdb8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fdb90:	ea55 0e06 	orrs.w	lr, r5, r6
 23fdb94:	d018      	beq.n	23fdbc8 <__aeabi_ddiv+0x114>
 23fdb96:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fdb9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fdb9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fdba2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fdba6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fdbaa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fdbae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fdbb2:	d1c0      	bne.n	23fdb36 <__aeabi_ddiv+0x82>
 23fdbb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fdbb8:	d10b      	bne.n	23fdbd2 <__aeabi_ddiv+0x11e>
 23fdbba:	ea41 0100 	orr.w	r1, r1, r0
 23fdbbe:	f04f 0000 	mov.w	r0, #0
 23fdbc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fdbc6:	e7b6      	b.n	23fdb36 <__aeabi_ddiv+0x82>
 23fdbc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fdbcc:	bf04      	itt	eq
 23fdbce:	4301      	orreq	r1, r0
 23fdbd0:	2000      	moveq	r0, #0
 23fdbd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fdbd6:	bf88      	it	hi
 23fdbd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fdbdc:	f63f aeaf 	bhi.w	23fd93e <__aeabi_dmul+0xde>
 23fdbe0:	ebb5 0c03 	subs.w	ip, r5, r3
 23fdbe4:	bf04      	itt	eq
 23fdbe6:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fdbea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fdbee:	f150 0000 	adcs.w	r0, r0, #0
 23fdbf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fdbf6:	bd70      	pop	{r4, r5, r6, pc}
 23fdbf8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fdbfc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fdc00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fdc04:	bfc2      	ittt	gt
 23fdc06:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fdc0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fdc0e:	bd70      	popgt	{r4, r5, r6, pc}
 23fdc10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fdc14:	f04f 0e00 	mov.w	lr, #0
 23fdc18:	3c01      	subs	r4, #1
 23fdc1a:	e690      	b.n	23fd93e <__aeabi_dmul+0xde>
 23fdc1c:	ea45 0e06 	orr.w	lr, r5, r6
 23fdc20:	e68d      	b.n	23fd93e <__aeabi_dmul+0xde>
 23fdc22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fdc26:	ea94 0f0c 	teq	r4, ip
 23fdc2a:	bf08      	it	eq
 23fdc2c:	ea95 0f0c 	teqeq	r5, ip
 23fdc30:	f43f af3b 	beq.w	23fdaaa <__aeabi_dmul+0x24a>
 23fdc34:	ea94 0f0c 	teq	r4, ip
 23fdc38:	d10a      	bne.n	23fdc50 <__aeabi_ddiv+0x19c>
 23fdc3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fdc3e:	f47f af34 	bne.w	23fdaaa <__aeabi_dmul+0x24a>
 23fdc42:	ea95 0f0c 	teq	r5, ip
 23fdc46:	f47f af25 	bne.w	23fda94 <__aeabi_dmul+0x234>
 23fdc4a:	4610      	mov	r0, r2
 23fdc4c:	4619      	mov	r1, r3
 23fdc4e:	e72c      	b.n	23fdaaa <__aeabi_dmul+0x24a>
 23fdc50:	ea95 0f0c 	teq	r5, ip
 23fdc54:	d106      	bne.n	23fdc64 <__aeabi_ddiv+0x1b0>
 23fdc56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fdc5a:	f43f aefd 	beq.w	23fda58 <__aeabi_dmul+0x1f8>
 23fdc5e:	4610      	mov	r0, r2
 23fdc60:	4619      	mov	r1, r3
 23fdc62:	e722      	b.n	23fdaaa <__aeabi_dmul+0x24a>
 23fdc64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fdc68:	bf18      	it	ne
 23fdc6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fdc6e:	f47f aec5 	bne.w	23fd9fc <__aeabi_dmul+0x19c>
 23fdc72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fdc76:	f47f af0d 	bne.w	23fda94 <__aeabi_dmul+0x234>
 23fdc7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fdc7e:	f47f aeeb 	bne.w	23fda58 <__aeabi_dmul+0x1f8>
 23fdc82:	e712      	b.n	23fdaaa <__aeabi_dmul+0x24a>

023fdc84 <__gedf2>:
 23fdc84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fdc88:	e006      	b.n	23fdc98 <__cmpdf2+0x4>
 23fdc8a:	bf00      	nop

023fdc8c <__ledf2>:
 23fdc8c:	f04f 0c01 	mov.w	ip, #1
 23fdc90:	e002      	b.n	23fdc98 <__cmpdf2+0x4>
 23fdc92:	bf00      	nop

023fdc94 <__cmpdf2>:
 23fdc94:	f04f 0c01 	mov.w	ip, #1
 23fdc98:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fdc9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fdca0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fdca4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fdca8:	bf18      	it	ne
 23fdcaa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fdcae:	d01b      	beq.n	23fdce8 <__cmpdf2+0x54>
 23fdcb0:	b001      	add	sp, #4
 23fdcb2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fdcb6:	bf0c      	ite	eq
 23fdcb8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fdcbc:	ea91 0f03 	teqne	r1, r3
 23fdcc0:	bf02      	ittt	eq
 23fdcc2:	ea90 0f02 	teqeq	r0, r2
 23fdcc6:	2000      	moveq	r0, #0
 23fdcc8:	4770      	bxeq	lr
 23fdcca:	f110 0f00 	cmn.w	r0, #0
 23fdcce:	ea91 0f03 	teq	r1, r3
 23fdcd2:	bf58      	it	pl
 23fdcd4:	4299      	cmppl	r1, r3
 23fdcd6:	bf08      	it	eq
 23fdcd8:	4290      	cmpeq	r0, r2
 23fdcda:	bf2c      	ite	cs
 23fdcdc:	17d8      	asrcs	r0, r3, #31
 23fdcde:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fdce2:	f040 0001 	orr.w	r0, r0, #1
 23fdce6:	4770      	bx	lr
 23fdce8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fdcec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fdcf0:	d102      	bne.n	23fdcf8 <__cmpdf2+0x64>
 23fdcf2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fdcf6:	d107      	bne.n	23fdd08 <__cmpdf2+0x74>
 23fdcf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fdcfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fdd00:	d1d6      	bne.n	23fdcb0 <__cmpdf2+0x1c>
 23fdd02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fdd06:	d0d3      	beq.n	23fdcb0 <__cmpdf2+0x1c>
 23fdd08:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fdd0c:	4770      	bx	lr
 23fdd0e:	bf00      	nop

023fdd10 <__aeabi_cdrcmple>:
 23fdd10:	4684      	mov	ip, r0
 23fdd12:	4610      	mov	r0, r2
 23fdd14:	4662      	mov	r2, ip
 23fdd16:	468c      	mov	ip, r1
 23fdd18:	4619      	mov	r1, r3
 23fdd1a:	4663      	mov	r3, ip
 23fdd1c:	e000      	b.n	23fdd20 <__aeabi_cdcmpeq>
 23fdd1e:	bf00      	nop

023fdd20 <__aeabi_cdcmpeq>:
 23fdd20:	b501      	push	{r0, lr}
 23fdd22:	f7ff ffb7 	bl	23fdc94 <__cmpdf2>
 23fdd26:	2800      	cmp	r0, #0
 23fdd28:	bf48      	it	mi
 23fdd2a:	f110 0f00 	cmnmi.w	r0, #0
 23fdd2e:	bd01      	pop	{r0, pc}

023fdd30 <__aeabi_dcmpeq>:
 23fdd30:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fdd34:	f7ff fff4 	bl	23fdd20 <__aeabi_cdcmpeq>
 23fdd38:	bf0c      	ite	eq
 23fdd3a:	2001      	moveq	r0, #1
 23fdd3c:	2000      	movne	r0, #0
 23fdd3e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fdd42:	bf00      	nop

023fdd44 <__aeabi_dcmplt>:
 23fdd44:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fdd48:	f7ff ffea 	bl	23fdd20 <__aeabi_cdcmpeq>
 23fdd4c:	bf34      	ite	cc
 23fdd4e:	2001      	movcc	r0, #1
 23fdd50:	2000      	movcs	r0, #0
 23fdd52:	f85d fb08 	ldr.w	pc, [sp], #8
 23fdd56:	bf00      	nop

023fdd58 <__aeabi_dcmple>:
 23fdd58:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fdd5c:	f7ff ffe0 	bl	23fdd20 <__aeabi_cdcmpeq>
 23fdd60:	bf94      	ite	ls
 23fdd62:	2001      	movls	r0, #1
 23fdd64:	2000      	movhi	r0, #0
 23fdd66:	f85d fb08 	ldr.w	pc, [sp], #8
 23fdd6a:	bf00      	nop

023fdd6c <__aeabi_dcmpge>:
 23fdd6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fdd70:	f7ff ffce 	bl	23fdd10 <__aeabi_cdrcmple>
 23fdd74:	bf94      	ite	ls
 23fdd76:	2001      	movls	r0, #1
 23fdd78:	2000      	movhi	r0, #0
 23fdd7a:	f85d fb08 	ldr.w	pc, [sp], #8
 23fdd7e:	bf00      	nop

023fdd80 <__aeabi_dcmpgt>:
 23fdd80:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fdd84:	f7ff ffc4 	bl	23fdd10 <__aeabi_cdrcmple>
 23fdd88:	bf34      	ite	cc
 23fdd8a:	2001      	movcc	r0, #1
 23fdd8c:	2000      	movcs	r0, #0
 23fdd8e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fdd92:	bf00      	nop

023fdd94 <__aeabi_dcmpun>:
 23fdd94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fdd98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fdd9c:	d102      	bne.n	23fdda4 <__aeabi_dcmpun+0x10>
 23fdd9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fdda2:	d10a      	bne.n	23fddba <__aeabi_dcmpun+0x26>
 23fdda4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fdda8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fddac:	d102      	bne.n	23fddb4 <__aeabi_dcmpun+0x20>
 23fddae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fddb2:	d102      	bne.n	23fddba <__aeabi_dcmpun+0x26>
 23fddb4:	f04f 0000 	mov.w	r0, #0
 23fddb8:	4770      	bx	lr
 23fddba:	f04f 0001 	mov.w	r0, #1
 23fddbe:	4770      	bx	lr

023fddc0 <__aeabi_d2iz>:
 23fddc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fddc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fddc8:	d215      	bcs.n	23fddf6 <__aeabi_d2iz+0x36>
 23fddca:	d511      	bpl.n	23fddf0 <__aeabi_d2iz+0x30>
 23fddcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fddd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fddd4:	d912      	bls.n	23fddfc <__aeabi_d2iz+0x3c>
 23fddd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fddda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fddde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fdde2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fdde6:	fa23 f002 	lsr.w	r0, r3, r2
 23fddea:	bf18      	it	ne
 23fddec:	4240      	negne	r0, r0
 23fddee:	4770      	bx	lr
 23fddf0:	f04f 0000 	mov.w	r0, #0
 23fddf4:	4770      	bx	lr
 23fddf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fddfa:	d105      	bne.n	23fde08 <__aeabi_d2iz+0x48>
 23fddfc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23fde00:	bf08      	it	eq
 23fde02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23fde06:	4770      	bx	lr
 23fde08:	f04f 0000 	mov.w	r0, #0
 23fde0c:	4770      	bx	lr
 23fde0e:	bf00      	nop

023fde10 <__aeabi_d2uiz>:
 23fde10:	004a      	lsls	r2, r1, #1
 23fde12:	d211      	bcs.n	23fde38 <__aeabi_d2uiz+0x28>
 23fde14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fde18:	d211      	bcs.n	23fde3e <__aeabi_d2uiz+0x2e>
 23fde1a:	d50d      	bpl.n	23fde38 <__aeabi_d2uiz+0x28>
 23fde1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fde20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fde24:	d40e      	bmi.n	23fde44 <__aeabi_d2uiz+0x34>
 23fde26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fde2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fde2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fde32:	fa23 f002 	lsr.w	r0, r3, r2
 23fde36:	4770      	bx	lr
 23fde38:	f04f 0000 	mov.w	r0, #0
 23fde3c:	4770      	bx	lr
 23fde3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fde42:	d102      	bne.n	23fde4a <__aeabi_d2uiz+0x3a>
 23fde44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fde48:	4770      	bx	lr
 23fde4a:	f04f 0000 	mov.w	r0, #0
 23fde4e:	4770      	bx	lr

023fde50 <__aeabi_d2f>:
 23fde50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fde54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fde58:	bf24      	itt	cs
 23fde5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fde5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fde62:	d90d      	bls.n	23fde80 <__aeabi_d2f+0x30>
 23fde64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fde68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fde6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fde70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fde74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fde78:	bf08      	it	eq
 23fde7a:	f020 0001 	biceq.w	r0, r0, #1
 23fde7e:	4770      	bx	lr
 23fde80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fde84:	d121      	bne.n	23fdeca <__aeabi_d2f+0x7a>
 23fde86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fde8a:	bfbc      	itt	lt
 23fde8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fde90:	4770      	bxlt	lr
 23fde92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fde96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fde9a:	f1c2 0218 	rsb	r2, r2, #24
 23fde9e:	f1c2 0c20 	rsb	ip, r2, #32
 23fdea2:	fa10 f30c 	lsls.w	r3, r0, ip
 23fdea6:	fa20 f002 	lsr.w	r0, r0, r2
 23fdeaa:	bf18      	it	ne
 23fdeac:	f040 0001 	orrne.w	r0, r0, #1
 23fdeb0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fdeb4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fdeb8:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fdebc:	ea40 000c 	orr.w	r0, r0, ip
 23fdec0:	fa23 f302 	lsr.w	r3, r3, r2
 23fdec4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fdec8:	e7cc      	b.n	23fde64 <__aeabi_d2f+0x14>
 23fdeca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fdece:	d107      	bne.n	23fdee0 <__aeabi_d2f+0x90>
 23fded0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fded4:	bf1e      	ittt	ne
 23fded6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fdeda:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fdede:	4770      	bxne	lr
 23fdee0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fdee4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fdee8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fdeec:	4770      	bx	lr
 23fdeee:	bf00      	nop

023fdef0 <strlen>:
 23fdef0:	4603      	mov	r3, r0
 23fdef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fdef6:	2a00      	cmp	r2, #0
 23fdef8:	d1fb      	bne.n	23fdef2 <strlen+0x2>
 23fdefa:	1a18      	subs	r0, r3, r0
 23fdefc:	3801      	subs	r0, #1
 23fdefe:	4770      	bx	lr

023fdf00 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fdf00:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fdf02:	f001 fcff 	bl	23ff904 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fdf06:	2500      	movs	r5, #0
 23fdf08:	4e05      	ldr	r6, [pc, #20]	; (23fdf20 <module_user_init+0x20>)
 23fdf0a:	4c06      	ldr	r4, [pc, #24]	; (23fdf24 <module_user_init+0x24>)
 23fdf0c:	1ba4      	subs	r4, r4, r6
 23fdf0e:	08a4      	lsrs	r4, r4, #2
 23fdf10:	42ac      	cmp	r4, r5
 23fdf12:	d100      	bne.n	23fdf16 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fdf14:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fdf16:	f856 3b04 	ldr.w	r3, [r6], #4
 23fdf1a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fdf1c:	3501      	adds	r5, #1
 23fdf1e:	e7f7      	b.n	23fdf10 <module_user_init+0x10>
 23fdf20:	023fffd4 	.word	0x023fffd4
 23fdf24:	023ffff8 	.word	0x023ffff8

023fdf28 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fdf28:	f000 b814 	b.w	23fdf54 <setup>

023fdf2c <module_user_loop>:
}

void module_user_loop() {
 23fdf2c:	b508      	push	{r3, lr}
    loop();
 23fdf2e:	f000 f8d7 	bl	23fe0e0 <loop>
    _post_loop();
}
 23fdf32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fdf36:	f001 bc9d 	b.w	23ff874 <_post_loop>

023fdf3a <_Znaj>:
 23fdf3a:	f000 bf43 	b.w	23fedc4 <malloc>

023fdf3e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fdf3e:	f000 bf4f 	b.w	23fede0 <free>

023fdf42 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fdf42:	7800      	ldrb	r0, [r0, #0]
 23fdf44:	fab0 f080 	clz	r0, r0
 23fdf48:	0940      	lsrs	r0, r0, #5
 23fdf4a:	4770      	bx	lr

023fdf4c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fdf4c:	2301      	movs	r3, #1
 23fdf4e:	7003      	strb	r3, [r0, #0]
 23fdf50:	4770      	bx	lr
	...

023fdf54 <setup>:
//from eeprom7 main.c
static eeprom7_t eeprom7;

// setup() runs once, when the device is first turned on.
void setup() 
{
 23fdf54:	b510      	push	{r4, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 23fdf56:	2400      	movs	r4, #0
 23fdf58:	b088      	sub	sp, #32

  Serial.begin(9600);
 23fdf5a:	f001 fbfb 	bl	23ff754 <_Z16_fetch_usbserialv>
 23fdf5e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fdf62:	f001 fbeb 	bl	23ff73c <_ZN9USBSerial5beginEl>
  Particle.disconnect();
 23fdf66:	a804      	add	r0, sp, #16
 23fdf68:	e9cd 4404 	strd	r4, r4, [sp, #16]
        bool clearSession) :
 23fdf6c:	f8ad 4018 	strh.w	r4, [sp, #24]
 23fdf70:	f000 ff6c 	bl	23fee4c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 23fdf74:	4812      	ldr	r0, [pc, #72]	; (23fdfc0 <setup+0x6c>)
 23fdf76:	4622      	mov	r2, r4
 23fdf78:	4623      	mov	r3, r4
 23fdf7a:	4621      	mov	r1, r4
 23fdf7c:	6840      	ldr	r0, [r0, #4]
 23fdf7e:	f000 febf 	bl	23fed00 <network_off>
  WiFi.off();

//from ac current
  accurrent_cfg_t cfg;
  accurrent_cfg_setup( &cfg ); 
 23fdf82:	4668      	mov	r0, sp
 23fdf84:	f000 f8d0 	bl	23fe128 <accurrent_cfg_setup>
  ACCURRENT_MAP_MIKROBUS( cfg, MIKROBUS_1 );
 23fdf88:	4b0e      	ldr	r3, [pc, #56]	; (23fdfc4 <setup+0x70>)
  accurrent_init( &accurrent, &cfg );
 23fdf8a:	4669      	mov	r1, sp
  ACCURRENT_MAP_MIKROBUS( cfg, MIKROBUS_1 );
 23fdf8c:	9300      	str	r3, [sp, #0]
 23fdf8e:	230b      	movs	r3, #11
  accurrent_init( &accurrent, &cfg );
 23fdf90:	480d      	ldr	r0, [pc, #52]	; (23fdfc8 <setup+0x74>)
  ACCURRENT_MAP_MIKROBUS( cfg, MIKROBUS_1 );
 23fdf92:	f88d 3004 	strb.w	r3, [sp, #4]
  accurrent_init( &accurrent, &cfg );
 23fdf96:	f000 f8d3 	bl	23fe140 <accurrent_init>

//from eeprom7
  eeprom7_cfg_t eeprom7_cfg;  //Click config object
  eeprom7_cfg_setup( &eeprom7_cfg );
 23fdf9a:	a804      	add	r0, sp, #16
 23fdf9c:	f000 f950 	bl	23fe240 <_Z17eeprom7_cfg_setupP13eeprom7_cfg_t>
  EEPROM7_MAP_MIKROBUS( eeprom7_cfg, MIKROBUS_2 );
 23fdfa0:	4b0a      	ldr	r3, [pc, #40]	; (23fdfcc <setup+0x78>)
  eeprom7_init( &eeprom7, &eeprom7_cfg );
 23fdfa2:	4c0b      	ldr	r4, [pc, #44]	; (23fdfd0 <setup+0x7c>)
  EEPROM7_MAP_MIKROBUS( eeprom7_cfg, MIKROBUS_2 );
 23fdfa4:	9304      	str	r3, [sp, #16]
 23fdfa6:	f640 2307 	movw	r3, #2567	; 0xa07
  eeprom7_init( &eeprom7, &eeprom7_cfg );
 23fdfaa:	a904      	add	r1, sp, #16
 23fdfac:	4620      	mov	r0, r4
  EEPROM7_MAP_MIKROBUS( eeprom7_cfg, MIKROBUS_2 );
 23fdfae:	f8ad 3014 	strh.w	r3, [sp, #20]
  eeprom7_init( &eeprom7, &eeprom7_cfg );
 23fdfb2:	f000 f951 	bl	23fe258 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t>
  eeprom7_default_cfg ( &eeprom7 );
 23fdfb6:	4620      	mov	r0, r4
 23fdfb8:	f000 fa17 	bl	23fe3ea <_Z19eeprom7_default_cfgP9eeprom7_t>

}
 23fdfbc:	b008      	add	sp, #32
 23fdfbe:	bd10      	pop	{r4, pc}
 23fdfc0:	1007aee0 	.word	0x1007aee0
 23fdfc4:	12110f10 	.word	0x12110f10
 23fdfc8:	1007ae5c 	.word	0x1007ae5c
 23fdfcc:	05110f10 	.word	0x05110f10
 23fdfd0:	1007ae48 	.word	0x1007ae48

023fdfd4 <_Z14ACcurrent_mainv>:


}

void ACcurrent_main()
{
 23fdfd4:	b507      	push	{r0, r1, r2, lr}
  float ac_current;
  ac_current = accurrent_get_ma( &accurrent );
 23fdfd6:	480c      	ldr	r0, [pc, #48]	; (23fe008 <_Z14ACcurrent_mainv+0x34>)
 23fdfd8:	f000 f8f0 	bl	23fe1bc <accurrent_get_ma>
 23fdfdc:	ed8d 0a01 	vstr	s0, [sp, #4]
  Serial.print("value: ");
 23fdfe0:	f001 fbb8 	bl	23ff754 <_Z16_fetch_usbserialv>
 23fdfe4:	4909      	ldr	r1, [pc, #36]	; (23fe00c <_Z14ACcurrent_mainv+0x38>)
 23fdfe6:	f001 f92d 	bl	23ff244 <_ZN5Print5printEPKc>
	Serial.print(ac_current, DEC); 
 23fdfea:	f001 fbb3 	bl	23ff754 <_Z16_fetch_usbserialv>
 23fdfee:	210a      	movs	r1, #10
 23fdff0:	ed9d 0a01 	vldr	s0, [sp, #4]
 23fdff4:	f001 fa2a 	bl	23ff44c <_ZN5Print5printEfi>
	Serial.println("");
 23fdff8:	f001 fbac 	bl	23ff754 <_Z16_fetch_usbserialv>
 23fdffc:	4904      	ldr	r1, [pc, #16]	; (23fe010 <_Z14ACcurrent_mainv+0x3c>)
}
 23fdffe:	b003      	add	sp, #12
 23fe000:	f85d eb04 	ldr.w	lr, [sp], #4
	Serial.println("");
 23fe004:	f001 b931 	b.w	23ff26a <_ZN5Print7printlnEPKc>
 23fe008:	1007ae5c 	.word	0x1007ae5c
 23fe00c:	023ffdb0 	.word	0x023ffdb0
 23fe010:	023ffdd6 	.word	0x023ffdd6

023fe014 <_Z12eeprom7_mainv>:

void eeprom7_main()
{
 23fe014:	b570      	push	{r4, r5, r6, lr}
  static uint8_t demo_data[ 9 ] = { 'm', 'i', 'k', 'r', 'o', 'E', 13 ,10 , 0 };
  static uint8_t read_data[ 9 ];
  static uint8_t check_status;
  
  //wren 
  eeprom7_send_cmd( &eeprom7, EEPROM7_OPCODE_STATUS_WREN );
 23fe016:	2106      	movs	r1, #6
 23fe018:	482b      	ldr	r0, [pc, #172]	; (23fe0c8 <_Z12eeprom7_mainv+0xb4>)
 23fe01a:	f000 f9c6 	bl	23fe3aa <_Z16eeprom7_send_cmdP9eeprom7_th>
  delay(100);
 23fe01e:	2064      	movs	r0, #100	; 0x64
 23fe020:	f000 ff08 	bl	23fee34 <delay>
  
  //write data
  eeprom7_write_memory( &eeprom7, 0x00001234, &demo_data[ 0 ], 9 );
 23fe024:	2309      	movs	r3, #9
 23fe026:	f241 2134 	movw	r1, #4660	; 0x1234
 23fe02a:	4a28      	ldr	r2, [pc, #160]	; (23fe0cc <_Z12eeprom7_mainv+0xb8>)
 23fe02c:	4826      	ldr	r0, [pc, #152]	; (23fe0c8 <_Z12eeprom7_mainv+0xb4>)
 23fe02e:	f000 f9ef 	bl	23fe410 <_Z20eeprom7_write_memoryP9eeprom7_tmPhh>
  delay(100);
 23fe032:	2064      	movs	r0, #100	; 0x64
 23fe034:	f000 fefe 	bl	23fee34 <delay>

  //serial print data
  Serial.print(" > Write data: ");
 23fe038:	f001 fb8c 	bl	23ff754 <_Z16_fetch_usbserialv>
 23fe03c:	4924      	ldr	r1, [pc, #144]	; (23fe0d0 <_Z12eeprom7_mainv+0xbc>)
 23fe03e:	f001 f901 	bl	23ff244 <_ZN5Print5printEPKc>
 23fe042:	2409      	movs	r4, #9
 23fe044:	4d21      	ldr	r5, [pc, #132]	; (23fe0cc <_Z12eeprom7_mainv+0xb8>)
  for (uint8_t ii = 0; ii < 9; ii++)
  {
    Serial.print(demo_data[ii], HEX); 
 23fe046:	f001 fb85 	bl	23ff754 <_Z16_fetch_usbserialv>
  for (uint8_t ii = 0; ii < 9; ii++)
 23fe04a:	3c01      	subs	r4, #1
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fe04c:	2210      	movs	r2, #16
 23fe04e:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe052:	f001 f914 	bl	23ff27e <_ZN5Print11printNumberEmh>
 23fe056:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 23fe05a:	d1f4      	bne.n	23fe046 <_Z12eeprom7_mainv+0x32>
  }
	Serial.println("");
 23fe05c:	f001 fb7a 	bl	23ff754 <_Z16_fetch_usbserialv>
 23fe060:	491c      	ldr	r1, [pc, #112]	; (23fe0d4 <_Z12eeprom7_mainv+0xc0>)
 23fe062:	f001 f902 	bl	23ff26a <_ZN5Print7printlnEPKc>

  //polling routine
  while ( eeprom7_is_device_ready( &eeprom7 ) == EEPROM7_DEVICE_IS_READY ) {
 23fe066:	4e18      	ldr	r6, [pc, #96]	; (23fe0c8 <_Z12eeprom7_mainv+0xb4>)
 23fe068:	4817      	ldr	r0, [pc, #92]	; (23fe0c8 <_Z12eeprom7_mainv+0xb4>)
 23fe06a:	f000 f998 	bl	23fe39e <_Z23eeprom7_is_device_readyP9eeprom7_t>
 23fe06e:	2801      	cmp	r0, #1
 23fe070:	4605      	mov	r5, r0
 23fe072:	d107      	bne.n	23fe084 <_Z12eeprom7_mainv+0x70>
      check_status = eeprom7_send_cmd( &eeprom7, EEPROM7_OPCODE_STATUS_WRBP );
 23fe074:	2108      	movs	r1, #8
 23fe076:	4630      	mov	r0, r6
 23fe078:	f000 f997 	bl	23fe3aa <_Z16eeprom7_send_cmdP9eeprom7_th>
      delay(1);
 23fe07c:	4628      	mov	r0, r5
 23fe07e:	f000 fed9 	bl	23fee34 <delay>
  while ( eeprom7_is_device_ready( &eeprom7 ) == EEPROM7_DEVICE_IS_READY ) {
 23fe082:	e7f1      	b.n	23fe068 <_Z12eeprom7_mainv+0x54>
  }

  //read data 
  eeprom7_read_memory( &eeprom7, 0x00001234, &read_data[ 0 ], 9 );
 23fe084:	2309      	movs	r3, #9
 23fe086:	f241 2134 	movw	r1, #4660	; 0x1234
 23fe08a:	4a13      	ldr	r2, [pc, #76]	; (23fe0d8 <_Z12eeprom7_mainv+0xc4>)
 23fe08c:	480e      	ldr	r0, [pc, #56]	; (23fe0c8 <_Z12eeprom7_mainv+0xb4>)
 23fe08e:	f000 f9da 	bl	23fe446 <_Z19eeprom7_read_memoryP9eeprom7_tmPhh>
  delay(100);
 23fe092:	2064      	movs	r0, #100	; 0x64
 23fe094:	f000 fece 	bl	23fee34 <delay>

  //serial print data
  Serial.print(" > Read data: ");
 23fe098:	f001 fb5c 	bl	23ff754 <_Z16_fetch_usbserialv>
 23fe09c:	490f      	ldr	r1, [pc, #60]	; (23fe0dc <_Z12eeprom7_mainv+0xc8>)
 23fe09e:	f001 f8d1 	bl	23ff244 <_ZN5Print5printEPKc>
  for (uint8_t ii = 0; ii < 9; ii++)
 23fe0a2:	4d0d      	ldr	r5, [pc, #52]	; (23fe0d8 <_Z12eeprom7_mainv+0xc4>)
 23fe0a4:	3401      	adds	r4, #1
  {
    Serial.print(read_data[ii], HEX); 
 23fe0a6:	f001 fb55 	bl	23ff754 <_Z16_fetch_usbserialv>
  for (uint8_t ii = 0; ii < 9; ii++)
 23fe0aa:	b2e4      	uxtb	r4, r4
 23fe0ac:	2210      	movs	r2, #16
 23fe0ae:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fe0b2:	f001 f8e4 	bl	23ff27e <_ZN5Print11printNumberEmh>
 23fe0b6:	2c09      	cmp	r4, #9
 23fe0b8:	d1f4      	bne.n	23fe0a4 <_Z12eeprom7_mainv+0x90>
  }
	Serial.println("");
 23fe0ba:	f001 fb4b 	bl	23ff754 <_Z16_fetch_usbserialv>

}
 23fe0be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Serial.println("");
 23fe0c2:	4904      	ldr	r1, [pc, #16]	; (23fe0d4 <_Z12eeprom7_mainv+0xc0>)
 23fe0c4:	f001 b8d1 	b.w	23ff26a <_ZN5Print7printlnEPKc>
 23fe0c8:	1007ae48 	.word	0x1007ae48
 23fe0cc:	1007adc4 	.word	0x1007adc4
 23fe0d0:	023ffdb8 	.word	0x023ffdb8
 23fe0d4:	023ffdd6 	.word	0x023ffdd6
 23fe0d8:	1007ae70 	.word	0x1007ae70
 23fe0dc:	023ffdc8 	.word	0x023ffdc8

023fe0e0 <loop>:
void loop() {
 23fe0e0:	b508      	push	{r3, lr}
  ACcurrent_main();
 23fe0e2:	f7ff ff77 	bl	23fdfd4 <_Z14ACcurrent_mainv>

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
 23fe0e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fe0ea:	f000 fea3 	bl	23fee34 <delay>
  eeprom7_main();
 23fe0ee:	f7ff ff91 	bl	23fe014 <_Z12eeprom7_mainv>
}
 23fe0f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 23fe0f6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 23fe0fa:	f000 be9b 	b.w	23fee34 <delay>
	...

023fe100 <_GLOBAL__sub_I_SystemMode>:
}
 23fe100:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe102:	2400      	movs	r4, #0
 23fe104:	4b06      	ldr	r3, [pc, #24]	; (23fe120 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
 23fe106:	4a07      	ldr	r2, [pc, #28]	; (23fe124 <_GLOBAL__sub_I_SystemMode+0x24>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe108:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 23fe10a:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fe10e:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fe110:	f000 fd4e 	bl	23febb0 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fe114:	4621      	mov	r1, r4
}
 23fe116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
 23fe11a:	2001      	movs	r0, #1
 23fe11c:	f000 bd64 	b.w	23febe8 <system_thread_set_state>
 23fe120:	1007ae3c 	.word	0x1007ae3c
 23fe124:	ffff0000 	.word	0xffff0000

023fe128 <accurrent_cfg_setup>:
void accurrent_cfg_setup ( accurrent_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->sck = HAL_PIN_NC;
    cfg->miso = HAL_PIN_NC;
 23fe128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fe12c:	6003      	str	r3, [r0, #0]
    cfg->mosi = HAL_PIN_NC;
    cfg->cs = HAL_PIN_NC;

    // Additional gpio pins

    cfg->an = HAL_PIN_NC;
 23fe12e:	7103      	strb	r3, [r0, #4]

    cfg->spi_mode = SPI_MASTER_MODE_0;
    cfg->cs_polarity = SPI_MASTER_CHIP_SELECT_POLARITY_ACTIVE_LOW;
    cfg->spi_speed = 100000; 
 23fe130:	4b02      	ldr	r3, [pc, #8]	; (23fe13c <accurrent_cfg_setup+0x14>)
 23fe132:	6083      	str	r3, [r0, #8]
    cfg->spi_mode = SPI_MASTER_MODE_0;
 23fe134:	2300      	movs	r3, #0
 23fe136:	8183      	strh	r3, [r0, #12]
}
 23fe138:	4770      	bx	lr
 23fe13a:	bf00      	nop
 23fe13c:	000186a0 	.word	0x000186a0

023fe140 <accurrent_init>:

ACCURRENT_RETVAL accurrent_init ( accurrent_t *ctx, accurrent_cfg_t *cfg )
{
 23fe140:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe142:	460c      	mov	r4, r1
 23fe144:	4605      	mov	r5, r0
    spi_cfg.speed     = cfg->spi_speed;
    spi_cfg.mode      = cfg->spi_mode;
    spi_cfg.sck       = cfg->sck;
    spi_cfg.miso      = cfg->miso;
    spi_cfg.mosi      = cfg->mosi;
    spi_cfg.default_write_data = ACCURRENT_DUMMY;
 23fe146:	2600      	movs	r6, #0
{
 23fe148:	b085      	sub	sp, #20
    spi_master_configure_default( &spi_cfg );
 23fe14a:	a801      	add	r0, sp, #4
 23fe14c:	f000 fa08 	bl	23fe560 <_Z28spi_master_configure_defaultP19spi_master_config_t>
    spi_cfg.speed     = cfg->spi_speed;
 23fe150:	68a3      	ldr	r3, [r4, #8]

    digital_out_init( &ctx->cs, cfg->cs );
 23fe152:	78e1      	ldrb	r1, [r4, #3]
    spi_cfg.speed     = cfg->spi_speed;
 23fe154:	9302      	str	r3, [sp, #8]
    spi_cfg.mode      = cfg->spi_mode;
 23fe156:	7b23      	ldrb	r3, [r4, #12]
    digital_out_init( &ctx->cs, cfg->cs );
 23fe158:	4628      	mov	r0, r5
    spi_cfg.mode      = cfg->spi_mode;
 23fe15a:	f88d 300c 	strb.w	r3, [sp, #12]
    spi_cfg.sck       = cfg->sck;
 23fe15e:	78a3      	ldrb	r3, [r4, #2]
    spi_cfg.default_write_data = ACCURRENT_DUMMY;
 23fe160:	f88d 6004 	strb.w	r6, [sp, #4]
    spi_cfg.sck       = cfg->sck;
 23fe164:	f88d 3005 	strb.w	r3, [sp, #5]
    spi_cfg.miso      = cfg->miso;
 23fe168:	8823      	ldrh	r3, [r4, #0]
    ctx->chip_select = cfg->cs;

    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fe16a:	1d2f      	adds	r7, r5, #4
    spi_cfg.miso      = cfg->miso;
 23fe16c:	f8ad 3006 	strh.w	r3, [sp, #6]
    digital_out_init( &ctx->cs, cfg->cs );
 23fe170:	f000 f987 	bl	23fe482 <_Z16digital_out_initP13digital_out_th>
    ctx->chip_select = cfg->cs;
 23fe174:	78e3      	ldrb	r3, [r4, #3]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fe176:	4638      	mov	r0, r7
    ctx->chip_select = cfg->cs;
 23fe178:	742b      	strb	r3, [r5, #16]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fe17a:	a901      	add	r1, sp, #4
 23fe17c:	f000 f9d6 	bl	23fe52c <_Z15spi_master_openP12spi_master_tP19spi_master_config_t>
 23fe180:	3001      	adds	r0, #1
 23fe182:	d019      	beq.n	23fe1b8 <accurrent_init+0x78>
    {
        return ACCURRENT_INIT_ERROR;
    }

    spi_master_set_default_write_data( &ctx->spi, ACCURRENT_DUMMY );
 23fe184:	4631      	mov	r1, r6
 23fe186:	4638      	mov	r0, r7
 23fe188:	f000 f9b4 	bl	23fe4f4 <_Z33spi_master_set_default_write_dataP12spi_master_th>
    spi_master_set_mode( &ctx->spi, spi_cfg.mode );
 23fe18c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 23fe190:	4638      	mov	r0, r7
 23fe192:	f000 fa09 	bl	23fe5a8 <_Z19spi_master_set_modeP12spi_master_th>
    spi_master_set_speed( &ctx->spi, spi_cfg.speed );
 23fe196:	9902      	ldr	r1, [sp, #8]
 23fe198:	4638      	mov	r0, r7
 23fe19a:	f000 fa10 	bl	23fe5be <_Z20spi_master_set_speedP12spi_master_tm>
    spi_master_set_chip_select_polarity( cfg->cs_polarity );
 23fe19e:	7b60      	ldrb	r0, [r4, #13]
 23fe1a0:	f000 f9a0 	bl	23fe4e4 <_Z35spi_master_set_chip_select_polarityh>

    digital_in_init( &ctx->an, cfg->an );
 23fe1a4:	7921      	ldrb	r1, [r4, #4]
 23fe1a6:	1ca8      	adds	r0, r5, #2
 23fe1a8:	f000 f960 	bl	23fe46c <_Z15digital_in_initP12digital_in_th>
    spi_master_deselect_device( ctx->chip_select );  
 23fe1ac:	7c28      	ldrb	r0, [r5, #16]
 23fe1ae:	f000 f987 	bl	23fe4c0 <_Z26spi_master_deselect_deviceh>

    return ACCURRENT_OK;
 23fe1b2:	4630      	mov	r0, r6
}
 23fe1b4:	b005      	add	sp, #20
 23fe1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ACCURRENT_INIT_ERROR;
 23fe1b8:	20ff      	movs	r0, #255	; 0xff
 23fe1ba:	e7fb      	b.n	23fe1b4 <accurrent_init+0x74>

023fe1bc <accurrent_get_ma>:
    spi_master_write_then_read( &ctx->spi, wr_buf, wr_len, rd_buf, rd_len );
    spi_master_deselect_device( ctx->chip_select );   
}

float accurrent_get_ma ( accurrent_t *ctx )
{
 23fe1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe1be:	4606      	mov	r6, r0
 23fe1c0:	250a      	movs	r5, #10

    // Initialize variables
    msb_mask = 0x00;
    tmp = 0;
    avg = 0;
    sum = 0;
 23fe1c2:	2400      	movs	r4, #0
{
 23fe1c4:	b085      	sub	sp, #20
        
    // SPI reading
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
    {
        spi_master_select_device( ctx->chip_select );
        spi_master_read( &ctx->spi, buffer, 2 );
 23fe1c6:	1d07      	adds	r7, r0, #4
        spi_master_select_device( ctx->chip_select );
 23fe1c8:	7c30      	ldrb	r0, [r6, #16]
 23fe1ca:	f000 f969 	bl	23fe4a0 <_Z24spi_master_select_deviceh>
        spi_master_read( &ctx->spi, buffer, 2 );
 23fe1ce:	2202      	movs	r2, #2
 23fe1d0:	a901      	add	r1, sp, #4
 23fe1d2:	4638      	mov	r0, r7
 23fe1d4:	f000 fa7e 	bl	23fe6d4 <_Z15spi_master_readP12spi_master_tPhj>
        spi_master_deselect_device( ctx->chip_select );
 23fe1d8:	7c30      	ldrb	r0, [r6, #16]
 23fe1da:	f000 f971 	bl	23fe4c0 <_Z26spi_master_deselect_deviceh>
        
        // Reading most significant and least significant bytes
        read_msb = buffer[ 0 ] & msb_mask;
 23fe1de:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fe1e2:	3d01      	subs	r5, #1
        read_lsb = buffer[ 1 ];
        
        // Forming ADC_CONVERSION_SIZE
        tmp = ( ( read_msb & msb_mask ) << 8 );
 23fe1e4:	f003 021f 	and.w	r2, r3, #31
        tmp =  tmp | read_lsb;
 23fe1e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fe1ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        tmp =  tmp | read_lsb;
 23fe1f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        
        sum = sum + tmp;                            // Sum of the ADC readings
 23fe1f4:	441c      	add	r4, r3
 23fe1f6:	b2a4      	uxth	r4, r4
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fe1f8:	d1e6      	bne.n	23fe1c8 <accurrent_get_ma+0xc>
    }
    
    // Average ADC value based on sum of the ADC readings
    avg = ( float ) ( sum / ACCURRENT_ADC_ITERATION_SIZE );
 23fe1fa:	230a      	movs	r3, #10
 23fe1fc:	fbb4 f4f3 	udiv	r4, r4, r3
 23fe200:	ee07 4a90 	vmov	s15, r4
    avg = ( avg / max_val ) * 8.25 * 1000;
 23fe204:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 23fe234 <accurrent_get_ma+0x78>
    avg = ( float ) ( sum / ACCURRENT_ADC_ITERATION_SIZE );
 23fe208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    avg = ( avg / max_val ) * 8.25 * 1000;
 23fe20c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 23fe210:	ee17 0a90 	vmov	r0, s15
 23fe214:	f7ff facc 	bl	23fd7b0 <__aeabi_f2d>
 23fe218:	2200      	movs	r2, #0
 23fe21a:	4b07      	ldr	r3, [pc, #28]	; (23fe238 <accurrent_get_ma+0x7c>)
 23fe21c:	f7ff fb20 	bl	23fd860 <__aeabi_dmul>
 23fe220:	2200      	movs	r2, #0
 23fe222:	4b06      	ldr	r3, [pc, #24]	; (23fe23c <accurrent_get_ma+0x80>)
 23fe224:	f7ff fb1c 	bl	23fd860 <__aeabi_dmul>
 23fe228:	f7ff fe12 	bl	23fde50 <__aeabi_d2f>

    return avg;                                   // Returns the average ADC value
}
 23fe22c:	ee00 0a10 	vmov	s0, r0
 23fe230:	b005      	add	sp, #20
 23fe232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe234:	457ff000 	.word	0x457ff000
 23fe238:	40208000 	.word	0x40208000
 23fe23c:	408f4000 	.word	0x408f4000

023fe240 <_Z17eeprom7_cfg_setupP13eeprom7_cfg_t>:
 */
#define DUMMY  0x00

void eeprom7_cfg_setup ( eeprom7_cfg_t *cfg ) {
    cfg->sck  = HAL_PIN_NC;
    cfg->miso = HAL_PIN_NC;
 23fe240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fe244:	6003      	str	r3, [r0, #0]
    cfg->mosi = HAL_PIN_NC;
    cfg->cs   = HAL_PIN_NC;
    cfg->wp = HAL_PIN_NC;
 23fe246:	8083      	strh	r3, [r0, #4]
    cfg->hld = HAL_PIN_NC;

    cfg->spi_speed   = 100000;
 23fe248:	4b02      	ldr	r3, [pc, #8]	; (23fe254 <_Z17eeprom7_cfg_setupP13eeprom7_cfg_t+0x14>)
 23fe24a:	6083      	str	r3, [r0, #8]
    cfg->spi_mode    = SPI_MASTER_MODE_0;
 23fe24c:	2300      	movs	r3, #0
 23fe24e:	8183      	strh	r3, [r0, #12]
    cfg->cs_polarity = SPI_MASTER_CHIP_SELECT_POLARITY_ACTIVE_LOW;
}
 23fe250:	4770      	bx	lr
 23fe252:	bf00      	nop
 23fe254:	000186a0 	.word	0x000186a0

023fe258 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t>:

err_t eeprom7_init ( eeprom7_t *ctx, eeprom7_cfg_t *cfg ) {
 23fe258:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fe25a:	460c      	mov	r4, r1
 23fe25c:	4605      	mov	r5, r0
    spi_master_config_t spi_cfg;

    spi_master_configure_default( &spi_cfg );
 23fe25e:	a801      	add	r0, sp, #4
 23fe260:	f000 f97e 	bl	23fe560 <_Z28spi_master_configure_defaultP19spi_master_config_t>

    spi_cfg.sck  = cfg->sck;
 23fe264:	78a3      	ldrb	r3, [r4, #2]
    spi_cfg.miso = cfg->miso;
    spi_cfg.mosi = cfg->mosi;

    ctx->chip_select = cfg->cs;

    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR ) {
 23fe266:	1d2e      	adds	r6, r5, #4
    spi_cfg.sck  = cfg->sck;
 23fe268:	f88d 3005 	strb.w	r3, [sp, #5]
    spi_cfg.miso = cfg->miso;
 23fe26c:	8823      	ldrh	r3, [r4, #0]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR ) {
 23fe26e:	4630      	mov	r0, r6
    spi_cfg.miso = cfg->miso;
 23fe270:	f8ad 3006 	strh.w	r3, [sp, #6]
    ctx->chip_select = cfg->cs;
 23fe274:	78e3      	ldrb	r3, [r4, #3]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR ) {
 23fe276:	a901      	add	r1, sp, #4
    ctx->chip_select = cfg->cs;
 23fe278:	742b      	strb	r3, [r5, #16]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR ) {
 23fe27a:	f000 f957 	bl	23fe52c <_Z15spi_master_openP12spi_master_tP19spi_master_config_t>
 23fe27e:	3001      	adds	r0, #1
 23fe280:	d103      	bne.n	23fe28a <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t+0x32>
        return SPI_MASTER_ERROR;
 23fe282:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    digital_out_init( &ctx->wp, cfg->wp );
    digital_out_init( &ctx->hld, cfg->hld );
    
    return SPI_MASTER_SUCCESS;
}
 23fe286:	b004      	add	sp, #16
 23fe288:	bd70      	pop	{r4, r5, r6, pc}
    if ( spi_master_set_default_write_data( &ctx->spi, DUMMY ) == SPI_MASTER_ERROR ) {
 23fe28a:	2100      	movs	r1, #0
 23fe28c:	4630      	mov	r0, r6
 23fe28e:	f000 f931 	bl	23fe4f4 <_Z33spi_master_set_default_write_dataP12spi_master_th>
 23fe292:	3001      	adds	r0, #1
 23fe294:	d0f5      	beq.n	23fe282 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t+0x2a>
    if ( spi_master_set_mode( &ctx->spi, cfg->spi_mode ) == SPI_MASTER_ERROR ) {
 23fe296:	4630      	mov	r0, r6
 23fe298:	7b21      	ldrb	r1, [r4, #12]
 23fe29a:	f000 f985 	bl	23fe5a8 <_Z19spi_master_set_modeP12spi_master_th>
 23fe29e:	3001      	adds	r0, #1
 23fe2a0:	d0ef      	beq.n	23fe282 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t+0x2a>
    if ( spi_master_set_speed( &ctx->spi, cfg->spi_speed ) == SPI_MASTER_ERROR ) {
 23fe2a2:	4630      	mov	r0, r6
 23fe2a4:	68a1      	ldr	r1, [r4, #8]
 23fe2a6:	f000 f98a 	bl	23fe5be <_Z20spi_master_set_speedP12spi_master_tm>
 23fe2aa:	3001      	adds	r0, #1
 23fe2ac:	d0e9      	beq.n	23fe282 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t+0x2a>
    spi_master_set_chip_select_polarity( cfg->cs_polarity );
 23fe2ae:	7b60      	ldrb	r0, [r4, #13]
 23fe2b0:	f000 f918 	bl	23fe4e4 <_Z35spi_master_set_chip_select_polarityh>
    spi_master_deselect_device( ctx->chip_select );
 23fe2b4:	7c28      	ldrb	r0, [r5, #16]
 23fe2b6:	f000 f903 	bl	23fe4c0 <_Z26spi_master_deselect_deviceh>
    digital_out_init( &ctx->wp, cfg->wp );
 23fe2ba:	7921      	ldrb	r1, [r4, #4]
 23fe2bc:	4628      	mov	r0, r5
 23fe2be:	f000 f8e0 	bl	23fe482 <_Z16digital_out_initP13digital_out_th>
    digital_out_init( &ctx->hld, cfg->hld );
 23fe2c2:	7961      	ldrb	r1, [r4, #5]
 23fe2c4:	1ca8      	adds	r0, r5, #2
 23fe2c6:	f000 f8dc 	bl	23fe482 <_Z16digital_out_initP13digital_out_th>
    return SPI_MASTER_SUCCESS;
 23fe2ca:	2000      	movs	r0, #0
 23fe2cc:	e7db      	b.n	23fe286 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t+0x2e>

023fe2ce <_Z21eeprom7_generic_writeP9eeprom7_thPhh>:
    eeprom7_set_status( ctx, 0x00 );
    eeprom7_enable_hold_operation( ctx, 1 );
    return EEPROM7_OK;
}

err_t eeprom7_generic_write ( eeprom7_t *ctx, uint8_t reg, uint8_t *data_in, uint8_t len ) {
 23fe2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe2d2:	4688      	mov	r8, r1
    uint8_t tx_buf[ 257 ] = { 0 };
 23fe2d4:	2100      	movs	r1, #0
err_t eeprom7_generic_write ( eeprom7_t *ctx, uint8_t reg, uint8_t *data_in, uint8_t len ) {
 23fe2d6:	b0c2      	sub	sp, #264	; 0x108
 23fe2d8:	4604      	mov	r4, r0
 23fe2da:	4617      	mov	r7, r2
    uint8_t tx_buf[ 257 ] = { 0 };
 23fe2dc:	a802      	add	r0, sp, #8
 23fe2de:	22fd      	movs	r2, #253	; 0xfd
 23fe2e0:	9101      	str	r1, [sp, #4]
err_t eeprom7_generic_write ( eeprom7_t *ctx, uint8_t reg, uint8_t *data_in, uint8_t len ) {
 23fe2e2:	461e      	mov	r6, r3
    uint8_t tx_buf[ 257 ] = { 0 };
 23fe2e4:	f001 fcbd 	bl	23ffc62 <memset>
    uint8_t cnt;

    tx_buf[ 0 ] = reg;
    for ( cnt = 1; cnt <= len; cnt++ ) {
 23fe2e8:	2101      	movs	r1, #1
    uint8_t tx_buf[ 257 ] = { 0 };
 23fe2ea:	ad01      	add	r5, sp, #4
    tx_buf[ 0 ] = reg;
 23fe2ec:	f885 8000 	strb.w	r8, [r5]
    for ( cnt = 1; cnt <= len; cnt++ ) {
 23fe2f0:	42b1      	cmp	r1, r6
 23fe2f2:	d806      	bhi.n	23fe302 <_Z21eeprom7_generic_writeP9eeprom7_thPhh+0x34>
        tx_buf[ cnt ] = data_in[ cnt - 1 ];
 23fe2f4:	187b      	adds	r3, r7, r1
 23fe2f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 23fe2fa:	546b      	strb	r3, [r5, r1]
    for ( cnt = 1; cnt <= len; cnt++ ) {
 23fe2fc:	3101      	adds	r1, #1
 23fe2fe:	b2c9      	uxtb	r1, r1
 23fe300:	e7f6      	b.n	23fe2f0 <_Z21eeprom7_generic_writeP9eeprom7_thPhh+0x22>
    }

    spi_master_select_device( ctx->chip_select );
 23fe302:	7c20      	ldrb	r0, [r4, #16]
 23fe304:	f000 f8cc 	bl	23fe4a0 <_Z24spi_master_select_deviceh>
    err_t error_flag = spi_master_write( &ctx->spi, tx_buf, len + 1 );
 23fe308:	4629      	mov	r1, r5
 23fe30a:	1c72      	adds	r2, r6, #1
 23fe30c:	1d20      	adds	r0, r4, #4
 23fe30e:	f000 f9b1 	bl	23fe674 <_Z16spi_master_writeP12spi_master_tPhj>
 23fe312:	4605      	mov	r5, r0
    spi_master_deselect_device( ctx->chip_select );
 23fe314:	7c20      	ldrb	r0, [r4, #16]
 23fe316:	f000 f8d3 	bl	23fe4c0 <_Z26spi_master_deselect_deviceh>

    return error_flag;
}
 23fe31a:	4628      	mov	r0, r5
 23fe31c:	b042      	add	sp, #264	; 0x108
 23fe31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe322 <_Z20eeprom7_generic_readP9eeprom7_thPhh>:

err_t eeprom7_generic_read ( eeprom7_t *ctx, uint8_t reg, uint8_t *data_out, uint8_t len ) {
 23fe322:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fe324:	4604      	mov	r4, r0
 23fe326:	4615      	mov	r5, r2
 23fe328:	461e      	mov	r6, r3
    spi_master_select_device( ctx->chip_select );
 23fe32a:	7c00      	ldrb	r0, [r0, #16]
err_t eeprom7_generic_read ( eeprom7_t *ctx, uint8_t reg, uint8_t *data_out, uint8_t len ) {
 23fe32c:	f88d 100f 	strb.w	r1, [sp, #15]
    spi_master_select_device( ctx->chip_select );
 23fe330:	f000 f8b6 	bl	23fe4a0 <_Z24spi_master_select_deviceh>
    err_t error_flag = spi_master_write_then_read( &ctx->spi, &reg, 1, data_out, len );
 23fe334:	462b      	mov	r3, r5
 23fe336:	2201      	movs	r2, #1
 23fe338:	f10d 010f 	add.w	r1, sp, #15
 23fe33c:	9600      	str	r6, [sp, #0]
 23fe33e:	1d20      	adds	r0, r4, #4
 23fe340:	f000 f94a 	bl	23fe5d8 <_Z26spi_master_write_then_readP12spi_master_tPhjS1_j>
 23fe344:	4605      	mov	r5, r0
    spi_master_deselect_device( ctx->chip_select );
 23fe346:	7c20      	ldrb	r0, [r4, #16]
 23fe348:	f000 f8ba 	bl	23fe4c0 <_Z26spi_master_deselect_deviceh>

    return error_flag;
}
 23fe34c:	4628      	mov	r0, r5
 23fe34e:	b004      	add	sp, #16
 23fe350:	bd70      	pop	{r4, r5, r6, pc}

023fe352 <_Z31eeprom7_generic_write_then_readP9eeprom7_tPhhS1_h>:

err_t eeprom7_generic_write_then_read ( eeprom7_t *ctx, uint8_t *data_in, uint8_t len_in, uint8_t *data_out, uint8_t len_out ) {
 23fe352:	b530      	push	{r4, r5, lr}
 23fe354:	4604      	mov	r4, r0
 23fe356:	b087      	sub	sp, #28
    spi_master_select_device( ctx->chip_select );
 23fe358:	7c00      	ldrb	r0, [r0, #16]
err_t eeprom7_generic_write_then_read ( eeprom7_t *ctx, uint8_t *data_in, uint8_t len_in, uint8_t *data_out, uint8_t len_out ) {
 23fe35a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 23fe35e:	9303      	str	r3, [sp, #12]
    spi_master_select_device( ctx->chip_select );
 23fe360:	f000 f89e 	bl	23fe4a0 <_Z24spi_master_select_deviceh>
    err_t error_flag = spi_master_write_then_read( &ctx->spi, data_in, len_in, data_out, len_out );
 23fe364:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 23fe368:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
 23fe36c:	9905      	ldr	r1, [sp, #20]
 23fe36e:	9000      	str	r0, [sp, #0]
 23fe370:	1d20      	adds	r0, r4, #4
 23fe372:	f000 f931 	bl	23fe5d8 <_Z26spi_master_write_then_readP12spi_master_tPhjS1_j>
 23fe376:	4605      	mov	r5, r0
    spi_master_deselect_device( ctx->chip_select );
 23fe378:	7c20      	ldrb	r0, [r4, #16]
 23fe37a:	f000 f8a1 	bl	23fe4c0 <_Z26spi_master_deselect_deviceh>

    return error_flag;
}
 23fe37e:	4628      	mov	r0, r5
 23fe380:	b007      	add	sp, #28
 23fe382:	bd30      	pop	{r4, r5, pc}

023fe384 <_Z19eeprom7_read_statusP9eeprom7_t>:
    }
    
    eeprom7_generic_write( ctx, tx_data, NULL, 0 );
}

uint16_t eeprom7_read_status ( eeprom7_t *ctx ) {
 23fe384:	b507      	push	{r0, r1, r2, lr}
    uint8_t rx_buf[ 2 ];
    uint16_t status;
    
    eeprom7_generic_read( ctx, EEPROM7_OPCODE_STATUS_RDSR, rx_buf, 2 );
 23fe386:	2302      	movs	r3, #2
 23fe388:	2105      	movs	r1, #5
 23fe38a:	aa01      	add	r2, sp, #4
 23fe38c:	f7ff ffc9 	bl	23fe322 <_Z20eeprom7_generic_readP9eeprom7_thPhh>
    
    status = rx_buf[ 0 ];
    status <<= 8;
    status |= rx_buf[ 1 ];
    
    return status;
 23fe390:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 23fe394:	ba40      	rev16	r0, r0
}
 23fe396:	b280      	uxth	r0, r0
 23fe398:	b003      	add	sp, #12
 23fe39a:	f85d fb04 	ldr.w	pc, [sp], #4

023fe39e <_Z23eeprom7_is_device_readyP9eeprom7_t>:

uint8_t eeprom7_is_device_ready ( eeprom7_t *ctx ) {
 23fe39e:	b508      	push	{r3, lr}
    uint16_t status;
    uint8_t is_ready;
    
    status = eeprom7_read_status( ctx );
 23fe3a0:	f7ff fff0 	bl	23fe384 <_Z19eeprom7_read_statusP9eeprom7_t>
    
    is_ready = ( ( uint8_t ) status ) & 0x01;
    
    return is_ready;
}
 23fe3a4:	f000 0001 	and.w	r0, r0, #1
 23fe3a8:	bd08      	pop	{r3, pc}

023fe3aa <_Z16eeprom7_send_cmdP9eeprom7_th>:

err_t eeprom7_send_cmd ( eeprom7_t *ctx, uint8_t cmd ) {
    uint8_t rx_buf[ 2 ] = { 0 };
 23fe3aa:	2300      	movs	r3, #0
err_t eeprom7_send_cmd ( eeprom7_t *ctx, uint8_t cmd ) {
 23fe3ac:	b507      	push	{r0, r1, r2, lr}
    
    if ( cmd == EEPROM7_OPCODE_STATUS_WRBP ) {        
 23fe3ae:	2908      	cmp	r1, #8
    uint8_t rx_buf[ 2 ] = { 0 };
 23fe3b0:	f8ad 3004 	strh.w	r3, [sp, #4]
    if ( cmd == EEPROM7_OPCODE_STATUS_WRBP ) {        
 23fe3b4:	d108      	bne.n	23fe3c8 <_Z16eeprom7_send_cmdP9eeprom7_th+0x1e>
        eeprom7_generic_read( ctx, cmd, rx_buf, 1 );
 23fe3b6:	2301      	movs	r3, #1
 23fe3b8:	aa01      	add	r2, sp, #4
 23fe3ba:	f7ff ffb2 	bl	23fe322 <_Z20eeprom7_generic_readP9eeprom7_thPhh>

        return rx_buf[ 0 ];
 23fe3be:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    } else {        
        eeprom7_generic_write( ctx, cmd, NULL, 0 );

        return EEPROM7_STATUS_SUCCESS;
    }
}
 23fe3c2:	b003      	add	sp, #12
 23fe3c4:	f85d fb04 	ldr.w	pc, [sp], #4
        eeprom7_generic_write( ctx, cmd, NULL, 0 );
 23fe3c8:	461a      	mov	r2, r3
 23fe3ca:	f7ff ff80 	bl	23fe2ce <_Z21eeprom7_generic_writeP9eeprom7_thPhh>
 23fe3ce:	2001      	movs	r0, #1
 23fe3d0:	e7f7      	b.n	23fe3c2 <_Z16eeprom7_send_cmdP9eeprom7_th+0x18>

023fe3d2 <_Z18eeprom7_set_statusP9eeprom7_th>:
void eeprom7_sw_reset ( eeprom7_t *ctx ) {
    eeprom7_send_cmd( ctx, EEPROM7_OPCODE_SW_RESET_SRST );
}

void eeprom7_set_status ( eeprom7_t *ctx, uint8_t status ) {    
    eeprom7_generic_write( ctx, EEPROM7_OPCODE_STATUS_WRSR, &status, 1 );
 23fe3d2:	2301      	movs	r3, #1
void eeprom7_set_status ( eeprom7_t *ctx, uint8_t status ) {    
 23fe3d4:	b507      	push	{r0, r1, r2, lr}
 23fe3d6:	f88d 1007 	strb.w	r1, [sp, #7]
    eeprom7_generic_write( ctx, EEPROM7_OPCODE_STATUS_WRSR, &status, 1 );
 23fe3da:	f10d 0207 	add.w	r2, sp, #7
 23fe3de:	4619      	mov	r1, r3
 23fe3e0:	f7ff ff75 	bl	23fe2ce <_Z21eeprom7_generic_writeP9eeprom7_thPhh>
}
 23fe3e4:	b003      	add	sp, #12
 23fe3e6:	f85d fb04 	ldr.w	pc, [sp], #4

023fe3ea <_Z19eeprom7_default_cfgP9eeprom7_t>:
err_t eeprom7_default_cfg ( eeprom7_t *ctx ) {
 23fe3ea:	b510      	push	{r4, lr}
 23fe3ec:	4604      	mov	r4, r0
    digital_out_write( &ctx->wp, en_write_protect );
 23fe3ee:	2101      	movs	r1, #1
 23fe3f0:	f000 f852 	bl	23fe498 <_Z17digital_out_writeP13digital_out_th>
    eeprom7_send_cmd( ctx, EEPROM7_OPCODE_STATUS_WREN );
 23fe3f4:	2106      	movs	r1, #6
 23fe3f6:	4620      	mov	r0, r4
 23fe3f8:	f7ff ffd7 	bl	23fe3aa <_Z16eeprom7_send_cmdP9eeprom7_th>
    eeprom7_set_status( ctx, 0x00 );
 23fe3fc:	4620      	mov	r0, r4
 23fe3fe:	2100      	movs	r1, #0
 23fe400:	f7ff ffe7 	bl	23fe3d2 <_Z18eeprom7_set_statusP9eeprom7_th>
    digital_out_write( &ctx->hld, en_hold );
 23fe404:	1ca0      	adds	r0, r4, #2
 23fe406:	2101      	movs	r1, #1
 23fe408:	f000 f846 	bl	23fe498 <_Z17digital_out_writeP13digital_out_th>
}
 23fe40c:	2000      	movs	r0, #0
 23fe40e:	bd10      	pop	{r4, pc}

023fe410 <_Z20eeprom7_write_memoryP9eeprom7_tmPhh>:
    eeprom7_generic_read( ctx, EEPROM7_OPCODE_STATUS_RDSR, rx_buf, 1 );

    return rx_buf[ 0 ];
}

void eeprom7_write_memory ( eeprom7_t *ctx, uint32_t addr, uint8_t *p_tx_data, uint8_t n_bytes ) {
 23fe410:	b530      	push	{r4, r5, lr}
 23fe412:	461c      	mov	r4, r3
 23fe414:	4605      	mov	r5, r0
 23fe416:	4608      	mov	r0, r1
    uint8_t tx_buf[ 256 ];
    uint8_t n_cnt;

    tx_buf[ 0 ] = ( uint8_t ) addr >> 16;
 23fe418:	2300      	movs	r3, #0
void eeprom7_write_memory ( eeprom7_t *ctx, uint32_t addr, uint8_t *p_tx_data, uint8_t n_bytes ) {
 23fe41a:	b0c1      	sub	sp, #260	; 0x104
 23fe41c:	4611      	mov	r1, r2
    tx_buf[ 0 ] = ( uint8_t ) addr >> 16;
 23fe41e:	f88d 0002 	strb.w	r0, [sp, #2]
    tx_buf[ 1 ] = ( uint8_t ) addr >> 8;
    tx_buf[ 2 ] = ( uint8_t ) addr;
    
    for ( n_cnt = 0; n_cnt < n_bytes; n_cnt++ ) {
        tx_buf[ n_cnt + 3 ] = p_tx_data[ n_cnt ];
 23fe422:	4622      	mov	r2, r4
 23fe424:	f10d 0003 	add.w	r0, sp, #3
    tx_buf[ 0 ] = ( uint8_t ) addr >> 16;
 23fe428:	f88d 3000 	strb.w	r3, [sp]
    tx_buf[ 1 ] = ( uint8_t ) addr >> 8;
 23fe42c:	f88d 3001 	strb.w	r3, [sp, #1]
        tx_buf[ n_cnt + 3 ] = p_tx_data[ n_cnt ];
 23fe430:	f001 fc0a 	bl	23ffc48 <memcpy>
    }
    
    eeprom7_generic_write( ctx, EEPROM7_OPCODE_EEPROM_SECURITY_WRITE, tx_buf, n_bytes + 3 );
 23fe434:	1ce3      	adds	r3, r4, #3
 23fe436:	466a      	mov	r2, sp
 23fe438:	2102      	movs	r1, #2
 23fe43a:	4628      	mov	r0, r5
 23fe43c:	b2db      	uxtb	r3, r3
 23fe43e:	f7ff ff46 	bl	23fe2ce <_Z21eeprom7_generic_writeP9eeprom7_thPhh>
}
 23fe442:	b041      	add	sp, #260	; 0x104
 23fe444:	bd30      	pop	{r4, r5, pc}

023fe446 <_Z19eeprom7_read_memoryP9eeprom7_tmPhh>:

void eeprom7_read_memory ( eeprom7_t *ctx, uint32_t addr, uint8_t *p_rx_data, uint8_t n_bytes) {
 23fe446:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t tx_buf[ 4 ];

    tx_buf[ 0 ] = EEPROM7_OPCODE_EEPROM_SECURITY_READ;
 23fe448:	2403      	movs	r4, #3
 23fe44a:	f88d 400c 	strb.w	r4, [sp, #12]
    tx_buf[ 1 ] = ( uint8_t ) addr >> 16;
 23fe44e:	2400      	movs	r4, #0
 23fe450:	f88d 100f 	strb.w	r1, [sp, #15]
    tx_buf[ 2 ] = ( uint8_t ) addr >> 8;
    tx_buf[ 3 ] = ( uint8_t ) addr;
    
    eeprom7_generic_write_then_read( ctx, tx_buf, 4, p_rx_data, n_bytes );
 23fe454:	9300      	str	r3, [sp, #0]
 23fe456:	a903      	add	r1, sp, #12
 23fe458:	4613      	mov	r3, r2
 23fe45a:	2204      	movs	r2, #4
    tx_buf[ 1 ] = ( uint8_t ) addr >> 16;
 23fe45c:	f88d 400d 	strb.w	r4, [sp, #13]
    tx_buf[ 2 ] = ( uint8_t ) addr >> 8;
 23fe460:	f88d 400e 	strb.w	r4, [sp, #14]
    eeprom7_generic_write_then_read( ctx, tx_buf, 4, p_rx_data, n_bytes );
 23fe464:	f7ff ff75 	bl	23fe352 <_Z31eeprom7_generic_write_then_readP9eeprom7_tPhhS1_h>
}
 23fe468:	b004      	add	sp, #16
 23fe46a:	bd10      	pop	{r4, pc}

023fe46c <_Z15digital_in_initP12digital_in_th>:
#include "drv_digital_in.h"

//function for setting pin as input
int8_t digital_in_init(digital_in_t *in, uint8_t mode)
{
 23fe46c:	b510      	push	{r4, lr}
    if (mode == INPUT)
 23fe46e:	460c      	mov	r4, r1
 23fe470:	b921      	cbnz	r1, 23fe47c <_Z15digital_in_initP12digital_in_th+0x10>
    {
        pinMode(in->pin, static_cast<PinMode>(mode));
 23fe472:	7800      	ldrb	r0, [r0, #0]
 23fe474:	f001 fab6 	bl	23ff9e4 <pinMode>
        return DIGITAL_IN_SUCCESS;      //return status
 23fe478:	4620      	mov	r0, r4
    }
    else        //mode other than input selected
    {
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
    }
}
 23fe47a:	bd10      	pop	{r4, pc}
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
 23fe47c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe480:	e7fb      	b.n	23fe47a <_Z15digital_in_initP12digital_in_th+0xe>

023fe482 <_Z16digital_out_initP13digital_out_th>:
#include "drv_digital_out.h"

//function for setting pin as output
int8_t digital_out_init(digital_out_t *out, uint8_t mode)
{
    if (mode == OUTPUT)
 23fe482:	2901      	cmp	r1, #1
{
 23fe484:	b508      	push	{r3, lr}
    if (mode == OUTPUT)
 23fe486:	d104      	bne.n	23fe492 <_Z16digital_out_initP13digital_out_th+0x10>
    {
        pinMode(out->pin, static_cast<PinMode>(mode));
 23fe488:	8800      	ldrh	r0, [r0, #0]
 23fe48a:	f001 faab 	bl	23ff9e4 <pinMode>
        return DIGITAL_OUT_SUCCESS;     //return status
 23fe48e:	2000      	movs	r0, #0
    }
    else
    {
        return DIGITAL_OUT_UNSUPPORTED_PIN;       //return status
    }
}
 23fe490:	bd08      	pop	{r3, pc}
        return DIGITAL_OUT_UNSUPPORTED_PIN;       //return status
 23fe492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe496:	e7fb      	b.n	23fe490 <_Z16digital_out_initP13digital_out_th+0xe>

023fe498 <_Z17digital_out_writeP13digital_out_th>:
}

//function for writing pin state
void digital_out_write(digital_out_t *out, uint8_t value)
{
    digitalWrite(out->pin, value);
 23fe498:	8800      	ldrh	r0, [r0, #0]
 23fe49a:	f001 bab4 	b.w	23ffa06 <digitalWrite>
	...

023fe4a0 <_Z24spi_master_select_deviceh>:
    return SPI_MASTER_SUCCESS;                      //return status
}

//assert chip select
void spi_master_select_device(uint8_t chip_select)
{
 23fe4a0:	b507      	push	{r0, r1, r2, lr}
    pinMode(chip_select, OUTPUT);               //set function parameter as output
 23fe4a2:	2101      	movs	r1, #1
 23fe4a4:	9001      	str	r0, [sp, #4]
 23fe4a6:	f001 fa9d 	bl	23ff9e4 <pinMode>
    digitalWrite(chip_select, cs_polarity);     //assert CS 
 23fe4aa:	4b04      	ldr	r3, [pc, #16]	; (23fe4bc <_Z24spi_master_select_deviceh+0x1c>)
 23fe4ac:	9801      	ldr	r0, [sp, #4]
 23fe4ae:	7819      	ldrb	r1, [r3, #0]
}
 23fe4b0:	b003      	add	sp, #12
 23fe4b2:	f85d eb04 	ldr.w	lr, [sp], #4
    digitalWrite(chip_select, cs_polarity);     //assert CS 
 23fe4b6:	f001 baa6 	b.w	23ffa06 <digitalWrite>
 23fe4ba:	bf00      	nop
 23fe4bc:	1007ae88 	.word	0x1007ae88

023fe4c0 <_Z26spi_master_deselect_deviceh>:

//de-assert chip select
void spi_master_deselect_device(uint8_t chip_select) 
{
 23fe4c0:	b507      	push	{r0, r1, r2, lr}
    pinMode(chip_select, OUTPUT);                   //set function parameter as output
 23fe4c2:	2101      	movs	r1, #1
 23fe4c4:	9001      	str	r0, [sp, #4]
 23fe4c6:	f001 fa8d 	bl	23ff9e4 <pinMode>
    digitalWrite(chip_select, !cs_polarity);        //de-assert CS 
 23fe4ca:	4b05      	ldr	r3, [pc, #20]	; (23fe4e0 <_Z26spi_master_deselect_deviceh+0x20>)
 23fe4cc:	9801      	ldr	r0, [sp, #4]
 23fe4ce:	7819      	ldrb	r1, [r3, #0]
 23fe4d0:	fab1 f181 	clz	r1, r1
 23fe4d4:	0949      	lsrs	r1, r1, #5
}
 23fe4d6:	b003      	add	sp, #12
 23fe4d8:	f85d eb04 	ldr.w	lr, [sp], #4
    digitalWrite(chip_select, !cs_polarity);        //de-assert CS 
 23fe4dc:	f001 ba93 	b.w	23ffa06 <digitalWrite>
 23fe4e0:	1007ae88 	.word	0x1007ae88

023fe4e4 <_Z35spi_master_set_chip_select_polarityh>:

//sets chip select polarity
void spi_master_set_chip_select_polarity(uint8_t polarity)
{
    if ((polarity == LOW) || (polarity == HIGH))        //check for valid function parameter
 23fe4e4:	2801      	cmp	r0, #1
    {
        cs_polarity = polarity;     //set new CS polarity
 23fe4e6:	bf9c      	itt	ls
 23fe4e8:	4b01      	ldrls	r3, [pc, #4]	; (23fe4f0 <_Z35spi_master_set_chip_select_polarityh+0xc>)
 23fe4ea:	7018      	strbls	r0, [r3, #0]
    }
}
 23fe4ec:	4770      	bx	lr
 23fe4ee:	bf00      	nop
 23fe4f0:	1007ae88 	.word	0x1007ae88

023fe4f4 <_Z33spi_master_set_default_write_dataP12spi_master_th>:
//sets SPI default value, not implemented
int8_t spi_master_set_default_write_data(spi_master_t *obj, uint8_t  default_write_data) 
{
    #warning spi_master_set_default_write_data() function is not implemented
    return SPI_MASTER_SUCCESS;      //return status
}
 23fe4f4:	2000      	movs	r0, #0
 23fe4f6:	4770      	bx	lr

023fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fe4f8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fe4fa:	4c0a      	ldr	r4, [pc, #40]	; (23fe524 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fe4fc:	e8d4 1f8f 	ldab	r1, [r4]
 23fe500:	f011 0101 	ands.w	r1, r1, #1
 23fe504:	d10b      	bne.n	23fe51e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fe506:	4620      	mov	r0, r4
 23fe508:	9101      	str	r1, [sp, #4]
 23fe50a:	f7ff fd1a 	bl	23fdf42 <__cxa_guard_acquire>
 23fe50e:	9901      	ldr	r1, [sp, #4]
 23fe510:	b128      	cbz	r0, 23fe51e <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fe512:	4805      	ldr	r0, [pc, #20]	; (23fe528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fe514:	f000 ffb6 	bl	23ff484 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe518:	4620      	mov	r0, r4
 23fe51a:	f7ff fd17 	bl	23fdf4c <__cxa_guard_release>
        return instance;
    }
 23fe51e:	4802      	ldr	r0, [pc, #8]	; (23fe528 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fe520:	b002      	add	sp, #8
 23fe522:	bd10      	pop	{r4, pc}
 23fe524:	1007ae7c 	.word	0x1007ae7c
 23fe528:	1007ae80 	.word	0x1007ae80

023fe52c <_Z15spi_master_openP12spi_master_tP19spi_master_config_t>:
{       
 23fe52c:	b508      	push	{r3, lr}
    pinMode(SS, OUTPUT);                            //set SS sginal mikroBUS1 as output
 23fe52e:	2101      	movs	r1, #1
 23fe530:	2012      	movs	r0, #18
 23fe532:	f001 fa57 	bl	23ff9e4 <pinMode>
    pinMode(SS1, OUTPUT);                           //set SS1 sginal mikroBUS2 as output
 23fe536:	2101      	movs	r1, #1
 23fe538:	2005      	movs	r0, #5
 23fe53a:	f001 fa53 	bl	23ff9e4 <pinMode>
    digitalWrite(SS, HIGH);                         //set SS HIGH
 23fe53e:	2101      	movs	r1, #1
 23fe540:	2012      	movs	r0, #18
 23fe542:	f001 fa60 	bl	23ffa06 <digitalWrite>
    digitalWrite(SS1, HIGH);                        //set SS1 HIGH
 23fe546:	2101      	movs	r1, #1
 23fe548:	2005      	movs	r0, #5
 23fe54a:	f001 fa5c 	bl	23ffa06 <digitalWrite>
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
 23fe54e:	f7ff ffd3 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe552:	22ff      	movs	r2, #255	; 0xff
 23fe554:	2100      	movs	r1, #0
 23fe556:	f000 ff9f 	bl	23ff498 <_ZN8SPIClass5beginE14hal_spi_mode_tt>
}
 23fe55a:	2000      	movs	r0, #0
 23fe55c:	bd08      	pop	{r3, pc}
	...

023fe560 <_Z28spi_master_configure_defaultP19spi_master_config_t>:
{
 23fe560:	b510      	push	{r4, lr}
    cs_polarity = LOW;              //set CS active low          
 23fe562:	2400      	movs	r4, #0
    pinMode(SS, OUTPUT);            //set SS sginal mikroBUS1 as output
 23fe564:	2101      	movs	r1, #1
 23fe566:	2012      	movs	r0, #18
 23fe568:	f001 fa3c 	bl	23ff9e4 <pinMode>
    pinMode(SS1, OUTPUT);           //set SS1 sginal mikroBUS2 as output
 23fe56c:	2101      	movs	r1, #1
 23fe56e:	2005      	movs	r0, #5
 23fe570:	f001 fa38 	bl	23ff9e4 <pinMode>
    digitalWrite(SS, HIGH);         //set SS HIGH
 23fe574:	2101      	movs	r1, #1
 23fe576:	2012      	movs	r0, #18
 23fe578:	f001 fa45 	bl	23ffa06 <digitalWrite>
    digitalWrite(SS1, HIGH);        //set SS1 HIGH
 23fe57c:	2101      	movs	r1, #1
 23fe57e:	2005      	movs	r0, #5
 23fe580:	f001 fa41 	bl	23ffa06 <digitalWrite>
    cs_polarity = LOW;              //set CS active low          
 23fe584:	4b07      	ldr	r3, [pc, #28]	; (23fe5a4 <_Z28spi_master_configure_defaultP19spi_master_config_t+0x44>)
 23fe586:	701c      	strb	r4, [r3, #0]
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
 23fe588:	f7ff ffb6 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe58c:	4621      	mov	r1, r4
 23fe58e:	f000 ff9a 	bl	23ff4c6 <_ZN8SPIClass11setDataModeEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
 23fe592:	f7ff ffb1 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
 23fe596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe59a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23fe59e:	2164      	movs	r1, #100	; 0x64
 23fe5a0:	f000 bfc2 	b.w	23ff528 <_ZN8SPIClass13setClockSpeedEjj>
 23fe5a4:	1007ae88 	.word	0x1007ae88

023fe5a8 <_Z19spi_master_set_modeP12spi_master_th>:
{
 23fe5a8:	b507      	push	{r0, r1, r2, lr}
 23fe5aa:	9101      	str	r1, [sp, #4]
        instance().setDataMode(mode);
 23fe5ac:	f7ff ffa4 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe5b0:	9901      	ldr	r1, [sp, #4]
 23fe5b2:	f000 ff88 	bl	23ff4c6 <_ZN8SPIClass11setDataModeEh>
}
 23fe5b6:	2000      	movs	r0, #0
 23fe5b8:	b003      	add	sp, #12
 23fe5ba:	f85d fb04 	ldr.w	pc, [sp], #4

023fe5be <_Z20spi_master_set_speedP12spi_master_tm>:
{
 23fe5be:	b510      	push	{r4, lr}
 23fe5c0:	460c      	mov	r4, r1
        return instance().setClockSpeed(value, scale);
 23fe5c2:	f7ff ff99 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe5c6:	2201      	movs	r2, #1
 23fe5c8:	4621      	mov	r1, r4
 23fe5ca:	f000 ffad 	bl	23ff528 <_ZN8SPIClass13setClockSpeedEjj>
}
 23fe5ce:	1a20      	subs	r0, r4, r0
 23fe5d0:	bf18      	it	ne
 23fe5d2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fe5d6:	bd10      	pop	{r4, pc}

023fe5d8 <_Z26spi_master_write_then_readP12spi_master_tPhjS1_j>:
    return SPI_MASTER_SUCCESS;                                              //return status
}

//write a sequence of byte(s) to SPI bus followed by read
int8_t spi_master_write_then_read(spi_master_t *obj, uint8_t *write_data_buffer, size_t length_write_data, uint8_t *read_data_buffer, size_t length_read_data)   
{
 23fe5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //compiler warning indicating assumption
    #warning spi_master_write_then_read() assumes the fist element of write_data_buffer is the first byte to be transmitted, IE the opcode/register if required

    //create dummy array size of write fill with zeros
    uint8_t write_dummy[length_write_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe5dc:	2400      	movs	r4, #0
{
 23fe5de:	4615      	mov	r5, r2
 23fe5e0:	b083      	sub	sp, #12
 23fe5e2:	4698      	mov	r8, r3
    uint8_t write_dummy[length_write_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe5e4:	1dd3      	adds	r3, r2, #7
 23fe5e6:	f023 0307 	bic.w	r3, r3, #7
{
 23fe5ea:	af02      	add	r7, sp, #8
 23fe5ec:	6abe      	ldr	r6, [r7, #40]	; 0x28
    uint8_t write_dummy[length_write_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe5ee:	ebad 0d03 	sub.w	sp, sp, r3
 23fe5f2:	42a5      	cmp	r5, r4
 23fe5f4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 23fe5f8:	f10d 0009 	add.w	r0, sp, #9
 23fe5fc:	bfd8      	it	le
 23fe5fe:	4622      	movle	r2, r4
{
 23fe600:	4689      	mov	r9, r1
    uint8_t write_dummy[length_write_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe602:	4621      	mov	r1, r4
 23fe604:	f88d 4008 	strb.w	r4, [sp, #8]
 23fe608:	f001 fb2b 	bl	23ffc62 <memset>

    //create dummy array size of read fill with zeros
    uint8_t read_dummy[length_read_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe60c:	1df3      	adds	r3, r6, #7
 23fe60e:	f023 0307 	bic.w	r3, r3, #7
 23fe612:	42a6      	cmp	r6, r4
    uint8_t write_dummy[length_write_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe614:	f10d 0b08 	add.w	fp, sp, #8
    uint8_t read_dummy[length_read_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe618:	ebad 0d03 	sub.w	sp, sp, r3
 23fe61c:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 23fe620:	4621      	mov	r1, r4
 23fe622:	bfd8      	it	le
 23fe624:	4622      	movle	r2, r4
 23fe626:	f10d 0009 	add.w	r0, sp, #9
 23fe62a:	f88d 4008 	strb.w	r4, [sp, #8]
 23fe62e:	f001 fb18 	bl	23ffc62 <memset>
        return instance().beginTransaction();
 23fe632:	f7ff ff61 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe636:	f000 ff5a 	bl	23ff4ee <_ZN8SPIClass16beginTransactionEv>

    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe63a:	1c43      	adds	r3, r0, #1
    uint8_t read_dummy[length_read_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe63c:	f10d 0a08 	add.w	sl, sp, #8
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe640:	d014      	beq.n	23fe66c <_Z26spi_master_write_then_readP12spi_master_tPhjS1_j+0x94>
    }
    byte transfer(byte data) {
        return instance().transfer(data);
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
 23fe642:	f7ff ff59 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe646:	462b      	mov	r3, r5
 23fe648:	465a      	mov	r2, fp
 23fe64a:	4649      	mov	r1, r9
 23fe64c:	9400      	str	r4, [sp, #0]
 23fe64e:	f000 ff9d 	bl	23ff58c <_ZN8SPIClass8transferEPKvPvjPFvvE>
 23fe652:	f7ff ff51 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe656:	4633      	mov	r3, r6
 23fe658:	4642      	mov	r2, r8
 23fe65a:	4651      	mov	r1, sl
 23fe65c:	9400      	str	r4, [sp, #0]
 23fe65e:	f000 ff95 	bl	23ff58c <_ZN8SPIClass8transferEPKvPvjPFvvE>
        instance().endTransaction();
 23fe662:	f7ff ff49 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe666:	f000 ff45 	bl	23ff4f4 <_ZN8SPIClass14endTransactionEv>
    }
    
    SPI.transfer(write_data_buffer, write_dummy, length_write_data, NULL);      //spi transaction for write (read = NULL)
    SPI.transfer(read_dummy, read_data_buffer, length_read_data, NULL);         //spi transaction for read (write = NULL)
    SPI.endTransaction();                                                       //end transaction and release spi peripheral lock
    return SPI_MASTER_SUCCESS;                                                  //return status                                         
 23fe66a:	4620      	mov	r0, r4
}                                                           
 23fe66c:	3704      	adds	r7, #4
 23fe66e:	46bd      	mov	sp, r7
 23fe670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fe674 <_Z16spi_master_writeP12spi_master_tPhj>:
{
 23fe674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe678:	2500      	movs	r5, #0
{
 23fe67a:	4614      	mov	r4, r2
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe67c:	1dd3      	adds	r3, r2, #7
 23fe67e:	f023 0307 	bic.w	r3, r3, #7
{
 23fe682:	b082      	sub	sp, #8
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe684:	42ac      	cmp	r4, r5
{
 23fe686:	af02      	add	r7, sp, #8
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe688:	ebad 0d03 	sub.w	sp, sp, r3
 23fe68c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
{
 23fe690:	460e      	mov	r6, r1
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe692:	bfd8      	it	le
 23fe694:	462a      	movle	r2, r5
 23fe696:	4629      	mov	r1, r5
 23fe698:	f10d 0009 	add.w	r0, sp, #9
 23fe69c:	f88d 5008 	strb.w	r5, [sp, #8]
 23fe6a0:	f001 fadf 	bl	23ffc62 <memset>
        return instance().beginTransaction();
 23fe6a4:	f7ff ff28 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe6a8:	f000 ff21 	bl	23ff4ee <_ZN8SPIClass16beginTransactionEv>
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe6ac:	1c43      	adds	r3, r0, #1
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe6ae:	f10d 0808 	add.w	r8, sp, #8
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe6b2:	d00c      	beq.n	23fe6ce <_Z16spi_master_writeP12spi_master_tPhj+0x5a>
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
 23fe6b4:	f7ff ff20 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe6b8:	4623      	mov	r3, r4
 23fe6ba:	4642      	mov	r2, r8
 23fe6bc:	4631      	mov	r1, r6
 23fe6be:	9500      	str	r5, [sp, #0]
 23fe6c0:	f000 ff64 	bl	23ff58c <_ZN8SPIClass8transferEPKvPvjPFvvE>
        instance().endTransaction();
 23fe6c4:	f7ff ff18 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe6c8:	f000 ff14 	bl	23ff4f4 <_ZN8SPIClass14endTransactionEv>
    return SPI_MASTER_SUCCESS;                                                  //return status
 23fe6cc:	4628      	mov	r0, r5
}
 23fe6ce:	46bd      	mov	sp, r7
 23fe6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe6d4 <_Z15spi_master_readP12spi_master_tPhj>:
{
 23fe6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe6d8:	2500      	movs	r5, #0
{
 23fe6da:	4614      	mov	r4, r2
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe6dc:	1dd3      	adds	r3, r2, #7
 23fe6de:	f023 0307 	bic.w	r3, r3, #7
{
 23fe6e2:	b082      	sub	sp, #8
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe6e4:	42ac      	cmp	r4, r5
{
 23fe6e6:	af02      	add	r7, sp, #8
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe6e8:	ebad 0d03 	sub.w	sp, sp, r3
 23fe6ec:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
{
 23fe6f0:	460e      	mov	r6, r1
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe6f2:	bfd8      	it	le
 23fe6f4:	462a      	movle	r2, r5
 23fe6f6:	4629      	mov	r1, r5
 23fe6f8:	f10d 0009 	add.w	r0, sp, #9
 23fe6fc:	f88d 5008 	strb.w	r5, [sp, #8]
 23fe700:	f001 faaf 	bl	23ffc62 <memset>
        return instance().beginTransaction();
 23fe704:	f7ff fef8 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe708:	f000 fef1 	bl	23ff4ee <_ZN8SPIClass16beginTransactionEv>
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe70c:	1c43      	adds	r3, r0, #1
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe70e:	f10d 0808 	add.w	r8, sp, #8
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe712:	d00c      	beq.n	23fe72e <_Z15spi_master_readP12spi_master_tPhj+0x5a>
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
 23fe714:	f7ff fef0 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe718:	4623      	mov	r3, r4
 23fe71a:	4632      	mov	r2, r6
 23fe71c:	4641      	mov	r1, r8
 23fe71e:	9500      	str	r5, [sp, #0]
 23fe720:	f000 ff34 	bl	23ff58c <_ZN8SPIClass8transferEPKvPvjPFvvE>
        instance().endTransaction();
 23fe724:	f7ff fee8 	bl	23fe4f8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe728:	f000 fee4 	bl	23ff4f4 <_ZN8SPIClass14endTransactionEv>
    return SPI_MASTER_SUCCESS;                                              //return status
 23fe72c:	4628      	mov	r0, r5
}
 23fe72e:	46bd      	mov	sp, r7
 23fe730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe734 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fe734:	b509      	push	{r0, r3, lr}
 23fe736:	4804      	ldr	r0, [pc, #16]	; (23fe748 <os_mutex_recursive_create+0x14>)
 23fe738:	6800      	ldr	r0, [r0, #0]
 23fe73a:	4b04      	ldr	r3, [pc, #16]	; (23fe74c <os_mutex_recursive_create+0x18>)
 23fe73c:	4403      	add	r3, r0
 23fe73e:	681b      	ldr	r3, [r3, #0]
 23fe740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe742:	9302      	str	r3, [sp, #8]
 23fe744:	bd09      	pop	{r0, r3, pc}
 23fe746:	0000      	.short	0x0000
 23fe748:	1007adc0 	.word	0x1007adc0
 23fe74c:	00000030 	.word	0x00000030

023fe750 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fe750:	b509      	push	{r0, r3, lr}
 23fe752:	4804      	ldr	r0, [pc, #16]	; (23fe764 <HAL_RNG_GetRandomNumber+0x14>)
 23fe754:	6800      	ldr	r0, [r0, #0]
 23fe756:	4b04      	ldr	r3, [pc, #16]	; (23fe768 <HAL_RNG_GetRandomNumber+0x18>)
 23fe758:	4403      	add	r3, r0
 23fe75a:	681b      	ldr	r3, [r3, #0]
 23fe75c:	685b      	ldr	r3, [r3, #4]
 23fe75e:	9302      	str	r3, [sp, #8]
 23fe760:	bd09      	pop	{r0, r3, pc}
 23fe762:	0000      	.short	0x0000
 23fe764:	1007adc0 	.word	0x1007adc0
 23fe768:	00000000 	.word	0x00000000

023fe76c <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fe76c:	b509      	push	{r0, r3, lr}
 23fe76e:	4804      	ldr	r0, [pc, #16]	; (23fe780 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fe770:	6800      	ldr	r0, [r0, #0]
 23fe772:	4b04      	ldr	r3, [pc, #16]	; (23fe784 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fe774:	4403      	add	r3, r0
 23fe776:	681b      	ldr	r3, [r3, #0]
 23fe778:	695b      	ldr	r3, [r3, #20]
 23fe77a:	9302      	str	r3, [sp, #8]
 23fe77c:	bd09      	pop	{r0, r3, pc}
 23fe77e:	0000      	.short	0x0000
 23fe780:	1007adc0 	.word	0x1007adc0
 23fe784:	00000000 	.word	0x00000000

023fe788 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fe788:	b509      	push	{r0, r3, lr}
 23fe78a:	4804      	ldr	r0, [pc, #16]	; (23fe79c <hal_gpio_mode+0x14>)
 23fe78c:	6800      	ldr	r0, [r0, #0]
 23fe78e:	4b04      	ldr	r3, [pc, #16]	; (23fe7a0 <hal_gpio_mode+0x18>)
 23fe790:	4403      	add	r3, r0
 23fe792:	681b      	ldr	r3, [r3, #0]
 23fe794:	689b      	ldr	r3, [r3, #8]
 23fe796:	9302      	str	r3, [sp, #8]
 23fe798:	bd09      	pop	{r0, r3, pc}
 23fe79a:	0000      	.short	0x0000
 23fe79c:	1007adc0 	.word	0x1007adc0
 23fe7a0:	00000014 	.word	0x00000014

023fe7a4 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fe7a4:	b509      	push	{r0, r3, lr}
 23fe7a6:	4804      	ldr	r0, [pc, #16]	; (23fe7b8 <hal_gpio_get_mode+0x14>)
 23fe7a8:	6800      	ldr	r0, [r0, #0]
 23fe7aa:	4b04      	ldr	r3, [pc, #16]	; (23fe7bc <hal_gpio_get_mode+0x18>)
 23fe7ac:	4403      	add	r3, r0
 23fe7ae:	681b      	ldr	r3, [r3, #0]
 23fe7b0:	68db      	ldr	r3, [r3, #12]
 23fe7b2:	9302      	str	r3, [sp, #8]
 23fe7b4:	bd09      	pop	{r0, r3, pc}
 23fe7b6:	0000      	.short	0x0000
 23fe7b8:	1007adc0 	.word	0x1007adc0
 23fe7bc:	00000014 	.word	0x00000014

023fe7c0 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fe7c0:	b509      	push	{r0, r3, lr}
 23fe7c2:	4804      	ldr	r0, [pc, #16]	; (23fe7d4 <hal_gpio_write+0x14>)
 23fe7c4:	6800      	ldr	r0, [r0, #0]
 23fe7c6:	4b04      	ldr	r3, [pc, #16]	; (23fe7d8 <hal_gpio_write+0x18>)
 23fe7c8:	4403      	add	r3, r0
 23fe7ca:	681b      	ldr	r3, [r3, #0]
 23fe7cc:	691b      	ldr	r3, [r3, #16]
 23fe7ce:	9302      	str	r3, [sp, #8]
 23fe7d0:	bd09      	pop	{r0, r3, pc}
 23fe7d2:	0000      	.short	0x0000
 23fe7d4:	1007adc0 	.word	0x1007adc0
 23fe7d8:	00000014 	.word	0x00000014

023fe7dc <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fe7dc:	b509      	push	{r0, r3, lr}
 23fe7de:	4804      	ldr	r0, [pc, #16]	; (23fe7f0 <hal_i2c_write+0x14>)
 23fe7e0:	6800      	ldr	r0, [r0, #0]
 23fe7e2:	4b04      	ldr	r3, [pc, #16]	; (23fe7f4 <hal_i2c_write+0x18>)
 23fe7e4:	4403      	add	r3, r0
 23fe7e6:	681b      	ldr	r3, [r3, #0]
 23fe7e8:	6a1b      	ldr	r3, [r3, #32]
 23fe7ea:	9302      	str	r3, [sp, #8]
 23fe7ec:	bd09      	pop	{r0, r3, pc}
 23fe7ee:	0000      	.short	0x0000
 23fe7f0:	1007adc0 	.word	0x1007adc0
 23fe7f4:	00000010 	.word	0x00000010

023fe7f8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fe7f8:	b509      	push	{r0, r3, lr}
 23fe7fa:	4804      	ldr	r0, [pc, #16]	; (23fe80c <hal_i2c_available+0x14>)
 23fe7fc:	6800      	ldr	r0, [r0, #0]
 23fe7fe:	4b04      	ldr	r3, [pc, #16]	; (23fe810 <hal_i2c_available+0x18>)
 23fe800:	4403      	add	r3, r0
 23fe802:	681b      	ldr	r3, [r3, #0]
 23fe804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe806:	9302      	str	r3, [sp, #8]
 23fe808:	bd09      	pop	{r0, r3, pc}
 23fe80a:	0000      	.short	0x0000
 23fe80c:	1007adc0 	.word	0x1007adc0
 23fe810:	00000010 	.word	0x00000010

023fe814 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fe814:	b509      	push	{r0, r3, lr}
 23fe816:	4804      	ldr	r0, [pc, #16]	; (23fe828 <hal_i2c_read+0x14>)
 23fe818:	6800      	ldr	r0, [r0, #0]
 23fe81a:	4b04      	ldr	r3, [pc, #16]	; (23fe82c <hal_i2c_read+0x18>)
 23fe81c:	4403      	add	r3, r0
 23fe81e:	681b      	ldr	r3, [r3, #0]
 23fe820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe822:	9302      	str	r3, [sp, #8]
 23fe824:	bd09      	pop	{r0, r3, pc}
 23fe826:	0000      	.short	0x0000
 23fe828:	1007adc0 	.word	0x1007adc0
 23fe82c:	00000010 	.word	0x00000010

023fe830 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fe830:	b509      	push	{r0, r3, lr}
 23fe832:	4804      	ldr	r0, [pc, #16]	; (23fe844 <hal_i2c_peek+0x14>)
 23fe834:	6800      	ldr	r0, [r0, #0]
 23fe836:	4b04      	ldr	r3, [pc, #16]	; (23fe848 <hal_i2c_peek+0x18>)
 23fe838:	4403      	add	r3, r0
 23fe83a:	681b      	ldr	r3, [r3, #0]
 23fe83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe83e:	9302      	str	r3, [sp, #8]
 23fe840:	bd09      	pop	{r0, r3, pc}
 23fe842:	0000      	.short	0x0000
 23fe844:	1007adc0 	.word	0x1007adc0
 23fe848:	00000010 	.word	0x00000010

023fe84c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fe84c:	b509      	push	{r0, r3, lr}
 23fe84e:	4804      	ldr	r0, [pc, #16]	; (23fe860 <hal_i2c_flush+0x14>)
 23fe850:	6800      	ldr	r0, [r0, #0]
 23fe852:	4b04      	ldr	r3, [pc, #16]	; (23fe864 <hal_i2c_flush+0x18>)
 23fe854:	4403      	add	r3, r0
 23fe856:	681b      	ldr	r3, [r3, #0]
 23fe858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe85a:	9302      	str	r3, [sp, #8]
 23fe85c:	bd09      	pop	{r0, r3, pc}
 23fe85e:	0000      	.short	0x0000
 23fe860:	1007adc0 	.word	0x1007adc0
 23fe864:	00000010 	.word	0x00000010

023fe868 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fe868:	b509      	push	{r0, r3, lr}
 23fe86a:	4804      	ldr	r0, [pc, #16]	; (23fe87c <hal_i2c_is_enabled+0x14>)
 23fe86c:	6800      	ldr	r0, [r0, #0]
 23fe86e:	4b04      	ldr	r3, [pc, #16]	; (23fe880 <hal_i2c_is_enabled+0x18>)
 23fe870:	4403      	add	r3, r0
 23fe872:	681b      	ldr	r3, [r3, #0]
 23fe874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe876:	9302      	str	r3, [sp, #8]
 23fe878:	bd09      	pop	{r0, r3, pc}
 23fe87a:	0000      	.short	0x0000
 23fe87c:	1007adc0 	.word	0x1007adc0
 23fe880:	00000010 	.word	0x00000010

023fe884 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fe884:	b509      	push	{r0, r3, lr}
 23fe886:	4804      	ldr	r0, [pc, #16]	; (23fe898 <hal_i2c_init+0x14>)
 23fe888:	6800      	ldr	r0, [r0, #0]
 23fe88a:	4b04      	ldr	r3, [pc, #16]	; (23fe89c <hal_i2c_init+0x18>)
 23fe88c:	4403      	add	r3, r0
 23fe88e:	681b      	ldr	r3, [r3, #0]
 23fe890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe892:	9302      	str	r3, [sp, #8]
 23fe894:	bd09      	pop	{r0, r3, pc}
 23fe896:	0000      	.short	0x0000
 23fe898:	1007adc0 	.word	0x1007adc0
 23fe89c:	00000010 	.word	0x00000010

023fe8a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fe8a0:	b509      	push	{r0, r3, lr}
 23fe8a2:	4804      	ldr	r0, [pc, #16]	; (23fe8b4 <inet_inet_ntop+0x14>)
 23fe8a4:	6800      	ldr	r0, [r0, #0]
 23fe8a6:	4b04      	ldr	r3, [pc, #16]	; (23fe8b8 <inet_inet_ntop+0x18>)
 23fe8a8:	4403      	add	r3, r0
 23fe8aa:	681b      	ldr	r3, [r3, #0]
 23fe8ac:	695b      	ldr	r3, [r3, #20]
 23fe8ae:	9302      	str	r3, [sp, #8]
 23fe8b0:	bd09      	pop	{r0, r3, pc}
 23fe8b2:	0000      	.short	0x0000
 23fe8b4:	1007adc0 	.word	0x1007adc0
 23fe8b8:	0000004c 	.word	0x0000004c

023fe8bc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fe8bc:	b509      	push	{r0, r3, lr}
 23fe8be:	4804      	ldr	r0, [pc, #16]	; (23fe8d0 <netdb_freeaddrinfo+0x14>)
 23fe8c0:	6800      	ldr	r0, [r0, #0]
 23fe8c2:	4b04      	ldr	r3, [pc, #16]	; (23fe8d4 <netdb_freeaddrinfo+0x18>)
 23fe8c4:	4403      	add	r3, r0
 23fe8c6:	681b      	ldr	r3, [r3, #0]
 23fe8c8:	689b      	ldr	r3, [r3, #8]
 23fe8ca:	9302      	str	r3, [sp, #8]
 23fe8cc:	bd09      	pop	{r0, r3, pc}
 23fe8ce:	0000      	.short	0x0000
 23fe8d0:	1007adc0 	.word	0x1007adc0
 23fe8d4:	00000050 	.word	0x00000050

023fe8d8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fe8d8:	b509      	push	{r0, r3, lr}
 23fe8da:	4804      	ldr	r0, [pc, #16]	; (23fe8ec <netdb_getaddrinfo+0x14>)
 23fe8dc:	6800      	ldr	r0, [r0, #0]
 23fe8de:	4b04      	ldr	r3, [pc, #16]	; (23fe8f0 <netdb_getaddrinfo+0x18>)
 23fe8e0:	4403      	add	r3, r0
 23fe8e2:	681b      	ldr	r3, [r3, #0]
 23fe8e4:	68db      	ldr	r3, [r3, #12]
 23fe8e6:	9302      	str	r3, [sp, #8]
 23fe8e8:	bd09      	pop	{r0, r3, pc}
 23fe8ea:	0000      	.short	0x0000
 23fe8ec:	1007adc0 	.word	0x1007adc0
 23fe8f0:	00000050 	.word	0x00000050

023fe8f4 <hal_spi_set_data_mode>:
DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fe8f4:	b509      	push	{r0, r3, lr}
 23fe8f6:	4804      	ldr	r0, [pc, #16]	; (23fe908 <hal_spi_set_data_mode+0x14>)
 23fe8f8:	6800      	ldr	r0, [r0, #0]
 23fe8fa:	4b04      	ldr	r3, [pc, #16]	; (23fe90c <hal_spi_set_data_mode+0x18>)
 23fe8fc:	4403      	add	r3, r0
 23fe8fe:	681b      	ldr	r3, [r3, #0]
 23fe900:	68db      	ldr	r3, [r3, #12]
 23fe902:	9302      	str	r3, [sp, #8]
 23fe904:	bd09      	pop	{r0, r3, pc}
 23fe906:	0000      	.short	0x0000
 23fe908:	1007adc0 	.word	0x1007adc0
 23fe90c:	00000018 	.word	0x00000018

023fe910 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fe910:	b509      	push	{r0, r3, lr}
 23fe912:	4804      	ldr	r0, [pc, #16]	; (23fe924 <hal_spi_set_clock_divider+0x14>)
 23fe914:	6800      	ldr	r0, [r0, #0]
 23fe916:	4b04      	ldr	r3, [pc, #16]	; (23fe928 <hal_spi_set_clock_divider+0x18>)
 23fe918:	4403      	add	r3, r0
 23fe91a:	681b      	ldr	r3, [r3, #0]
 23fe91c:	691b      	ldr	r3, [r3, #16]
 23fe91e:	9302      	str	r3, [sp, #8]
 23fe920:	bd09      	pop	{r0, r3, pc}
 23fe922:	0000      	.short	0x0000
 23fe924:	1007adc0 	.word	0x1007adc0
 23fe928:	00000018 	.word	0x00000018

023fe92c <hal_spi_init>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fe92c:	b509      	push	{r0, r3, lr}
 23fe92e:	4804      	ldr	r0, [pc, #16]	; (23fe940 <hal_spi_init+0x14>)
 23fe930:	6800      	ldr	r0, [r0, #0]
 23fe932:	4b04      	ldr	r3, [pc, #16]	; (23fe944 <hal_spi_init+0x18>)
 23fe934:	4403      	add	r3, r0
 23fe936:	681b      	ldr	r3, [r3, #0]
 23fe938:	69db      	ldr	r3, [r3, #28]
 23fe93a:	9302      	str	r3, [sp, #8]
 23fe93c:	bd09      	pop	{r0, r3, pc}
 23fe93e:	0000      	.short	0x0000
 23fe940:	1007adc0 	.word	0x1007adc0
 23fe944:	00000018 	.word	0x00000018

023fe948 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fe948:	b509      	push	{r0, r3, lr}
 23fe94a:	4804      	ldr	r0, [pc, #16]	; (23fe95c <hal_spi_is_enabled+0x14>)
 23fe94c:	6800      	ldr	r0, [r0, #0]
 23fe94e:	4b04      	ldr	r3, [pc, #16]	; (23fe960 <hal_spi_is_enabled+0x18>)
 23fe950:	4403      	add	r3, r0
 23fe952:	681b      	ldr	r3, [r3, #0]
 23fe954:	6a1b      	ldr	r3, [r3, #32]
 23fe956:	9302      	str	r3, [sp, #8]
 23fe958:	bd09      	pop	{r0, r3, pc}
 23fe95a:	0000      	.short	0x0000
 23fe95c:	1007adc0 	.word	0x1007adc0
 23fe960:	00000018 	.word	0x00000018

023fe964 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fe964:	b509      	push	{r0, r3, lr}
 23fe966:	4804      	ldr	r0, [pc, #16]	; (23fe978 <hal_spi_info+0x14>)
 23fe968:	6800      	ldr	r0, [r0, #0]
 23fe96a:	4b04      	ldr	r3, [pc, #16]	; (23fe97c <hal_spi_info+0x18>)
 23fe96c:	4403      	add	r3, r0
 23fe96e:	681b      	ldr	r3, [r3, #0]
 23fe970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe972:	9302      	str	r3, [sp, #8]
 23fe974:	bd09      	pop	{r0, r3, pc}
 23fe976:	0000      	.short	0x0000
 23fe978:	1007adc0 	.word	0x1007adc0
 23fe97c:	00000018 	.word	0x00000018

023fe980 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fe980:	b509      	push	{r0, r3, lr}
 23fe982:	4804      	ldr	r0, [pc, #16]	; (23fe994 <hal_spi_transfer_dma+0x14>)
 23fe984:	6800      	ldr	r0, [r0, #0]
 23fe986:	4b04      	ldr	r3, [pc, #16]	; (23fe998 <hal_spi_transfer_dma+0x18>)
 23fe988:	4403      	add	r3, r0
 23fe98a:	681b      	ldr	r3, [r3, #0]
 23fe98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe98e:	9302      	str	r3, [sp, #8]
 23fe990:	bd09      	pop	{r0, r3, pc}
 23fe992:	0000      	.short	0x0000
 23fe994:	1007adc0 	.word	0x1007adc0
 23fe998:	00000018 	.word	0x00000018

023fe99c <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
 23fe99c:	b509      	push	{r0, r3, lr}
 23fe99e:	4804      	ldr	r0, [pc, #16]	; (23fe9b0 <hal_spi_begin_ext+0x14>)
 23fe9a0:	6800      	ldr	r0, [r0, #0]
 23fe9a2:	4b04      	ldr	r3, [pc, #16]	; (23fe9b4 <hal_spi_begin_ext+0x18>)
 23fe9a4:	4403      	add	r3, r0
 23fe9a6:	681b      	ldr	r3, [r3, #0]
 23fe9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe9aa:	9302      	str	r3, [sp, #8]
 23fe9ac:	bd09      	pop	{r0, r3, pc}
 23fe9ae:	0000      	.short	0x0000
 23fe9b0:	1007adc0 	.word	0x1007adc0
 23fe9b4:	00000018 	.word	0x00000018

023fe9b8 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fe9b8:	b509      	push	{r0, r3, lr}
 23fe9ba:	4804      	ldr	r0, [pc, #16]	; (23fe9cc <hal_spi_transfer_dma_status+0x14>)
 23fe9bc:	6800      	ldr	r0, [r0, #0]
 23fe9be:	4b04      	ldr	r3, [pc, #16]	; (23fe9d0 <hal_spi_transfer_dma_status+0x18>)
 23fe9c0:	4403      	add	r3, r0
 23fe9c2:	681b      	ldr	r3, [r3, #0]
 23fe9c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fe9c6:	9302      	str	r3, [sp, #8]
 23fe9c8:	bd09      	pop	{r0, r3, pc}
 23fe9ca:	0000      	.short	0x0000
 23fe9cc:	1007adc0 	.word	0x1007adc0
 23fe9d0:	00000018 	.word	0x00000018

023fe9d4 <hal_spi_acquire>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fe9d4:	b509      	push	{r0, r3, lr}
 23fe9d6:	4804      	ldr	r0, [pc, #16]	; (23fe9e8 <hal_spi_acquire+0x14>)
 23fe9d8:	6800      	ldr	r0, [r0, #0]
 23fe9da:	4b04      	ldr	r3, [pc, #16]	; (23fe9ec <hal_spi_acquire+0x18>)
 23fe9dc:	4403      	add	r3, r0
 23fe9de:	681b      	ldr	r3, [r3, #0]
 23fe9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe9e2:	9302      	str	r3, [sp, #8]
 23fe9e4:	bd09      	pop	{r0, r3, pc}
 23fe9e6:	0000      	.short	0x0000
 23fe9e8:	1007adc0 	.word	0x1007adc0
 23fe9ec:	00000018 	.word	0x00000018

023fe9f0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fe9f0:	b509      	push	{r0, r3, lr}
 23fe9f2:	4804      	ldr	r0, [pc, #16]	; (23fea04 <hal_spi_release+0x14>)
 23fe9f4:	6800      	ldr	r0, [r0, #0]
 23fe9f6:	4b04      	ldr	r3, [pc, #16]	; (23fea08 <hal_spi_release+0x18>)
 23fe9f8:	4403      	add	r3, r0
 23fe9fa:	681b      	ldr	r3, [r3, #0]
 23fe9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe9fe:	9302      	str	r3, [sp, #8]
 23fea00:	bd09      	pop	{r0, r3, pc}
 23fea02:	0000      	.short	0x0000
 23fea04:	1007adc0 	.word	0x1007adc0
 23fea08:	00000018 	.word	0x00000018

023fea0c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fea0c:	b509      	push	{r0, r3, lr}
 23fea0e:	4804      	ldr	r0, [pc, #16]	; (23fea20 <hal_usart_write+0x14>)
 23fea10:	6800      	ldr	r0, [r0, #0]
 23fea12:	4b04      	ldr	r3, [pc, #16]	; (23fea24 <hal_usart_write+0x18>)
 23fea14:	4403      	add	r3, r0
 23fea16:	681b      	ldr	r3, [r3, #0]
 23fea18:	68db      	ldr	r3, [r3, #12]
 23fea1a:	9302      	str	r3, [sp, #8]
 23fea1c:	bd09      	pop	{r0, r3, pc}
 23fea1e:	0000      	.short	0x0000
 23fea20:	1007adc0 	.word	0x1007adc0
 23fea24:	00000024 	.word	0x00000024

023fea28 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fea28:	b509      	push	{r0, r3, lr}
 23fea2a:	4804      	ldr	r0, [pc, #16]	; (23fea3c <hal_usart_available+0x14>)
 23fea2c:	6800      	ldr	r0, [r0, #0]
 23fea2e:	4b04      	ldr	r3, [pc, #16]	; (23fea40 <hal_usart_available+0x18>)
 23fea30:	4403      	add	r3, r0
 23fea32:	681b      	ldr	r3, [r3, #0]
 23fea34:	691b      	ldr	r3, [r3, #16]
 23fea36:	9302      	str	r3, [sp, #8]
 23fea38:	bd09      	pop	{r0, r3, pc}
 23fea3a:	0000      	.short	0x0000
 23fea3c:	1007adc0 	.word	0x1007adc0
 23fea40:	00000024 	.word	0x00000024

023fea44 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fea44:	b509      	push	{r0, r3, lr}
 23fea46:	4804      	ldr	r0, [pc, #16]	; (23fea58 <hal_usart_read+0x14>)
 23fea48:	6800      	ldr	r0, [r0, #0]
 23fea4a:	4b04      	ldr	r3, [pc, #16]	; (23fea5c <hal_usart_read+0x18>)
 23fea4c:	4403      	add	r3, r0
 23fea4e:	681b      	ldr	r3, [r3, #0]
 23fea50:	695b      	ldr	r3, [r3, #20]
 23fea52:	9302      	str	r3, [sp, #8]
 23fea54:	bd09      	pop	{r0, r3, pc}
 23fea56:	0000      	.short	0x0000
 23fea58:	1007adc0 	.word	0x1007adc0
 23fea5c:	00000024 	.word	0x00000024

023fea60 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fea60:	b509      	push	{r0, r3, lr}
 23fea62:	4804      	ldr	r0, [pc, #16]	; (23fea74 <hal_usart_peek+0x14>)
 23fea64:	6800      	ldr	r0, [r0, #0]
 23fea66:	4b04      	ldr	r3, [pc, #16]	; (23fea78 <hal_usart_peek+0x18>)
 23fea68:	4403      	add	r3, r0
 23fea6a:	681b      	ldr	r3, [r3, #0]
 23fea6c:	699b      	ldr	r3, [r3, #24]
 23fea6e:	9302      	str	r3, [sp, #8]
 23fea70:	bd09      	pop	{r0, r3, pc}
 23fea72:	0000      	.short	0x0000
 23fea74:	1007adc0 	.word	0x1007adc0
 23fea78:	00000024 	.word	0x00000024

023fea7c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fea7c:	b509      	push	{r0, r3, lr}
 23fea7e:	4804      	ldr	r0, [pc, #16]	; (23fea90 <hal_usart_flush+0x14>)
 23fea80:	6800      	ldr	r0, [r0, #0]
 23fea82:	4b04      	ldr	r3, [pc, #16]	; (23fea94 <hal_usart_flush+0x18>)
 23fea84:	4403      	add	r3, r0
 23fea86:	681b      	ldr	r3, [r3, #0]
 23fea88:	69db      	ldr	r3, [r3, #28]
 23fea8a:	9302      	str	r3, [sp, #8]
 23fea8c:	bd09      	pop	{r0, r3, pc}
 23fea8e:	0000      	.short	0x0000
 23fea90:	1007adc0 	.word	0x1007adc0
 23fea94:	00000024 	.word	0x00000024

023fea98 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fea98:	b509      	push	{r0, r3, lr}
 23fea9a:	4804      	ldr	r0, [pc, #16]	; (23feaac <hal_usart_is_enabled+0x14>)
 23fea9c:	6800      	ldr	r0, [r0, #0]
 23fea9e:	4b04      	ldr	r3, [pc, #16]	; (23feab0 <hal_usart_is_enabled+0x18>)
 23feaa0:	4403      	add	r3, r0
 23feaa2:	681b      	ldr	r3, [r3, #0]
 23feaa4:	6a1b      	ldr	r3, [r3, #32]
 23feaa6:	9302      	str	r3, [sp, #8]
 23feaa8:	bd09      	pop	{r0, r3, pc}
 23feaaa:	0000      	.short	0x0000
 23feaac:	1007adc0 	.word	0x1007adc0
 23feab0:	00000024 	.word	0x00000024

023feab4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23feab4:	b509      	push	{r0, r3, lr}
 23feab6:	4804      	ldr	r0, [pc, #16]	; (23feac8 <hal_usart_available_data_for_write+0x14>)
 23feab8:	6800      	ldr	r0, [r0, #0]
 23feaba:	4b04      	ldr	r3, [pc, #16]	; (23feacc <hal_usart_available_data_for_write+0x18>)
 23feabc:	4403      	add	r3, r0
 23feabe:	681b      	ldr	r3, [r3, #0]
 23feac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23feac2:	9302      	str	r3, [sp, #8]
 23feac4:	bd09      	pop	{r0, r3, pc}
 23feac6:	0000      	.short	0x0000
 23feac8:	1007adc0 	.word	0x1007adc0
 23feacc:	00000024 	.word	0x00000024

023fead0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fead0:	b509      	push	{r0, r3, lr}
 23fead2:	4804      	ldr	r0, [pc, #16]	; (23feae4 <hal_usart_init_ex+0x14>)
 23fead4:	6800      	ldr	r0, [r0, #0]
 23fead6:	4b04      	ldr	r3, [pc, #16]	; (23feae8 <hal_usart_init_ex+0x18>)
 23fead8:	4403      	add	r3, r0
 23feada:	681b      	ldr	r3, [r3, #0]
 23feadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23feade:	9302      	str	r3, [sp, #8]
 23feae0:	bd09      	pop	{r0, r3, pc}
 23feae2:	0000      	.short	0x0000
 23feae4:	1007adc0 	.word	0x1007adc0
 23feae8:	00000024 	.word	0x00000024

023feaec <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23feaec:	b509      	push	{r0, r3, lr}
 23feaee:	4804      	ldr	r0, [pc, #16]	; (23feb00 <HAL_USB_USART_Init+0x14>)
 23feaf0:	6800      	ldr	r0, [r0, #0]
 23feaf2:	4b04      	ldr	r3, [pc, #16]	; (23feb04 <HAL_USB_USART_Init+0x18>)
 23feaf4:	4403      	add	r3, r0
 23feaf6:	681b      	ldr	r3, [r3, #0]
 23feaf8:	681b      	ldr	r3, [r3, #0]
 23feafa:	9302      	str	r3, [sp, #8]
 23feafc:	bd09      	pop	{r0, r3, pc}
 23feafe:	0000      	.short	0x0000
 23feb00:	1007adc0 	.word	0x1007adc0
 23feb04:	00000034 	.word	0x00000034

023feb08 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23feb08:	b509      	push	{r0, r3, lr}
 23feb0a:	4804      	ldr	r0, [pc, #16]	; (23feb1c <HAL_USB_USART_Begin+0x14>)
 23feb0c:	6800      	ldr	r0, [r0, #0]
 23feb0e:	4b04      	ldr	r3, [pc, #16]	; (23feb20 <HAL_USB_USART_Begin+0x18>)
 23feb10:	4403      	add	r3, r0
 23feb12:	681b      	ldr	r3, [r3, #0]
 23feb14:	685b      	ldr	r3, [r3, #4]
 23feb16:	9302      	str	r3, [sp, #8]
 23feb18:	bd09      	pop	{r0, r3, pc}
 23feb1a:	0000      	.short	0x0000
 23feb1c:	1007adc0 	.word	0x1007adc0
 23feb20:	00000034 	.word	0x00000034

023feb24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23feb24:	b509      	push	{r0, r3, lr}
 23feb26:	4804      	ldr	r0, [pc, #16]	; (23feb38 <HAL_USB_USART_Available_Data+0x14>)
 23feb28:	6800      	ldr	r0, [r0, #0]
 23feb2a:	4b04      	ldr	r3, [pc, #16]	; (23feb3c <HAL_USB_USART_Available_Data+0x18>)
 23feb2c:	4403      	add	r3, r0
 23feb2e:	681b      	ldr	r3, [r3, #0]
 23feb30:	691b      	ldr	r3, [r3, #16]
 23feb32:	9302      	str	r3, [sp, #8]
 23feb34:	bd09      	pop	{r0, r3, pc}
 23feb36:	0000      	.short	0x0000
 23feb38:	1007adc0 	.word	0x1007adc0
 23feb3c:	00000034 	.word	0x00000034

023feb40 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23feb40:	b509      	push	{r0, r3, lr}
 23feb42:	4804      	ldr	r0, [pc, #16]	; (23feb54 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23feb44:	6800      	ldr	r0, [r0, #0]
 23feb46:	4b04      	ldr	r3, [pc, #16]	; (23feb58 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23feb48:	4403      	add	r3, r0
 23feb4a:	681b      	ldr	r3, [r3, #0]
 23feb4c:	695b      	ldr	r3, [r3, #20]
 23feb4e:	9302      	str	r3, [sp, #8]
 23feb50:	bd09      	pop	{r0, r3, pc}
 23feb52:	0000      	.short	0x0000
 23feb54:	1007adc0 	.word	0x1007adc0
 23feb58:	00000034 	.word	0x00000034

023feb5c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23feb5c:	b509      	push	{r0, r3, lr}
 23feb5e:	4804      	ldr	r0, [pc, #16]	; (23feb70 <HAL_USB_USART_Receive_Data+0x14>)
 23feb60:	6800      	ldr	r0, [r0, #0]
 23feb62:	4b04      	ldr	r3, [pc, #16]	; (23feb74 <HAL_USB_USART_Receive_Data+0x18>)
 23feb64:	4403      	add	r3, r0
 23feb66:	681b      	ldr	r3, [r3, #0]
 23feb68:	699b      	ldr	r3, [r3, #24]
 23feb6a:	9302      	str	r3, [sp, #8]
 23feb6c:	bd09      	pop	{r0, r3, pc}
 23feb6e:	0000      	.short	0x0000
 23feb70:	1007adc0 	.word	0x1007adc0
 23feb74:	00000034 	.word	0x00000034

023feb78 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23feb78:	b509      	push	{r0, r3, lr}
 23feb7a:	4804      	ldr	r0, [pc, #16]	; (23feb8c <HAL_USB_USART_Send_Data+0x14>)
 23feb7c:	6800      	ldr	r0, [r0, #0]
 23feb7e:	4b04      	ldr	r3, [pc, #16]	; (23feb90 <HAL_USB_USART_Send_Data+0x18>)
 23feb80:	4403      	add	r3, r0
 23feb82:	681b      	ldr	r3, [r3, #0]
 23feb84:	69db      	ldr	r3, [r3, #28]
 23feb86:	9302      	str	r3, [sp, #8]
 23feb88:	bd09      	pop	{r0, r3, pc}
 23feb8a:	0000      	.short	0x0000
 23feb8c:	1007adc0 	.word	0x1007adc0
 23feb90:	00000034 	.word	0x00000034

023feb94 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23feb94:	b509      	push	{r0, r3, lr}
 23feb96:	4804      	ldr	r0, [pc, #16]	; (23feba8 <HAL_USB_USART_Flush_Data+0x14>)
 23feb98:	6800      	ldr	r0, [r0, #0]
 23feb9a:	4b04      	ldr	r3, [pc, #16]	; (23febac <HAL_USB_USART_Flush_Data+0x18>)
 23feb9c:	4403      	add	r3, r0
 23feb9e:	681b      	ldr	r3, [r3, #0]
 23feba0:	6a1b      	ldr	r3, [r3, #32]
 23feba2:	9302      	str	r3, [sp, #8]
 23feba4:	bd09      	pop	{r0, r3, pc}
 23feba6:	0000      	.short	0x0000
 23feba8:	1007adc0 	.word	0x1007adc0
 23febac:	00000034 	.word	0x00000034

023febb0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23febb0:	b509      	push	{r0, r3, lr}
 23febb2:	4804      	ldr	r0, [pc, #16]	; (23febc4 <set_system_mode+0x14>)
 23febb4:	6800      	ldr	r0, [r0, #0]
 23febb6:	4b04      	ldr	r3, [pc, #16]	; (23febc8 <set_system_mode+0x18>)
 23febb8:	4403      	add	r3, r0
 23febba:	681b      	ldr	r3, [r3, #0]
 23febbc:	685b      	ldr	r3, [r3, #4]
 23febbe:	9302      	str	r3, [sp, #8]
 23febc0:	bd09      	pop	{r0, r3, pc}
 23febc2:	0000      	.short	0x0000
 23febc4:	1007adc0 	.word	0x1007adc0
 23febc8:	00000008 	.word	0x00000008

023febcc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23febcc:	b509      	push	{r0, r3, lr}
 23febce:	4804      	ldr	r0, [pc, #16]	; (23febe0 <system_delay_ms+0x14>)
 23febd0:	6800      	ldr	r0, [r0, #0]
 23febd2:	4b04      	ldr	r3, [pc, #16]	; (23febe4 <system_delay_ms+0x18>)
 23febd4:	4403      	add	r3, r0
 23febd6:	681b      	ldr	r3, [r3, #0]
 23febd8:	695b      	ldr	r3, [r3, #20]
 23febda:	9302      	str	r3, [sp, #8]
 23febdc:	bd09      	pop	{r0, r3, pc}
 23febde:	0000      	.short	0x0000
 23febe0:	1007adc0 	.word	0x1007adc0
 23febe4:	00000008 	.word	0x00000008

023febe8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23febe8:	b509      	push	{r0, r3, lr}
 23febea:	4804      	ldr	r0, [pc, #16]	; (23febfc <system_thread_set_state+0x14>)
 23febec:	6800      	ldr	r0, [r0, #0]
 23febee:	4b04      	ldr	r3, [pc, #16]	; (23fec00 <system_thread_set_state+0x18>)
 23febf0:	4403      	add	r3, r0
 23febf2:	681b      	ldr	r3, [r3, #0]
 23febf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23febf6:	9302      	str	r3, [sp, #8]
 23febf8:	bd09      	pop	{r0, r3, pc}
 23febfa:	0000      	.short	0x0000
 23febfc:	1007adc0 	.word	0x1007adc0
 23fec00:	00000008 	.word	0x00000008

023fec04 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fec04:	b509      	push	{r0, r3, lr}
 23fec06:	4804      	ldr	r0, [pc, #16]	; (23fec18 <system_ctrl_set_app_request_handler+0x14>)
 23fec08:	6800      	ldr	r0, [r0, #0]
 23fec0a:	4b04      	ldr	r3, [pc, #16]	; (23fec1c <system_ctrl_set_app_request_handler+0x18>)
 23fec0c:	4403      	add	r3, r0
 23fec0e:	681b      	ldr	r3, [r3, #0]
 23fec10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fec14:	9302      	str	r3, [sp, #8]
 23fec16:	bd09      	pop	{r0, r3, pc}
 23fec18:	1007adc0 	.word	0x1007adc0
 23fec1c:	00000008 	.word	0x00000008

023fec20 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fec20:	b509      	push	{r0, r3, lr}
 23fec22:	4804      	ldr	r0, [pc, #16]	; (23fec34 <system_ctrl_set_result+0x14>)
 23fec24:	6800      	ldr	r0, [r0, #0]
 23fec26:	4b04      	ldr	r3, [pc, #16]	; (23fec38 <system_ctrl_set_result+0x18>)
 23fec28:	4403      	add	r3, r0
 23fec2a:	681b      	ldr	r3, [r3, #0]
 23fec2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fec30:	9302      	str	r3, [sp, #8]
 23fec32:	bd09      	pop	{r0, r3, pc}
 23fec34:	1007adc0 	.word	0x1007adc0
 23fec38:	00000008 	.word	0x00000008

023fec3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fec3c:	b509      	push	{r0, r3, lr}
 23fec3e:	4804      	ldr	r0, [pc, #16]	; (23fec50 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fec40:	6800      	ldr	r0, [r0, #0]
 23fec42:	4b04      	ldr	r3, [pc, #16]	; (23fec54 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fec44:	4403      	add	r3, r0
 23fec46:	681b      	ldr	r3, [r3, #0]
 23fec48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fec4a:	9302      	str	r3, [sp, #8]
 23fec4c:	bd09      	pop	{r0, r3, pc}
 23fec4e:	0000      	.short	0x0000
 23fec50:	1007adc0 	.word	0x1007adc0
 23fec54:	0000002c 	.word	0x0000002c

023fec58 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23fec58:	b509      	push	{r0, r3, lr}
 23fec5a:	4804      	ldr	r0, [pc, #16]	; (23fec6c <spark_cloud_disconnect+0x14>)
 23fec5c:	6800      	ldr	r0, [r0, #0]
 23fec5e:	4b04      	ldr	r3, [pc, #16]	; (23fec70 <spark_cloud_disconnect+0x18>)
 23fec60:	4403      	add	r3, r0
 23fec62:	681b      	ldr	r3, [r3, #0]
 23fec64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fec66:	9302      	str	r3, [sp, #8]
 23fec68:	bd09      	pop	{r0, r3, pc}
 23fec6a:	0000      	.short	0x0000
 23fec6c:	1007adc0 	.word	0x1007adc0
 23fec70:	0000002c 	.word	0x0000002c

023fec74 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fec74:	b509      	push	{r0, r3, lr}
 23fec76:	4804      	ldr	r0, [pc, #16]	; (23fec88 <network_connect+0x14>)
 23fec78:	6800      	ldr	r0, [r0, #0]
 23fec7a:	4b04      	ldr	r3, [pc, #16]	; (23fec8c <network_connect+0x18>)
 23fec7c:	4403      	add	r3, r0
 23fec7e:	681b      	ldr	r3, [r3, #0]
 23fec80:	685b      	ldr	r3, [r3, #4]
 23fec82:	9302      	str	r3, [sp, #8]
 23fec84:	bd09      	pop	{r0, r3, pc}
 23fec86:	0000      	.short	0x0000
 23fec88:	1007adc0 	.word	0x1007adc0
 23fec8c:	00000028 	.word	0x00000028

023fec90 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fec90:	b509      	push	{r0, r3, lr}
 23fec92:	4804      	ldr	r0, [pc, #16]	; (23feca4 <network_connecting+0x14>)
 23fec94:	6800      	ldr	r0, [r0, #0]
 23fec96:	4b04      	ldr	r3, [pc, #16]	; (23feca8 <network_connecting+0x18>)
 23fec98:	4403      	add	r3, r0
 23fec9a:	681b      	ldr	r3, [r3, #0]
 23fec9c:	689b      	ldr	r3, [r3, #8]
 23fec9e:	9302      	str	r3, [sp, #8]
 23feca0:	bd09      	pop	{r0, r3, pc}
 23feca2:	0000      	.short	0x0000
 23feca4:	1007adc0 	.word	0x1007adc0
 23feca8:	00000028 	.word	0x00000028

023fecac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fecac:	b509      	push	{r0, r3, lr}
 23fecae:	4804      	ldr	r0, [pc, #16]	; (23fecc0 <network_disconnect+0x14>)
 23fecb0:	6800      	ldr	r0, [r0, #0]
 23fecb2:	4b04      	ldr	r3, [pc, #16]	; (23fecc4 <network_disconnect+0x18>)
 23fecb4:	4403      	add	r3, r0
 23fecb6:	681b      	ldr	r3, [r3, #0]
 23fecb8:	68db      	ldr	r3, [r3, #12]
 23fecba:	9302      	str	r3, [sp, #8]
 23fecbc:	bd09      	pop	{r0, r3, pc}
 23fecbe:	0000      	.short	0x0000
 23fecc0:	1007adc0 	.word	0x1007adc0
 23fecc4:	00000028 	.word	0x00000028

023fecc8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fecc8:	b509      	push	{r0, r3, lr}
 23fecca:	4804      	ldr	r0, [pc, #16]	; (23fecdc <network_ready+0x14>)
 23feccc:	6800      	ldr	r0, [r0, #0]
 23fecce:	4b04      	ldr	r3, [pc, #16]	; (23fece0 <network_ready+0x18>)
 23fecd0:	4403      	add	r3, r0
 23fecd2:	681b      	ldr	r3, [r3, #0]
 23fecd4:	691b      	ldr	r3, [r3, #16]
 23fecd6:	9302      	str	r3, [sp, #8]
 23fecd8:	bd09      	pop	{r0, r3, pc}
 23fecda:	0000      	.short	0x0000
 23fecdc:	1007adc0 	.word	0x1007adc0
 23fece0:	00000028 	.word	0x00000028

023fece4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fece4:	b509      	push	{r0, r3, lr}
 23fece6:	4804      	ldr	r0, [pc, #16]	; (23fecf8 <network_on+0x14>)
 23fece8:	6800      	ldr	r0, [r0, #0]
 23fecea:	4b04      	ldr	r3, [pc, #16]	; (23fecfc <network_on+0x18>)
 23fecec:	4403      	add	r3, r0
 23fecee:	681b      	ldr	r3, [r3, #0]
 23fecf0:	695b      	ldr	r3, [r3, #20]
 23fecf2:	9302      	str	r3, [sp, #8]
 23fecf4:	bd09      	pop	{r0, r3, pc}
 23fecf6:	0000      	.short	0x0000
 23fecf8:	1007adc0 	.word	0x1007adc0
 23fecfc:	00000028 	.word	0x00000028

023fed00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fed00:	b509      	push	{r0, r3, lr}
 23fed02:	4804      	ldr	r0, [pc, #16]	; (23fed14 <network_off+0x14>)
 23fed04:	6800      	ldr	r0, [r0, #0]
 23fed06:	4b04      	ldr	r3, [pc, #16]	; (23fed18 <network_off+0x18>)
 23fed08:	4403      	add	r3, r0
 23fed0a:	681b      	ldr	r3, [r3, #0]
 23fed0c:	699b      	ldr	r3, [r3, #24]
 23fed0e:	9302      	str	r3, [sp, #8]
 23fed10:	bd09      	pop	{r0, r3, pc}
 23fed12:	0000      	.short	0x0000
 23fed14:	1007adc0 	.word	0x1007adc0
 23fed18:	00000028 	.word	0x00000028

023fed1c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fed1c:	b509      	push	{r0, r3, lr}
 23fed1e:	4804      	ldr	r0, [pc, #16]	; (23fed30 <network_listen+0x14>)
 23fed20:	6800      	ldr	r0, [r0, #0]
 23fed22:	4b04      	ldr	r3, [pc, #16]	; (23fed34 <network_listen+0x18>)
 23fed24:	4403      	add	r3, r0
 23fed26:	681b      	ldr	r3, [r3, #0]
 23fed28:	69db      	ldr	r3, [r3, #28]
 23fed2a:	9302      	str	r3, [sp, #8]
 23fed2c:	bd09      	pop	{r0, r3, pc}
 23fed2e:	0000      	.short	0x0000
 23fed30:	1007adc0 	.word	0x1007adc0
 23fed34:	00000028 	.word	0x00000028

023fed38 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fed38:	b509      	push	{r0, r3, lr}
 23fed3a:	4804      	ldr	r0, [pc, #16]	; (23fed4c <network_listening+0x14>)
 23fed3c:	6800      	ldr	r0, [r0, #0]
 23fed3e:	4b04      	ldr	r3, [pc, #16]	; (23fed50 <network_listening+0x18>)
 23fed40:	4403      	add	r3, r0
 23fed42:	681b      	ldr	r3, [r3, #0]
 23fed44:	6a1b      	ldr	r3, [r3, #32]
 23fed46:	9302      	str	r3, [sp, #8]
 23fed48:	bd09      	pop	{r0, r3, pc}
 23fed4a:	0000      	.short	0x0000
 23fed4c:	1007adc0 	.word	0x1007adc0
 23fed50:	00000028 	.word	0x00000028

023fed54 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fed54:	b509      	push	{r0, r3, lr}
 23fed56:	4804      	ldr	r0, [pc, #16]	; (23fed68 <network_set_listen_timeout+0x14>)
 23fed58:	6800      	ldr	r0, [r0, #0]
 23fed5a:	4b04      	ldr	r3, [pc, #16]	; (23fed6c <network_set_listen_timeout+0x18>)
 23fed5c:	4403      	add	r3, r0
 23fed5e:	681b      	ldr	r3, [r3, #0]
 23fed60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fed62:	9302      	str	r3, [sp, #8]
 23fed64:	bd09      	pop	{r0, r3, pc}
 23fed66:	0000      	.short	0x0000
 23fed68:	1007adc0 	.word	0x1007adc0
 23fed6c:	00000028 	.word	0x00000028

023fed70 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fed70:	b509      	push	{r0, r3, lr}
 23fed72:	4804      	ldr	r0, [pc, #16]	; (23fed84 <network_get_listen_timeout+0x14>)
 23fed74:	6800      	ldr	r0, [r0, #0]
 23fed76:	4b04      	ldr	r3, [pc, #16]	; (23fed88 <network_get_listen_timeout+0x18>)
 23fed78:	4403      	add	r3, r0
 23fed7a:	681b      	ldr	r3, [r3, #0]
 23fed7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fed7e:	9302      	str	r3, [sp, #8]
 23fed80:	bd09      	pop	{r0, r3, pc}
 23fed82:	0000      	.short	0x0000
 23fed84:	1007adc0 	.word	0x1007adc0
 23fed88:	00000028 	.word	0x00000028

023fed8c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fed8c:	b509      	push	{r0, r3, lr}
 23fed8e:	4804      	ldr	r0, [pc, #16]	; (23feda0 <network_is_on+0x14>)
 23fed90:	6800      	ldr	r0, [r0, #0]
 23fed92:	4b04      	ldr	r3, [pc, #16]	; (23feda4 <network_is_on+0x18>)
 23fed94:	4403      	add	r3, r0
 23fed96:	681b      	ldr	r3, [r3, #0]
 23fed98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fed9a:	9302      	str	r3, [sp, #8]
 23fed9c:	bd09      	pop	{r0, r3, pc}
 23fed9e:	0000      	.short	0x0000
 23feda0:	1007adc0 	.word	0x1007adc0
 23feda4:	00000028 	.word	0x00000028

023feda8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23feda8:	b509      	push	{r0, r3, lr}
 23fedaa:	4804      	ldr	r0, [pc, #16]	; (23fedbc <network_is_off+0x14>)
 23fedac:	6800      	ldr	r0, [r0, #0]
 23fedae:	4b04      	ldr	r3, [pc, #16]	; (23fedc0 <network_is_off+0x18>)
 23fedb0:	4403      	add	r3, r0
 23fedb2:	681b      	ldr	r3, [r3, #0]
 23fedb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fedb6:	9302      	str	r3, [sp, #8]
 23fedb8:	bd09      	pop	{r0, r3, pc}
 23fedba:	0000      	.short	0x0000
 23fedbc:	1007adc0 	.word	0x1007adc0
 23fedc0:	00000028 	.word	0x00000028

023fedc4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fedc4:	b509      	push	{r0, r3, lr}
 23fedc6:	4804      	ldr	r0, [pc, #16]	; (23fedd8 <malloc+0x14>)
 23fedc8:	6800      	ldr	r0, [r0, #0]
 23fedca:	4b04      	ldr	r3, [pc, #16]	; (23feddc <malloc+0x18>)
 23fedcc:	4403      	add	r3, r0
 23fedce:	681b      	ldr	r3, [r3, #0]
 23fedd0:	681b      	ldr	r3, [r3, #0]
 23fedd2:	9302      	str	r3, [sp, #8]
 23fedd4:	bd09      	pop	{r0, r3, pc}
 23fedd6:	0000      	.short	0x0000
 23fedd8:	1007adc0 	.word	0x1007adc0
 23feddc:	00000004 	.word	0x00000004

023fede0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fede0:	b509      	push	{r0, r3, lr}
 23fede2:	4804      	ldr	r0, [pc, #16]	; (23fedf4 <free+0x14>)
 23fede4:	6800      	ldr	r0, [r0, #0]
 23fede6:	4b04      	ldr	r3, [pc, #16]	; (23fedf8 <free+0x18>)
 23fede8:	4403      	add	r3, r0
 23fedea:	681b      	ldr	r3, [r3, #0]
 23fedec:	685b      	ldr	r3, [r3, #4]
 23fedee:	9302      	str	r3, [sp, #8]
 23fedf0:	bd09      	pop	{r0, r3, pc}
 23fedf2:	0000      	.short	0x0000
 23fedf4:	1007adc0 	.word	0x1007adc0
 23fedf8:	00000004 	.word	0x00000004

023fedfc <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fedfc:	b509      	push	{r0, r3, lr}
 23fedfe:	4804      	ldr	r0, [pc, #16]	; (23fee10 <__assert_func+0x14>)
 23fee00:	6800      	ldr	r0, [r0, #0]
 23fee02:	4b04      	ldr	r3, [pc, #16]	; (23fee14 <__assert_func+0x18>)
 23fee04:	4403      	add	r3, r0
 23fee06:	681b      	ldr	r3, [r3, #0]
 23fee08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fee0a:	9302      	str	r3, [sp, #8]
 23fee0c:	bd09      	pop	{r0, r3, pc}
 23fee0e:	0000      	.short	0x0000
 23fee10:	1007adc0 	.word	0x1007adc0
 23fee14:	00000004 	.word	0x00000004

023fee18 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fee18:	b509      	push	{r0, r3, lr}
 23fee1a:	4804      	ldr	r0, [pc, #16]	; (23fee2c <newlib_impure_ptr_callback+0x14>)
 23fee1c:	6800      	ldr	r0, [r0, #0]
 23fee1e:	4b04      	ldr	r3, [pc, #16]	; (23fee30 <newlib_impure_ptr_callback+0x18>)
 23fee20:	4403      	add	r3, r0
 23fee22:	681b      	ldr	r3, [r3, #0]
 23fee24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fee26:	9302      	str	r3, [sp, #8]
 23fee28:	bd09      	pop	{r0, r3, pc}
 23fee2a:	0000      	.short	0x0000
 23fee2c:	1007adc0 	.word	0x1007adc0
 23fee30:	00000004 	.word	0x00000004

023fee34 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fee34:	2100      	movs	r1, #0
 23fee36:	f7ff bec9 	b.w	23febcc <system_delay_ms>
	...

023fee3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fee3c:	2300      	movs	r3, #0
 23fee3e:	4802      	ldr	r0, [pc, #8]	; (23fee48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fee40:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fee42:	f7ff bc77 	b.w	23fe734 <os_mutex_recursive_create>
 23fee46:	bf00      	nop
 23fee48:	1007ae8c 	.word	0x1007ae8c

023fee4c <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23fee4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 23fee4e:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 23fee50:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 23fee52:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 23fee56:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 23fee58:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 23fee5c:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 23fee60:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 23fee62:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 23fee66:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 23fee6a:	6843      	ldr	r3, [r0, #4]
 23fee6c:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 23fee6e:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fee70:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 23fee72:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fee76:	f7ff feef 	bl	23fec58 <spark_cloud_disconnect>
}
 23fee7a:	b005      	add	sp, #20
 23fee7c:	f85d fb04 	ldr.w	pc, [sp], #4

023fee80 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fee80:	2200      	movs	r2, #0
 23fee82:	6840      	ldr	r0, [r0, #4]
 23fee84:	4611      	mov	r1, r2
 23fee86:	f7ff bf57 	b.w	23fed38 <network_listening>

023fee8a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fee8a:	2200      	movs	r2, #0
 23fee8c:	6840      	ldr	r0, [r0, #4]
 23fee8e:	4611      	mov	r1, r2
 23fee90:	f7ff bf6e 	b.w	23fed70 <network_get_listen_timeout>

023fee94 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fee94:	2200      	movs	r2, #0
 23fee96:	6840      	ldr	r0, [r0, #4]
 23fee98:	f7ff bf5c 	b.w	23fed54 <network_set_listen_timeout>

023fee9c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fee9c:	2200      	movs	r2, #0
 23fee9e:	6840      	ldr	r0, [r0, #4]
 23feea0:	f081 0101 	eor.w	r1, r1, #1
 23feea4:	f7ff bf3a 	b.w	23fed1c <network_listen>

023feea8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23feea8:	2300      	movs	r3, #0
 23feeaa:	6840      	ldr	r0, [r0, #4]
 23feeac:	461a      	mov	r2, r3
 23feeae:	4619      	mov	r1, r3
 23feeb0:	f7ff bf26 	b.w	23fed00 <network_off>

023feeb4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23feeb4:	2300      	movs	r3, #0
 23feeb6:	6840      	ldr	r0, [r0, #4]
 23feeb8:	461a      	mov	r2, r3
 23feeba:	4619      	mov	r1, r3
 23feebc:	f7ff bf12 	b.w	23fece4 <network_on>

023feec0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23feec0:	2200      	movs	r2, #0
 23feec2:	6840      	ldr	r0, [r0, #4]
 23feec4:	4611      	mov	r1, r2
 23feec6:	f7ff beff 	b.w	23fecc8 <network_ready>

023feeca <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23feeca:	2200      	movs	r2, #0
 23feecc:	6840      	ldr	r0, [r0, #4]
 23feece:	4611      	mov	r1, r2
 23feed0:	f7ff bede 	b.w	23fec90 <network_connecting>

023feed4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23feed4:	2200      	movs	r2, #0
 23feed6:	2102      	movs	r1, #2
 23feed8:	6840      	ldr	r0, [r0, #4]
 23feeda:	f7ff bee7 	b.w	23fecac <network_disconnect>

023feede <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23feede:	2300      	movs	r3, #0
 23feee0:	6840      	ldr	r0, [r0, #4]
 23feee2:	461a      	mov	r2, r3
 23feee4:	f7ff bec6 	b.w	23fec74 <network_connect>

023feee8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23feee8:	2203      	movs	r2, #3
 23feeea:	4b02      	ldr	r3, [pc, #8]	; (23feef4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23feeec:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23feeee:	4a02      	ldr	r2, [pc, #8]	; (23feef8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23feef0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23feef2:	4770      	bx	lr
 23feef4:	1007ae90 	.word	0x1007ae90
 23feef8:	023ffde0 	.word	0x023ffde0

023feefc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23feefc:	4770      	bx	lr

023feefe <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23feefe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fef00:	4606      	mov	r6, r0
 23fef02:	4615      	mov	r5, r2
 23fef04:	460c      	mov	r4, r1
 23fef06:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fef08:	42bc      	cmp	r4, r7
 23fef0a:	d006      	beq.n	23fef1a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fef0c:	6833      	ldr	r3, [r6, #0]
 23fef0e:	4630      	mov	r0, r6
 23fef10:	689b      	ldr	r3, [r3, #8]
 23fef12:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fef16:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fef18:	e7f6      	b.n	23fef08 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fef1a:	4628      	mov	r0, r5
 23fef1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fef1e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fef1e:	2200      	movs	r2, #0
 23fef20:	7c00      	ldrb	r0, [r0, #16]
 23fef22:	f7ff bc5b 	b.w	23fe7dc <hal_i2c_write>

023fef26 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fef26:	2100      	movs	r1, #0
 23fef28:	7c00      	ldrb	r0, [r0, #16]
 23fef2a:	f7ff bc65 	b.w	23fe7f8 <hal_i2c_available>

023fef2e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fef2e:	2100      	movs	r1, #0
 23fef30:	7c00      	ldrb	r0, [r0, #16]
 23fef32:	f7ff bc6f 	b.w	23fe814 <hal_i2c_read>

023fef36 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fef36:	2100      	movs	r1, #0
 23fef38:	7c00      	ldrb	r0, [r0, #16]
 23fef3a:	f7ff bc79 	b.w	23fe830 <hal_i2c_peek>

023fef3e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fef3e:	2100      	movs	r1, #0
 23fef40:	7c00      	ldrb	r0, [r0, #16]
 23fef42:	f7ff bc83 	b.w	23fe84c <hal_i2c_flush>

023fef46 <_ZN7TwoWireD0Ev>:
 23fef46:	b510      	push	{r4, lr}
 23fef48:	4604      	mov	r4, r0
 23fef4a:	2114      	movs	r1, #20
 23fef4c:	f7fe fff7 	bl	23fdf3e <_ZdlPvj>
 23fef50:	4620      	mov	r0, r4
 23fef52:	bd10      	pop	{r4, pc}

023fef54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fef54:	b538      	push	{r3, r4, r5, lr}
 23fef56:	4604      	mov	r4, r0
 23fef58:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fef5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fef5e:	2200      	movs	r2, #0
 23fef60:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fef64:	4b09      	ldr	r3, [pc, #36]	; (23fef8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fef66:	4608      	mov	r0, r1
  _i2c = i2c;
 23fef68:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fef6a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fef6c:	4629      	mov	r1, r5
 23fef6e:	f7ff fc89 	bl	23fe884 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fef72:	30bf      	adds	r0, #191	; 0xbf
 23fef74:	d108      	bne.n	23fef88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fef76:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fef78:	07db      	lsls	r3, r3, #31
 23fef7a:	d505      	bpl.n	23fef88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fef7c:	6868      	ldr	r0, [r5, #4]
 23fef7e:	f7ff ff2f 	bl	23fede0 <free>
    free(conf.tx_buffer);
 23fef82:	68e8      	ldr	r0, [r5, #12]
 23fef84:	f7ff ff2c 	bl	23fede0 <free>
}
 23fef88:	4620      	mov	r0, r4
 23fef8a:	bd38      	pop	{r3, r4, r5, pc}
 23fef8c:	023ffe1c 	.word	0x023ffe1c

023fef90 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fef90:	4770      	bx	lr

023fef92 <_ZN9IPAddressD0Ev>:
 23fef92:	b510      	push	{r4, lr}
 23fef94:	4604      	mov	r4, r0
 23fef96:	2118      	movs	r1, #24
 23fef98:	f7fe ffd1 	bl	23fdf3e <_ZdlPvj>
 23fef9c:	4620      	mov	r0, r4
 23fef9e:	bd10      	pop	{r4, pc}

023fefa0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fefa0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fefa2:	7d03      	ldrb	r3, [r0, #20]
{
 23fefa4:	460e      	mov	r6, r1
	if (address.v==6) {
 23fefa6:	2b06      	cmp	r3, #6
 23fefa8:	f04f 0400 	mov.w	r4, #0
{
 23fefac:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fefae:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fefb2:	d012      	beq.n	23fefda <_ZNK9IPAddress7printToER5Print+0x3a>
 23fefb4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fefb8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fefbc:	220a      	movs	r2, #10
 23fefbe:	4630      	mov	r0, r6
 23fefc0:	f000 f95d 	bl	23ff27e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fefc4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fefc6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fefc8:	d019      	beq.n	23feffe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fefca:	2c00      	cmp	r4, #0
 23fefcc:	d0f4      	beq.n	23fefb8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fefce:	212e      	movs	r1, #46	; 0x2e
 23fefd0:	4630      	mov	r0, r6
 23fefd2:	f000 f93b 	bl	23ff24c <_ZN5Print5printEc>
 23fefd6:	4404      	add	r4, r0
 23fefd8:	e7ee      	b.n	23fefb8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fefda:	232f      	movs	r3, #47	; 0x2f
 23fefdc:	466a      	mov	r2, sp
 23fefde:	4639      	mov	r1, r7
 23fefe0:	200a      	movs	r0, #10
		buf[0] = 0;
 23fefe2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fefe6:	f7ff fc5b 	bl	23fe8a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fefea:	4668      	mov	r0, sp
 23fefec:	f7fe ff80 	bl	23fdef0 <strlen>
 23feff0:	6833      	ldr	r3, [r6, #0]
 23feff2:	4602      	mov	r2, r0
 23feff4:	4669      	mov	r1, sp
 23feff6:	4630      	mov	r0, r6
 23feff8:	68db      	ldr	r3, [r3, #12]
 23feffa:	4798      	blx	r3
 23feffc:	4604      	mov	r4, r0
    }
    return n;
}
 23feffe:	4620      	mov	r0, r4
 23ff000:	b00d      	add	sp, #52	; 0x34
 23ff002:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff004 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23ff004:	b510      	push	{r4, lr}
 23ff006:	4604      	mov	r4, r0
 23ff008:	4b04      	ldr	r3, [pc, #16]	; (23ff01c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23ff00a:	2211      	movs	r2, #17
 23ff00c:	2100      	movs	r1, #0
 23ff00e:	f840 3b04 	str.w	r3, [r0], #4
 23ff012:	f000 fe26 	bl	23ffc62 <memset>
}
 23ff016:	4620      	mov	r0, r4
 23ff018:	bd10      	pop	{r4, pc}
 23ff01a:	bf00      	nop
 23ff01c:	023ffe44 	.word	0x023ffe44

023ff020 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23ff020:	4603      	mov	r3, r0
 23ff022:	4a07      	ldr	r2, [pc, #28]	; (23ff040 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23ff024:	b510      	push	{r4, lr}
 23ff026:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23ff02a:	f101 0210 	add.w	r2, r1, #16
 23ff02e:	f851 4b04 	ldr.w	r4, [r1], #4
 23ff032:	4291      	cmp	r1, r2
 23ff034:	f843 4b04 	str.w	r4, [r3], #4
 23ff038:	d1f9      	bne.n	23ff02e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23ff03a:	780a      	ldrb	r2, [r1, #0]
 23ff03c:	701a      	strb	r2, [r3, #0]
}
 23ff03e:	bd10      	pop	{r4, pc}
 23ff040:	023ffe44 	.word	0x023ffe44

023ff044 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23ff044:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23ff046:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23ff04a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23ff04e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23ff052:	2304      	movs	r3, #4
 23ff054:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23ff058:	6041      	str	r1, [r0, #4]
 23ff05a:	7503      	strb	r3, [r0, #20]
}
 23ff05c:	bd10      	pop	{r4, pc}
	...

023ff060 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23ff060:	b507      	push	{r0, r1, r2, lr}
 23ff062:	4b06      	ldr	r3, [pc, #24]	; (23ff07c <_ZN9IPAddressC1EPKh+0x1c>)
 23ff064:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23ff066:	78cb      	ldrb	r3, [r1, #3]
 23ff068:	9300      	str	r3, [sp, #0]
 23ff06a:	788b      	ldrb	r3, [r1, #2]
 23ff06c:	784a      	ldrb	r2, [r1, #1]
 23ff06e:	7809      	ldrb	r1, [r1, #0]
 23ff070:	f7ff ffe8 	bl	23ff044 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23ff074:	b003      	add	sp, #12
 23ff076:	f85d fb04 	ldr.w	pc, [sp], #4
 23ff07a:	bf00      	nop
 23ff07c:	023ffe44 	.word	0x023ffe44

023ff080 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23ff080:	4b01      	ldr	r3, [pc, #4]	; (23ff088 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23ff082:	4a02      	ldr	r2, [pc, #8]	; (23ff08c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23ff084:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23ff086:	4770      	bx	lr
 23ff088:	1007ae98 	.word	0x1007ae98
 23ff08c:	023ffe50 	.word	0x023ffe50

023ff090 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff090:	2300      	movs	r3, #0
 23ff092:	6840      	ldr	r0, [r0, #4]
 23ff094:	461a      	mov	r2, r3
 23ff096:	f7ff bded 	b.w	23fec74 <network_connect>

023ff09a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff09a:	2200      	movs	r2, #0
 23ff09c:	2102      	movs	r1, #2
 23ff09e:	6840      	ldr	r0, [r0, #4]
 23ff0a0:	f7ff be04 	b.w	23fecac <network_disconnect>

023ff0a4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff0a4:	2200      	movs	r2, #0
 23ff0a6:	6840      	ldr	r0, [r0, #4]
 23ff0a8:	4611      	mov	r1, r2
 23ff0aa:	f7ff bdf1 	b.w	23fec90 <network_connecting>

023ff0ae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff0ae:	2200      	movs	r2, #0
 23ff0b0:	6840      	ldr	r0, [r0, #4]
 23ff0b2:	4611      	mov	r1, r2
 23ff0b4:	f7ff be08 	b.w	23fecc8 <network_ready>

023ff0b8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff0b8:	2300      	movs	r3, #0
 23ff0ba:	6840      	ldr	r0, [r0, #4]
 23ff0bc:	461a      	mov	r2, r3
 23ff0be:	4619      	mov	r1, r3
 23ff0c0:	f7ff be10 	b.w	23fece4 <network_on>

023ff0c4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff0c4:	2300      	movs	r3, #0
 23ff0c6:	6840      	ldr	r0, [r0, #4]
 23ff0c8:	461a      	mov	r2, r3
 23ff0ca:	4619      	mov	r1, r3
 23ff0cc:	f7ff be18 	b.w	23fed00 <network_off>

023ff0d0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff0d0:	2100      	movs	r1, #0
 23ff0d2:	6840      	ldr	r0, [r0, #4]
 23ff0d4:	f7ff be5a 	b.w	23fed8c <network_is_on>

023ff0d8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff0d8:	2100      	movs	r1, #0
 23ff0da:	6840      	ldr	r0, [r0, #4]
 23ff0dc:	f7ff be64 	b.w	23feda8 <network_is_off>

023ff0e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff0e0:	2200      	movs	r2, #0
 23ff0e2:	6840      	ldr	r0, [r0, #4]
 23ff0e4:	f081 0101 	eor.w	r1, r1, #1
 23ff0e8:	f7ff be18 	b.w	23fed1c <network_listen>

023ff0ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff0ec:	2200      	movs	r2, #0
 23ff0ee:	6840      	ldr	r0, [r0, #4]
 23ff0f0:	f7ff be30 	b.w	23fed54 <network_set_listen_timeout>

023ff0f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff0f4:	2200      	movs	r2, #0
 23ff0f6:	6840      	ldr	r0, [r0, #4]
 23ff0f8:	4611      	mov	r1, r2
 23ff0fa:	f7ff be39 	b.w	23fed70 <network_get_listen_timeout>

023ff0fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff0fe:	2200      	movs	r2, #0
 23ff100:	6840      	ldr	r0, [r0, #4]
 23ff102:	4611      	mov	r1, r2
 23ff104:	f7ff be18 	b.w	23fed38 <network_listening>

023ff108 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff10c:	b095      	sub	sp, #84	; 0x54
 23ff10e:	4614      	mov	r4, r2
 23ff110:	460d      	mov	r5, r1
 23ff112:	4607      	mov	r7, r0
    IPAddress addr;
 23ff114:	f7ff ff76 	bl	23ff004 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff118:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff11a:	221c      	movs	r2, #28
 23ff11c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff11e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff120:	f000 fd9f 	bl	23ffc62 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff124:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff126:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff128:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff12a:	2100      	movs	r1, #0
 23ff12c:	466b      	mov	r3, sp
 23ff12e:	aa0c      	add	r2, sp, #48	; 0x30
 23ff130:	f7ff fbd2 	bl	23fe8d8 <netdb_getaddrinfo>
    if (!r) {
 23ff134:	4604      	mov	r4, r0
 23ff136:	2800      	cmp	r0, #0
 23ff138:	d14b      	bne.n	23ff1d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff13a:	4602      	mov	r2, r0
 23ff13c:	2101      	movs	r1, #1
 23ff13e:	6868      	ldr	r0, [r5, #4]
 23ff140:	f7ff fdc2 	bl	23fecc8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff144:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff146:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff148:	4622      	mov	r2, r4
 23ff14a:	6868      	ldr	r0, [r5, #4]
 23ff14c:	f7ff fdbc 	bl	23fecc8 <network_ready>
        bool ok = false;
 23ff150:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff152:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff154:	9e00      	ldr	r6, [sp, #0]
 23ff156:	2e00      	cmp	r6, #0
 23ff158:	d03b      	beq.n	23ff1d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff15a:	2900      	cmp	r1, #0
 23ff15c:	d139      	bne.n	23ff1d2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff15e:	6873      	ldr	r3, [r6, #4]
 23ff160:	2b02      	cmp	r3, #2
 23ff162:	d003      	beq.n	23ff16c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff164:	2b0a      	cmp	r3, #10
 23ff166:	d011      	beq.n	23ff18c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff168:	69f6      	ldr	r6, [r6, #28]
 23ff16a:	e7f4      	b.n	23ff156 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff16c:	f1b8 0f00 	cmp.w	r8, #0
 23ff170:	d0fa      	beq.n	23ff168 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff172:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff174:	a806      	add	r0, sp, #24
 23ff176:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff178:	1d3c      	adds	r4, r7, #4
 23ff17a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff17c:	f7ff ff70 	bl	23ff060 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff184:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff186:	4641      	mov	r1, r8
 23ff188:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff18a:	e7ed      	b.n	23ff168 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff18c:	f1b9 0f00 	cmp.w	r9, #0
 23ff190:	d0ea      	beq.n	23ff168 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff192:	2210      	movs	r2, #16
 23ff194:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff196:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff198:	f000 fd63 	bl	23ffc62 <memset>
                    a.v = 6;
 23ff19c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff19e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff1a0:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff1a4:	f104 0308 	add.w	r3, r4, #8
 23ff1a8:	3418      	adds	r4, #24
 23ff1aa:	462a      	mov	r2, r5
 23ff1ac:	6818      	ldr	r0, [r3, #0]
 23ff1ae:	6859      	ldr	r1, [r3, #4]
 23ff1b0:	3308      	adds	r3, #8
 23ff1b2:	c203      	stmia	r2!, {r0, r1}
 23ff1b4:	42a3      	cmp	r3, r4
 23ff1b6:	4615      	mov	r5, r2
 23ff1b8:	d1f7      	bne.n	23ff1aa <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff1ba:	a901      	add	r1, sp, #4
 23ff1bc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff1be:	1d3c      	adds	r4, r7, #4
 23ff1c0:	ad07      	add	r5, sp, #28
 23ff1c2:	f7ff ff2d 	bl	23ff020 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff1c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff1c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff1ca:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff1cc:	4649      	mov	r1, r9
 23ff1ce:	7023      	strb	r3, [r4, #0]
                    break;
 23ff1d0:	e7ca      	b.n	23ff168 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff1d2:	9800      	ldr	r0, [sp, #0]
 23ff1d4:	f7ff fb72 	bl	23fe8bc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff1d8:	4638      	mov	r0, r7
 23ff1da:	b015      	add	sp, #84	; 0x54
 23ff1dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff1e0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff1e0:	4b02      	ldr	r3, [pc, #8]	; (23ff1ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff1e2:	4a03      	ldr	r2, [pc, #12]	; (23ff1f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff1e4:	601a      	str	r2, [r3, #0]
 23ff1e6:	2200      	movs	r2, #0
 23ff1e8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff1ea:	4770      	bx	lr
 23ff1ec:	1007ae9c 	.word	0x1007ae9c
 23ff1f0:	023ffe5c 	.word	0x023ffe5c

023ff1f4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff1f6:	4606      	mov	r6, r0
 23ff1f8:	460d      	mov	r5, r1
  size_t n = 0;
 23ff1fa:	2400      	movs	r4, #0
 23ff1fc:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff1fe:	42bd      	cmp	r5, r7
 23ff200:	d00c      	beq.n	23ff21c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff202:	6833      	ldr	r3, [r6, #0]
 23ff204:	4630      	mov	r0, r6
 23ff206:	689b      	ldr	r3, [r3, #8]
 23ff208:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff20c:	4798      	blx	r3
     if (chunk>=0)
 23ff20e:	1e03      	subs	r3, r0, #0
 23ff210:	db01      	blt.n	23ff216 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff212:	441c      	add	r4, r3
  while (size--) {
 23ff214:	e7f3      	b.n	23ff1fe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff216:	2c00      	cmp	r4, #0
 23ff218:	bf08      	it	eq
 23ff21a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff21c:	4620      	mov	r0, r4
 23ff21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff220 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff220:	b513      	push	{r0, r1, r4, lr}
 23ff222:	4604      	mov	r4, r0
    }
 23ff224:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff226:	b159      	cbz	r1, 23ff240 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff228:	9101      	str	r1, [sp, #4]
 23ff22a:	f7fe fe61 	bl	23fdef0 <strlen>
 23ff22e:	4602      	mov	r2, r0
 23ff230:	4620      	mov	r0, r4
 23ff232:	6823      	ldr	r3, [r4, #0]
 23ff234:	9901      	ldr	r1, [sp, #4]
 23ff236:	68db      	ldr	r3, [r3, #12]
    }
 23ff238:	b002      	add	sp, #8
 23ff23a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff23e:	4718      	bx	r3
    }
 23ff240:	b002      	add	sp, #8
 23ff242:	bd10      	pop	{r4, pc}

023ff244 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23ff244:	b508      	push	{r3, lr}
  return write(str);
 23ff246:	f7ff ffeb 	bl	23ff220 <_ZN5Print5writeEPKc>
}
 23ff24a:	bd08      	pop	{r3, pc}

023ff24c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23ff24c:	6803      	ldr	r3, [r0, #0]
 23ff24e:	689b      	ldr	r3, [r3, #8]
 23ff250:	4718      	bx	r3

023ff252 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23ff252:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23ff254:	210d      	movs	r1, #13
{
 23ff256:	4605      	mov	r5, r0
  size_t n = print('\r');
 23ff258:	f7ff fff8 	bl	23ff24c <_ZN5Print5printEc>
  n += print('\n');
 23ff25c:	210a      	movs	r1, #10
  size_t n = print('\r');
 23ff25e:	4604      	mov	r4, r0
  n += print('\n');
 23ff260:	4628      	mov	r0, r5
 23ff262:	f7ff fff3 	bl	23ff24c <_ZN5Print5printEc>
  return n;
}
 23ff266:	4420      	add	r0, r4
 23ff268:	bd38      	pop	{r3, r4, r5, pc}

023ff26a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23ff26a:	b538      	push	{r3, r4, r5, lr}
 23ff26c:	4605      	mov	r5, r0
  return write(str);
 23ff26e:	f7ff ffd7 	bl	23ff220 <_ZN5Print5writeEPKc>
 23ff272:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23ff274:	4628      	mov	r0, r5
 23ff276:	f7ff ffec 	bl	23ff252 <_ZN5Print7printlnEv>
  return n;
}
 23ff27a:	4420      	add	r0, r4
 23ff27c:	bd38      	pop	{r3, r4, r5, pc}

023ff27e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff27e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff280:	2a01      	cmp	r2, #1
 23ff282:	bf98      	it	ls
 23ff284:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff286:	b530      	push	{r4, r5, lr}
 23ff288:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff28a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff28e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff290:	460d      	mov	r5, r1
 23ff292:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff296:	fb01 5312 	mls	r3, r1, r2, r5
 23ff29a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff29e:	2b09      	cmp	r3, #9
 23ff2a0:	bf94      	ite	ls
 23ff2a2:	3330      	addls	r3, #48	; 0x30
 23ff2a4:	3337      	addhi	r3, #55	; 0x37
 23ff2a6:	b2db      	uxtb	r3, r3
  } while(n);
 23ff2a8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff2aa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff2ae:	d9ef      	bls.n	23ff290 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff2b0:	4621      	mov	r1, r4
 23ff2b2:	f7ff ffb5 	bl	23ff220 <_ZN5Print5writeEPKc>
}
 23ff2b6:	b00b      	add	sp, #44	; 0x2c
 23ff2b8:	bd30      	pop	{r4, r5, pc}
	...

023ff2bc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23ff2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff2c0:	ec55 4b10 	vmov	r4, r5, d0
 23ff2c4:	4606      	mov	r6, r0
 23ff2c6:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23ff2c8:	ee10 2a10 	vmov	r2, s0
 23ff2cc:	462b      	mov	r3, r5
 23ff2ce:	ee10 0a10 	vmov	r0, s0
 23ff2d2:	4629      	mov	r1, r5
 23ff2d4:	f7fe fd5e 	bl	23fdd94 <__aeabi_dcmpun>
 23ff2d8:	b140      	cbz	r0, 23ff2ec <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23ff2da:	4953      	ldr	r1, [pc, #332]	; (23ff428 <_ZN5Print10printFloatEdh+0x16c>)
 23ff2dc:	4630      	mov	r0, r6
 23ff2de:	f7ff ff9f 	bl	23ff220 <_ZN5Print5writeEPKc>
 23ff2e2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23ff2e4:	4650      	mov	r0, sl
 23ff2e6:	b003      	add	sp, #12
 23ff2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23ff2ec:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23ff2f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ff2f4:	4620      	mov	r0, r4
 23ff2f6:	4649      	mov	r1, r9
 23ff2f8:	4b4c      	ldr	r3, [pc, #304]	; (23ff42c <_ZN5Print10printFloatEdh+0x170>)
 23ff2fa:	f7fe fd4b 	bl	23fdd94 <__aeabi_dcmpun>
 23ff2fe:	b948      	cbnz	r0, 23ff314 <_ZN5Print10printFloatEdh+0x58>
 23ff300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ff304:	4620      	mov	r0, r4
 23ff306:	4649      	mov	r1, r9
 23ff308:	4b48      	ldr	r3, [pc, #288]	; (23ff42c <_ZN5Print10printFloatEdh+0x170>)
 23ff30a:	f7fe fd25 	bl	23fdd58 <__aeabi_dcmple>
 23ff30e:	b908      	cbnz	r0, 23ff314 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23ff310:	4947      	ldr	r1, [pc, #284]	; (23ff430 <_ZN5Print10printFloatEdh+0x174>)
 23ff312:	e7e3      	b.n	23ff2dc <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23ff314:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23ff318:	4620      	mov	r0, r4
 23ff31a:	4629      	mov	r1, r5
 23ff31c:	4b45      	ldr	r3, [pc, #276]	; (23ff434 <_ZN5Print10printFloatEdh+0x178>)
 23ff31e:	f7fe fd2f 	bl	23fdd80 <__aeabi_dcmpgt>
 23ff322:	b108      	cbz	r0, 23ff328 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23ff324:	4944      	ldr	r1, [pc, #272]	; (23ff438 <_ZN5Print10printFloatEdh+0x17c>)
 23ff326:	e7d9      	b.n	23ff2dc <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23ff328:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23ff32c:	4620      	mov	r0, r4
 23ff32e:	4629      	mov	r1, r5
 23ff330:	4b42      	ldr	r3, [pc, #264]	; (23ff43c <_ZN5Print10printFloatEdh+0x180>)
 23ff332:	f7fe fd07 	bl	23fdd44 <__aeabi_dcmplt>
 23ff336:	2800      	cmp	r0, #0
 23ff338:	d1f4      	bne.n	23ff324 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23ff33a:	2200      	movs	r2, #0
 23ff33c:	2300      	movs	r3, #0
 23ff33e:	4620      	mov	r0, r4
 23ff340:	4629      	mov	r1, r5
 23ff342:	f7fe fcff 	bl	23fdd44 <__aeabi_dcmplt>
 23ff346:	b1d0      	cbz	r0, 23ff37e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23ff348:	212d      	movs	r1, #45	; 0x2d
 23ff34a:	4630      	mov	r0, r6
 23ff34c:	f7ff ff7e 	bl	23ff24c <_ZN5Print5printEc>
     number = -number;
 23ff350:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23ff354:	4682      	mov	sl, r0
     number = -number;
 23ff356:	461d      	mov	r5, r3
  size_t n = 0;
 23ff358:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23ff35c:	2000      	movs	r0, #0
    rounding /= 10.0;
 23ff35e:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23ff362:	4937      	ldr	r1, [pc, #220]	; (23ff440 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23ff364:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23ff448 <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23ff368:	fa5f f38b 	uxtb.w	r3, fp
 23ff36c:	429f      	cmp	r7, r3
 23ff36e:	d908      	bls.n	23ff382 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23ff370:	4642      	mov	r2, r8
 23ff372:	464b      	mov	r3, r9
 23ff374:	f7fe fb9e 	bl	23fdab4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23ff378:	f10b 0b01 	add.w	fp, fp, #1
 23ff37c:	e7f4      	b.n	23ff368 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23ff37e:	4682      	mov	sl, r0
 23ff380:	e7ea      	b.n	23ff358 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23ff382:	4622      	mov	r2, r4
 23ff384:	462b      	mov	r3, r5
 23ff386:	f7fe f8b5 	bl	23fd4f4 <__adddf3>
 23ff38a:	460d      	mov	r5, r1
 23ff38c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23ff38e:	f7fe fd3f 	bl	23fde10 <__aeabi_d2uiz>
 23ff392:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23ff394:	f7fe f9ea 	bl	23fd76c <__aeabi_ui2d>
 23ff398:	4602      	mov	r2, r0
 23ff39a:	460b      	mov	r3, r1
 23ff39c:	4620      	mov	r0, r4
 23ff39e:	4629      	mov	r1, r5
 23ff3a0:	f7fe f8a6 	bl	23fd4f0 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23ff3a4:	220a      	movs	r2, #10
 23ff3a6:	4604      	mov	r4, r0
 23ff3a8:	460d      	mov	r5, r1
 23ff3aa:	4630      	mov	r0, r6
 23ff3ac:	4641      	mov	r1, r8
 23ff3ae:	f7ff ff66 	bl	23ff27e <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23ff3b2:	4482      	add	sl, r0
  if (digits > 0) {
 23ff3b4:	2f00      	cmp	r7, #0
 23ff3b6:	d095      	beq.n	23ff2e4 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23ff3b8:	4630      	mov	r0, r6
 23ff3ba:	4922      	ldr	r1, [pc, #136]	; (23ff444 <_ZN5Print10printFloatEdh+0x188>)
 23ff3bc:	f7ff ff30 	bl	23ff220 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23ff3c0:	f04f 0800 	mov.w	r8, #0
 23ff3c4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23ff448 <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23ff3c8:	4482      	add	sl, r0
  while (digits-- > 0)
 23ff3ca:	2f00      	cmp	r7, #0
 23ff3cc:	d08a      	beq.n	23ff2e4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23ff3ce:	4642      	mov	r2, r8
 23ff3d0:	464b      	mov	r3, r9
 23ff3d2:	4620      	mov	r0, r4
 23ff3d4:	4629      	mov	r1, r5
 23ff3d6:	f7fe fa43 	bl	23fd860 <__aeabi_dmul>
 23ff3da:	4604      	mov	r4, r0
 23ff3dc:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23ff3de:	f7fe fcef 	bl	23fddc0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23ff3e2:	f1b0 0b00 	subs.w	fp, r0, #0
 23ff3e6:	da1c      	bge.n	23ff422 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23ff3e8:	212d      	movs	r1, #45	; 0x2d
 23ff3ea:	4630      	mov	r0, r6
 23ff3ec:	f7ff ff2e 	bl	23ff24c <_ZN5Print5printEc>
 23ff3f0:	4603      	mov	r3, r0
            val = -n;
 23ff3f2:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23ff3f6:	220a      	movs	r2, #10
 23ff3f8:	4630      	mov	r0, r6
 23ff3fa:	9301      	str	r3, [sp, #4]
 23ff3fc:	f7ff ff3f 	bl	23ff27e <_ZN5Print11printNumberEmh>
 23ff400:	9b01      	ldr	r3, [sp, #4]
 23ff402:	3f01      	subs	r7, #1
 23ff404:	4418      	add	r0, r3
    n += print(toPrint);
 23ff406:	4482      	add	sl, r0
    remainder -= toPrint;
 23ff408:	4658      	mov	r0, fp
 23ff40a:	f7fe f9bf 	bl	23fd78c <__aeabi_i2d>
 23ff40e:	4602      	mov	r2, r0
 23ff410:	460b      	mov	r3, r1
 23ff412:	4620      	mov	r0, r4
 23ff414:	4629      	mov	r1, r5
 23ff416:	f7fe f86b 	bl	23fd4f0 <__aeabi_dsub>
 23ff41a:	b2ff      	uxtb	r7, r7
 23ff41c:	4604      	mov	r4, r0
 23ff41e:	460d      	mov	r5, r1
  while (digits-- > 0)
 23ff420:	e7d3      	b.n	23ff3ca <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23ff422:	4659      	mov	r1, fp
        size_t t = 0;
 23ff424:	2300      	movs	r3, #0
 23ff426:	e7e6      	b.n	23ff3f6 <_ZN5Print10printFloatEdh+0x13a>
 23ff428:	023ffe90 	.word	0x023ffe90
 23ff42c:	7fefffff 	.word	0x7fefffff
 23ff430:	023ffe94 	.word	0x023ffe94
 23ff434:	41efffff 	.word	0x41efffff
 23ff438:	023ffe98 	.word	0x023ffe98
 23ff43c:	c1efffff 	.word	0xc1efffff
 23ff440:	3fe00000 	.word	0x3fe00000
 23ff444:	023ffe9c 	.word	0x023ffe9c
 23ff448:	40240000 	.word	0x40240000

023ff44c <_ZN5Print5printEfi>:
{
 23ff44c:	b538      	push	{r3, r4, r5, lr}
 23ff44e:	4604      	mov	r4, r0
 23ff450:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23ff454:	b2cd      	uxtb	r5, r1
 23ff456:	f7fe f9ab 	bl	23fd7b0 <__aeabi_f2d>
 23ff45a:	ec41 0b10 	vmov	d0, r0, r1
 23ff45e:	4629      	mov	r1, r5
 23ff460:	4620      	mov	r0, r4
}
 23ff462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23ff466:	f7ff bf29 	b.w	23ff2bc <_ZN5Print10printFloatEdh>
	...

023ff46c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23ff46c:	2200      	movs	r2, #0
 23ff46e:	4b01      	ldr	r3, [pc, #4]	; (23ff474 <_GLOBAL__sub_I_RGB+0x8>)
 23ff470:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff472:	4770      	bx	lr
 23ff474:	1007aea4 	.word	0x1007aea4

023ff478 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23ff478:	2100      	movs	r1, #0
 23ff47a:	f7ff bab9 	b.w	23fe9f0 <hal_spi_release>

023ff47e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23ff47e:	2100      	movs	r1, #0
 23ff480:	f7ff baa8 	b.w	23fe9d4 <hal_spi_acquire>

023ff484 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff484:	b510      	push	{r4, lr}
 23ff486:	4604      	mov	r4, r0
 23ff488:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff48a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff48c:	f7ff fa4e 	bl	23fe92c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff490:	2300      	movs	r3, #0
}
 23ff492:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff494:	6063      	str	r3, [r4, #4]
}
 23ff496:	bd10      	pop	{r4, pc}

023ff498 <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
 23ff498:	b513      	push	{r0, r1, r4, lr}
 23ff49a:	4604      	mov	r4, r0
    if (!lock())
 23ff49c:	7800      	ldrb	r0, [r0, #0]
{
 23ff49e:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
 23ff4a2:	f7ff ffec 	bl	23ff47e <_ZN8SPIClass4lockEv.isra.0>
 23ff4a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 23ff4aa:	4603      	mov	r3, r0
 23ff4ac:	b948      	cbnz	r0, 23ff4c2 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
 23ff4ae:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
 23ff4b0:	9000      	str	r0, [sp, #0]
 23ff4b2:	f7ff fa73 	bl	23fe99c <hal_spi_begin_ext>
        unlock();
 23ff4b6:	9800      	ldr	r0, [sp, #0]
    }
}
 23ff4b8:	b002      	add	sp, #8
 23ff4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23ff4be:	f7ff bfdb 	b.w	23ff478 <_ZN8SPIClass6unlockEv.isra.0>
 23ff4c2:	b002      	add	sp, #8
 23ff4c4:	bd10      	pop	{r4, pc}

023ff4c6 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23ff4c6:	b513      	push	{r0, r1, r4, lr}
 23ff4c8:	4604      	mov	r4, r0
    if (!lock())
 23ff4ca:	7800      	ldrb	r0, [r0, #0]
{
 23ff4cc:	9101      	str	r1, [sp, #4]
    if (!lock())
 23ff4ce:	f7ff ffd6 	bl	23ff47e <_ZN8SPIClass4lockEv.isra.0>
 23ff4d2:	9901      	ldr	r1, [sp, #4]
 23ff4d4:	b948      	cbnz	r0, 23ff4ea <_ZN8SPIClass11setDataModeEh+0x24>
 23ff4d6:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23ff4d8:	9001      	str	r0, [sp, #4]
 23ff4da:	f7ff fa0b 	bl	23fe8f4 <hal_spi_set_data_mode>
        unlock();
 23ff4de:	9801      	ldr	r0, [sp, #4]
    }
}
 23ff4e0:	b002      	add	sp, #8
 23ff4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23ff4e6:	f7ff bfc7 	b.w	23ff478 <_ZN8SPIClass6unlockEv.isra.0>
 23ff4ea:	b002      	add	sp, #8
 23ff4ec:	bd10      	pop	{r4, pc}

023ff4ee <_ZN8SPIClass16beginTransactionEv>:

int32_t SPIClass::beginTransaction()
{
    return lock();
 23ff4ee:	7800      	ldrb	r0, [r0, #0]
 23ff4f0:	f7ff bfc5 	b.w	23ff47e <_ZN8SPIClass4lockEv.isra.0>

023ff4f4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23ff4f4:	7800      	ldrb	r0, [r0, #0]
 23ff4f6:	f7ff bfbf 	b.w	23ff478 <_ZN8SPIClass6unlockEv.isra.0>
	...

023ff4fc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23ff4fc:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23ff4fe:	2400      	movs	r4, #0
 23ff500:	0840      	lsrs	r0, r0, #1
 23ff502:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23ff504:	6818      	ldr	r0, [r3, #0]
 23ff506:	b2e5      	uxtb	r5, r4
 23ff508:	4288      	cmp	r0, r1
 23ff50a:	d906      	bls.n	23ff51a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23ff50c:	3401      	adds	r4, #1
 23ff50e:	2c08      	cmp	r4, #8
 23ff510:	d002      	beq.n	23ff518 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23ff512:	0840      	lsrs	r0, r0, #1
 23ff514:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23ff516:	e7f5      	b.n	23ff504 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23ff518:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23ff51a:	4b02      	ldr	r3, [pc, #8]	; (23ff524 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23ff51c:	5d5b      	ldrb	r3, [r3, r5]
 23ff51e:	7013      	strb	r3, [r2, #0]
}
 23ff520:	bd30      	pop	{r4, r5, pc}
 23ff522:	bf00      	nop
 23ff524:	023ffe9e 	.word	0x023ffe9e

023ff528 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23ff528:	2300      	movs	r3, #0
{
 23ff52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff52e:	4604      	mov	r4, r0
 23ff530:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23ff532:	7800      	ldrb	r0, [r0, #0]
{
 23ff534:	460e      	mov	r6, r1
 23ff536:	4617      	mov	r7, r2
    unsigned clock = 0;
 23ff538:	9302      	str	r3, [sp, #8]
    if (!lock())
 23ff53a:	f7ff ffa0 	bl	23ff47e <_ZN8SPIClass4lockEv.isra.0>
 23ff53e:	4605      	mov	r5, r0
 23ff540:	bb00      	cbnz	r0, 23ff584 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23ff542:	4601      	mov	r1, r0
 23ff544:	2214      	movs	r2, #20
 23ff546:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23ff548:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23ff54c:	f000 fb89 	bl	23ffc62 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23ff550:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23ff552:	462a      	mov	r2, r5
 23ff554:	4640      	mov	r0, r8
 23ff556:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23ff558:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23ff55c:	f7ff fa02 	bl	23fe964 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23ff560:	fb07 f106 	mul.w	r1, r7, r6
 23ff564:	9804      	ldr	r0, [sp, #16]
 23ff566:	ab02      	add	r3, sp, #8
 23ff568:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23ff56c:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23ff570:	f7ff ffc4 	bl	23ff4fc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23ff574:	7820      	ldrb	r0, [r4, #0]
 23ff576:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23ff57a:	f7ff f9c9 	bl	23fe910 <hal_spi_set_clock_divider>
        unlock();
 23ff57e:	7820      	ldrb	r0, [r4, #0]
 23ff580:	f7ff ff7a 	bl	23ff478 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23ff584:	9802      	ldr	r0, [sp, #8]
 23ff586:	b008      	add	sp, #32
 23ff588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff58c <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23ff58c:	b530      	push	{r4, r5, lr}
 23ff58e:	b087      	sub	sp, #28
 23ff590:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23ff592:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23ff594:	9500      	str	r5, [sp, #0]
 23ff596:	7800      	ldrb	r0, [r0, #0]
 23ff598:	f7ff f9f2 	bl	23fe980 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23ff59c:	b93d      	cbnz	r5, 23ff5ae <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23ff59e:	7820      	ldrb	r0, [r4, #0]
 23ff5a0:	a902      	add	r1, sp, #8
 23ff5a2:	f7ff fa09 	bl	23fe9b8 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23ff5a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ff5aa:	07db      	lsls	r3, r3, #31
 23ff5ac:	d4f7      	bmi.n	23ff59e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23ff5ae:	b007      	add	sp, #28
 23ff5b0:	bd30      	pop	{r4, r5, pc}
	...

023ff5b4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff5b4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff5b6:	2000      	movs	r0, #0
 23ff5b8:	4b04      	ldr	r3, [pc, #16]	; (23ff5cc <_GLOBAL__sub_I_System+0x18>)
 23ff5ba:	601a      	str	r2, [r3, #0]
 23ff5bc:	4b04      	ldr	r3, [pc, #16]	; (23ff5d0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff5be:	4a05      	ldr	r2, [pc, #20]	; (23ff5d4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff5c0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff5c4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff5c6:	f7ff baf3 	b.w	23febb0 <set_system_mode>
 23ff5ca:	bf00      	nop
 23ff5cc:	1007aec0 	.word	0x1007aec0
 23ff5d0:	1007aeb4 	.word	0x1007aeb4
 23ff5d4:	ffff0000 	.word	0xffff0000

023ff5d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff5d8:	4b02      	ldr	r3, [pc, #8]	; (23ff5e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff5da:	681a      	ldr	r2, [r3, #0]
 23ff5dc:	4b02      	ldr	r3, [pc, #8]	; (23ff5e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff5de:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff5e0:	4770      	bx	lr
 23ff5e2:	bf00      	nop
 23ff5e4:	1007add0 	.word	0x1007add0
 23ff5e8:	1007aec4 	.word	0x1007aec4

023ff5ec <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff5ec:	4770      	bx	lr

023ff5ee <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff5ee:	7441      	strb	r1, [r0, #17]
}
 23ff5f0:	4770      	bx	lr

023ff5f2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff5f2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff5f4:	7c00      	ldrb	r0, [r0, #16]
 23ff5f6:	f7ff fa5d 	bl	23feab4 <hal_usart_available_data_for_write>
}
 23ff5fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff5fe:	bd08      	pop	{r3, pc}

023ff600 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff600:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff602:	7c00      	ldrb	r0, [r0, #16]
 23ff604:	f7ff fa10 	bl	23fea28 <hal_usart_available>
}
 23ff608:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff60c:	bd08      	pop	{r3, pc}

023ff60e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff60e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff610:	7c00      	ldrb	r0, [r0, #16]
 23ff612:	f7ff fa25 	bl	23fea60 <hal_usart_peek>
}
 23ff616:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff61a:	bd08      	pop	{r3, pc}

023ff61c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff61c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff61e:	7c00      	ldrb	r0, [r0, #16]
 23ff620:	f7ff fa10 	bl	23fea44 <hal_usart_read>
}
 23ff624:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff628:	bd08      	pop	{r3, pc}

023ff62a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff62a:	7c00      	ldrb	r0, [r0, #16]
 23ff62c:	f7ff ba26 	b.w	23fea7c <hal_usart_flush>

023ff630 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff630:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff632:	7c45      	ldrb	r5, [r0, #17]
{
 23ff634:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff636:	b12d      	cbz	r5, 23ff644 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff638:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff63a:	b003      	add	sp, #12
 23ff63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff640:	f7ff b9e4 	b.w	23fea0c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff644:	7c00      	ldrb	r0, [r0, #16]
 23ff646:	9101      	str	r1, [sp, #4]
 23ff648:	f7ff fa34 	bl	23feab4 <hal_usart_available_data_for_write>
 23ff64c:	2800      	cmp	r0, #0
 23ff64e:	9901      	ldr	r1, [sp, #4]
 23ff650:	dcf2      	bgt.n	23ff638 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff652:	4628      	mov	r0, r5
 23ff654:	b003      	add	sp, #12
 23ff656:	bd30      	pop	{r4, r5, pc}

023ff658 <_ZN11USARTSerialD0Ev>:
 23ff658:	b510      	push	{r4, lr}
 23ff65a:	4604      	mov	r4, r0
 23ff65c:	2114      	movs	r1, #20
 23ff65e:	f7fe fc6e 	bl	23fdf3e <_ZdlPvj>
 23ff662:	4620      	mov	r0, r4
 23ff664:	bd10      	pop	{r4, pc}
	...

023ff668 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff668:	b510      	push	{r4, lr}
 23ff66a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff66e:	4604      	mov	r4, r0
 23ff670:	4608      	mov	r0, r1
 23ff672:	4611      	mov	r1, r2
 23ff674:	2200      	movs	r2, #0
 23ff676:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff67a:	4b04      	ldr	r3, [pc, #16]	; (23ff68c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff67c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff67e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff680:	2301      	movs	r3, #1
 23ff682:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff684:	f7ff fa24 	bl	23fead0 <hal_usart_init_ex>
}
 23ff688:	4620      	mov	r0, r4
 23ff68a:	bd10      	pop	{r4, pc}
 23ff68c:	023ffecc 	.word	0x023ffecc

023ff690 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff690:	7c00      	ldrb	r0, [r0, #16]
 23ff692:	f7ff ba01 	b.w	23fea98 <hal_usart_is_enabled>

023ff696 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff696:	7441      	strb	r1, [r0, #17]
}
 23ff698:	4770      	bx	lr

023ff69a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff69a:	4770      	bx	lr

023ff69c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff69c:	4770      	bx	lr

023ff69e <_ZN9USBSerial4readEv>:
{
 23ff69e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff6a0:	2100      	movs	r1, #0
 23ff6a2:	7c00      	ldrb	r0, [r0, #16]
 23ff6a4:	f7ff fa5a 	bl	23feb5c <HAL_USB_USART_Receive_Data>
}
 23ff6a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff6ac:	bd08      	pop	{r3, pc}

023ff6ae <_ZN9USBSerial4peekEv>:
{
 23ff6ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff6b0:	2101      	movs	r1, #1
 23ff6b2:	7c00      	ldrb	r0, [r0, #16]
 23ff6b4:	f7ff fa52 	bl	23feb5c <HAL_USB_USART_Receive_Data>
}
 23ff6b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff6bc:	bd08      	pop	{r3, pc}

023ff6be <_ZN9USBSerial17availableForWriteEv>:
{
 23ff6be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff6c0:	7c00      	ldrb	r0, [r0, #16]
 23ff6c2:	f7ff fa3d 	bl	23feb40 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff6c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff6ca:	bd08      	pop	{r3, pc}

023ff6cc <_ZN9USBSerial9availableEv>:
{
 23ff6cc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff6ce:	7c00      	ldrb	r0, [r0, #16]
 23ff6d0:	f7ff fa28 	bl	23feb24 <HAL_USB_USART_Available_Data>
}
 23ff6d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff6d8:	bd08      	pop	{r3, pc}

023ff6da <_ZN9USBSerial5writeEh>:
{
 23ff6da:	b513      	push	{r0, r1, r4, lr}
 23ff6dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff6de:	7c00      	ldrb	r0, [r0, #16]
{
 23ff6e0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff6e2:	f7ff fa2d 	bl	23feb40 <HAL_USB_USART_Available_Data_For_Write>
 23ff6e6:	2800      	cmp	r0, #0
 23ff6e8:	9901      	ldr	r1, [sp, #4]
 23ff6ea:	dc01      	bgt.n	23ff6f0 <_ZN9USBSerial5writeEh+0x16>
 23ff6ec:	7c60      	ldrb	r0, [r4, #17]
 23ff6ee:	b120      	cbz	r0, 23ff6fa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff6f0:	7c20      	ldrb	r0, [r4, #16]
 23ff6f2:	f7ff fa41 	bl	23feb78 <HAL_USB_USART_Send_Data>
 23ff6f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff6fa:	b002      	add	sp, #8
 23ff6fc:	bd10      	pop	{r4, pc}

023ff6fe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff6fe:	7c00      	ldrb	r0, [r0, #16]
 23ff700:	f7ff ba48 	b.w	23feb94 <HAL_USB_USART_Flush_Data>

023ff704 <_ZN9USBSerialD0Ev>:
 23ff704:	b510      	push	{r4, lr}
 23ff706:	4604      	mov	r4, r0
 23ff708:	2114      	movs	r1, #20
 23ff70a:	f7fe fc18 	bl	23fdf3e <_ZdlPvj>
 23ff70e:	4620      	mov	r0, r4
 23ff710:	bd10      	pop	{r4, pc}
	...

023ff714 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff714:	b510      	push	{r4, lr}
 23ff716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff71a:	4604      	mov	r4, r0
 23ff71c:	4608      	mov	r0, r1
 23ff71e:	2100      	movs	r1, #0
 23ff720:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff724:	4b04      	ldr	r3, [pc, #16]	; (23ff738 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff726:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff728:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff72a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff72c:	4611      	mov	r1, r2
  _blocking = true;
 23ff72e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff730:	f7ff f9dc 	bl	23feaec <HAL_USB_USART_Init>
}
 23ff734:	4620      	mov	r0, r4
 23ff736:	bd10      	pop	{r4, pc}
 23ff738:	023ffefc 	.word	0x023ffefc

023ff73c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff73c:	2200      	movs	r2, #0
 23ff73e:	7c00      	ldrb	r0, [r0, #16]
 23ff740:	f7ff b9e2 	b.w	23feb08 <HAL_USB_USART_Begin>

023ff744 <_Z19acquireSerialBufferv>:
{
 23ff744:	b510      	push	{r4, lr}
 23ff746:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff748:	2214      	movs	r2, #20
 23ff74a:	2100      	movs	r1, #0
 23ff74c:	f000 fa89 	bl	23ffc62 <memset>
}
 23ff750:	4620      	mov	r0, r4
 23ff752:	bd10      	pop	{r4, pc}

023ff754 <_Z16_fetch_usbserialv>:
{
 23ff754:	b510      	push	{r4, lr}
 23ff756:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff758:	a803      	add	r0, sp, #12
 23ff75a:	f7ff fff3 	bl	23ff744 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff75e:	4c0c      	ldr	r4, [pc, #48]	; (23ff790 <_Z16_fetch_usbserialv+0x3c>)
 23ff760:	e8d4 1f8f 	ldab	r1, [r4]
 23ff764:	f011 0101 	ands.w	r1, r1, #1
 23ff768:	d10f      	bne.n	23ff78a <_Z16_fetch_usbserialv+0x36>
 23ff76a:	4620      	mov	r0, r4
 23ff76c:	9101      	str	r1, [sp, #4]
 23ff76e:	f7fe fbe8 	bl	23fdf42 <__cxa_guard_acquire>
 23ff772:	9901      	ldr	r1, [sp, #4]
 23ff774:	b148      	cbz	r0, 23ff78a <_Z16_fetch_usbserialv+0x36>
 23ff776:	aa03      	add	r2, sp, #12
 23ff778:	4806      	ldr	r0, [pc, #24]	; (23ff794 <_Z16_fetch_usbserialv+0x40>)
 23ff77a:	f7ff ffcb 	bl	23ff714 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff77e:	4620      	mov	r0, r4
 23ff780:	f7fe fbe4 	bl	23fdf4c <__cxa_guard_release>
 23ff784:	4804      	ldr	r0, [pc, #16]	; (23ff798 <_Z16_fetch_usbserialv+0x44>)
 23ff786:	f000 fa59 	bl	23ffc3c <atexit>
	return _usbserial;
}
 23ff78a:	4802      	ldr	r0, [pc, #8]	; (23ff794 <_Z16_fetch_usbserialv+0x40>)
 23ff78c:	b008      	add	sp, #32
 23ff78e:	bd10      	pop	{r4, pc}
 23ff790:	1007aec8 	.word	0x1007aec8
 23ff794:	1007aecc 	.word	0x1007aecc
 23ff798:	023ff69b 	.word	0x023ff69b

023ff79c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff79c:	2200      	movs	r2, #0
 23ff79e:	6840      	ldr	r0, [r0, #4]
 23ff7a0:	4611      	mov	r1, r2
 23ff7a2:	f7ff ba91 	b.w	23fecc8 <network_ready>

023ff7a6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff7a6:	2200      	movs	r2, #0
 23ff7a8:	6840      	ldr	r0, [r0, #4]
 23ff7aa:	4611      	mov	r1, r2
 23ff7ac:	f7ff bac4 	b.w	23fed38 <network_listening>

023ff7b0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff7b0:	2200      	movs	r2, #0
 23ff7b2:	6840      	ldr	r0, [r0, #4]
 23ff7b4:	4611      	mov	r1, r2
 23ff7b6:	f7ff badb 	b.w	23fed70 <network_get_listen_timeout>

023ff7ba <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff7ba:	2200      	movs	r2, #0
 23ff7bc:	6840      	ldr	r0, [r0, #4]
 23ff7be:	f7ff bac9 	b.w	23fed54 <network_set_listen_timeout>

023ff7c2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff7c2:	2200      	movs	r2, #0
 23ff7c4:	6840      	ldr	r0, [r0, #4]
 23ff7c6:	f081 0101 	eor.w	r1, r1, #1
 23ff7ca:	f7ff baa7 	b.w	23fed1c <network_listen>

023ff7ce <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff7ce:	2300      	movs	r3, #0
 23ff7d0:	6840      	ldr	r0, [r0, #4]
 23ff7d2:	461a      	mov	r2, r3
 23ff7d4:	4619      	mov	r1, r3
 23ff7d6:	f7ff ba93 	b.w	23fed00 <network_off>

023ff7da <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff7da:	2300      	movs	r3, #0
 23ff7dc:	6840      	ldr	r0, [r0, #4]
 23ff7de:	461a      	mov	r2, r3
 23ff7e0:	4619      	mov	r1, r3
 23ff7e2:	f7ff ba7f 	b.w	23fece4 <network_on>

023ff7e6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff7e6:	2200      	movs	r2, #0
 23ff7e8:	6840      	ldr	r0, [r0, #4]
 23ff7ea:	4611      	mov	r1, r2
 23ff7ec:	f7ff ba50 	b.w	23fec90 <network_connecting>

023ff7f0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff7f0:	2200      	movs	r2, #0
 23ff7f2:	2102      	movs	r1, #2
 23ff7f4:	6840      	ldr	r0, [r0, #4]
 23ff7f6:	f7ff ba59 	b.w	23fecac <network_disconnect>

023ff7fa <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff7fa:	2300      	movs	r3, #0
 23ff7fc:	6840      	ldr	r0, [r0, #4]
 23ff7fe:	461a      	mov	r2, r3
 23ff800:	f7ff ba38 	b.w	23fec74 <network_connect>

023ff804 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff804:	2204      	movs	r2, #4
 23ff806:	4b02      	ldr	r3, [pc, #8]	; (23ff810 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff808:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff80a:	4a02      	ldr	r2, [pc, #8]	; (23ff814 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff80c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff80e:	4770      	bx	lr
 23ff810:	1007aee0 	.word	0x1007aee0
 23ff814:	023fff2c 	.word	0x023fff2c

023ff818 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff818:	4b01      	ldr	r3, [pc, #4]	; (23ff820 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff81a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff81c:	4770      	bx	lr
 23ff81e:	bf00      	nop
 23ff820:	1007add4 	.word	0x1007add4

023ff824 <serialEventRun>:
{
 23ff824:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff826:	4b0f      	ldr	r3, [pc, #60]	; (23ff864 <serialEventRun+0x40>)
 23ff828:	b143      	cbz	r3, 23ff83c <serialEventRun+0x18>
 23ff82a:	f7ff ff93 	bl	23ff754 <_Z16_fetch_usbserialv>
 23ff82e:	6803      	ldr	r3, [r0, #0]
 23ff830:	691b      	ldr	r3, [r3, #16]
 23ff832:	4798      	blx	r3
 23ff834:	2800      	cmp	r0, #0
 23ff836:	dd01      	ble.n	23ff83c <serialEventRun+0x18>
        serialEvent();
 23ff838:	e000      	b.n	23ff83c <serialEventRun+0x18>
 23ff83a:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff83c:	4b0a      	ldr	r3, [pc, #40]	; (23ff868 <serialEventRun+0x44>)
 23ff83e:	b143      	cbz	r3, 23ff852 <serialEventRun+0x2e>
 23ff840:	f000 f96a 	bl	23ffb18 <_Z22__fetch_global_Serial1v>
 23ff844:	6803      	ldr	r3, [r0, #0]
 23ff846:	691b      	ldr	r3, [r3, #16]
 23ff848:	4798      	blx	r3
 23ff84a:	2800      	cmp	r0, #0
 23ff84c:	dd01      	ble.n	23ff852 <serialEventRun+0x2e>
        serialEvent1();
 23ff84e:	e000      	b.n	23ff852 <serialEventRun+0x2e>
 23ff850:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff852:	4b06      	ldr	r3, [pc, #24]	; (23ff86c <serialEventRun+0x48>)
 23ff854:	b10b      	cbz	r3, 23ff85a <serialEventRun+0x36>
 23ff856:	f000 f9a5 	bl	23ffba4 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff85a:	4b05      	ldr	r3, [pc, #20]	; (23ff870 <serialEventRun+0x4c>)
 23ff85c:	b10b      	cbz	r3, 23ff862 <serialEventRun+0x3e>
 23ff85e:	f000 f9d7 	bl	23ffc10 <_Z15serialEventRun3v>
}
 23ff862:	bd08      	pop	{r3, pc}
	...

023ff874 <_post_loop>:
{
 23ff874:	b508      	push	{r3, lr}
	serialEventRun();
 23ff876:	f7ff ffd5 	bl	23ff824 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff87a:	f7fe ff77 	bl	23fe76c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff87e:	4b01      	ldr	r3, [pc, #4]	; (23ff884 <_post_loop+0x10>)
 23ff880:	6018      	str	r0, [r3, #0]
}
 23ff882:	bd08      	pop	{r3, pc}
 23ff884:	1007aef0 	.word	0x1007aef0

023ff888 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff888:	4805      	ldr	r0, [pc, #20]	; (23ff8a0 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff88a:	4a06      	ldr	r2, [pc, #24]	; (23ff8a4 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff88c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff88e:	1a12      	subs	r2, r2, r0
 23ff890:	4905      	ldr	r1, [pc, #20]	; (23ff8a8 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff892:	f000 f9d9 	bl	23ffc48 <memcpy>
    __backup_sram_signature = signature;
 23ff896:	4b05      	ldr	r3, [pc, #20]	; (23ff8ac <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff898:	4a05      	ldr	r2, [pc, #20]	; (23ff8b0 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff89a:	601a      	str	r2, [r3, #0]
}
 23ff89c:	bd08      	pop	{r3, pc}
 23ff89e:	bf00      	nop
 23ff8a0:	1007b400 	.word	0x1007b400
 23ff8a4:	1007b404 	.word	0x1007b404
 23ff8a8:	085ffc1c 	.word	0x085ffc1c
 23ff8ac:	1007b400 	.word	0x1007b400
 23ff8b0:	9a271c1e 	.word	0x9a271c1e

023ff8b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8b4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff8b6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8b8:	461a      	mov	r2, r3
 23ff8ba:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff8be:	9300      	str	r3, [sp, #0]
 23ff8c0:	f7ff f9ae 	bl	23fec20 <system_ctrl_set_result>
}
 23ff8c4:	b003      	add	sp, #12
 23ff8c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff8cc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff8cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff8ce:	8843      	ldrh	r3, [r0, #2]
 23ff8d0:	2b0a      	cmp	r3, #10
 23ff8d2:	d008      	beq.n	23ff8e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff8d4:	2b50      	cmp	r3, #80	; 0x50
 23ff8d6:	d10b      	bne.n	23ff8f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff8d8:	4b09      	ldr	r3, [pc, #36]	; (23ff900 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff8da:	681b      	ldr	r3, [r3, #0]
 23ff8dc:	b14b      	cbz	r3, 23ff8f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff8de:	b003      	add	sp, #12
 23ff8e0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff8e4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff8e6:	f7ff ffe5 	bl	23ff8b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff8ea:	b003      	add	sp, #12
 23ff8ec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8f0:	2300      	movs	r3, #0
 23ff8f2:	461a      	mov	r2, r3
 23ff8f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff8f8:	9300      	str	r3, [sp, #0]
 23ff8fa:	f7ff f991 	bl	23fec20 <system_ctrl_set_result>
}
 23ff8fe:	e7f4      	b.n	23ff8ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff900:	1007aeec 	.word	0x1007aeec

023ff904 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff904:	2100      	movs	r1, #0
{
 23ff906:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff908:	4811      	ldr	r0, [pc, #68]	; (23ff950 <module_user_init_hook+0x4c>)
 23ff90a:	f7ff fa85 	bl	23fee18 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff90e:	4b11      	ldr	r3, [pc, #68]	; (23ff954 <module_user_init_hook+0x50>)
 23ff910:	681a      	ldr	r2, [r3, #0]
 23ff912:	4b11      	ldr	r3, [pc, #68]	; (23ff958 <module_user_init_hook+0x54>)
 23ff914:	429a      	cmp	r2, r3
 23ff916:	bf0c      	ite	eq
 23ff918:	2201      	moveq	r2, #1
 23ff91a:	2200      	movne	r2, #0
 23ff91c:	4b0f      	ldr	r3, [pc, #60]	; (23ff95c <module_user_init_hook+0x58>)
 23ff91e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff920:	d001      	beq.n	23ff926 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff922:	f7ff ffb1 	bl	23ff888 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff926:	f7fe ff13 	bl	23fe750 <HAL_RNG_GetRandomNumber>
 23ff92a:	4604      	mov	r4, r0
    srand(seed);
 23ff92c:	f000 f9a2 	bl	23ffc74 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff930:	4b0b      	ldr	r3, [pc, #44]	; (23ff960 <module_user_init_hook+0x5c>)
 23ff932:	b113      	cbz	r3, 23ff93a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff934:	4620      	mov	r0, r4
 23ff936:	e000      	b.n	23ff93a <module_user_init_hook+0x36>
 23ff938:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff93a:	2100      	movs	r1, #0
 23ff93c:	4808      	ldr	r0, [pc, #32]	; (23ff960 <module_user_init_hook+0x5c>)
 23ff93e:	f7ff f97d 	bl	23fec3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff946:	2100      	movs	r1, #0
 23ff948:	4806      	ldr	r0, [pc, #24]	; (23ff964 <module_user_init_hook+0x60>)
 23ff94a:	f7ff b95b 	b.w	23fec04 <system_ctrl_set_app_request_handler>
 23ff94e:	bf00      	nop
 23ff950:	023ff819 	.word	0x023ff819
 23ff954:	1007b400 	.word	0x1007b400
 23ff958:	9a271c1e 	.word	0x9a271c1e
 23ff95c:	1007aee8 	.word	0x1007aee8
 23ff960:	00000000 	.word	0x00000000
 23ff964:	023ff8cd 	.word	0x023ff8cd

023ff968 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff968:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff96a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff96c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff96e:	d902      	bls.n	23ff976 <pinAvailable+0xe>
    return false;
 23ff970:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff972:	b003      	add	sp, #12
 23ff974:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff976:	f1a0 030f 	sub.w	r3, r0, #15
 23ff97a:	2b02      	cmp	r3, #2
 23ff97c:	d90b      	bls.n	23ff996 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff97e:	2801      	cmp	r0, #1
 23ff980:	d821      	bhi.n	23ff9c6 <pinAvailable+0x5e>
 23ff982:	f000 f875 	bl	23ffa70 <_Z19__fetch_global_Wirev>
 23ff986:	2100      	movs	r1, #0
 23ff988:	7c00      	ldrb	r0, [r0, #16]
 23ff98a:	f7fe ff6d 	bl	23fe868 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff98e:	f080 0001 	eor.w	r0, r0, #1
 23ff992:	b2c0      	uxtb	r0, r0
 23ff994:	e7ed      	b.n	23ff972 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff996:	4d11      	ldr	r5, [pc, #68]	; (23ff9dc <pinAvailable+0x74>)
 23ff998:	e8d5 1f8f 	ldab	r1, [r5]
 23ff99c:	f011 0101 	ands.w	r1, r1, #1
 23ff9a0:	d10b      	bne.n	23ff9ba <pinAvailable+0x52>
 23ff9a2:	4628      	mov	r0, r5
 23ff9a4:	9101      	str	r1, [sp, #4]
 23ff9a6:	f7fe facc 	bl	23fdf42 <__cxa_guard_acquire>
 23ff9aa:	9901      	ldr	r1, [sp, #4]
 23ff9ac:	b128      	cbz	r0, 23ff9ba <pinAvailable+0x52>
 23ff9ae:	480c      	ldr	r0, [pc, #48]	; (23ff9e0 <pinAvailable+0x78>)
 23ff9b0:	f7ff fd68 	bl	23ff484 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff9b4:	4628      	mov	r0, r5
 23ff9b6:	f7fe fac9 	bl	23fdf4c <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff9ba:	4b09      	ldr	r3, [pc, #36]	; (23ff9e0 <pinAvailable+0x78>)
 23ff9bc:	7818      	ldrb	r0, [r3, #0]
 23ff9be:	f7fe ffc3 	bl	23fe948 <hal_spi_is_enabled>
 23ff9c2:	2800      	cmp	r0, #0
 23ff9c4:	d1d4      	bne.n	23ff970 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff9c6:	3c08      	subs	r4, #8
 23ff9c8:	2c01      	cmp	r4, #1
 23ff9ca:	d805      	bhi.n	23ff9d8 <pinAvailable+0x70>
 23ff9cc:	f000 f8a4 	bl	23ffb18 <_Z22__fetch_global_Serial1v>
 23ff9d0:	7c00      	ldrb	r0, [r0, #16]
 23ff9d2:	f7ff f861 	bl	23fea98 <hal_usart_is_enabled>
 23ff9d6:	e7da      	b.n	23ff98e <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff9d8:	2001      	movs	r0, #1
 23ff9da:	e7ca      	b.n	23ff972 <pinAvailable+0xa>
 23ff9dc:	1007ae7c 	.word	0x1007ae7c
 23ff9e0:	1007ae80 	.word	0x1007ae80

023ff9e4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff9e4:	281b      	cmp	r0, #27
{
 23ff9e6:	b538      	push	{r3, r4, r5, lr}
 23ff9e8:	4604      	mov	r4, r0
 23ff9ea:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff9ec:	d80a      	bhi.n	23ffa04 <pinMode+0x20>
 23ff9ee:	29ff      	cmp	r1, #255	; 0xff
 23ff9f0:	d008      	beq.n	23ffa04 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff9f2:	f7ff ffb9 	bl	23ff968 <pinAvailable>
 23ff9f6:	b128      	cbz	r0, 23ffa04 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff9f8:	4629      	mov	r1, r5
 23ff9fa:	4620      	mov	r0, r4
}
 23ff9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ffa00:	f7fe bec2 	b.w	23fe788 <hal_gpio_mode>
}
 23ffa04:	bd38      	pop	{r3, r4, r5, pc}

023ffa06 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ffa06:	b538      	push	{r3, r4, r5, lr}
 23ffa08:	4604      	mov	r4, r0
 23ffa0a:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ffa0c:	f7fe feca 	bl	23fe7a4 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ffa10:	28ff      	cmp	r0, #255	; 0xff
 23ffa12:	d010      	beq.n	23ffa36 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ffa14:	2806      	cmp	r0, #6
 23ffa16:	d804      	bhi.n	23ffa22 <digitalWrite+0x1c>
 23ffa18:	234d      	movs	r3, #77	; 0x4d
 23ffa1a:	fa23 f000 	lsr.w	r0, r3, r0
 23ffa1e:	07c3      	lsls	r3, r0, #31
 23ffa20:	d409      	bmi.n	23ffa36 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ffa22:	4620      	mov	r0, r4
 23ffa24:	f7ff ffa0 	bl	23ff968 <pinAvailable>
 23ffa28:	b128      	cbz	r0, 23ffa36 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ffa2a:	4629      	mov	r1, r5
 23ffa2c:	4620      	mov	r0, r4
}
 23ffa2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ffa32:	f7fe bec5 	b.w	23fe7c0 <hal_gpio_write>
}
 23ffa36:	bd38      	pop	{r3, r4, r5, pc}

023ffa38 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa38:	4770      	bx	lr
	...

023ffa3c <_Z17acquireWireBufferv>:
{
 23ffa3c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ffa3e:	4b0a      	ldr	r3, [pc, #40]	; (23ffa68 <_Z17acquireWireBufferv+0x2c>)
{
 23ffa40:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ffa42:	6003      	str	r3, [r0, #0]
 23ffa44:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa46:	4909      	ldr	r1, [pc, #36]	; (23ffa6c <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ffa48:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa4a:	2020      	movs	r0, #32
 23ffa4c:	f000 f8f4 	bl	23ffc38 <_ZnajRKSt9nothrow_t>
	};
 23ffa50:	2520      	movs	r5, #32
 23ffa52:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa54:	4905      	ldr	r1, [pc, #20]	; (23ffa6c <_Z17acquireWireBufferv+0x30>)
 23ffa56:	4628      	mov	r0, r5
	};
 23ffa58:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa5a:	f000 f8ed 	bl	23ffc38 <_ZnajRKSt9nothrow_t>
	};
 23ffa5e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ffa62:	4620      	mov	r0, r4
 23ffa64:	bd38      	pop	{r3, r4, r5, pc}
 23ffa66:	bf00      	nop
 23ffa68:	00010018 	.word	0x00010018
 23ffa6c:	023fff60 	.word	0x023fff60

023ffa70 <_Z19__fetch_global_Wirev>:
{
 23ffa70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa72:	4d0e      	ldr	r5, [pc, #56]	; (23ffaac <_Z19__fetch_global_Wirev+0x3c>)
{
 23ffa74:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa76:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa7a:	f011 0401 	ands.w	r4, r1, #1
 23ffa7e:	d111      	bne.n	23ffaa4 <_Z19__fetch_global_Wirev+0x34>
 23ffa80:	4628      	mov	r0, r5
 23ffa82:	f7fe fa5e 	bl	23fdf42 <__cxa_guard_acquire>
 23ffa86:	b168      	cbz	r0, 23ffaa4 <_Z19__fetch_global_Wirev+0x34>
 23ffa88:	4668      	mov	r0, sp
 23ffa8a:	f7ff ffd7 	bl	23ffa3c <_Z17acquireWireBufferv>
 23ffa8e:	466a      	mov	r2, sp
 23ffa90:	4621      	mov	r1, r4
 23ffa92:	4807      	ldr	r0, [pc, #28]	; (23ffab0 <_Z19__fetch_global_Wirev+0x40>)
 23ffa94:	f7ff fa5e 	bl	23fef54 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ffa98:	4628      	mov	r0, r5
 23ffa9a:	f7fe fa57 	bl	23fdf4c <__cxa_guard_release>
 23ffa9e:	4805      	ldr	r0, [pc, #20]	; (23ffab4 <_Z19__fetch_global_Wirev+0x44>)
 23ffaa0:	f000 f8cc 	bl	23ffc3c <atexit>
	return wire;
}
 23ffaa4:	4802      	ldr	r0, [pc, #8]	; (23ffab0 <_Z19__fetch_global_Wirev+0x40>)
 23ffaa6:	b007      	add	sp, #28
 23ffaa8:	bd30      	pop	{r4, r5, pc}
 23ffaaa:	bf00      	nop
 23ffaac:	1007aef4 	.word	0x1007aef4
 23ffab0:	1007aef8 	.word	0x1007aef8
 23ffab4:	023ffa39 	.word	0x023ffa39

023ffab8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffab8:	4770      	bx	lr
	...

023ffabc <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffabc:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ffabe:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffac0:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ffac2:	462a      	mov	r2, r5
 23ffac4:	2100      	movs	r1, #0
 23ffac6:	f000 f8cc 	bl	23ffc62 <memset>
 23ffaca:	8025      	strh	r5, [r4, #0]
 23ffacc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fface:	4907      	ldr	r1, [pc, #28]	; (23ffaec <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ffad0:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ffad2:	8125      	strh	r5, [r4, #8]
 23ffad4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffad6:	f000 f8af 	bl	23ffc38 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffada:	4904      	ldr	r1, [pc, #16]	; (23ffaec <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ffadc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffade:	4628      	mov	r0, r5
 23ffae0:	f000 f8aa 	bl	23ffc38 <_ZnajRKSt9nothrow_t>
    };
 23ffae4:	60e0      	str	r0, [r4, #12]
}
 23ffae6:	4620      	mov	r0, r4
 23ffae8:	bd38      	pop	{r3, r4, r5, pc}
 23ffaea:	bf00      	nop
 23ffaec:	023fff60 	.word	0x023fff60

023ffaf0 <__tcf_2>:
 23ffaf0:	4770      	bx	lr

023ffaf2 <__tcf_1>:
 23ffaf2:	4770      	bx	lr

023ffaf4 <_Z20acquireSerial1Bufferv>:
{
 23ffaf4:	b510      	push	{r4, lr}
 23ffaf6:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ffaf8:	f7ff ffe0 	bl	23ffabc <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ffafc:	4620      	mov	r0, r4
 23ffafe:	bd10      	pop	{r4, pc}

023ffb00 <_Z20acquireSerial2Bufferv>:
 23ffb00:	b510      	push	{r4, lr}
 23ffb02:	4604      	mov	r4, r0
 23ffb04:	f7ff ffda 	bl	23ffabc <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb08:	4620      	mov	r0, r4
 23ffb0a:	bd10      	pop	{r4, pc}

023ffb0c <_Z20acquireSerial3Bufferv>:
 23ffb0c:	b510      	push	{r4, lr}
 23ffb0e:	4604      	mov	r4, r0
 23ffb10:	f7ff ffd4 	bl	23ffabc <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb14:	4620      	mov	r0, r4
 23ffb16:	bd10      	pop	{r4, pc}

023ffb18 <_Z22__fetch_global_Serial1v>:
{
 23ffb18:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb1a:	4d0e      	ldr	r5, [pc, #56]	; (23ffb54 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffb1c:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb1e:	e8d5 1f8f 	ldab	r1, [r5]
 23ffb22:	f011 0401 	ands.w	r4, r1, #1
 23ffb26:	d111      	bne.n	23ffb4c <_Z22__fetch_global_Serial1v+0x34>
 23ffb28:	4628      	mov	r0, r5
 23ffb2a:	f7fe fa0a 	bl	23fdf42 <__cxa_guard_acquire>
 23ffb2e:	b168      	cbz	r0, 23ffb4c <_Z22__fetch_global_Serial1v+0x34>
 23ffb30:	a801      	add	r0, sp, #4
 23ffb32:	f7ff ffdf 	bl	23ffaf4 <_Z20acquireSerial1Bufferv>
 23ffb36:	4621      	mov	r1, r4
 23ffb38:	aa01      	add	r2, sp, #4
 23ffb3a:	4807      	ldr	r0, [pc, #28]	; (23ffb58 <_Z22__fetch_global_Serial1v+0x40>)
 23ffb3c:	f7ff fd94 	bl	23ff668 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb40:	4628      	mov	r0, r5
 23ffb42:	f7fe fa03 	bl	23fdf4c <__cxa_guard_release>
 23ffb46:	4805      	ldr	r0, [pc, #20]	; (23ffb5c <_Z22__fetch_global_Serial1v+0x44>)
 23ffb48:	f000 f878 	bl	23ffc3c <atexit>
    return serial1;
}
 23ffb4c:	4802      	ldr	r0, [pc, #8]	; (23ffb58 <_Z22__fetch_global_Serial1v+0x40>)
 23ffb4e:	b007      	add	sp, #28
 23ffb50:	bd30      	pop	{r4, r5, pc}
 23ffb52:	bf00      	nop
 23ffb54:	1007af0c 	.word	0x1007af0c
 23ffb58:	1007af18 	.word	0x1007af18
 23ffb5c:	023ffab9 	.word	0x023ffab9

023ffb60 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffb60:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb62:	4c0d      	ldr	r4, [pc, #52]	; (23ffb98 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffb64:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb66:	e8d4 3f8f 	ldab	r3, [r4]
 23ffb6a:	07db      	lsls	r3, r3, #31
 23ffb6c:	d411      	bmi.n	23ffb92 <_Z22__fetch_global_Serial2v+0x32>
 23ffb6e:	4620      	mov	r0, r4
 23ffb70:	f7fe f9e7 	bl	23fdf42 <__cxa_guard_acquire>
 23ffb74:	b168      	cbz	r0, 23ffb92 <_Z22__fetch_global_Serial2v+0x32>
 23ffb76:	a801      	add	r0, sp, #4
 23ffb78:	f7ff ffc2 	bl	23ffb00 <_Z20acquireSerial2Bufferv>
 23ffb7c:	2101      	movs	r1, #1
 23ffb7e:	aa01      	add	r2, sp, #4
 23ffb80:	4806      	ldr	r0, [pc, #24]	; (23ffb9c <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb82:	f7ff fd71 	bl	23ff668 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb86:	4620      	mov	r0, r4
 23ffb88:	f7fe f9e0 	bl	23fdf4c <__cxa_guard_release>
 23ffb8c:	4804      	ldr	r0, [pc, #16]	; (23ffba0 <_Z22__fetch_global_Serial2v+0x40>)
 23ffb8e:	f000 f855 	bl	23ffc3c <atexit>
	return serial2;
}
 23ffb92:	4802      	ldr	r0, [pc, #8]	; (23ffb9c <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb94:	b006      	add	sp, #24
 23ffb96:	bd10      	pop	{r4, pc}
 23ffb98:	1007af10 	.word	0x1007af10
 23ffb9c:	1007af2c 	.word	0x1007af2c
 23ffba0:	023ffaf3 	.word	0x023ffaf3

023ffba4 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffba4:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffba6:	f7ff ffdb 	bl	23ffb60 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffbaa:	4b07      	ldr	r3, [pc, #28]	; (23ffbc8 <_Z15serialEventRun2v+0x24>)
 23ffbac:	4604      	mov	r4, r0
 23ffbae:	b153      	cbz	r3, 23ffbc6 <_Z15serialEventRun2v+0x22>
 23ffbb0:	f7ff fd6e 	bl	23ff690 <_ZN11USARTSerial9isEnabledEv>
 23ffbb4:	b138      	cbz	r0, 23ffbc6 <_Z15serialEventRun2v+0x22>
 23ffbb6:	6823      	ldr	r3, [r4, #0]
 23ffbb8:	4620      	mov	r0, r4
 23ffbba:	691b      	ldr	r3, [r3, #16]
 23ffbbc:	4798      	blx	r3
 23ffbbe:	2800      	cmp	r0, #0
 23ffbc0:	dd01      	ble.n	23ffbc6 <_Z15serialEventRun2v+0x22>
        handler();
 23ffbc2:	e000      	b.n	23ffbc6 <_Z15serialEventRun2v+0x22>
 23ffbc4:	bf00      	nop
}
 23ffbc6:	bd10      	pop	{r4, pc}
 23ffbc8:	00000000 	.word	0x00000000

023ffbcc <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffbcc:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffbce:	4c0d      	ldr	r4, [pc, #52]	; (23ffc04 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffbd0:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffbd2:	e8d4 3f8f 	ldab	r3, [r4]
 23ffbd6:	07db      	lsls	r3, r3, #31
 23ffbd8:	d411      	bmi.n	23ffbfe <_Z22__fetch_global_Serial3v+0x32>
 23ffbda:	4620      	mov	r0, r4
 23ffbdc:	f7fe f9b1 	bl	23fdf42 <__cxa_guard_acquire>
 23ffbe0:	b168      	cbz	r0, 23ffbfe <_Z22__fetch_global_Serial3v+0x32>
 23ffbe2:	a801      	add	r0, sp, #4
 23ffbe4:	f7ff ff92 	bl	23ffb0c <_Z20acquireSerial3Bufferv>
 23ffbe8:	2102      	movs	r1, #2
 23ffbea:	aa01      	add	r2, sp, #4
 23ffbec:	4806      	ldr	r0, [pc, #24]	; (23ffc08 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffbee:	f7ff fd3b 	bl	23ff668 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffbf2:	4620      	mov	r0, r4
 23ffbf4:	f7fe f9aa 	bl	23fdf4c <__cxa_guard_release>
 23ffbf8:	4804      	ldr	r0, [pc, #16]	; (23ffc0c <_Z22__fetch_global_Serial3v+0x40>)
 23ffbfa:	f000 f81f 	bl	23ffc3c <atexit>
	return serial3;
}
 23ffbfe:	4802      	ldr	r0, [pc, #8]	; (23ffc08 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffc00:	b006      	add	sp, #24
 23ffc02:	bd10      	pop	{r4, pc}
 23ffc04:	1007af14 	.word	0x1007af14
 23ffc08:	1007af40 	.word	0x1007af40
 23ffc0c:	023ffaf1 	.word	0x023ffaf1

023ffc10 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffc10:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffc12:	f7ff ffdb 	bl	23ffbcc <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffc16:	4b07      	ldr	r3, [pc, #28]	; (23ffc34 <_Z15serialEventRun3v+0x24>)
 23ffc18:	4604      	mov	r4, r0
 23ffc1a:	b153      	cbz	r3, 23ffc32 <_Z15serialEventRun3v+0x22>
 23ffc1c:	f7ff fd38 	bl	23ff690 <_ZN11USARTSerial9isEnabledEv>
 23ffc20:	b138      	cbz	r0, 23ffc32 <_Z15serialEventRun3v+0x22>
 23ffc22:	6823      	ldr	r3, [r4, #0]
 23ffc24:	4620      	mov	r0, r4
 23ffc26:	691b      	ldr	r3, [r3, #16]
 23ffc28:	4798      	blx	r3
 23ffc2a:	2800      	cmp	r0, #0
 23ffc2c:	dd01      	ble.n	23ffc32 <_Z15serialEventRun3v+0x22>
        handler();
 23ffc2e:	e000      	b.n	23ffc32 <_Z15serialEventRun3v+0x22>
 23ffc30:	bf00      	nop
}
 23ffc32:	bd10      	pop	{r4, pc}
 23ffc34:	00000000 	.word	0x00000000

023ffc38 <_ZnajRKSt9nothrow_t>:
 23ffc38:	f7fe b97f 	b.w	23fdf3a <_Znaj>

023ffc3c <atexit>:
 23ffc3c:	2300      	movs	r3, #0
 23ffc3e:	4601      	mov	r1, r0
 23ffc40:	461a      	mov	r2, r3
 23ffc42:	4618      	mov	r0, r3
 23ffc44:	f000 b844 	b.w	23ffcd0 <__register_exitproc>

023ffc48 <memcpy>:
 23ffc48:	440a      	add	r2, r1
 23ffc4a:	1e43      	subs	r3, r0, #1
 23ffc4c:	4291      	cmp	r1, r2
 23ffc4e:	d100      	bne.n	23ffc52 <memcpy+0xa>
 23ffc50:	4770      	bx	lr
 23ffc52:	b510      	push	{r4, lr}
 23ffc54:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffc58:	4291      	cmp	r1, r2
 23ffc5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffc5e:	d1f9      	bne.n	23ffc54 <memcpy+0xc>
 23ffc60:	bd10      	pop	{r4, pc}

023ffc62 <memset>:
 23ffc62:	4402      	add	r2, r0
 23ffc64:	4603      	mov	r3, r0
 23ffc66:	4293      	cmp	r3, r2
 23ffc68:	d100      	bne.n	23ffc6c <memset+0xa>
 23ffc6a:	4770      	bx	lr
 23ffc6c:	f803 1b01 	strb.w	r1, [r3], #1
 23ffc70:	e7f9      	b.n	23ffc66 <memset+0x4>
	...

023ffc74 <srand>:
 23ffc74:	b538      	push	{r3, r4, r5, lr}
 23ffc76:	4b10      	ldr	r3, [pc, #64]	; (23ffcb8 <srand+0x44>)
 23ffc78:	4604      	mov	r4, r0
 23ffc7a:	681d      	ldr	r5, [r3, #0]
 23ffc7c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffc7e:	b9b3      	cbnz	r3, 23ffcae <srand+0x3a>
 23ffc80:	2018      	movs	r0, #24
 23ffc82:	f7ff f89f 	bl	23fedc4 <malloc>
 23ffc86:	4602      	mov	r2, r0
 23ffc88:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffc8a:	b920      	cbnz	r0, 23ffc96 <srand+0x22>
 23ffc8c:	4b0b      	ldr	r3, [pc, #44]	; (23ffcbc <srand+0x48>)
 23ffc8e:	2142      	movs	r1, #66	; 0x42
 23ffc90:	480b      	ldr	r0, [pc, #44]	; (23ffcc0 <srand+0x4c>)
 23ffc92:	f7ff f8b3 	bl	23fedfc <__assert_func>
 23ffc96:	490b      	ldr	r1, [pc, #44]	; (23ffcc4 <srand+0x50>)
 23ffc98:	4b0b      	ldr	r3, [pc, #44]	; (23ffcc8 <srand+0x54>)
 23ffc9a:	e9c0 1300 	strd	r1, r3, [r0]
 23ffc9e:	4b0b      	ldr	r3, [pc, #44]	; (23ffccc <srand+0x58>)
 23ffca0:	2100      	movs	r1, #0
 23ffca2:	6083      	str	r3, [r0, #8]
 23ffca4:	230b      	movs	r3, #11
 23ffca6:	8183      	strh	r3, [r0, #12]
 23ffca8:	2001      	movs	r0, #1
 23ffcaa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffcae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffcb0:	2200      	movs	r2, #0
 23ffcb2:	611c      	str	r4, [r3, #16]
 23ffcb4:	615a      	str	r2, [r3, #20]
 23ffcb6:	bd38      	pop	{r3, r4, r5, pc}
 23ffcb8:	1007add4 	.word	0x1007add4
 23ffcbc:	023fff61 	.word	0x023fff61
 23ffcc0:	023fff78 	.word	0x023fff78
 23ffcc4:	abcd330e 	.word	0xabcd330e
 23ffcc8:	e66d1234 	.word	0xe66d1234
 23ffccc:	0005deec 	.word	0x0005deec

023ffcd0 <__register_exitproc>:
 23ffcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffcd4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffd94 <__register_exitproc+0xc4>
 23ffcd8:	4606      	mov	r6, r0
 23ffcda:	461f      	mov	r7, r3
 23ffcdc:	460d      	mov	r5, r1
 23ffcde:	f8d8 0000 	ldr.w	r0, [r8]
 23ffce2:	4691      	mov	r9, r2
 23ffce4:	f000 f858 	bl	23ffd98 <__retarget_lock_acquire_recursive>
 23ffce8:	4b26      	ldr	r3, [pc, #152]	; (23ffd84 <__register_exitproc+0xb4>)
 23ffcea:	681c      	ldr	r4, [r3, #0]
 23ffcec:	b934      	cbnz	r4, 23ffcfc <__register_exitproc+0x2c>
 23ffcee:	4c26      	ldr	r4, [pc, #152]	; (23ffd88 <__register_exitproc+0xb8>)
 23ffcf0:	601c      	str	r4, [r3, #0]
 23ffcf2:	4b26      	ldr	r3, [pc, #152]	; (23ffd8c <__register_exitproc+0xbc>)
 23ffcf4:	b113      	cbz	r3, 23ffcfc <__register_exitproc+0x2c>
 23ffcf6:	681b      	ldr	r3, [r3, #0]
 23ffcf8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffcfc:	6863      	ldr	r3, [r4, #4]
 23ffcfe:	2b1f      	cmp	r3, #31
 23ffd00:	dd07      	ble.n	23ffd12 <__register_exitproc+0x42>
 23ffd02:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd06:	f000 f849 	bl	23ffd9c <__retarget_lock_release_recursive>
 23ffd0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffd0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffd12:	b35e      	cbz	r6, 23ffd6c <__register_exitproc+0x9c>
 23ffd14:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffd18:	b988      	cbnz	r0, 23ffd3e <__register_exitproc+0x6e>
 23ffd1a:	4b1d      	ldr	r3, [pc, #116]	; (23ffd90 <__register_exitproc+0xc0>)
 23ffd1c:	b923      	cbnz	r3, 23ffd28 <__register_exitproc+0x58>
 23ffd1e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd22:	f000 f83a 	bl	23ffd9a <__retarget_lock_release>
 23ffd26:	e7f0      	b.n	23ffd0a <__register_exitproc+0x3a>
 23ffd28:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffd2c:	f7ff f84a 	bl	23fedc4 <malloc>
 23ffd30:	2800      	cmp	r0, #0
 23ffd32:	d0f4      	beq.n	23ffd1e <__register_exitproc+0x4e>
 23ffd34:	2300      	movs	r3, #0
 23ffd36:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffd3a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffd3e:	6863      	ldr	r3, [r4, #4]
 23ffd40:	2201      	movs	r2, #1
 23ffd42:	2e02      	cmp	r6, #2
 23ffd44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffd48:	fa02 f203 	lsl.w	r2, r2, r3
 23ffd4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffd50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffd54:	ea43 0302 	orr.w	r3, r3, r2
 23ffd58:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffd5c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffd60:	bf02      	ittt	eq
 23ffd62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffd66:	4313      	orreq	r3, r2
 23ffd68:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffd6c:	6863      	ldr	r3, [r4, #4]
 23ffd6e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd72:	1c5a      	adds	r2, r3, #1
 23ffd74:	3302      	adds	r3, #2
 23ffd76:	6062      	str	r2, [r4, #4]
 23ffd78:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffd7c:	f000 f80e 	bl	23ffd9c <__retarget_lock_release_recursive>
 23ffd80:	2000      	movs	r0, #0
 23ffd82:	e7c4      	b.n	23ffd0e <__register_exitproc+0x3e>
 23ffd84:	1007afe0 	.word	0x1007afe0
 23ffd88:	1007af54 	.word	0x1007af54
 23ffd8c:	00000000 	.word	0x00000000
 23ffd90:	023fedc5 	.word	0x023fedc5
 23ffd94:	1007ae38 	.word	0x1007ae38

023ffd98 <__retarget_lock_acquire_recursive>:
 23ffd98:	4770      	bx	lr

023ffd9a <__retarget_lock_release>:
 23ffd9a:	4770      	bx	lr

023ffd9c <__retarget_lock_release_recursive>:
 23ffd9c:	4770      	bx	lr
	...

023ffda0 <dynalib_user>:
 23ffda0:	df01 023f df29 023f df2d 023f 0000 0000     ..?.).?.-.?.....
 23ffdb0:	6176 756c 3a65 0020 3e20 5720 6972 6574     value: . > Write
 23ffdc0:	6420 7461 3a61 0020 3e20 5220 6165 2064      data: . > Read 
 23ffdd0:	6164 6174 203a 0000                         data: ..

023ffdd8 <_ZTVN5spark13EthernetClassE>:
	...
 23ffde0:	eedf 023f eed5 023f eecb 023f eec1 023f     ..?...?...?...?.
 23ffdf0:	eeb5 023f eea9 023f f0d1 023f f0d9 023f     ..?...?...?...?.
 23ffe00:	ee9d 023f ee95 023f ee8b 023f ee81 023f     ..?...?...?...?.
 23ffe10:	f109 023f                                   ..?.

023ffe14 <_ZTV7TwoWire>:
	...
 23ffe1c:	eefd 023f ef47 023f ef1f 023f eeff 023f     ..?.G.?...?...?.
 23ffe2c:	ef27 023f ef2f 023f ef37 023f ef3f 023f     '.?./.?.7.?.?.?.

023ffe3c <_ZTV9IPAddress>:
	...
 23ffe44:	efa1 023f ef91 023f ef93 023f 7061 0070     ..?...?...?.app.

023ffe54 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe5c:	f091 023f f09b 023f f0a5 023f f0af 023f     ..?...?...?...?.
 23ffe6c:	f0b9 023f f0c5 023f f0d1 023f f0d9 023f     ..?...?...?...?.
 23ffe7c:	f0e1 023f f0ed 023f f0f5 023f f0ff 023f     ..?...?...?...?.
 23ffe8c:	f109 023f 616e 006e 6e69 0066 766f 0066     ..?.nan.inf.ovf.
 23ffe9c:	002e                                        ..

023ffe9e <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffe9e:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffeae:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffebe:	6d69 0065 0000                              ime...

023ffec4 <_ZTV11USARTSerial>:
	...
 23ffecc:	f5ed 023f f659 023f f631 023f f1f5 023f     ..?.Y.?.1.?...?.
 23ffedc:	f601 023f f61d 023f f60f 023f f62b 023f     ..?...?...?.+.?.
 23ffeec:	f5ef 023f f5f3 023f                         ..?...?.

023ffef4 <_ZTV9USBSerial>:
	...
 23ffefc:	f69d 023f f705 023f f6db 023f f1f5 023f     ..?...?...?...?.
 23fff0c:	f6cd 023f f69f 023f f6af 023f f6ff 023f     ..?...?...?...?.
 23fff1c:	f6bf 023f f697 023f                         ..?...?.

023fff24 <_ZTVN5spark9WiFiClassE>:
	...
 23fff2c:	f7fb 023f f7f1 023f f7e7 023f f79d 023f     ..?...?...?...?.
 23fff3c:	f7db 023f f7cf 023f f0d1 023f f0d9 023f     ..?...?...?...?.
 23fff4c:	f7c3 023f f7bb 023f f7b1 023f f7a7 023f     ..?...?...?...?.
 23fff5c:	f109 023f                                   ..?.

023fff60 <_ZSt7nothrow>:
 23fff60:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff70:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff80:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff90:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd1 <link_const_data_end>:
 23fffd1:	00          	.byte	0x00
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fe101 	.word	0x023fe101
 23fffd8:	023fee3d 	.word	0x023fee3d
 23fffdc:	023feee9 	.word	0x023feee9
 23fffe0:	023ff081 	.word	0x023ff081
 23fffe4:	023ff1e1 	.word	0x023ff1e1
 23fffe8:	023ff46d 	.word	0x023ff46d
 23fffec:	023ff5b5 	.word	0x023ff5b5
 23ffff0:	023ff5d9 	.word	0x023ff5d9
 23ffff4:	023ff805 	.word	0x023ff805
