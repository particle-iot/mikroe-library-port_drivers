
/Users/Erik-Home/Documents/GitHub/mikroe_port/mikroe_port/target/5.3.0/p2/mikroe_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fe000  085fe000  0000e000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fe018  085fe018  0000e018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fe3f0  085fe088  0000e3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00001c04  023fe3f8  085fe090  0000e3f8  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .data         00000070  1007add8  085ffc94  0001add8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001a0  1007ae48  1007ae48  0002ae48  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffd04  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000002b0  085ffd08  085ffd08  0001fd08  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fd08  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001497a9  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001638b  00000000  00000000  001697a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003b5ec  00000000  00000000  0017fb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002b88  00000000  00000000  001bb120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000af80  00000000  00000000  001bdca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b89b  00000000  00000000  001c8c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004af19  00000000  00000000  001f44c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cb9d2  00000000  00000000  0023f3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000079d4  00000000  00000000  0030adb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fe018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fe018:	480e      	ldr	r0, [pc, #56]	; (85fe054 <module_user_pre_init+0x3c>)
 85fe01a:	490f      	ldr	r1, [pc, #60]	; (85fe058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fe01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fe01e:	4288      	cmp	r0, r1
 85fe020:	d005      	beq.n	85fe02e <module_user_pre_init+0x16>
 85fe022:	4a0e      	ldr	r2, [pc, #56]	; (85fe05c <module_user_pre_init+0x44>)
 85fe024:	4282      	cmp	r2, r0
 85fe026:	d002      	beq.n	85fe02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fe028:	4b0d      	ldr	r3, [pc, #52]	; (85fe060 <module_user_pre_init+0x48>)
 85fe02a:	1a12      	subs	r2, r2, r0
 85fe02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fe02e:	480d      	ldr	r0, [pc, #52]	; (85fe064 <module_user_pre_init+0x4c>)
 85fe030:	4a0d      	ldr	r2, [pc, #52]	; (85fe068 <module_user_pre_init+0x50>)
 85fe032:	2100      	movs	r1, #0
 85fe034:	4b0d      	ldr	r3, [pc, #52]	; (85fe06c <module_user_pre_init+0x54>)
 85fe036:	1a12      	subs	r2, r2, r0
 85fe038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fe03a:	480d      	ldr	r0, [pc, #52]	; (85fe070 <module_user_pre_init+0x58>)
 85fe03c:	490d      	ldr	r1, [pc, #52]	; (85fe074 <module_user_pre_init+0x5c>)
 85fe03e:	4288      	cmp	r0, r1
 85fe040:	d005      	beq.n	85fe04e <module_user_pre_init+0x36>
 85fe042:	4a0d      	ldr	r2, [pc, #52]	; (85fe078 <module_user_pre_init+0x60>)
 85fe044:	4282      	cmp	r2, r0
 85fe046:	d002      	beq.n	85fe04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fe048:	4b05      	ldr	r3, [pc, #20]	; (85fe060 <module_user_pre_init+0x48>)
 85fe04a:	1a12      	subs	r2, r2, r0
 85fe04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fe04e:	4801      	ldr	r0, [pc, #4]	; (85fe054 <module_user_pre_init+0x3c>)
 85fe050:	bd08      	pop	{r3, pc}
 85fe052:	bf00      	nop
 85fe054:	1007add8 	.word	0x1007add8
 85fe058:	085ffc94 	.word	0x085ffc94
 85fe05c:	1007ae48 	.word	0x1007ae48
 85fe060:	10110d2d 	.word	0x10110d2d
 85fe064:	1007ae48 	.word	0x1007ae48
 85fe068:	1007afe8 	.word	0x1007afe8
 85fe06c:	10110ea1 	.word	0x10110ea1
 85fe070:	023fe3f0 	.word	0x023fe3f0
 85fe074:	085fe088 	.word	0x085fe088
 85fe078:	023ffffc 	.word	0x023ffffc

085fe07c <dynalib_preinit>:
 85fe07c:	085fe019 00000000                       .._.....

Disassembly of section .psram_text:

023fe3f8 <strlen>:
 23fe3f8:	4603      	mov	r3, r0
 23fe3fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe3fe:	2a00      	cmp	r2, #0
 23fe400:	d1fb      	bne.n	23fe3fa <strlen+0x2>
 23fe402:	1a18      	subs	r0, r3, r0
 23fe404:	3801      	subs	r0, #1
 23fe406:	4770      	bx	lr

023fe408 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fe408:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fe40a:	f001 fab7 	bl	23ff97c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe40e:	2500      	movs	r5, #0
 23fe410:	4e05      	ldr	r6, [pc, #20]	; (23fe428 <module_user_init+0x20>)
 23fe412:	4c06      	ldr	r4, [pc, #24]	; (23fe42c <module_user_init+0x24>)
 23fe414:	1ba4      	subs	r4, r4, r6
 23fe416:	08a4      	lsrs	r4, r4, #2
 23fe418:	42ac      	cmp	r4, r5
 23fe41a:	d100      	bne.n	23fe41e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fe41c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fe41e:	f856 3b04 	ldr.w	r3, [r6], #4
 23fe422:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe424:	3501      	adds	r5, #1
 23fe426:	e7f7      	b.n	23fe418 <module_user_init+0x10>
 23fe428:	023fffd8 	.word	0x023fffd8
 23fe42c:	023ffffc 	.word	0x023ffffc

023fe430 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fe430:	f000 b814 	b.w	23fe45c <setup>

023fe434 <module_user_loop>:
}

void module_user_loop() {
 23fe434:	b508      	push	{r3, lr}
    loop();
 23fe436:	f000 f84f 	bl	23fe4d8 <loop>
    _post_loop();
}
 23fe43a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fe43e:	f001 ba55 	b.w	23ff8ec <_post_loop>

023fe442 <_Znaj>:
 23fe442:	f000 be6b 	b.w	23ff11c <malloc>

023fe446 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fe446:	f000 be77 	b.w	23ff138 <free>

023fe44a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fe44a:	7800      	ldrb	r0, [r0, #0]
 23fe44c:	fab0 f080 	clz	r0, r0
 23fe450:	0940      	lsrs	r0, r0, #5
 23fe452:	4770      	bx	lr

023fe454 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fe454:	2301      	movs	r3, #1
 23fe456:	7003      	strb	r3, [r0, #0]
 23fe458:	4770      	bx	lr
	...

023fe45c <setup>:
//defines from rs232 main.c
#define PROCESS_RX_BUFFER_SIZE 500
#define RS232_TRANSMITTER

void setup() 
{
 23fe45c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 23fe45e:	2400      	movs	r4, #0

  Serial.begin(9600);
 23fe460:	f001 f9b4 	bl	23ff7cc <_Z16_fetch_usbserialv>
 23fe464:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fe468:	f001 f9a4 	bl	23ff7b4 <_ZN9USBSerial5beginEl>

  Particle.disconnect();
 23fe46c:	a801      	add	r0, sp, #4
 23fe46e:	e9cd 4401 	strd	r4, r4, [sp, #4]
        bool clearSession) :
 23fe472:	f8ad 400c 	strh.w	r4, [sp, #12]
 23fe476:	f000 fe95 	bl	23ff1a4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 23fe47a:	4814      	ldr	r0, [pc, #80]	; (23fe4cc <setup+0x70>)
 23fe47c:	4622      	mov	r2, r4
 23fe47e:	4623      	mov	r3, r4
 23fe480:	4621      	mov	r1, r4
 23fe482:	6840      	ldr	r0, [r0, #4]
 23fe484:	f000 fde8 	bl	23ff058 <network_off>
  eeprom7_default_cfg ( &eeprom7 );
  */

  //from temphum13
  temphum13_cfg_t temphum13_cfg;
  temphum13_cfg_setup( &temphum13_cfg );
 23fe488:	a801      	add	r0, sp, #4
 23fe48a:	f000 fac7 	bl	23fea1c <temphum13_cfg_setup>
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fe48e:	2301      	movs	r3, #1
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fe490:	4c0f      	ldr	r4, [pc, #60]	; (23fe4d0 <setup+0x74>)
 23fe492:	a901      	add	r1, sp, #4
 23fe494:	4620      	mov	r0, r4
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fe496:	f8ad 3004 	strh.w	r3, [sp, #4]
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fe49a:	f000 fac7 	bl	23fea2c <temphum13_init>
  temphum13_default_cfg( &temphum13 );
 23fe49e:	4620      	mov	r0, r4
 23fe4a0:	f000 faf4 	bl	23fea8c <temphum13_default_cfg>
  current4_init( &current4, &current4_cfg );
*/

  //from 1wireswitch
  c1wireswitch_cfg_t c1wireswitch_cfg;
  c1wireswitch_cfg_setup( &c1wireswitch_cfg );
 23fe4a4:	4668      	mov	r0, sp
 23fe4a6:	f000 f854 	bl	23fe552 <_Z22c1wireswitch_cfg_setupP18c1wireswitch_cfg_t>
  C1WIRESWITCH_MAP_MIKROBUS( c1wireswitch_cfg, MIKROBUS_1 );
 23fe4aa:	230e      	movs	r3, #14
 23fe4ac:	f88d 3000 	strb.w	r3, [sp]
 23fe4b0:	230b      	movs	r3, #11
  c1wireswitch_init( &c1wireswitch, &c1wireswitch_cfg );
 23fe4b2:	4c08      	ldr	r4, [pc, #32]	; (23fe4d4 <setup+0x78>)
 23fe4b4:	4669      	mov	r1, sp
 23fe4b6:	4620      	mov	r0, r4
  C1WIRESWITCH_MAP_MIKROBUS( c1wireswitch_cfg, MIKROBUS_1 );
 23fe4b8:	f88d 3001 	strb.w	r3, [sp, #1]
  c1wireswitch_init( &c1wireswitch, &c1wireswitch_cfg );
 23fe4bc:	f000 f84f 	bl	23fe55e <_Z17c1wireswitch_initP14c1wireswitch_tP18c1wireswitch_cfg_t>
  c1wireswitch_default_cfg ( &c1wireswitch );
 23fe4c0:	4620      	mov	r0, r4
 23fe4c2:	f000 f8b1 	bl	23fe628 <_Z24c1wireswitch_default_cfgP14c1wireswitch_t>

  

}
 23fe4c6:	b004      	add	sp, #16
 23fe4c8:	bd10      	pop	{r4, pc}
 23fe4ca:	bf00      	nop
 23fe4cc:	1007aee0 	.word	0x1007aee0
 23fe4d0:	1007ae60 	.word	0x1007ae60
 23fe4d4:	1007ae54 	.word	0x1007ae54

023fe4d8 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 23fe4d8:	b508      	push	{r3, lr}
//delay(1000);

//current4_main();
//delay(5000);

c1wireswitch_set_pio_state( &c1wireswitch, C1WIRESWITCH_PIOA_OFF, C1WIRESWITCH_PIOB_ON );
 23fe4da:	2202      	movs	r2, #2
 23fe4dc:	2101      	movs	r1, #1
 23fe4de:	4804      	ldr	r0, [pc, #16]	; (23fe4f0 <loop+0x18>)
 23fe4e0:	f000 f8b1 	bl	23fe646 <_Z26c1wireswitch_set_pio_stateP14c1wireswitch_thh>
delay(1000);


}
 23fe4e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
delay(1000);
 23fe4e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fe4ec:	f000 be4e 	b.w	23ff18c <delay>
 23fe4f0:	1007ae54 	.word	0x1007ae54

023fe4f4 <_GLOBAL__sub_I_SystemMode>:
  current4_read_an_pin_voltage ( &current4, &current4_load_voltage );
  Serial.print("voltage = ");
	Serial.print(current4_load_voltage, 2); 
	Serial.println("");

 23fe4f4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe4f6:	2400      	movs	r4, #0
 23fe4f8:	4b06      	ldr	r3, [pc, #24]	; (23fe514 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
 23fe4fa:	4a07      	ldr	r2, [pc, #28]	; (23fe518 <_GLOBAL__sub_I_SystemMode+0x24>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe4fc:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 23fe4fe:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fe502:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fe504:	f000 fd00 	bl	23fef08 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fe508:	4621      	mov	r1, r4
 23fe50a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
 23fe50e:	2001      	movs	r0, #1
 23fe510:	f000 bd16 	b.w	23fef40 <system_thread_set_state>
 23fe514:	1007ae48 	.word	0x1007ae48
 23fe518:	ffff0000 	.word	0xffff0000

023fe51c <_ZL27c1wireswitch_calculate_crc8Phh>:
}

static uint8_t c1wireswitch_calculate_crc8 ( uint8_t *data_buf, uint8_t len )
{
    uint8_t crc = 0x00;
    for ( uint8_t cnt_0 = 0; cnt_0 < len; cnt_0++ ) 
 23fe51c:	4602      	mov	r2, r0
 23fe51e:	4401      	add	r1, r0
    uint8_t crc = 0x00;
 23fe520:	2000      	movs	r0, #0
{
 23fe522:	b530      	push	{r4, r5, lr}
    for ( uint8_t cnt_0 = 0; cnt_0 < len; cnt_0++ ) 
 23fe524:	428a      	cmp	r2, r1
 23fe526:	d013      	beq.n	23fe550 <_ZL27c1wireswitch_calculate_crc8Phh+0x34>
    {
        uint8_t in_byte = data_buf[ cnt_0 ];
 23fe528:	2408      	movs	r4, #8
 23fe52a:	f812 5b01 	ldrb.w	r5, [r2], #1
        for ( uint8_t cnt_1 = 0; cnt_1 < 8; cnt_1++ ) 
        {
            uint8_t mix = ( crc ^ in_byte ) & 0x01;
 23fe52e:	ea80 0305 	eor.w	r3, r0, r5
            crc >>= 1;
            if ( 0 != mix ) 
 23fe532:	f013 0f01 	tst.w	r3, #1
 23fe536:	ea4f 0050 	mov.w	r0, r0, lsr #1
            {
                crc ^= 0x8C;
 23fe53a:	bf1c      	itt	ne
 23fe53c:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 23fe540:	b2d8      	uxtbne	r0, r3
        for ( uint8_t cnt_1 = 0; cnt_1 < 8; cnt_1++ ) 
 23fe542:	1e63      	subs	r3, r4, #1
 23fe544:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
            }
            in_byte >>= 1;
 23fe548:	ea4f 0555 	mov.w	r5, r5, lsr #1
        for ( uint8_t cnt_1 = 0; cnt_1 < 8; cnt_1++ ) 
 23fe54c:	d1ef      	bne.n	23fe52e <_ZL27c1wireswitch_calculate_crc8Phh+0x12>
 23fe54e:	e7e9      	b.n	23fe524 <_ZL27c1wireswitch_calculate_crc8Phh+0x8>
        }
    }
    return crc;
}
 23fe550:	bd30      	pop	{r4, r5, pc}

023fe552 <_Z22c1wireswitch_cfg_setupP18c1wireswitch_cfg_t>:
    cfg->gp0 = HAL_PIN_NC;
 23fe552:	23ff      	movs	r3, #255	; 0xff
 23fe554:	7003      	strb	r3, [r0, #0]
    cfg->gp1 = HAL_PIN_NC;
 23fe556:	7043      	strb	r3, [r0, #1]
    cfg->gpio_sel = C1WIRESWITCH_GPIO_1;
 23fe558:	2301      	movs	r3, #1
 23fe55a:	7083      	strb	r3, [r0, #2]
}
 23fe55c:	4770      	bx	lr

023fe55e <_Z17c1wireswitch_initP14c1wireswitch_tP18c1wireswitch_cfg_t>:
{
 23fe55e:	b538      	push	{r3, r4, r5, lr}
 23fe560:	460c      	mov	r4, r1
 23fe562:	4605      	mov	r5, r0
    one_wire_configure_default( &ctx->ow );
 23fe564:	f000 fa18 	bl	23fe998 <_Z26one_wire_configure_defaultP10one_wire_t>
    ctx->ow.data_pin = ( cfg->gpio_sel == C1WIRESWITCH_GPIO_0 ) ? cfg->gp0 : cfg->gp1;
 23fe568:	78a3      	ldrb	r3, [r4, #2]
 23fe56a:	b953      	cbnz	r3, 23fe582 <_Z17c1wireswitch_initP14c1wireswitch_tP18c1wireswitch_cfg_t+0x24>
 23fe56c:	7823      	ldrb	r3, [r4, #0]
    if ( ONE_WIRE_ERROR == one_wire_open( &ctx->ow ) )
 23fe56e:	4628      	mov	r0, r5
    ctx->ow.data_pin = ( cfg->gpio_sel == C1WIRESWITCH_GPIO_0 ) ? cfg->gp0 : cfg->gp1;
 23fe570:	702b      	strb	r3, [r5, #0]
    if ( ONE_WIRE_ERROR == one_wire_open( &ctx->ow ) )
 23fe572:	f000 fa12 	bl	23fe99a <_Z13one_wire_openP10one_wire_t>
}
 23fe576:	3001      	adds	r0, #1
 23fe578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe57c:	bf18      	it	ne
 23fe57e:	2000      	movne	r0, #0
 23fe580:	bd38      	pop	{r3, r4, r5, pc}
    ctx->ow.data_pin = ( cfg->gpio_sel == C1WIRESWITCH_GPIO_0 ) ? cfg->gp0 : cfg->gp1;
 23fe582:	7863      	ldrb	r3, [r4, #1]
 23fe584:	e7f3      	b.n	23fe56e <_Z17c1wireswitch_initP14c1wireswitch_tP18c1wireswitch_cfg_t+0x10>

023fe586 <_Z32c1wireswitch_check_communicationP14c1wireswitch_t>:
{
 23fe586:	b538      	push	{r3, r4, r5, lr}
    if ( ONE_WIRE_ERROR == one_wire_read_rom ( &ctx->ow, &ctx->rom_addr ) )
 23fe588:	1c85      	adds	r5, r0, #2
 23fe58a:	4629      	mov	r1, r5
{
 23fe58c:	4604      	mov	r4, r0
    if ( ONE_WIRE_ERROR == one_wire_read_rom ( &ctx->ow, &ctx->rom_addr ) )
 23fe58e:	f000 fa1a 	bl	23fe9c6 <_Z17one_wire_read_romP10one_wire_tP22one_wire_rom_address_t>
 23fe592:	1c43      	adds	r3, r0, #1
 23fe594:	d00b      	beq.n	23fe5ae <_Z32c1wireswitch_check_communicationP14c1wireswitch_t+0x28>
    if ( C1WIRESWITCH_FAMILY_CODE != ctx->rom_addr.address[ 0 ] )
 23fe596:	78a3      	ldrb	r3, [r4, #2]
 23fe598:	2b3a      	cmp	r3, #58	; 0x3a
 23fe59a:	d109      	bne.n	23fe5b0 <_Z32c1wireswitch_check_communicationP14c1wireswitch_t+0x2a>
    if ( ctx->rom_addr.address[ 7 ] != c1wireswitch_calculate_crc8( &ctx->rom_addr.address[ 0 ], 7 ) )
 23fe59c:	2107      	movs	r1, #7
 23fe59e:	4628      	mov	r0, r5
 23fe5a0:	f7ff ffbc 	bl	23fe51c <_ZL27c1wireswitch_calculate_crc8Phh>
 23fe5a4:	7a63      	ldrb	r3, [r4, #9]
 23fe5a6:	1a18      	subs	r0, r3, r0
 23fe5a8:	bf18      	it	ne
 23fe5aa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
}
 23fe5ae:	bd38      	pop	{r3, r4, r5, pc}
        return C1WIRESWITCH_ERROR;
 23fe5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe5b4:	e7fb      	b.n	23fe5ae <_Z32c1wireswitch_check_communicationP14c1wireswitch_t+0x28>

023fe5b6 <_Z26c1wireswitch_select_deviceP14c1wireswitch_t>:
    if ( C1WIRESWITCH_ADDRESS_ALL == ctx->address )
 23fe5b6:	7a83      	ldrb	r3, [r0, #10]
{
 23fe5b8:	4601      	mov	r1, r0
    if ( C1WIRESWITCH_ADDRESS_ALL == ctx->address )
 23fe5ba:	2bff      	cmp	r3, #255	; 0xff
 23fe5bc:	d101      	bne.n	23fe5c2 <_Z26c1wireswitch_select_deviceP14c1wireswitch_t+0xc>
        return one_wire_skip_rom( &ctx->ow );
 23fe5be:	f000 ba12 	b.w	23fe9e6 <_Z17one_wire_skip_romP10one_wire_t>
        return one_wire_match_rom( &ctx->ow, &ctx->rom_addr );
 23fe5c2:	3102      	adds	r1, #2
 23fe5c4:	f000 ba16 	b.w	23fe9f4 <_Z18one_wire_match_romP10one_wire_tP22one_wire_rom_address_t>

023fe5c8 <_Z29c1wireswitch_write_scratchpadP14c1wireswitch_tPhh>:
{
 23fe5c8:	b570      	push	{r4, r5, r6, lr}
 23fe5ca:	460c      	mov	r4, r1
    uint8_t data_buf[ 256 ] = { 0 };
 23fe5cc:	2100      	movs	r1, #0
{
 23fe5ce:	b0c0      	sub	sp, #256	; 0x100
 23fe5d0:	4605      	mov	r5, r0
 23fe5d2:	4616      	mov	r6, r2
    uint8_t data_buf[ 256 ] = { 0 };
 23fe5d4:	a801      	add	r0, sp, #4
 23fe5d6:	22fc      	movs	r2, #252	; 0xfc
 23fe5d8:	9100      	str	r1, [sp, #0]
 23fe5da:	f001 fb64 	bl	23ffca6 <memset>
    data_buf[ 0 ] = C1WIRESWITCH_CMD_WRITE_SCRATCHPAD;
 23fe5de:	235a      	movs	r3, #90	; 0x5a
    memcpy ( &data_buf[ 1 ], scratchpad, scratchpad_len );
 23fe5e0:	4632      	mov	r2, r6
 23fe5e2:	4621      	mov	r1, r4
 23fe5e4:	f10d 0001 	add.w	r0, sp, #1
    data_buf[ 0 ] = C1WIRESWITCH_CMD_WRITE_SCRATCHPAD;
 23fe5e8:	f88d 3000 	strb.w	r3, [sp]
    memcpy ( &data_buf[ 1 ], scratchpad, scratchpad_len );
 23fe5ec:	f001 fb4e 	bl	23ffc8c <memcpy>
    error_flag |= c1wireswitch_select_device ( ctx );
 23fe5f0:	4628      	mov	r0, r5
 23fe5f2:	f7ff ffe0 	bl	23fe5b6 <_Z26c1wireswitch_select_deviceP14c1wireswitch_t>
    error_flag |= one_wire_write_byte( &ctx->ow, data_buf, scratchpad_len + 1 );
 23fe5f6:	4669      	mov	r1, sp
    error_flag |= c1wireswitch_select_device ( ctx );
 23fe5f8:	4604      	mov	r4, r0
    error_flag |= one_wire_write_byte( &ctx->ow, data_buf, scratchpad_len + 1 );
 23fe5fa:	1c72      	adds	r2, r6, #1
 23fe5fc:	4628      	mov	r0, r5
 23fe5fe:	f000 f9d2 	bl	23fe9a6 <_Z19one_wire_write_byteP10one_wire_tPhj>
 23fe602:	4320      	orrs	r0, r4
}
 23fe604:	b240      	sxtb	r0, r0
 23fe606:	b040      	add	sp, #256	; 0x100
 23fe608:	bd70      	pop	{r4, r5, r6, pc}

023fe60a <_Z22c1wireswitch_write_pioP14c1wireswitch_th>:
{
 23fe60a:	b507      	push	{r0, r1, r2, lr}
    tx_data[ 0 ] = 0xFC | state;
 23fe60c:	f041 01fc 	orr.w	r1, r1, #252	; 0xfc
 23fe610:	f88d 1004 	strb.w	r1, [sp, #4]
    tx_data[ 1 ] = ~tx_data[ 0 ];
 23fe614:	43c9      	mvns	r1, r1
    error_flag = c1wireswitch_write_scratchpad( ctx, tx_data, 2 );
 23fe616:	2202      	movs	r2, #2
    tx_data[ 1 ] = ~tx_data[ 0 ];
 23fe618:	f88d 1005 	strb.w	r1, [sp, #5]
    error_flag = c1wireswitch_write_scratchpad( ctx, tx_data, 2 );
 23fe61c:	a901      	add	r1, sp, #4
 23fe61e:	f7ff ffd3 	bl	23fe5c8 <_Z29c1wireswitch_write_scratchpadP14c1wireswitch_tPhh>
}
 23fe622:	b003      	add	sp, #12
 23fe624:	f85d fb04 	ldr.w	pc, [sp], #4

023fe628 <_Z24c1wireswitch_default_cfgP14c1wireswitch_t>:
    ctx->address = C1WIRESWITCH_ADDRESS;
 23fe628:	2333      	movs	r3, #51	; 0x33
{
 23fe62a:	b510      	push	{r4, lr}
    ctx->address = C1WIRESWITCH_ADDRESS;
 23fe62c:	7283      	strb	r3, [r0, #10]
{
 23fe62e:	4604      	mov	r4, r0
    if ( C1WIRESWITCH_ERROR == c1wireswitch_check_communication ( ctx ) )
 23fe630:	f7ff ffa9 	bl	23fe586 <_Z32c1wireswitch_check_communicationP14c1wireswitch_t>
 23fe634:	1c43      	adds	r3, r0, #1
 23fe636:	d005      	beq.n	23fe644 <_Z24c1wireswitch_default_cfgP14c1wireswitch_t+0x1c>
    error_flag = c1wireswitch_write_pio( ctx, tx_data );
 23fe638:	4620      	mov	r0, r4
}
 23fe63a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    error_flag = c1wireswitch_write_pio( ctx, tx_data );
 23fe63e:	2101      	movs	r1, #1
 23fe640:	f7ff bfe3 	b.w	23fe60a <_Z22c1wireswitch_write_pioP14c1wireswitch_th>
}
 23fe644:	bd10      	pop	{r4, pc}

023fe646 <_Z26c1wireswitch_set_pio_stateP14c1wireswitch_thh>:
    error_flag = c1wireswitch_write_pio( ctx, tx_data );
 23fe646:	4311      	orrs	r1, r2
 23fe648:	f7ff bfdf 	b.w	23fe60a <_Z22c1wireswitch_write_pioP14c1wireswitch_th>

023fe64c <_Z15oneWire_set_pint>:
*/

//sets pin for 1-wire interface
void oneWire_set_pin(uint16_t pin)
{
    _pin = pin;                  //set global variable equal to pin
 23fe64c:	4b02      	ldr	r3, [pc, #8]	; (23fe658 <_Z15oneWire_set_pint+0xc>)
    pinMode(_pin, INPUT);        //set pin as input, hal calls pin as output during low-level functions
 23fe64e:	2100      	movs	r1, #0
    _pin = pin;                  //set global variable equal to pin
 23fe650:	8018      	strh	r0, [r3, #0]
    pinMode(_pin, INPUT);        //set pin as input, hal calls pin as output during low-level functions
 23fe652:	f001 ba03 	b.w	23ffa5c <pinMode>
 23fe656:	bf00      	nop
 23fe658:	1007ae78 	.word	0x1007ae78

023fe65c <_Z17oneWire_write_bith>:
}

//write a bit
void oneWire_write_bit(uint8_t value)
{
    if ((value & 1) == 1)               //write logic 1
 23fe65c:	f010 0f01 	tst.w	r0, #1
{
 23fe660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe662:	4c37      	ldr	r4, [pc, #220]	; (23fe740 <_Z17oneWire_write_bith+0xe4>)
 23fe664:	4d37      	ldr	r5, [pc, #220]	; (23fe744 <_Z17oneWire_write_bith+0xe8>)
 23fe666:	4f38      	ldr	r7, [pc, #224]	; (23fe748 <_Z17oneWire_write_bith+0xec>)
    if ((value & 1) == 1)               //write logic 1
 23fe668:	d036      	beq.n	23fe6d8 <_Z17oneWire_write_bith+0x7c>
    {
        noInterrupts();                 //turn off interrupts
 23fe66a:	f000 fe4f 	bl	23ff30c <_Z12noInterruptsv>
        pinResetFast(_pin);             //set pin low
 23fe66e:	8826      	ldrh	r6, [r4, #0]
#ifdef	__cplusplus
extern "C" {
#endif

__attribute__((always_inline)) inline const hal_pin_info_t* fastPinGetPinmap() {
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fe670:	e8d5 3f8f 	ldab	r3, [r5]
 23fe674:	07da      	lsls	r2, r3, #31
 23fe676:	d409      	bmi.n	23fe68c <_Z17oneWire_write_bith+0x30>
 23fe678:	4628      	mov	r0, r5
 23fe67a:	f7ff fee6 	bl	23fe44a <__cxa_guard_acquire>
 23fe67e:	b128      	cbz	r0, 23fe68c <_Z17oneWire_write_bith+0x30>
 23fe680:	f000 fa58 	bl	23feb34 <hal_pin_map>
 23fe684:	6038      	str	r0, [r7, #0]
 23fe686:	4628      	mov	r0, r5
 23fe688:	f7ff fee4 	bl	23fe454 <__cxa_guard_release>
    }
}

inline void pinResetFast(hal_pin_t _pin)
{
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe68c:	230c      	movs	r3, #12
 23fe68e:	4373      	muls	r3, r6
 23fe690:	6839      	ldr	r1, [r7, #0]

    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe692:	5cc8      	ldrb	r0, [r1, r3]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe694:	18ca      	adds	r2, r1, r3
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe696:	492d      	ldr	r1, [pc, #180]	; (23fe74c <_Z17oneWire_write_bith+0xf0>)
 23fe698:	4b2d      	ldr	r3, [pc, #180]	; (23fe750 <_Z17oneWire_write_bith+0xf4>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe69a:	7852      	ldrb	r2, [r2, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe69c:	2800      	cmp	r0, #0
 23fe69e:	bf18      	it	ne
 23fe6a0:	460b      	movne	r3, r1
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23fe6a2:	2101      	movs	r1, #1
 23fe6a4:	6818      	ldr	r0, [r3, #0]
 23fe6a6:	fa01 f202 	lsl.w	r2, r1, r2
 23fe6aa:	ea20 0002 	bic.w	r0, r0, r2
 23fe6ae:	6018      	str	r0, [r3, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23fe6b0:	6858      	ldr	r0, [r3, #4]
 23fe6b2:	4302      	orrs	r2, r0
 23fe6b4:	605a      	str	r2, [r3, #4]
#pragma once

// Deprecated *dynalib* APIs for backwards compatibility
inline void __attribute__((deprecated("Use hal_gpio_mode() instead"), always_inline))
HAL_Pin_Mode(pin_t pin, PinMode mode) {
    hal_gpio_mode(pin, mode);
 23fe6b6:	8820      	ldrh	r0, [r4, #0]
 23fe6b8:	f000 fa4a 	bl	23feb50 <hal_gpio_mode>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23fe6bc:	2008      	movs	r0, #8
 23fe6be:	f000 fa1d 	bl	23feafc <HAL_Delay_Microseconds>
 23fe6c2:	8820      	ldrh	r0, [r4, #0]
 23fe6c4:	2100      	movs	r1, #0
 23fe6c6:	f000 fa43 	bl	23feb50 <hal_gpio_mode>
        HAL_Pin_Mode(_pin, OUTPUT);     //set pin as output
        delayMicroseconds(8);          //dealy for tLOW1

        HAL_Pin_Mode(_pin, INPUT);      //set pin as input, let signal float
        interrupts();                   //turn on interrupts
 23fe6ca:	f000 fe21 	bl	23ff310 <_Z10interruptsv>
 23fe6ce:	2034      	movs	r0, #52	; 0x34
        HAL_Pin_Mode(_pin, INPUT);      //set pin as input, let signal float
        interrupts();                   //turn on interrupts

        delayMicroseconds(3);           //delay for remainder of tSLOT
    }
}
 23fe6d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 23fe6d4:	f000 ba12 	b.w	23feafc <HAL_Delay_Microseconds>
        noInterrupts();                 //turn off interrupts
 23fe6d8:	f000 fe18 	bl	23ff30c <_Z12noInterruptsv>
        pinResetFast(_pin);             //set pin low
 23fe6dc:	8826      	ldrh	r6, [r4, #0]
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fe6de:	e8d5 3f8f 	ldab	r3, [r5]
 23fe6e2:	07db      	lsls	r3, r3, #31
 23fe6e4:	d409      	bmi.n	23fe6fa <_Z17oneWire_write_bith+0x9e>
 23fe6e6:	4628      	mov	r0, r5
 23fe6e8:	f7ff feaf 	bl	23fe44a <__cxa_guard_acquire>
 23fe6ec:	b128      	cbz	r0, 23fe6fa <_Z17oneWire_write_bith+0x9e>
 23fe6ee:	f000 fa21 	bl	23feb34 <hal_pin_map>
 23fe6f2:	6038      	str	r0, [r7, #0]
 23fe6f4:	4628      	mov	r0, r5
 23fe6f6:	f7ff fead 	bl	23fe454 <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe6fa:	230c      	movs	r3, #12
 23fe6fc:	4373      	muls	r3, r6
 23fe6fe:	6839      	ldr	r1, [r7, #0]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe700:	5cc8      	ldrb	r0, [r1, r3]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe702:	18ca      	adds	r2, r1, r3
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe704:	4911      	ldr	r1, [pc, #68]	; (23fe74c <_Z17oneWire_write_bith+0xf0>)
 23fe706:	4b12      	ldr	r3, [pc, #72]	; (23fe750 <_Z17oneWire_write_bith+0xf4>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe708:	7852      	ldrb	r2, [r2, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe70a:	2800      	cmp	r0, #0
 23fe70c:	bf18      	it	ne
 23fe70e:	460b      	movne	r3, r1
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23fe710:	2101      	movs	r1, #1
 23fe712:	6818      	ldr	r0, [r3, #0]
 23fe714:	fa01 f202 	lsl.w	r2, r1, r2
 23fe718:	ea20 0002 	bic.w	r0, r0, r2
 23fe71c:	6018      	str	r0, [r3, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23fe71e:	6858      	ldr	r0, [r3, #4]
 23fe720:	4302      	orrs	r2, r0
 23fe722:	605a      	str	r2, [r3, #4]
 23fe724:	8820      	ldrh	r0, [r4, #0]
 23fe726:	f000 fa13 	bl	23feb50 <hal_gpio_mode>
 23fe72a:	2039      	movs	r0, #57	; 0x39
 23fe72c:	f000 f9e6 	bl	23feafc <HAL_Delay_Microseconds>
 23fe730:	8820      	ldrh	r0, [r4, #0]
 23fe732:	2100      	movs	r1, #0
 23fe734:	f000 fa0c 	bl	23feb50 <hal_gpio_mode>
        interrupts();                   //turn on interrupts
 23fe738:	f000 fdea 	bl	23ff310 <_Z10interruptsv>
 23fe73c:	2003      	movs	r0, #3
 23fe73e:	e7c7      	b.n	23fe6d0 <_Z17oneWire_write_bith+0x74>
 23fe740:	1007ae78 	.word	0x1007ae78
 23fe744:	1007ae70 	.word	0x1007ae70
 23fe748:	1007ae74 	.word	0x1007ae74
 23fe74c:	48014400 	.word	0x48014400
 23fe750:	48014000 	.word	0x48014000

023fe754 <_Z16oneWire_read_bitv>:

//read a bit
uint8_t oneWire_read_bit()
{
 23fe754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t temp;                   //local variable for the temp bit value

    noInterrupts();                 //turn off interrupts
 23fe756:	f000 fdd9 	bl	23ff30c <_Z12noInterruptsv>
    pinResetFast(_pin);             //set pin low
 23fe75a:	4c2d      	ldr	r4, [pc, #180]	; (23fe810 <_Z16oneWire_read_bitv+0xbc>)
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fe75c:	4e2d      	ldr	r6, [pc, #180]	; (23fe814 <_Z16oneWire_read_bitv+0xc0>)
 23fe75e:	8827      	ldrh	r7, [r4, #0]
 23fe760:	e8d6 3f8f 	ldab	r3, [r6]
 23fe764:	f013 0f01 	tst.w	r3, #1
 23fe768:	4d2b      	ldr	r5, [pc, #172]	; (23fe818 <_Z16oneWire_read_bitv+0xc4>)
 23fe76a:	d109      	bne.n	23fe780 <_Z16oneWire_read_bitv+0x2c>
 23fe76c:	4630      	mov	r0, r6
 23fe76e:	f7ff fe6c 	bl	23fe44a <__cxa_guard_acquire>
 23fe772:	b128      	cbz	r0, 23fe780 <_Z16oneWire_read_bitv+0x2c>
 23fe774:	f000 f9de 	bl	23feb34 <hal_pin_map>
 23fe778:	6028      	str	r0, [r5, #0]
 23fe77a:	4630      	mov	r0, r6
 23fe77c:	f7ff fe6a 	bl	23fe454 <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe780:	230c      	movs	r3, #12
 23fe782:	437b      	muls	r3, r7
 23fe784:	6829      	ldr	r1, [r5, #0]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe786:	5cc8      	ldrb	r0, [r1, r3]
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe788:	18ca      	adds	r2, r1, r3
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe78a:	4924      	ldr	r1, [pc, #144]	; (23fe81c <_Z16oneWire_read_bitv+0xc8>)
 23fe78c:	4b24      	ldr	r3, [pc, #144]	; (23fe820 <_Z16oneWire_read_bitv+0xcc>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe78e:	7852      	ldrb	r2, [r2, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe790:	2800      	cmp	r0, #0
 23fe792:	bf18      	it	ne
 23fe794:	460b      	movne	r3, r1
    gpiobase->PORT[0].DR &= ~(1 << pin_info.gpio_pin);
 23fe796:	2101      	movs	r1, #1
 23fe798:	6818      	ldr	r0, [r3, #0]
 23fe79a:	fa01 f202 	lsl.w	r2, r1, r2
 23fe79e:	ea20 0002 	bic.w	r0, r0, r2
 23fe7a2:	6018      	str	r0, [r3, #0]
    gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23fe7a4:	6858      	ldr	r0, [r3, #4]
 23fe7a6:	4302      	orrs	r2, r0
 23fe7a8:	605a      	str	r2, [r3, #4]
 23fe7aa:	8820      	ldrh	r0, [r4, #0]
 23fe7ac:	f000 f9d0 	bl	23feb50 <hal_gpio_mode>
 23fe7b0:	2008      	movs	r0, #8
 23fe7b2:	f000 f9a3 	bl	23feafc <HAL_Delay_Microseconds>
 23fe7b6:	2100      	movs	r1, #0
 23fe7b8:	8820      	ldrh	r0, [r4, #0]
 23fe7ba:	f000 f9c9 	bl	23feb50 <hal_gpio_mode>
 23fe7be:	2003      	movs	r0, #3
 23fe7c0:	f000 f99c 	bl	23feafc <HAL_Delay_Microseconds>
    HAL_Pin_Mode(_pin, OUTPUT);     //set pin as output
    delayMicroseconds(8);           //delay for tLOW1

    HAL_Pin_Mode(_pin, INPUT);      //set pin as input, let signal float
    delayMicroseconds(3);           //delay for tDSO
    temp = pinReadFast(_pin);       //read bit value
 23fe7c4:	8824      	ldrh	r4, [r4, #0]
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fe7c6:	e8d6 3f8f 	ldab	r3, [r6]
 23fe7ca:	07db      	lsls	r3, r3, #31
 23fe7cc:	d409      	bmi.n	23fe7e2 <_Z16oneWire_read_bitv+0x8e>
 23fe7ce:	4811      	ldr	r0, [pc, #68]	; (23fe814 <_Z16oneWire_read_bitv+0xc0>)
 23fe7d0:	f7ff fe3b 	bl	23fe44a <__cxa_guard_acquire>
 23fe7d4:	b128      	cbz	r0, 23fe7e2 <_Z16oneWire_read_bitv+0x8e>
 23fe7d6:	f000 f9ad 	bl	23feb34 <hal_pin_map>
 23fe7da:	6028      	str	r0, [r5, #0]
 23fe7dc:	480d      	ldr	r0, [pc, #52]	; (23fe814 <_Z16oneWire_read_bitv+0xc0>)
 23fe7de:	f7ff fe39 	bl	23fe454 <__cxa_guard_release>
}

inline int32_t pinReadFast(hal_pin_t _pin)
{
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe7e2:	230c      	movs	r3, #12
 23fe7e4:	4363      	muls	r3, r4
 23fe7e6:	682a      	ldr	r2, [r5, #0]
 23fe7e8:	18d1      	adds	r1, r2, r3
 23fe7ea:	784d      	ldrb	r5, [r1, #1]

    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe7ec:	5cd1      	ldrb	r1, [r2, r3]
 23fe7ee:	4a0b      	ldr	r2, [pc, #44]	; (23fe81c <_Z16oneWire_read_bitv+0xc8>)
 23fe7f0:	4b0b      	ldr	r3, [pc, #44]	; (23fe820 <_Z16oneWire_read_bitv+0xcc>)
 23fe7f2:	2900      	cmp	r1, #0
 23fe7f4:	bf18      	it	ne
 23fe7f6:	4613      	movne	r3, r2
    return ((gpiobase->EXT_PORT[0] >> pin_info.gpio_pin) & 1UL);
 23fe7f8:	6d1c      	ldr	r4, [r3, #80]	; 0x50
    interrupts();                   //turn on interrupts
 23fe7fa:	f000 fd89 	bl	23ff310 <_Z10interruptsv>
 23fe7fe:	2031      	movs	r0, #49	; 0x31
 23fe800:	f000 f97c 	bl	23feafc <HAL_Delay_Microseconds>
 23fe804:	fa24 f005 	lsr.w	r0, r4, r5

    delayMicroseconds(49);          //delay for remainder of tSLOT

    return temp;                    //return temp bit value
}
 23fe808:	f000 0001 	and.w	r0, r0, #1
 23fe80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fe80e:	bf00      	nop
 23fe810:	1007ae78 	.word	0x1007ae78
 23fe814:	1007ae70 	.word	0x1007ae70
 23fe818:	1007ae74 	.word	0x1007ae74
 23fe81c:	48014400 	.word	0x48014400
 23fe820:	48014000 	.word	0x48014000

023fe824 <_Z13oneWire_writehb>:

//write a byte
void oneWire_write(uint8_t value, bool pulse) 
{
 23fe824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe826:	4607      	mov	r7, r0
 23fe828:	460d      	mov	r5, r1
 23fe82a:	2608      	movs	r6, #8
    for (uint8_t bitMask = 0x01; bitMask; bitMask <<= 1)        //for loop for bit shifting 
 23fe82c:	2401      	movs	r4, #1
    {
        if((bitMask & value) == TRUE)       //if bit is a logic 1
 23fe82e:	ea07 0004 	and.w	r0, r7, r4
 23fe832:	2801      	cmp	r0, #1
        {
            oneWire_write_bit(TRUE);        //write logic 1
        }
        else                                //value is a logic 0
        {
            oneWire_write_bit(FALSE);       //write logic 0
 23fe834:	bf18      	it	ne
 23fe836:	2000      	movne	r0, #0
 23fe838:	f7ff ff10 	bl	23fe65c <_Z17oneWire_write_bith>
    for (uint8_t bitMask = 0x01; bitMask; bitMask <<= 1)        //for loop for bit shifting 
 23fe83c:	0064      	lsls	r4, r4, #1
 23fe83e:	3e01      	subs	r6, #1
 23fe840:	b2e4      	uxtb	r4, r4
 23fe842:	d1f4      	bne.n	23fe82e <_Z13oneWire_writehb+0xa>
        }
    }

    //wire may need to remain high after write, ex write cycle of eeprom 
    if (pulse == TRUE)                  
 23fe844:	2d00      	cmp	r5, #0
 23fe846:	d038      	beq.n	23fe8ba <_Z13oneWire_writehb+0x96>
    {
        noInterrupts();                 //turn off interrupts
 23fe848:	f000 fd60 	bl	23ff30c <_Z12noInterruptsv>
        pinSetFast(_pin);               //set pin high
 23fe84c:	4d1b      	ldr	r5, [pc, #108]	; (23fe8bc <_Z13oneWire_writehb+0x98>)
    static const hal_pin_info_t* pinMap = hal_pin_map();
 23fe84e:	4e1c      	ldr	r6, [pc, #112]	; (23fe8c0 <_Z13oneWire_writehb+0x9c>)
 23fe850:	882c      	ldrh	r4, [r5, #0]
 23fe852:	e8d6 3f8f 	ldab	r3, [r6]
 23fe856:	f013 0f01 	tst.w	r3, #1
 23fe85a:	4f1a      	ldr	r7, [pc, #104]	; (23fe8c4 <_Z13oneWire_writehb+0xa0>)
 23fe85c:	d109      	bne.n	23fe872 <_Z13oneWire_writehb+0x4e>
 23fe85e:	4630      	mov	r0, r6
 23fe860:	f7ff fdf3 	bl	23fe44a <__cxa_guard_acquire>
 23fe864:	b128      	cbz	r0, 23fe872 <_Z13oneWire_writehb+0x4e>
 23fe866:	f000 f965 	bl	23feb34 <hal_pin_map>
 23fe86a:	6038      	str	r0, [r7, #0]
 23fe86c:	4630      	mov	r0, r6
 23fe86e:	f7ff fdf1 	bl	23fe454 <__cxa_guard_release>
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe872:	230c      	movs	r3, #12
 23fe874:	4363      	muls	r3, r4
 23fe876:	6838      	ldr	r0, [r7, #0]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe878:	4a13      	ldr	r2, [pc, #76]	; (23fe8c8 <_Z13oneWire_writehb+0xa4>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe87a:	18c1      	adds	r1, r0, r3
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe87c:	5cc0      	ldrb	r0, [r0, r3]
 23fe87e:	4b13      	ldr	r3, [pc, #76]	; (23fe8cc <_Z13oneWire_writehb+0xa8>)
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe880:	784c      	ldrb	r4, [r1, #1]
    GPIO_TypeDef* gpiobase = ((pin_info.gpio_port == RTL_PORT_A) ? GPIOA_BASE : GPIOB_BASE);
 23fe882:	2800      	cmp	r0, #0
 23fe884:	bf18      	it	ne
 23fe886:	4613      	movne	r3, r2
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23fe888:	2201      	movs	r2, #1
    hal_pin_info_t pin_info = fastPinGetPinmap()[_pin];
 23fe88a:	7889      	ldrb	r1, [r1, #2]
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23fe88c:	40a2      	lsls	r2, r4
    if (pin_info.pin_mode == OUTPUT_OPEN_DRAIN || pin_info.pin_mode == OUTPUT_OPEN_DRAIN_PULLUP) {
 23fe88e:	2905      	cmp	r1, #5
 23fe890:	d001      	beq.n	23fe896 <_Z13oneWire_writehb+0x72>
 23fe892:	2908      	cmp	r1, #8
 23fe894:	d10b      	bne.n	23fe8ae <_Z13oneWire_writehb+0x8a>
        gpiobase->PORT[0].DDR &= (~(1 << pin_info.gpio_pin));
 23fe896:	6859      	ldr	r1, [r3, #4]
 23fe898:	ea21 0202 	bic.w	r2, r1, r2
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23fe89c:	605a      	str	r2, [r3, #4]
 23fe89e:	8828      	ldrh	r0, [r5, #0]
 23fe8a0:	2101      	movs	r1, #1
 23fe8a2:	f000 f955 	bl	23feb50 <hal_gpio_mode>
        HAL_Pin_Mode(_pin, OUTPUT);     //set pin as output
        interrupts();                   //turn on interrupts        
    }
}
 23fe8a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        interrupts();                   //turn on interrupts        
 23fe8aa:	f000 bd31 	b.w	23ff310 <_Z10interruptsv>
        gpiobase->PORT[0].DR |= (1 << pin_info.gpio_pin);
 23fe8ae:	6819      	ldr	r1, [r3, #0]
 23fe8b0:	4311      	orrs	r1, r2
 23fe8b2:	6019      	str	r1, [r3, #0]
        gpiobase->PORT[0].DDR |= (1 << pin_info.gpio_pin);
 23fe8b4:	6859      	ldr	r1, [r3, #4]
 23fe8b6:	430a      	orrs	r2, r1
 23fe8b8:	e7f0      	b.n	23fe89c <_Z13oneWire_writehb+0x78>
}
 23fe8ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23fe8bc:	1007ae78 	.word	0x1007ae78
 23fe8c0:	1007ae70 	.word	0x1007ae70
 23fe8c4:	1007ae74 	.word	0x1007ae74
 23fe8c8:	48014400 	.word	0x48014400
 23fe8cc:	48014000 	.word	0x48014000

023fe8d0 <_Z12oneWire_readv>:

//read a byte
uint8_t oneWire_read() 
{
 23fe8d0:	b570      	push	{r4, r5, r6, lr}
 23fe8d2:	2608      	movs	r6, #8
    uint8_t temp = 0;                                           //local variable for the various bit values
    for (uint8_t bitMask = 0x01; bitMask; bitMask <<= 1)        //for loop for bit shifting
 23fe8d4:	2401      	movs	r4, #1
    uint8_t temp = 0;                                           //local variable for the various bit values
 23fe8d6:	2500      	movs	r5, #0
    {
        if (oneWire_read_bit() == TRUE)                         //if bit = logic 1 
 23fe8d8:	f7ff ff3c 	bl	23fe754 <_Z16oneWire_read_bitv>
 23fe8dc:	2801      	cmp	r0, #1
        {
            temp |= bitMask;                                    //or bitmask with temp variable
 23fe8de:	bf08      	it	eq
 23fe8e0:	4325      	orreq	r5, r4
    for (uint8_t bitMask = 0x01; bitMask; bitMask <<= 1)        //for loop for bit shifting
 23fe8e2:	0064      	lsls	r4, r4, #1
 23fe8e4:	3e01      	subs	r6, #1
 23fe8e6:	b2e4      	uxtb	r4, r4
 23fe8e8:	d1f6      	bne.n	23fe8d8 <_Z12oneWire_readv+0x8>
        }
    }
    return temp;                                                //return byte read
}
 23fe8ea:	4628      	mov	r0, r5
 23fe8ec:	bd70      	pop	{r4, r5, r6, pc}
	...

023fe8f0 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>:
static uint32_t set_speed;      //scl speed variable, static as previous value should be retained
static uint8_t addr;            //7-bit cleint address variable, status as previous value should be retained

//Configures i2c_master_config_t struct to default initialization values
void i2c_master_configure_default(i2c_master_config_t *config)
{
 23fe8f0:	b510      	push	{r4, lr}
    config->speed = I2C_MASTER_SPEED_STANDARD;
    config->timeout_pass_count = 10000;
    */
    
    
    addr = 0x00;                                    //set client address to 0x00
 23fe8f2:	2400      	movs	r4, #0
 23fe8f4:	4b05      	ldr	r3, [pc, #20]	; (23fe90c <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x1c>)
 23fe8f6:	701c      	strb	r4, [r3, #0]
    set_speed = I2C_MASTER_SPEED_STANDARD;          //set static global variable to new speed value
 23fe8f8:	4b05      	ldr	r3, [pc, #20]	; (23fe910 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x20>)
 23fe8fa:	601c      	str	r4, [r3, #0]
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fe8fc:	f001 f8da 	bl	23ffab4 <_Z19__fetch_global_Wirev>
 23fe900:	4621      	mov	r1, r4
}
 23fe902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fe906:	f000 bcef 	b.w	23ff2e8 <_ZN7TwoWire8setSpeedEm>
 23fe90a:	bf00      	nop
 23fe90c:	1007ae7a 	.word	0x1007ae7a
 23fe910:	1007ae7c 	.word	0x1007ae7c

023fe914 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>:

//Opens the I2C Master driver object on selected pins
int8_t i2c_master_open(i2c_master_t *obj, i2c_master_config_t *config)
{
 23fe914:	b508      	push	{r3, lr}

    return _acquire( obj, true );
    */

    
    Wire.setSpeed(set_speed);       //set speed, must be done before Wire.begin() and set to whatever the static global variable is set to
 23fe916:	f001 f8cd 	bl	23ffab4 <_Z19__fetch_global_Wirev>
 23fe91a:	4b05      	ldr	r3, [pc, #20]	; (23fe930 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t+0x1c>)
 23fe91c:	6819      	ldr	r1, [r3, #0]
 23fe91e:	f000 fce3 	bl	23ff2e8 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();                   //join i2c bus as host                   
 23fe922:	f001 f8c7 	bl	23ffab4 <_Z19__fetch_global_Wirev>
 23fe926:	f000 fce3 	bl	23ff2f0 <_ZN7TwoWire5beginEv>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe92a:	2000      	movs	r0, #0
 23fe92c:	bd08      	pop	{r3, pc}
 23fe92e:	bf00      	nop
 23fe930:	1007ae7c 	.word	0x1007ae7c

023fe934 <_Z20i2c_master_set_speedP12i2c_master_tm>:

//set scl speed
int8_t i2c_master_set_speed(i2c_master_t *obj, uint32_t speed)
{
 23fe934:	b510      	push	{r4, lr}
 23fe936:	460c      	mov	r4, r1
        return I2C_MASTER_ERROR;
    }
    */

    
    set_speed = speed;              //set static global variable to new speed value
 23fe938:	4b04      	ldr	r3, [pc, #16]	; (23fe94c <_Z20i2c_master_set_speedP12i2c_master_tm+0x18>)
 23fe93a:	6019      	str	r1, [r3, #0]
    Wire.setSpeed(speed);           //set speed, must be done before Wire.begin()
 23fe93c:	f001 f8ba 	bl	23ffab4 <_Z19__fetch_global_Wirev>
 23fe940:	4621      	mov	r1, r4
 23fe942:	f000 fcd1 	bl	23ff2e8 <_ZN7TwoWire8setSpeedEm>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe946:	2000      	movs	r0, #0
 23fe948:	bd10      	pop	{r4, pc}
 23fe94a:	bf00      	nop
 23fe94c:	1007ae7c 	.word	0x1007ae7c

023fe950 <_Z28i2c_master_set_slave_addressP12i2c_master_th>:
        return I2C_MASTER_ERROR;
    }
    */

    
    addr = address;                 //set function parameter to global variable
 23fe950:	4b01      	ldr	r3, [pc, #4]	; (23fe958 <_Z28i2c_master_set_slave_addressP12i2c_master_th+0x8>)
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe952:	2000      	movs	r0, #0
    addr = address;                 //set function parameter to global variable
 23fe954:	7019      	strb	r1, [r3, #0]
}
 23fe956:	4770      	bx	lr
 23fe958:	1007ae7a 	.word	0x1007ae7a

023fe95c <_Z16i2c_master_writeP12i2c_master_tPhj>:

//i2c write operation, R/W = 0
int8_t i2c_master_write(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data)
{
 23fe95c:	b513      	push	{r0, r1, r4, lr}
 23fe95e:	460c      	mov	r4, r1
 23fe960:	9201      	str	r2, [sp, #4]
        return I2C_MASTER_ERROR;
    }
    */

    
    Wire.beginTransmission(addr);                       //send device address byte using 7-bit client address
 23fe962:	f001 f8a7 	bl	23ffab4 <_Z19__fetch_global_Wirev>
 23fe966:	4b0b      	ldr	r3, [pc, #44]	; (23fe994 <_Z16i2c_master_writeP12i2c_master_tPhj+0x38>)
 23fe968:	7819      	ldrb	r1, [r3, #0]
 23fe96a:	f000 fcc7 	bl	23ff2fc <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);
 23fe96e:	f001 f8a1 	bl	23ffab4 <_Z19__fetch_global_Wirev>
 23fe972:	6803      	ldr	r3, [r0, #0]
 23fe974:	4621      	mov	r1, r4
 23fe976:	68db      	ldr	r3, [r3, #12]
 23fe978:	9a01      	ldr	r2, [sp, #4]
 23fe97a:	4798      	blx	r3
    if (Wire.endTransmission(TRUE) == TRUE)     //send stop condition (true)
 23fe97c:	f001 f89a 	bl	23ffab4 <_Z19__fetch_global_Wirev>
 23fe980:	2101      	movs	r1, #1
 23fe982:	f000 fcbf 	bl	23ff304 <_ZN7TwoWire15endTransmissionEh>
    {
        return I2C_MASTER_SUCCESS;      //return status
    }
    return I2C_MASTER_ERROR;        //return status    
}
 23fe986:	3801      	subs	r0, #1
 23fe988:	bf18      	it	ne
 23fe98a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fe98e:	b002      	add	sp, #8
 23fe990:	bd10      	pop	{r4, pc}
 23fe992:	bf00      	nop
 23fe994:	1007ae7a 	.word	0x1007ae7a

023fe998 <_Z26one_wire_configure_defaultP10one_wire_t>:
    obj->state = false;
    */


   //oneWire_set_pin(obj->data_pin);
}
 23fe998:	4770      	bx	lr

023fe99a <_Z13one_wire_openP10one_wire_t>:

//as
int8_t one_wire_open( one_wire_t *obj ) 
{
 23fe99a:	b508      	push	{r3, lr}
    } else {
        return ONE_WIRE_SUCCESS;
    }
    */

    oneWire_set_pin(obj->data_pin);
 23fe99c:	7800      	ldrb	r0, [r0, #0]
 23fe99e:	f7ff fe55 	bl	23fe64c <_Z15oneWire_set_pint>
    return ONE_WIRE_SUCCESS;     //return status 
}
 23fe9a2:	2000      	movs	r0, #0
 23fe9a4:	bd08      	pop	{r3, pc}

023fe9a6 <_Z19one_wire_write_byteP10one_wire_tPhj>:
   return ONE_WIRE_ERROR;     //return status
}

//as
int8_t one_wire_write_byte(one_wire_t *obj, uint8_t *write_data_buffer, size_t write_data_length) 
{
 23fe9a6:	b570      	push	{r4, r5, r6, lr}
 23fe9a8:	460c      	mov	r4, r1
 23fe9aa:	4616      	mov	r6, r2
 23fe9ac:	2500      	movs	r5, #0

    return ONE_WIRE_SUCCESS;
    */


    for (uint16_t ii = 0 ; ii < write_data_length ; ii++)
 23fe9ae:	b2ab      	uxth	r3, r5
 23fe9b0:	429e      	cmp	r6, r3
 23fe9b2:	f105 0501 	add.w	r5, r5, #1
 23fe9b6:	d904      	bls.n	23fe9c2 <_Z19one_wire_write_byteP10one_wire_tPhj+0x1c>
    {
        oneWire_write(write_data_buffer[ii]);       //write rom bytes
 23fe9b8:	2100      	movs	r1, #0
 23fe9ba:	5ce0      	ldrb	r0, [r4, r3]
 23fe9bc:	f7ff ff32 	bl	23fe824 <_Z13oneWire_writehb>
    for (uint16_t ii = 0 ; ii < write_data_length ; ii++)
 23fe9c0:	e7f5      	b.n	23fe9ae <_Z19one_wire_write_byteP10one_wire_tPhj+0x8>
    }
    return ONE_WIRE_SUCCESS;                        //return status
}
 23fe9c2:	2000      	movs	r0, #0
 23fe9c4:	bd70      	pop	{r4, r5, r6, pc}

023fe9c6 <_Z17one_wire_read_romP10one_wire_tP22one_wire_rom_address_t>:
    return ONE_WIRE_SUCCESS;     //return status
}

//as
int8_t one_wire_read_rom(one_wire_t *obj, one_wire_rom_address_t *device_rom_address) 
{
 23fe9c6:	b538      	push	{r3, r4, r5, lr}

    return ONE_WIRE_SUCCESS;
    */


    oneWire_write(ROM_MATCH);                           //wite Choose ROM cmd
 23fe9c8:	2055      	movs	r0, #85	; 0x55
{
 23fe9ca:	460c      	mov	r4, r1
    oneWire_write(ROM_MATCH);                           //wite Choose ROM cmd
 23fe9cc:	2100      	movs	r1, #0
 23fe9ce:	f7ff ff29 	bl	23fe824 <_Z13oneWire_writehb>
    for (uint16_t ii = 0 ; ii < 8 ; ii++)               //loop for number of bytes (count)
 23fe9d2:	1e65      	subs	r5, r4, #1
 23fe9d4:	3407      	adds	r4, #7
    {
        device_rom_address->address[ii] = oneWire_read();        //index pointer array and set to byte read
 23fe9d6:	f7ff ff7b 	bl	23fe8d0 <_Z12oneWire_readv>
 23fe9da:	f805 0f01 	strb.w	r0, [r5, #1]!
    for (uint16_t ii = 0 ; ii < 8 ; ii++)               //loop for number of bytes (count)
 23fe9de:	42a5      	cmp	r5, r4
 23fe9e0:	d1f9      	bne.n	23fe9d6 <_Z17one_wire_read_romP10one_wire_tP22one_wire_rom_address_t+0x10>
    }
    return ONE_WIRE_SUCCESS;                            //return status
}
 23fe9e2:	2000      	movs	r0, #0
 23fe9e4:	bd38      	pop	{r3, r4, r5, pc}

023fe9e6 <_Z17one_wire_skip_romP10one_wire_t>:

//as
int8_t one_wire_skip_rom(one_wire_t *obj) 
{
 23fe9e6:	b508      	push	{r3, lr}

    return ONE_WIRE_SUCCESS;
    */


    oneWire_write(ROM_SKIP);        //write Skip ROM cmd
 23fe9e8:	2100      	movs	r1, #0
 23fe9ea:	20cc      	movs	r0, #204	; 0xcc
 23fe9ec:	f7ff ff1a 	bl	23fe824 <_Z13oneWire_writehb>
    return ONE_WIRE_SUCCESS;        //return status
}
 23fe9f0:	2000      	movs	r0, #0
 23fe9f2:	bd08      	pop	{r3, pc}

023fe9f4 <_Z18one_wire_match_romP10one_wire_tP22one_wire_rom_address_t>:

//as
int8_t one_wire_match_rom(one_wire_t *obj, one_wire_rom_address_t *device_rom_address)
{
 23fe9f4:	b538      	push	{r3, r4, r5, lr}

    return ONE_WIRE_SUCCESS;
    */


    oneWire_write(ROM_MATCH);                       //wite Choose ROM cmd
 23fe9f6:	2055      	movs	r0, #85	; 0x55
{
 23fe9f8:	460c      	mov	r4, r1
    oneWire_write(ROM_MATCH);                       //wite Choose ROM cmd
 23fe9fa:	2100      	movs	r1, #0
 23fe9fc:	f7ff ff12 	bl	23fe824 <_Z13oneWire_writehb>
    for (uint16_t ii = 0 ; ii < 8 ; ii++)           //loop for number of bytes (count)
 23fea00:	1e65      	subs	r5, r4, #1
 23fea02:	3407      	adds	r4, #7
    {
        oneWire_write(device_rom_address->address[ii]);      //write rom bytes
 23fea04:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 23fea08:	2100      	movs	r1, #0
 23fea0a:	f7ff ff0b 	bl	23fe824 <_Z13oneWire_writehb>
    for (uint16_t ii = 0 ; ii < 8 ; ii++)           //loop for number of bytes (count)
 23fea0e:	42a5      	cmp	r5, r4
 23fea10:	d1f8      	bne.n	23fea04 <_Z18one_wire_match_romP10one_wire_tP22one_wire_rom_address_t+0x10>
    }
    return ONE_WIRE_SUCCESS;                        //return status
}
 23fea12:	2000      	movs	r0, #0
 23fea14:	bd38      	pop	{r3, r4, r5, pc}

023fea16 <_Z11Delay_100msv>:
#define HAL_PORT_NC (uint8_t)(0xFFFFFFFF)              //port error, wrong port selected

//function for mikroE delays for libray port compability
inline void Delay_1ms( ) {delay(1);}
inline void Delay_10ms( ) {delay(10);}
inline void Delay_100ms( ) {delay(100);}
 23fea16:	2064      	movs	r0, #100	; 0x64
 23fea18:	f000 bbb8 	b.w	23ff18c <delay>

023fea1c <temphum13_cfg_setup>:

void temphum13_cfg_setup ( temphum13_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->scl = HAL_PIN_NC;
 23fea1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fea20:	8003      	strh	r3, [r0, #0]
    cfg->sda = HAL_PIN_NC;

    cfg->i2c_speed = I2C_MASTER_SPEED_STANDARD; 
 23fea22:	2300      	movs	r3, #0
 23fea24:	6043      	str	r3, [r0, #4]
    cfg->i2c_address = TEMPHUM13_DEVICE_ADDRESS;
 23fea26:	2340      	movs	r3, #64	; 0x40
 23fea28:	7203      	strb	r3, [r0, #8]
}
 23fea2a:	4770      	bx	lr

023fea2c <temphum13_init>:

TEMPHUM13_RETVAL temphum13_init ( temphum13_t *ctx, temphum13_cfg_t *cfg )
{
 23fea2c:	b530      	push	{r4, r5, lr}
 23fea2e:	460d      	mov	r5, r1
 23fea30:	4604      	mov	r4, r0
 23fea32:	b085      	sub	sp, #20
    i2c_master_config_t i2c_cfg;

    i2c_master_configure_default( &i2c_cfg );
 23fea34:	a801      	add	r0, sp, #4
 23fea36:	f7ff ff5b 	bl	23fe8f0 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>
    i2c_cfg.speed  = cfg->i2c_speed;
 23fea3a:	686b      	ldr	r3, [r5, #4]
    i2c_cfg.scl    = cfg->scl;
    i2c_cfg.sda    = cfg->sda;

    ctx->slave_address = cfg->i2c_address;

    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fea3c:	4620      	mov	r0, r4
    i2c_cfg.speed  = cfg->i2c_speed;
 23fea3e:	9302      	str	r3, [sp, #8]
    i2c_cfg.scl    = cfg->scl;
 23fea40:	782b      	ldrb	r3, [r5, #0]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fea42:	a901      	add	r1, sp, #4
    i2c_cfg.scl    = cfg->scl;
 23fea44:	f88d 3006 	strb.w	r3, [sp, #6]
    i2c_cfg.sda    = cfg->sda;
 23fea48:	786b      	ldrb	r3, [r5, #1]
 23fea4a:	f88d 3005 	strb.w	r3, [sp, #5]
    ctx->slave_address = cfg->i2c_address;
 23fea4e:	7a2b      	ldrb	r3, [r5, #8]
 23fea50:	7323      	strb	r3, [r4, #12]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fea52:	f7ff ff5f 	bl	23fe914 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>
 23fea56:	3001      	adds	r0, #1
 23fea58:	d00a      	beq.n	23fea70 <temphum13_init+0x44>
    {
        return TEMPHUM13_INIT_ERROR;
    }

    i2c_master_set_slave_address( &ctx->i2c, ctx->slave_address );
 23fea5a:	7b21      	ldrb	r1, [r4, #12]
 23fea5c:	4620      	mov	r0, r4
 23fea5e:	f7ff ff77 	bl	23fe950 <_Z28i2c_master_set_slave_addressP12i2c_master_th>
    i2c_master_set_speed( &ctx->i2c, cfg->i2c_speed );
 23fea62:	4620      	mov	r0, r4
 23fea64:	6869      	ldr	r1, [r5, #4]
 23fea66:	f7ff ff65 	bl	23fe934 <_Z20i2c_master_set_speedP12i2c_master_tm>

    return TEMPHUM13_OK;
 23fea6a:	2000      	movs	r0, #0
}
 23fea6c:	b005      	add	sp, #20
 23fea6e:	bd30      	pop	{r4, r5, pc}
        return TEMPHUM13_INIT_ERROR;
 23fea70:	20ff      	movs	r0, #255	; 0xff
 23fea72:	e7fb      	b.n	23fea6c <temphum13_init+0x40>

023fea74 <temphum13_soft_reset>:

void temphum13_soft_reset ( temphum13_t *ctx )
{
    uint8_t aux_reg_address;

    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fea74:	23fe      	movs	r3, #254	; 0xfe
{
 23fea76:	b507      	push	{r0, r1, r2, lr}

    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fea78:	2201      	movs	r2, #1
 23fea7a:	f10d 0107 	add.w	r1, sp, #7
    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fea7e:	f88d 3007 	strb.w	r3, [sp, #7]
    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fea82:	f7ff ff6b 	bl	23fe95c <_Z16i2c_master_writeP12i2c_master_tPhj>
}
 23fea86:	b003      	add	sp, #12
 23fea88:	f85d fb04 	ldr.w	pc, [sp], #4

023fea8c <temphum13_default_cfg>:
{
 23fea8c:	b507      	push	{r0, r1, r2, lr}
 23fea8e:	9001      	str	r0, [sp, #4]
    Delay_100ms( );
 23fea90:	f7ff ffc1 	bl	23fea16 <_Z11Delay_100msv>
    Delay_100ms( );
 23fea94:	f7ff ffbf 	bl	23fea16 <_Z11Delay_100msv>
    Delay_100ms( );
 23fea98:	f7ff ffbd 	bl	23fea16 <_Z11Delay_100msv>
    Delay_100ms( );
 23fea9c:	f7ff ffbb 	bl	23fea16 <_Z11Delay_100msv>
    Delay_100ms( );
 23feaa0:	f7ff ffb9 	bl	23fea16 <_Z11Delay_100msv>
    temphum13_soft_reset( ctx );
 23feaa4:	9801      	ldr	r0, [sp, #4]
 23feaa6:	f7ff ffe5 	bl	23fea74 <temphum13_soft_reset>
    Delay_100ms( );
 23feaaa:	f7ff ffb4 	bl	23fea16 <_Z11Delay_100msv>
    Delay_100ms( );
 23feaae:	f7ff ffb2 	bl	23fea16 <_Z11Delay_100msv>
    Delay_100ms( );
 23feab2:	f7ff ffb0 	bl	23fea16 <_Z11Delay_100msv>
    Delay_100ms( );
 23feab6:	f7ff ffae 	bl	23fea16 <_Z11Delay_100msv>
    Delay_100ms( );
 23feaba:	f7ff ffac 	bl	23fea16 <_Z11Delay_100msv>
}
 23feabe:	b003      	add	sp, #12
 23feac0:	f85d fb04 	ldr.w	pc, [sp], #4

023feac4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23feac4:	b509      	push	{r0, r3, lr}
 23feac6:	4804      	ldr	r0, [pc, #16]	; (23fead8 <os_mutex_recursive_create+0x14>)
 23feac8:	6800      	ldr	r0, [r0, #0]
 23feaca:	4b04      	ldr	r3, [pc, #16]	; (23feadc <os_mutex_recursive_create+0x18>)
 23feacc:	4403      	add	r3, r0
 23feace:	681b      	ldr	r3, [r3, #0]
 23fead0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fead2:	9302      	str	r3, [sp, #8]
 23fead4:	bd09      	pop	{r0, r3, pc}
 23fead6:	0000      	.short	0x0000
 23fead8:	1007add8 	.word	0x1007add8
 23feadc:	00000030 	.word	0x00000030

023feae0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23feae0:	b509      	push	{r0, r3, lr}
 23feae2:	4804      	ldr	r0, [pc, #16]	; (23feaf4 <HAL_RNG_GetRandomNumber+0x14>)
 23feae4:	6800      	ldr	r0, [r0, #0]
 23feae6:	4b04      	ldr	r3, [pc, #16]	; (23feaf8 <HAL_RNG_GetRandomNumber+0x18>)
 23feae8:	4403      	add	r3, r0
 23feaea:	681b      	ldr	r3, [r3, #0]
 23feaec:	685b      	ldr	r3, [r3, #4]
 23feaee:	9302      	str	r3, [sp, #8]
 23feaf0:	bd09      	pop	{r0, r3, pc}
 23feaf2:	0000      	.short	0x0000
 23feaf4:	1007add8 	.word	0x1007add8
 23feaf8:	00000000 	.word	0x00000000

023feafc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23feafc:	b509      	push	{r0, r3, lr}
 23feafe:	4804      	ldr	r0, [pc, #16]	; (23feb10 <HAL_Delay_Microseconds+0x14>)
 23feb00:	6800      	ldr	r0, [r0, #0]
 23feb02:	4b04      	ldr	r3, [pc, #16]	; (23feb14 <HAL_Delay_Microseconds+0x18>)
 23feb04:	4403      	add	r3, r0
 23feb06:	681b      	ldr	r3, [r3, #0]
 23feb08:	68db      	ldr	r3, [r3, #12]
 23feb0a:	9302      	str	r3, [sp, #8]
 23feb0c:	bd09      	pop	{r0, r3, pc}
 23feb0e:	0000      	.short	0x0000
 23feb10:	1007add8 	.word	0x1007add8
 23feb14:	00000000 	.word	0x00000000

023feb18 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23feb18:	b509      	push	{r0, r3, lr}
 23feb1a:	4804      	ldr	r0, [pc, #16]	; (23feb2c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23feb1c:	6800      	ldr	r0, [r0, #0]
 23feb1e:	4b04      	ldr	r3, [pc, #16]	; (23feb30 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23feb20:	4403      	add	r3, r0
 23feb22:	681b      	ldr	r3, [r3, #0]
 23feb24:	695b      	ldr	r3, [r3, #20]
 23feb26:	9302      	str	r3, [sp, #8]
 23feb28:	bd09      	pop	{r0, r3, pc}
 23feb2a:	0000      	.short	0x0000
 23feb2c:	1007add8 	.word	0x1007add8
 23feb30:	00000000 	.word	0x00000000

023feb34 <hal_pin_map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
 23feb34:	b509      	push	{r0, r3, lr}
 23feb36:	4804      	ldr	r0, [pc, #16]	; (23feb48 <hal_pin_map+0x14>)
 23feb38:	6800      	ldr	r0, [r0, #0]
 23feb3a:	4b04      	ldr	r3, [pc, #16]	; (23feb4c <hal_pin_map+0x18>)
 23feb3c:	4403      	add	r3, r0
 23feb3e:	681b      	ldr	r3, [r3, #0]
 23feb40:	681b      	ldr	r3, [r3, #0]
 23feb42:	9302      	str	r3, [sp, #8]
 23feb44:	bd09      	pop	{r0, r3, pc}
 23feb46:	0000      	.short	0x0000
 23feb48:	1007add8 	.word	0x1007add8
 23feb4c:	00000014 	.word	0x00000014

023feb50 <hal_gpio_mode>:
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23feb50:	b509      	push	{r0, r3, lr}
 23feb52:	4804      	ldr	r0, [pc, #16]	; (23feb64 <hal_gpio_mode+0x14>)
 23feb54:	6800      	ldr	r0, [r0, #0]
 23feb56:	4b04      	ldr	r3, [pc, #16]	; (23feb68 <hal_gpio_mode+0x18>)
 23feb58:	4403      	add	r3, r0
 23feb5a:	681b      	ldr	r3, [r3, #0]
 23feb5c:	689b      	ldr	r3, [r3, #8]
 23feb5e:	9302      	str	r3, [sp, #8]
 23feb60:	bd09      	pop	{r0, r3, pc}
 23feb62:	0000      	.short	0x0000
 23feb64:	1007add8 	.word	0x1007add8
 23feb68:	00000014 	.word	0x00000014

023feb6c <hal_interrupt_enable_all>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
 23feb6c:	b509      	push	{r0, r3, lr}
 23feb6e:	4804      	ldr	r0, [pc, #16]	; (23feb80 <hal_interrupt_enable_all+0x14>)
 23feb70:	6800      	ldr	r0, [r0, #0]
 23feb72:	4b04      	ldr	r3, [pc, #16]	; (23feb84 <hal_interrupt_enable_all+0x18>)
 23feb74:	4403      	add	r3, r0
 23feb76:	681b      	ldr	r3, [r3, #0]
 23feb78:	6a1b      	ldr	r3, [r3, #32]
 23feb7a:	9302      	str	r3, [sp, #8]
 23feb7c:	bd09      	pop	{r0, r3, pc}
 23feb7e:	0000      	.short	0x0000
 23feb80:	1007add8 	.word	0x1007add8
 23feb84:	00000014 	.word	0x00000014

023feb88 <hal_interrupt_disable_all>:
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))
 23feb88:	b509      	push	{r0, r3, lr}
 23feb8a:	4804      	ldr	r0, [pc, #16]	; (23feb9c <hal_interrupt_disable_all+0x14>)
 23feb8c:	6800      	ldr	r0, [r0, #0]
 23feb8e:	4b04      	ldr	r3, [pc, #16]	; (23feba0 <hal_interrupt_disable_all+0x18>)
 23feb90:	4403      	add	r3, r0
 23feb92:	681b      	ldr	r3, [r3, #0]
 23feb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23feb96:	9302      	str	r3, [sp, #8]
 23feb98:	bd09      	pop	{r0, r3, pc}
 23feb9a:	0000      	.short	0x0000
 23feb9c:	1007add8 	.word	0x1007add8
 23feba0:	00000014 	.word	0x00000014

023feba4 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23feba4:	b509      	push	{r0, r3, lr}
 23feba6:	4804      	ldr	r0, [pc, #16]	; (23febb8 <hal_i2c_set_speed+0x14>)
 23feba8:	6800      	ldr	r0, [r0, #0]
 23febaa:	4b04      	ldr	r3, [pc, #16]	; (23febbc <hal_i2c_set_speed+0x18>)
 23febac:	4403      	add	r3, r0
 23febae:	681b      	ldr	r3, [r3, #0]
 23febb0:	681b      	ldr	r3, [r3, #0]
 23febb2:	9302      	str	r3, [sp, #8]
 23febb4:	bd09      	pop	{r0, r3, pc}
 23febb6:	0000      	.short	0x0000
 23febb8:	1007add8 	.word	0x1007add8
 23febbc:	00000010 	.word	0x00000010

023febc0 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23febc0:	b509      	push	{r0, r3, lr}
 23febc2:	4804      	ldr	r0, [pc, #16]	; (23febd4 <hal_i2c_begin+0x14>)
 23febc4:	6800      	ldr	r0, [r0, #0]
 23febc6:	4b04      	ldr	r3, [pc, #16]	; (23febd8 <hal_i2c_begin+0x18>)
 23febc8:	4403      	add	r3, r0
 23febca:	681b      	ldr	r3, [r3, #0]
 23febcc:	68db      	ldr	r3, [r3, #12]
 23febce:	9302      	str	r3, [sp, #8]
 23febd0:	bd09      	pop	{r0, r3, pc}
 23febd2:	0000      	.short	0x0000
 23febd4:	1007add8 	.word	0x1007add8
 23febd8:	00000010 	.word	0x00000010

023febdc <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23febdc:	b509      	push	{r0, r3, lr}
 23febde:	4804      	ldr	r0, [pc, #16]	; (23febf0 <hal_i2c_begin_transmission+0x14>)
 23febe0:	6800      	ldr	r0, [r0, #0]
 23febe2:	4b04      	ldr	r3, [pc, #16]	; (23febf4 <hal_i2c_begin_transmission+0x18>)
 23febe4:	4403      	add	r3, r0
 23febe6:	681b      	ldr	r3, [r3, #0]
 23febe8:	699b      	ldr	r3, [r3, #24]
 23febea:	9302      	str	r3, [sp, #8]
 23febec:	bd09      	pop	{r0, r3, pc}
 23febee:	0000      	.short	0x0000
 23febf0:	1007add8 	.word	0x1007add8
 23febf4:	00000010 	.word	0x00000010

023febf8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23febf8:	b509      	push	{r0, r3, lr}
 23febfa:	4804      	ldr	r0, [pc, #16]	; (23fec0c <hal_i2c_end_transmission+0x14>)
 23febfc:	6800      	ldr	r0, [r0, #0]
 23febfe:	4b04      	ldr	r3, [pc, #16]	; (23fec10 <hal_i2c_end_transmission+0x18>)
 23fec00:	4403      	add	r3, r0
 23fec02:	681b      	ldr	r3, [r3, #0]
 23fec04:	69db      	ldr	r3, [r3, #28]
 23fec06:	9302      	str	r3, [sp, #8]
 23fec08:	bd09      	pop	{r0, r3, pc}
 23fec0a:	0000      	.short	0x0000
 23fec0c:	1007add8 	.word	0x1007add8
 23fec10:	00000010 	.word	0x00000010

023fec14 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fec14:	b509      	push	{r0, r3, lr}
 23fec16:	4804      	ldr	r0, [pc, #16]	; (23fec28 <hal_i2c_write+0x14>)
 23fec18:	6800      	ldr	r0, [r0, #0]
 23fec1a:	4b04      	ldr	r3, [pc, #16]	; (23fec2c <hal_i2c_write+0x18>)
 23fec1c:	4403      	add	r3, r0
 23fec1e:	681b      	ldr	r3, [r3, #0]
 23fec20:	6a1b      	ldr	r3, [r3, #32]
 23fec22:	9302      	str	r3, [sp, #8]
 23fec24:	bd09      	pop	{r0, r3, pc}
 23fec26:	0000      	.short	0x0000
 23fec28:	1007add8 	.word	0x1007add8
 23fec2c:	00000010 	.word	0x00000010

023fec30 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fec30:	b509      	push	{r0, r3, lr}
 23fec32:	4804      	ldr	r0, [pc, #16]	; (23fec44 <hal_i2c_available+0x14>)
 23fec34:	6800      	ldr	r0, [r0, #0]
 23fec36:	4b04      	ldr	r3, [pc, #16]	; (23fec48 <hal_i2c_available+0x18>)
 23fec38:	4403      	add	r3, r0
 23fec3a:	681b      	ldr	r3, [r3, #0]
 23fec3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fec3e:	9302      	str	r3, [sp, #8]
 23fec40:	bd09      	pop	{r0, r3, pc}
 23fec42:	0000      	.short	0x0000
 23fec44:	1007add8 	.word	0x1007add8
 23fec48:	00000010 	.word	0x00000010

023fec4c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fec4c:	b509      	push	{r0, r3, lr}
 23fec4e:	4804      	ldr	r0, [pc, #16]	; (23fec60 <hal_i2c_read+0x14>)
 23fec50:	6800      	ldr	r0, [r0, #0]
 23fec52:	4b04      	ldr	r3, [pc, #16]	; (23fec64 <hal_i2c_read+0x18>)
 23fec54:	4403      	add	r3, r0
 23fec56:	681b      	ldr	r3, [r3, #0]
 23fec58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fec5a:	9302      	str	r3, [sp, #8]
 23fec5c:	bd09      	pop	{r0, r3, pc}
 23fec5e:	0000      	.short	0x0000
 23fec60:	1007add8 	.word	0x1007add8
 23fec64:	00000010 	.word	0x00000010

023fec68 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fec68:	b509      	push	{r0, r3, lr}
 23fec6a:	4804      	ldr	r0, [pc, #16]	; (23fec7c <hal_i2c_peek+0x14>)
 23fec6c:	6800      	ldr	r0, [r0, #0]
 23fec6e:	4b04      	ldr	r3, [pc, #16]	; (23fec80 <hal_i2c_peek+0x18>)
 23fec70:	4403      	add	r3, r0
 23fec72:	681b      	ldr	r3, [r3, #0]
 23fec74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fec76:	9302      	str	r3, [sp, #8]
 23fec78:	bd09      	pop	{r0, r3, pc}
 23fec7a:	0000      	.short	0x0000
 23fec7c:	1007add8 	.word	0x1007add8
 23fec80:	00000010 	.word	0x00000010

023fec84 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fec84:	b509      	push	{r0, r3, lr}
 23fec86:	4804      	ldr	r0, [pc, #16]	; (23fec98 <hal_i2c_flush+0x14>)
 23fec88:	6800      	ldr	r0, [r0, #0]
 23fec8a:	4b04      	ldr	r3, [pc, #16]	; (23fec9c <hal_i2c_flush+0x18>)
 23fec8c:	4403      	add	r3, r0
 23fec8e:	681b      	ldr	r3, [r3, #0]
 23fec90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fec92:	9302      	str	r3, [sp, #8]
 23fec94:	bd09      	pop	{r0, r3, pc}
 23fec96:	0000      	.short	0x0000
 23fec98:	1007add8 	.word	0x1007add8
 23fec9c:	00000010 	.word	0x00000010

023feca0 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23feca0:	b509      	push	{r0, r3, lr}
 23feca2:	4804      	ldr	r0, [pc, #16]	; (23fecb4 <hal_i2c_is_enabled+0x14>)
 23feca4:	6800      	ldr	r0, [r0, #0]
 23feca6:	4b04      	ldr	r3, [pc, #16]	; (23fecb8 <hal_i2c_is_enabled+0x18>)
 23feca8:	4403      	add	r3, r0
 23fecaa:	681b      	ldr	r3, [r3, #0]
 23fecac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fecae:	9302      	str	r3, [sp, #8]
 23fecb0:	bd09      	pop	{r0, r3, pc}
 23fecb2:	0000      	.short	0x0000
 23fecb4:	1007add8 	.word	0x1007add8
 23fecb8:	00000010 	.word	0x00000010

023fecbc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fecbc:	b509      	push	{r0, r3, lr}
 23fecbe:	4804      	ldr	r0, [pc, #16]	; (23fecd0 <hal_i2c_init+0x14>)
 23fecc0:	6800      	ldr	r0, [r0, #0]
 23fecc2:	4b04      	ldr	r3, [pc, #16]	; (23fecd4 <hal_i2c_init+0x18>)
 23fecc4:	4403      	add	r3, r0
 23fecc6:	681b      	ldr	r3, [r3, #0]
 23fecc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fecca:	9302      	str	r3, [sp, #8]
 23feccc:	bd09      	pop	{r0, r3, pc}
 23fecce:	0000      	.short	0x0000
 23fecd0:	1007add8 	.word	0x1007add8
 23fecd4:	00000010 	.word	0x00000010

023fecd8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fecd8:	b509      	push	{r0, r3, lr}
 23fecda:	4804      	ldr	r0, [pc, #16]	; (23fecec <inet_inet_ntop+0x14>)
 23fecdc:	6800      	ldr	r0, [r0, #0]
 23fecde:	4b04      	ldr	r3, [pc, #16]	; (23fecf0 <inet_inet_ntop+0x18>)
 23fece0:	4403      	add	r3, r0
 23fece2:	681b      	ldr	r3, [r3, #0]
 23fece4:	695b      	ldr	r3, [r3, #20]
 23fece6:	9302      	str	r3, [sp, #8]
 23fece8:	bd09      	pop	{r0, r3, pc}
 23fecea:	0000      	.short	0x0000
 23fecec:	1007add8 	.word	0x1007add8
 23fecf0:	0000004c 	.word	0x0000004c

023fecf4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fecf4:	b509      	push	{r0, r3, lr}
 23fecf6:	4804      	ldr	r0, [pc, #16]	; (23fed08 <netdb_freeaddrinfo+0x14>)
 23fecf8:	6800      	ldr	r0, [r0, #0]
 23fecfa:	4b04      	ldr	r3, [pc, #16]	; (23fed0c <netdb_freeaddrinfo+0x18>)
 23fecfc:	4403      	add	r3, r0
 23fecfe:	681b      	ldr	r3, [r3, #0]
 23fed00:	689b      	ldr	r3, [r3, #8]
 23fed02:	9302      	str	r3, [sp, #8]
 23fed04:	bd09      	pop	{r0, r3, pc}
 23fed06:	0000      	.short	0x0000
 23fed08:	1007add8 	.word	0x1007add8
 23fed0c:	00000050 	.word	0x00000050

023fed10 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fed10:	b509      	push	{r0, r3, lr}
 23fed12:	4804      	ldr	r0, [pc, #16]	; (23fed24 <netdb_getaddrinfo+0x14>)
 23fed14:	6800      	ldr	r0, [r0, #0]
 23fed16:	4b04      	ldr	r3, [pc, #16]	; (23fed28 <netdb_getaddrinfo+0x18>)
 23fed18:	4403      	add	r3, r0
 23fed1a:	681b      	ldr	r3, [r3, #0]
 23fed1c:	68db      	ldr	r3, [r3, #12]
 23fed1e:	9302      	str	r3, [sp, #8]
 23fed20:	bd09      	pop	{r0, r3, pc}
 23fed22:	0000      	.short	0x0000
 23fed24:	1007add8 	.word	0x1007add8
 23fed28:	00000050 	.word	0x00000050

023fed2c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fed2c:	b509      	push	{r0, r3, lr}
 23fed2e:	4804      	ldr	r0, [pc, #16]	; (23fed40 <hal_spi_init+0x14>)
 23fed30:	6800      	ldr	r0, [r0, #0]
 23fed32:	4b04      	ldr	r3, [pc, #16]	; (23fed44 <hal_spi_init+0x18>)
 23fed34:	4403      	add	r3, r0
 23fed36:	681b      	ldr	r3, [r3, #0]
 23fed38:	69db      	ldr	r3, [r3, #28]
 23fed3a:	9302      	str	r3, [sp, #8]
 23fed3c:	bd09      	pop	{r0, r3, pc}
 23fed3e:	0000      	.short	0x0000
 23fed40:	1007add8 	.word	0x1007add8
 23fed44:	00000018 	.word	0x00000018

023fed48 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fed48:	b509      	push	{r0, r3, lr}
 23fed4a:	4804      	ldr	r0, [pc, #16]	; (23fed5c <hal_spi_is_enabled+0x14>)
 23fed4c:	6800      	ldr	r0, [r0, #0]
 23fed4e:	4b04      	ldr	r3, [pc, #16]	; (23fed60 <hal_spi_is_enabled+0x18>)
 23fed50:	4403      	add	r3, r0
 23fed52:	681b      	ldr	r3, [r3, #0]
 23fed54:	6a1b      	ldr	r3, [r3, #32]
 23fed56:	9302      	str	r3, [sp, #8]
 23fed58:	bd09      	pop	{r0, r3, pc}
 23fed5a:	0000      	.short	0x0000
 23fed5c:	1007add8 	.word	0x1007add8
 23fed60:	00000018 	.word	0x00000018

023fed64 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fed64:	b509      	push	{r0, r3, lr}
 23fed66:	4804      	ldr	r0, [pc, #16]	; (23fed78 <hal_usart_write+0x14>)
 23fed68:	6800      	ldr	r0, [r0, #0]
 23fed6a:	4b04      	ldr	r3, [pc, #16]	; (23fed7c <hal_usart_write+0x18>)
 23fed6c:	4403      	add	r3, r0
 23fed6e:	681b      	ldr	r3, [r3, #0]
 23fed70:	68db      	ldr	r3, [r3, #12]
 23fed72:	9302      	str	r3, [sp, #8]
 23fed74:	bd09      	pop	{r0, r3, pc}
 23fed76:	0000      	.short	0x0000
 23fed78:	1007add8 	.word	0x1007add8
 23fed7c:	00000024 	.word	0x00000024

023fed80 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fed80:	b509      	push	{r0, r3, lr}
 23fed82:	4804      	ldr	r0, [pc, #16]	; (23fed94 <hal_usart_available+0x14>)
 23fed84:	6800      	ldr	r0, [r0, #0]
 23fed86:	4b04      	ldr	r3, [pc, #16]	; (23fed98 <hal_usart_available+0x18>)
 23fed88:	4403      	add	r3, r0
 23fed8a:	681b      	ldr	r3, [r3, #0]
 23fed8c:	691b      	ldr	r3, [r3, #16]
 23fed8e:	9302      	str	r3, [sp, #8]
 23fed90:	bd09      	pop	{r0, r3, pc}
 23fed92:	0000      	.short	0x0000
 23fed94:	1007add8 	.word	0x1007add8
 23fed98:	00000024 	.word	0x00000024

023fed9c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fed9c:	b509      	push	{r0, r3, lr}
 23fed9e:	4804      	ldr	r0, [pc, #16]	; (23fedb0 <hal_usart_read+0x14>)
 23feda0:	6800      	ldr	r0, [r0, #0]
 23feda2:	4b04      	ldr	r3, [pc, #16]	; (23fedb4 <hal_usart_read+0x18>)
 23feda4:	4403      	add	r3, r0
 23feda6:	681b      	ldr	r3, [r3, #0]
 23feda8:	695b      	ldr	r3, [r3, #20]
 23fedaa:	9302      	str	r3, [sp, #8]
 23fedac:	bd09      	pop	{r0, r3, pc}
 23fedae:	0000      	.short	0x0000
 23fedb0:	1007add8 	.word	0x1007add8
 23fedb4:	00000024 	.word	0x00000024

023fedb8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fedb8:	b509      	push	{r0, r3, lr}
 23fedba:	4804      	ldr	r0, [pc, #16]	; (23fedcc <hal_usart_peek+0x14>)
 23fedbc:	6800      	ldr	r0, [r0, #0]
 23fedbe:	4b04      	ldr	r3, [pc, #16]	; (23fedd0 <hal_usart_peek+0x18>)
 23fedc0:	4403      	add	r3, r0
 23fedc2:	681b      	ldr	r3, [r3, #0]
 23fedc4:	699b      	ldr	r3, [r3, #24]
 23fedc6:	9302      	str	r3, [sp, #8]
 23fedc8:	bd09      	pop	{r0, r3, pc}
 23fedca:	0000      	.short	0x0000
 23fedcc:	1007add8 	.word	0x1007add8
 23fedd0:	00000024 	.word	0x00000024

023fedd4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fedd4:	b509      	push	{r0, r3, lr}
 23fedd6:	4804      	ldr	r0, [pc, #16]	; (23fede8 <hal_usart_flush+0x14>)
 23fedd8:	6800      	ldr	r0, [r0, #0]
 23fedda:	4b04      	ldr	r3, [pc, #16]	; (23fedec <hal_usart_flush+0x18>)
 23feddc:	4403      	add	r3, r0
 23fedde:	681b      	ldr	r3, [r3, #0]
 23fede0:	69db      	ldr	r3, [r3, #28]
 23fede2:	9302      	str	r3, [sp, #8]
 23fede4:	bd09      	pop	{r0, r3, pc}
 23fede6:	0000      	.short	0x0000
 23fede8:	1007add8 	.word	0x1007add8
 23fedec:	00000024 	.word	0x00000024

023fedf0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fedf0:	b509      	push	{r0, r3, lr}
 23fedf2:	4804      	ldr	r0, [pc, #16]	; (23fee04 <hal_usart_is_enabled+0x14>)
 23fedf4:	6800      	ldr	r0, [r0, #0]
 23fedf6:	4b04      	ldr	r3, [pc, #16]	; (23fee08 <hal_usart_is_enabled+0x18>)
 23fedf8:	4403      	add	r3, r0
 23fedfa:	681b      	ldr	r3, [r3, #0]
 23fedfc:	6a1b      	ldr	r3, [r3, #32]
 23fedfe:	9302      	str	r3, [sp, #8]
 23fee00:	bd09      	pop	{r0, r3, pc}
 23fee02:	0000      	.short	0x0000
 23fee04:	1007add8 	.word	0x1007add8
 23fee08:	00000024 	.word	0x00000024

023fee0c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fee0c:	b509      	push	{r0, r3, lr}
 23fee0e:	4804      	ldr	r0, [pc, #16]	; (23fee20 <hal_usart_available_data_for_write+0x14>)
 23fee10:	6800      	ldr	r0, [r0, #0]
 23fee12:	4b04      	ldr	r3, [pc, #16]	; (23fee24 <hal_usart_available_data_for_write+0x18>)
 23fee14:	4403      	add	r3, r0
 23fee16:	681b      	ldr	r3, [r3, #0]
 23fee18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fee1a:	9302      	str	r3, [sp, #8]
 23fee1c:	bd09      	pop	{r0, r3, pc}
 23fee1e:	0000      	.short	0x0000
 23fee20:	1007add8 	.word	0x1007add8
 23fee24:	00000024 	.word	0x00000024

023fee28 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fee28:	b509      	push	{r0, r3, lr}
 23fee2a:	4804      	ldr	r0, [pc, #16]	; (23fee3c <hal_usart_init_ex+0x14>)
 23fee2c:	6800      	ldr	r0, [r0, #0]
 23fee2e:	4b04      	ldr	r3, [pc, #16]	; (23fee40 <hal_usart_init_ex+0x18>)
 23fee30:	4403      	add	r3, r0
 23fee32:	681b      	ldr	r3, [r3, #0]
 23fee34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fee36:	9302      	str	r3, [sp, #8]
 23fee38:	bd09      	pop	{r0, r3, pc}
 23fee3a:	0000      	.short	0x0000
 23fee3c:	1007add8 	.word	0x1007add8
 23fee40:	00000024 	.word	0x00000024

023fee44 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fee44:	b509      	push	{r0, r3, lr}
 23fee46:	4804      	ldr	r0, [pc, #16]	; (23fee58 <HAL_USB_USART_Init+0x14>)
 23fee48:	6800      	ldr	r0, [r0, #0]
 23fee4a:	4b04      	ldr	r3, [pc, #16]	; (23fee5c <HAL_USB_USART_Init+0x18>)
 23fee4c:	4403      	add	r3, r0
 23fee4e:	681b      	ldr	r3, [r3, #0]
 23fee50:	681b      	ldr	r3, [r3, #0]
 23fee52:	9302      	str	r3, [sp, #8]
 23fee54:	bd09      	pop	{r0, r3, pc}
 23fee56:	0000      	.short	0x0000
 23fee58:	1007add8 	.word	0x1007add8
 23fee5c:	00000034 	.word	0x00000034

023fee60 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fee60:	b509      	push	{r0, r3, lr}
 23fee62:	4804      	ldr	r0, [pc, #16]	; (23fee74 <HAL_USB_USART_Begin+0x14>)
 23fee64:	6800      	ldr	r0, [r0, #0]
 23fee66:	4b04      	ldr	r3, [pc, #16]	; (23fee78 <HAL_USB_USART_Begin+0x18>)
 23fee68:	4403      	add	r3, r0
 23fee6a:	681b      	ldr	r3, [r3, #0]
 23fee6c:	685b      	ldr	r3, [r3, #4]
 23fee6e:	9302      	str	r3, [sp, #8]
 23fee70:	bd09      	pop	{r0, r3, pc}
 23fee72:	0000      	.short	0x0000
 23fee74:	1007add8 	.word	0x1007add8
 23fee78:	00000034 	.word	0x00000034

023fee7c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fee7c:	b509      	push	{r0, r3, lr}
 23fee7e:	4804      	ldr	r0, [pc, #16]	; (23fee90 <HAL_USB_USART_Available_Data+0x14>)
 23fee80:	6800      	ldr	r0, [r0, #0]
 23fee82:	4b04      	ldr	r3, [pc, #16]	; (23fee94 <HAL_USB_USART_Available_Data+0x18>)
 23fee84:	4403      	add	r3, r0
 23fee86:	681b      	ldr	r3, [r3, #0]
 23fee88:	691b      	ldr	r3, [r3, #16]
 23fee8a:	9302      	str	r3, [sp, #8]
 23fee8c:	bd09      	pop	{r0, r3, pc}
 23fee8e:	0000      	.short	0x0000
 23fee90:	1007add8 	.word	0x1007add8
 23fee94:	00000034 	.word	0x00000034

023fee98 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fee98:	b509      	push	{r0, r3, lr}
 23fee9a:	4804      	ldr	r0, [pc, #16]	; (23feeac <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fee9c:	6800      	ldr	r0, [r0, #0]
 23fee9e:	4b04      	ldr	r3, [pc, #16]	; (23feeb0 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23feea0:	4403      	add	r3, r0
 23feea2:	681b      	ldr	r3, [r3, #0]
 23feea4:	695b      	ldr	r3, [r3, #20]
 23feea6:	9302      	str	r3, [sp, #8]
 23feea8:	bd09      	pop	{r0, r3, pc}
 23feeaa:	0000      	.short	0x0000
 23feeac:	1007add8 	.word	0x1007add8
 23feeb0:	00000034 	.word	0x00000034

023feeb4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23feeb4:	b509      	push	{r0, r3, lr}
 23feeb6:	4804      	ldr	r0, [pc, #16]	; (23feec8 <HAL_USB_USART_Receive_Data+0x14>)
 23feeb8:	6800      	ldr	r0, [r0, #0]
 23feeba:	4b04      	ldr	r3, [pc, #16]	; (23feecc <HAL_USB_USART_Receive_Data+0x18>)
 23feebc:	4403      	add	r3, r0
 23feebe:	681b      	ldr	r3, [r3, #0]
 23feec0:	699b      	ldr	r3, [r3, #24]
 23feec2:	9302      	str	r3, [sp, #8]
 23feec4:	bd09      	pop	{r0, r3, pc}
 23feec6:	0000      	.short	0x0000
 23feec8:	1007add8 	.word	0x1007add8
 23feecc:	00000034 	.word	0x00000034

023feed0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23feed0:	b509      	push	{r0, r3, lr}
 23feed2:	4804      	ldr	r0, [pc, #16]	; (23feee4 <HAL_USB_USART_Send_Data+0x14>)
 23feed4:	6800      	ldr	r0, [r0, #0]
 23feed6:	4b04      	ldr	r3, [pc, #16]	; (23feee8 <HAL_USB_USART_Send_Data+0x18>)
 23feed8:	4403      	add	r3, r0
 23feeda:	681b      	ldr	r3, [r3, #0]
 23feedc:	69db      	ldr	r3, [r3, #28]
 23feede:	9302      	str	r3, [sp, #8]
 23feee0:	bd09      	pop	{r0, r3, pc}
 23feee2:	0000      	.short	0x0000
 23feee4:	1007add8 	.word	0x1007add8
 23feee8:	00000034 	.word	0x00000034

023feeec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23feeec:	b509      	push	{r0, r3, lr}
 23feeee:	4804      	ldr	r0, [pc, #16]	; (23fef00 <HAL_USB_USART_Flush_Data+0x14>)
 23feef0:	6800      	ldr	r0, [r0, #0]
 23feef2:	4b04      	ldr	r3, [pc, #16]	; (23fef04 <HAL_USB_USART_Flush_Data+0x18>)
 23feef4:	4403      	add	r3, r0
 23feef6:	681b      	ldr	r3, [r3, #0]
 23feef8:	6a1b      	ldr	r3, [r3, #32]
 23feefa:	9302      	str	r3, [sp, #8]
 23feefc:	bd09      	pop	{r0, r3, pc}
 23feefe:	0000      	.short	0x0000
 23fef00:	1007add8 	.word	0x1007add8
 23fef04:	00000034 	.word	0x00000034

023fef08 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fef08:	b509      	push	{r0, r3, lr}
 23fef0a:	4804      	ldr	r0, [pc, #16]	; (23fef1c <set_system_mode+0x14>)
 23fef0c:	6800      	ldr	r0, [r0, #0]
 23fef0e:	4b04      	ldr	r3, [pc, #16]	; (23fef20 <set_system_mode+0x18>)
 23fef10:	4403      	add	r3, r0
 23fef12:	681b      	ldr	r3, [r3, #0]
 23fef14:	685b      	ldr	r3, [r3, #4]
 23fef16:	9302      	str	r3, [sp, #8]
 23fef18:	bd09      	pop	{r0, r3, pc}
 23fef1a:	0000      	.short	0x0000
 23fef1c:	1007add8 	.word	0x1007add8
 23fef20:	00000008 	.word	0x00000008

023fef24 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fef24:	b509      	push	{r0, r3, lr}
 23fef26:	4804      	ldr	r0, [pc, #16]	; (23fef38 <system_delay_ms+0x14>)
 23fef28:	6800      	ldr	r0, [r0, #0]
 23fef2a:	4b04      	ldr	r3, [pc, #16]	; (23fef3c <system_delay_ms+0x18>)
 23fef2c:	4403      	add	r3, r0
 23fef2e:	681b      	ldr	r3, [r3, #0]
 23fef30:	695b      	ldr	r3, [r3, #20]
 23fef32:	9302      	str	r3, [sp, #8]
 23fef34:	bd09      	pop	{r0, r3, pc}
 23fef36:	0000      	.short	0x0000
 23fef38:	1007add8 	.word	0x1007add8
 23fef3c:	00000008 	.word	0x00000008

023fef40 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fef40:	b509      	push	{r0, r3, lr}
 23fef42:	4804      	ldr	r0, [pc, #16]	; (23fef54 <system_thread_set_state+0x14>)
 23fef44:	6800      	ldr	r0, [r0, #0]
 23fef46:	4b04      	ldr	r3, [pc, #16]	; (23fef58 <system_thread_set_state+0x18>)
 23fef48:	4403      	add	r3, r0
 23fef4a:	681b      	ldr	r3, [r3, #0]
 23fef4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fef4e:	9302      	str	r3, [sp, #8]
 23fef50:	bd09      	pop	{r0, r3, pc}
 23fef52:	0000      	.short	0x0000
 23fef54:	1007add8 	.word	0x1007add8
 23fef58:	00000008 	.word	0x00000008

023fef5c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fef5c:	b509      	push	{r0, r3, lr}
 23fef5e:	4804      	ldr	r0, [pc, #16]	; (23fef70 <system_ctrl_set_app_request_handler+0x14>)
 23fef60:	6800      	ldr	r0, [r0, #0]
 23fef62:	4b04      	ldr	r3, [pc, #16]	; (23fef74 <system_ctrl_set_app_request_handler+0x18>)
 23fef64:	4403      	add	r3, r0
 23fef66:	681b      	ldr	r3, [r3, #0]
 23fef68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fef6c:	9302      	str	r3, [sp, #8]
 23fef6e:	bd09      	pop	{r0, r3, pc}
 23fef70:	1007add8 	.word	0x1007add8
 23fef74:	00000008 	.word	0x00000008

023fef78 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fef78:	b509      	push	{r0, r3, lr}
 23fef7a:	4804      	ldr	r0, [pc, #16]	; (23fef8c <system_ctrl_set_result+0x14>)
 23fef7c:	6800      	ldr	r0, [r0, #0]
 23fef7e:	4b04      	ldr	r3, [pc, #16]	; (23fef90 <system_ctrl_set_result+0x18>)
 23fef80:	4403      	add	r3, r0
 23fef82:	681b      	ldr	r3, [r3, #0]
 23fef84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fef88:	9302      	str	r3, [sp, #8]
 23fef8a:	bd09      	pop	{r0, r3, pc}
 23fef8c:	1007add8 	.word	0x1007add8
 23fef90:	00000008 	.word	0x00000008

023fef94 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fef94:	b509      	push	{r0, r3, lr}
 23fef96:	4804      	ldr	r0, [pc, #16]	; (23fefa8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fef98:	6800      	ldr	r0, [r0, #0]
 23fef9a:	4b04      	ldr	r3, [pc, #16]	; (23fefac <spark_set_random_seed_from_cloud_handler+0x18>)
 23fef9c:	4403      	add	r3, r0
 23fef9e:	681b      	ldr	r3, [r3, #0]
 23fefa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fefa2:	9302      	str	r3, [sp, #8]
 23fefa4:	bd09      	pop	{r0, r3, pc}
 23fefa6:	0000      	.short	0x0000
 23fefa8:	1007add8 	.word	0x1007add8
 23fefac:	0000002c 	.word	0x0000002c

023fefb0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23fefb0:	b509      	push	{r0, r3, lr}
 23fefb2:	4804      	ldr	r0, [pc, #16]	; (23fefc4 <spark_cloud_disconnect+0x14>)
 23fefb4:	6800      	ldr	r0, [r0, #0]
 23fefb6:	4b04      	ldr	r3, [pc, #16]	; (23fefc8 <spark_cloud_disconnect+0x18>)
 23fefb8:	4403      	add	r3, r0
 23fefba:	681b      	ldr	r3, [r3, #0]
 23fefbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fefbe:	9302      	str	r3, [sp, #8]
 23fefc0:	bd09      	pop	{r0, r3, pc}
 23fefc2:	0000      	.short	0x0000
 23fefc4:	1007add8 	.word	0x1007add8
 23fefc8:	0000002c 	.word	0x0000002c

023fefcc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fefcc:	b509      	push	{r0, r3, lr}
 23fefce:	4804      	ldr	r0, [pc, #16]	; (23fefe0 <network_connect+0x14>)
 23fefd0:	6800      	ldr	r0, [r0, #0]
 23fefd2:	4b04      	ldr	r3, [pc, #16]	; (23fefe4 <network_connect+0x18>)
 23fefd4:	4403      	add	r3, r0
 23fefd6:	681b      	ldr	r3, [r3, #0]
 23fefd8:	685b      	ldr	r3, [r3, #4]
 23fefda:	9302      	str	r3, [sp, #8]
 23fefdc:	bd09      	pop	{r0, r3, pc}
 23fefde:	0000      	.short	0x0000
 23fefe0:	1007add8 	.word	0x1007add8
 23fefe4:	00000028 	.word	0x00000028

023fefe8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fefe8:	b509      	push	{r0, r3, lr}
 23fefea:	4804      	ldr	r0, [pc, #16]	; (23feffc <network_connecting+0x14>)
 23fefec:	6800      	ldr	r0, [r0, #0]
 23fefee:	4b04      	ldr	r3, [pc, #16]	; (23ff000 <network_connecting+0x18>)
 23feff0:	4403      	add	r3, r0
 23feff2:	681b      	ldr	r3, [r3, #0]
 23feff4:	689b      	ldr	r3, [r3, #8]
 23feff6:	9302      	str	r3, [sp, #8]
 23feff8:	bd09      	pop	{r0, r3, pc}
 23feffa:	0000      	.short	0x0000
 23feffc:	1007add8 	.word	0x1007add8
 23ff000:	00000028 	.word	0x00000028

023ff004 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23ff004:	b509      	push	{r0, r3, lr}
 23ff006:	4804      	ldr	r0, [pc, #16]	; (23ff018 <network_disconnect+0x14>)
 23ff008:	6800      	ldr	r0, [r0, #0]
 23ff00a:	4b04      	ldr	r3, [pc, #16]	; (23ff01c <network_disconnect+0x18>)
 23ff00c:	4403      	add	r3, r0
 23ff00e:	681b      	ldr	r3, [r3, #0]
 23ff010:	68db      	ldr	r3, [r3, #12]
 23ff012:	9302      	str	r3, [sp, #8]
 23ff014:	bd09      	pop	{r0, r3, pc}
 23ff016:	0000      	.short	0x0000
 23ff018:	1007add8 	.word	0x1007add8
 23ff01c:	00000028 	.word	0x00000028

023ff020 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23ff020:	b509      	push	{r0, r3, lr}
 23ff022:	4804      	ldr	r0, [pc, #16]	; (23ff034 <network_ready+0x14>)
 23ff024:	6800      	ldr	r0, [r0, #0]
 23ff026:	4b04      	ldr	r3, [pc, #16]	; (23ff038 <network_ready+0x18>)
 23ff028:	4403      	add	r3, r0
 23ff02a:	681b      	ldr	r3, [r3, #0]
 23ff02c:	691b      	ldr	r3, [r3, #16]
 23ff02e:	9302      	str	r3, [sp, #8]
 23ff030:	bd09      	pop	{r0, r3, pc}
 23ff032:	0000      	.short	0x0000
 23ff034:	1007add8 	.word	0x1007add8
 23ff038:	00000028 	.word	0x00000028

023ff03c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23ff03c:	b509      	push	{r0, r3, lr}
 23ff03e:	4804      	ldr	r0, [pc, #16]	; (23ff050 <network_on+0x14>)
 23ff040:	6800      	ldr	r0, [r0, #0]
 23ff042:	4b04      	ldr	r3, [pc, #16]	; (23ff054 <network_on+0x18>)
 23ff044:	4403      	add	r3, r0
 23ff046:	681b      	ldr	r3, [r3, #0]
 23ff048:	695b      	ldr	r3, [r3, #20]
 23ff04a:	9302      	str	r3, [sp, #8]
 23ff04c:	bd09      	pop	{r0, r3, pc}
 23ff04e:	0000      	.short	0x0000
 23ff050:	1007add8 	.word	0x1007add8
 23ff054:	00000028 	.word	0x00000028

023ff058 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23ff058:	b509      	push	{r0, r3, lr}
 23ff05a:	4804      	ldr	r0, [pc, #16]	; (23ff06c <network_off+0x14>)
 23ff05c:	6800      	ldr	r0, [r0, #0]
 23ff05e:	4b04      	ldr	r3, [pc, #16]	; (23ff070 <network_off+0x18>)
 23ff060:	4403      	add	r3, r0
 23ff062:	681b      	ldr	r3, [r3, #0]
 23ff064:	699b      	ldr	r3, [r3, #24]
 23ff066:	9302      	str	r3, [sp, #8]
 23ff068:	bd09      	pop	{r0, r3, pc}
 23ff06a:	0000      	.short	0x0000
 23ff06c:	1007add8 	.word	0x1007add8
 23ff070:	00000028 	.word	0x00000028

023ff074 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23ff074:	b509      	push	{r0, r3, lr}
 23ff076:	4804      	ldr	r0, [pc, #16]	; (23ff088 <network_listen+0x14>)
 23ff078:	6800      	ldr	r0, [r0, #0]
 23ff07a:	4b04      	ldr	r3, [pc, #16]	; (23ff08c <network_listen+0x18>)
 23ff07c:	4403      	add	r3, r0
 23ff07e:	681b      	ldr	r3, [r3, #0]
 23ff080:	69db      	ldr	r3, [r3, #28]
 23ff082:	9302      	str	r3, [sp, #8]
 23ff084:	bd09      	pop	{r0, r3, pc}
 23ff086:	0000      	.short	0x0000
 23ff088:	1007add8 	.word	0x1007add8
 23ff08c:	00000028 	.word	0x00000028

023ff090 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23ff090:	b509      	push	{r0, r3, lr}
 23ff092:	4804      	ldr	r0, [pc, #16]	; (23ff0a4 <network_listening+0x14>)
 23ff094:	6800      	ldr	r0, [r0, #0]
 23ff096:	4b04      	ldr	r3, [pc, #16]	; (23ff0a8 <network_listening+0x18>)
 23ff098:	4403      	add	r3, r0
 23ff09a:	681b      	ldr	r3, [r3, #0]
 23ff09c:	6a1b      	ldr	r3, [r3, #32]
 23ff09e:	9302      	str	r3, [sp, #8]
 23ff0a0:	bd09      	pop	{r0, r3, pc}
 23ff0a2:	0000      	.short	0x0000
 23ff0a4:	1007add8 	.word	0x1007add8
 23ff0a8:	00000028 	.word	0x00000028

023ff0ac <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23ff0ac:	b509      	push	{r0, r3, lr}
 23ff0ae:	4804      	ldr	r0, [pc, #16]	; (23ff0c0 <network_set_listen_timeout+0x14>)
 23ff0b0:	6800      	ldr	r0, [r0, #0]
 23ff0b2:	4b04      	ldr	r3, [pc, #16]	; (23ff0c4 <network_set_listen_timeout+0x18>)
 23ff0b4:	4403      	add	r3, r0
 23ff0b6:	681b      	ldr	r3, [r3, #0]
 23ff0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23ff0ba:	9302      	str	r3, [sp, #8]
 23ff0bc:	bd09      	pop	{r0, r3, pc}
 23ff0be:	0000      	.short	0x0000
 23ff0c0:	1007add8 	.word	0x1007add8
 23ff0c4:	00000028 	.word	0x00000028

023ff0c8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23ff0c8:	b509      	push	{r0, r3, lr}
 23ff0ca:	4804      	ldr	r0, [pc, #16]	; (23ff0dc <network_get_listen_timeout+0x14>)
 23ff0cc:	6800      	ldr	r0, [r0, #0]
 23ff0ce:	4b04      	ldr	r3, [pc, #16]	; (23ff0e0 <network_get_listen_timeout+0x18>)
 23ff0d0:	4403      	add	r3, r0
 23ff0d2:	681b      	ldr	r3, [r3, #0]
 23ff0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23ff0d6:	9302      	str	r3, [sp, #8]
 23ff0d8:	bd09      	pop	{r0, r3, pc}
 23ff0da:	0000      	.short	0x0000
 23ff0dc:	1007add8 	.word	0x1007add8
 23ff0e0:	00000028 	.word	0x00000028

023ff0e4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23ff0e4:	b509      	push	{r0, r3, lr}
 23ff0e6:	4804      	ldr	r0, [pc, #16]	; (23ff0f8 <network_is_on+0x14>)
 23ff0e8:	6800      	ldr	r0, [r0, #0]
 23ff0ea:	4b04      	ldr	r3, [pc, #16]	; (23ff0fc <network_is_on+0x18>)
 23ff0ec:	4403      	add	r3, r0
 23ff0ee:	681b      	ldr	r3, [r3, #0]
 23ff0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23ff0f2:	9302      	str	r3, [sp, #8]
 23ff0f4:	bd09      	pop	{r0, r3, pc}
 23ff0f6:	0000      	.short	0x0000
 23ff0f8:	1007add8 	.word	0x1007add8
 23ff0fc:	00000028 	.word	0x00000028

023ff100 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23ff100:	b509      	push	{r0, r3, lr}
 23ff102:	4804      	ldr	r0, [pc, #16]	; (23ff114 <network_is_off+0x14>)
 23ff104:	6800      	ldr	r0, [r0, #0]
 23ff106:	4b04      	ldr	r3, [pc, #16]	; (23ff118 <network_is_off+0x18>)
 23ff108:	4403      	add	r3, r0
 23ff10a:	681b      	ldr	r3, [r3, #0]
 23ff10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23ff10e:	9302      	str	r3, [sp, #8]
 23ff110:	bd09      	pop	{r0, r3, pc}
 23ff112:	0000      	.short	0x0000
 23ff114:	1007add8 	.word	0x1007add8
 23ff118:	00000028 	.word	0x00000028

023ff11c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23ff11c:	b509      	push	{r0, r3, lr}
 23ff11e:	4804      	ldr	r0, [pc, #16]	; (23ff130 <malloc+0x14>)
 23ff120:	6800      	ldr	r0, [r0, #0]
 23ff122:	4b04      	ldr	r3, [pc, #16]	; (23ff134 <malloc+0x18>)
 23ff124:	4403      	add	r3, r0
 23ff126:	681b      	ldr	r3, [r3, #0]
 23ff128:	681b      	ldr	r3, [r3, #0]
 23ff12a:	9302      	str	r3, [sp, #8]
 23ff12c:	bd09      	pop	{r0, r3, pc}
 23ff12e:	0000      	.short	0x0000
 23ff130:	1007add8 	.word	0x1007add8
 23ff134:	00000004 	.word	0x00000004

023ff138 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23ff138:	b509      	push	{r0, r3, lr}
 23ff13a:	4804      	ldr	r0, [pc, #16]	; (23ff14c <free+0x14>)
 23ff13c:	6800      	ldr	r0, [r0, #0]
 23ff13e:	4b04      	ldr	r3, [pc, #16]	; (23ff150 <free+0x18>)
 23ff140:	4403      	add	r3, r0
 23ff142:	681b      	ldr	r3, [r3, #0]
 23ff144:	685b      	ldr	r3, [r3, #4]
 23ff146:	9302      	str	r3, [sp, #8]
 23ff148:	bd09      	pop	{r0, r3, pc}
 23ff14a:	0000      	.short	0x0000
 23ff14c:	1007add8 	.word	0x1007add8
 23ff150:	00000004 	.word	0x00000004

023ff154 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23ff154:	b509      	push	{r0, r3, lr}
 23ff156:	4804      	ldr	r0, [pc, #16]	; (23ff168 <__assert_func+0x14>)
 23ff158:	6800      	ldr	r0, [r0, #0]
 23ff15a:	4b04      	ldr	r3, [pc, #16]	; (23ff16c <__assert_func+0x18>)
 23ff15c:	4403      	add	r3, r0
 23ff15e:	681b      	ldr	r3, [r3, #0]
 23ff160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23ff162:	9302      	str	r3, [sp, #8]
 23ff164:	bd09      	pop	{r0, r3, pc}
 23ff166:	0000      	.short	0x0000
 23ff168:	1007add8 	.word	0x1007add8
 23ff16c:	00000004 	.word	0x00000004

023ff170 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23ff170:	b509      	push	{r0, r3, lr}
 23ff172:	4804      	ldr	r0, [pc, #16]	; (23ff184 <newlib_impure_ptr_callback+0x14>)
 23ff174:	6800      	ldr	r0, [r0, #0]
 23ff176:	4b04      	ldr	r3, [pc, #16]	; (23ff188 <newlib_impure_ptr_callback+0x18>)
 23ff178:	4403      	add	r3, r0
 23ff17a:	681b      	ldr	r3, [r3, #0]
 23ff17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23ff17e:	9302      	str	r3, [sp, #8]
 23ff180:	bd09      	pop	{r0, r3, pc}
 23ff182:	0000      	.short	0x0000
 23ff184:	1007add8 	.word	0x1007add8
 23ff188:	00000004 	.word	0x00000004

023ff18c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23ff18c:	2100      	movs	r1, #0
 23ff18e:	f7ff bec9 	b.w	23fef24 <system_delay_ms>
	...

023ff194 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23ff194:	2300      	movs	r3, #0
 23ff196:	4802      	ldr	r0, [pc, #8]	; (23ff1a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23ff198:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23ff19a:	f7ff bc93 	b.w	23feac4 <os_mutex_recursive_create>
 23ff19e:	bf00      	nop
 23ff1a0:	1007ae8c 	.word	0x1007ae8c

023ff1a4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23ff1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 23ff1a6:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 23ff1a8:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 23ff1aa:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 23ff1ae:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 23ff1b0:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 23ff1b4:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 23ff1b8:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 23ff1ba:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 23ff1be:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 23ff1c2:	6843      	ldr	r3, [r0, #4]
 23ff1c4:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 23ff1c6:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23ff1c8:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 23ff1ca:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23ff1ce:	f7ff feef 	bl	23fefb0 <spark_cloud_disconnect>
}
 23ff1d2:	b005      	add	sp, #20
 23ff1d4:	f85d fb04 	ldr.w	pc, [sp], #4

023ff1d8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff1d8:	2200      	movs	r2, #0
 23ff1da:	6840      	ldr	r0, [r0, #4]
 23ff1dc:	4611      	mov	r1, r2
 23ff1de:	f7ff bf57 	b.w	23ff090 <network_listening>

023ff1e2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff1e2:	2200      	movs	r2, #0
 23ff1e4:	6840      	ldr	r0, [r0, #4]
 23ff1e6:	4611      	mov	r1, r2
 23ff1e8:	f7ff bf6e 	b.w	23ff0c8 <network_get_listen_timeout>

023ff1ec <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff1ec:	2200      	movs	r2, #0
 23ff1ee:	6840      	ldr	r0, [r0, #4]
 23ff1f0:	f7ff bf5c 	b.w	23ff0ac <network_set_listen_timeout>

023ff1f4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff1f4:	2200      	movs	r2, #0
 23ff1f6:	6840      	ldr	r0, [r0, #4]
 23ff1f8:	f081 0101 	eor.w	r1, r1, #1
 23ff1fc:	f7ff bf3a 	b.w	23ff074 <network_listen>

023ff200 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff200:	2300      	movs	r3, #0
 23ff202:	6840      	ldr	r0, [r0, #4]
 23ff204:	461a      	mov	r2, r3
 23ff206:	4619      	mov	r1, r3
 23ff208:	f7ff bf26 	b.w	23ff058 <network_off>

023ff20c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff20c:	2300      	movs	r3, #0
 23ff20e:	6840      	ldr	r0, [r0, #4]
 23ff210:	461a      	mov	r2, r3
 23ff212:	4619      	mov	r1, r3
 23ff214:	f7ff bf12 	b.w	23ff03c <network_on>

023ff218 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23ff218:	2200      	movs	r2, #0
 23ff21a:	6840      	ldr	r0, [r0, #4]
 23ff21c:	4611      	mov	r1, r2
 23ff21e:	f7ff beff 	b.w	23ff020 <network_ready>

023ff222 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff222:	2200      	movs	r2, #0
 23ff224:	6840      	ldr	r0, [r0, #4]
 23ff226:	4611      	mov	r1, r2
 23ff228:	f7ff bede 	b.w	23fefe8 <network_connecting>

023ff22c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff22c:	2200      	movs	r2, #0
 23ff22e:	2102      	movs	r1, #2
 23ff230:	6840      	ldr	r0, [r0, #4]
 23ff232:	f7ff bee7 	b.w	23ff004 <network_disconnect>

023ff236 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff236:	2300      	movs	r3, #0
 23ff238:	6840      	ldr	r0, [r0, #4]
 23ff23a:	461a      	mov	r2, r3
 23ff23c:	f7ff bec6 	b.w	23fefcc <network_connect>

023ff240 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23ff240:	2203      	movs	r2, #3
 23ff242:	4b02      	ldr	r3, [pc, #8]	; (23ff24c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23ff244:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23ff246:	4a02      	ldr	r2, [pc, #8]	; (23ff250 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23ff248:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23ff24a:	4770      	bx	lr
 23ff24c:	1007ae90 	.word	0x1007ae90
 23ff250:	023ffdfc 	.word	0x023ffdfc

023ff254 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23ff254:	4770      	bx	lr

023ff256 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23ff256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff258:	4606      	mov	r6, r0
 23ff25a:	4615      	mov	r5, r2
 23ff25c:	460c      	mov	r4, r1
 23ff25e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23ff260:	42bc      	cmp	r4, r7
 23ff262:	d006      	beq.n	23ff272 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23ff264:	6833      	ldr	r3, [r6, #0]
 23ff266:	4630      	mov	r0, r6
 23ff268:	689b      	ldr	r3, [r3, #8]
 23ff26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23ff26e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23ff270:	e7f6      	b.n	23ff260 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23ff272:	4628      	mov	r0, r5
 23ff274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff276 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23ff276:	2200      	movs	r2, #0
 23ff278:	7c00      	ldrb	r0, [r0, #16]
 23ff27a:	f7ff bccb 	b.w	23fec14 <hal_i2c_write>

023ff27e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23ff27e:	2100      	movs	r1, #0
 23ff280:	7c00      	ldrb	r0, [r0, #16]
 23ff282:	f7ff bcd5 	b.w	23fec30 <hal_i2c_available>

023ff286 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23ff286:	2100      	movs	r1, #0
 23ff288:	7c00      	ldrb	r0, [r0, #16]
 23ff28a:	f7ff bcdf 	b.w	23fec4c <hal_i2c_read>

023ff28e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23ff28e:	2100      	movs	r1, #0
 23ff290:	7c00      	ldrb	r0, [r0, #16]
 23ff292:	f7ff bce9 	b.w	23fec68 <hal_i2c_peek>

023ff296 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23ff296:	2100      	movs	r1, #0
 23ff298:	7c00      	ldrb	r0, [r0, #16]
 23ff29a:	f7ff bcf3 	b.w	23fec84 <hal_i2c_flush>

023ff29e <_ZN7TwoWireD0Ev>:
 23ff29e:	b510      	push	{r4, lr}
 23ff2a0:	4604      	mov	r4, r0
 23ff2a2:	2114      	movs	r1, #20
 23ff2a4:	f7ff f8cf 	bl	23fe446 <_ZdlPvj>
 23ff2a8:	4620      	mov	r0, r4
 23ff2aa:	bd10      	pop	{r4, pc}

023ff2ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23ff2ac:	b538      	push	{r3, r4, r5, lr}
 23ff2ae:	4604      	mov	r4, r0
 23ff2b0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23ff2b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff2b6:	2200      	movs	r2, #0
 23ff2b8:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff2bc:	4b09      	ldr	r3, [pc, #36]	; (23ff2e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23ff2be:	4608      	mov	r0, r1
  _i2c = i2c;
 23ff2c0:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23ff2c2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23ff2c4:	4629      	mov	r1, r5
 23ff2c6:	f7ff fcf9 	bl	23fecbc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23ff2ca:	30bf      	adds	r0, #191	; 0xbf
 23ff2cc:	d108      	bne.n	23ff2e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23ff2ce:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23ff2d0:	07db      	lsls	r3, r3, #31
 23ff2d2:	d505      	bpl.n	23ff2e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23ff2d4:	6868      	ldr	r0, [r5, #4]
 23ff2d6:	f7ff ff2f 	bl	23ff138 <free>
    free(conf.tx_buffer);
 23ff2da:	68e8      	ldr	r0, [r5, #12]
 23ff2dc:	f7ff ff2c 	bl	23ff138 <free>
}
 23ff2e0:	4620      	mov	r0, r4
 23ff2e2:	bd38      	pop	{r3, r4, r5, pc}
 23ff2e4:	023ffe38 	.word	0x023ffe38

023ff2e8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23ff2e8:	2200      	movs	r2, #0
 23ff2ea:	7c00      	ldrb	r0, [r0, #16]
 23ff2ec:	f7ff bc5a 	b.w	23feba4 <hal_i2c_set_speed>

023ff2f0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23ff2f0:	2300      	movs	r3, #0
 23ff2f2:	7c00      	ldrb	r0, [r0, #16]
 23ff2f4:	461a      	mov	r2, r3
 23ff2f6:	4619      	mov	r1, r3
 23ff2f8:	f7ff bc62 	b.w	23febc0 <hal_i2c_begin>

023ff2fc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23ff2fc:	2200      	movs	r2, #0
 23ff2fe:	7c00      	ldrb	r0, [r0, #16]
 23ff300:	f7ff bc6c 	b.w	23febdc <hal_i2c_begin_transmission>

023ff304 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23ff304:	2200      	movs	r2, #0
 23ff306:	7c00      	ldrb	r0, [r0, #16]
 23ff308:	f7ff bc76 	b.w	23febf8 <hal_i2c_end_transmission>

023ff30c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  hal_interrupt_disable_all();
 23ff30c:	f7ff bc3c 	b.w	23feb88 <hal_interrupt_disable_all>

023ff310 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  hal_interrupt_enable_all();
 23ff310:	f7ff bc2c 	b.w	23feb6c <hal_interrupt_enable_all>

023ff314 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23ff314:	4770      	bx	lr

023ff316 <_ZN9IPAddressD0Ev>:
 23ff316:	b510      	push	{r4, lr}
 23ff318:	4604      	mov	r4, r0
 23ff31a:	2118      	movs	r1, #24
 23ff31c:	f7ff f893 	bl	23fe446 <_ZdlPvj>
 23ff320:	4620      	mov	r0, r4
 23ff322:	bd10      	pop	{r4, pc}

023ff324 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23ff324:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23ff326:	7d03      	ldrb	r3, [r0, #20]
{
 23ff328:	460e      	mov	r6, r1
	if (address.v==6) {
 23ff32a:	2b06      	cmp	r3, #6
 23ff32c:	f04f 0400 	mov.w	r4, #0
{
 23ff330:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff332:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23ff336:	d012      	beq.n	23ff35e <_ZNK9IPAddress7printToER5Print+0x3a>
 23ff338:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23ff33c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23ff340:	220a      	movs	r2, #10
 23ff342:	4630      	mov	r0, r6
 23ff344:	f000 f943 	bl	23ff5ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23ff348:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23ff34a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23ff34c:	d019      	beq.n	23ff382 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23ff34e:	2c00      	cmp	r4, #0
 23ff350:	d0f4      	beq.n	23ff33c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23ff352:	212e      	movs	r1, #46	; 0x2e
 23ff354:	4630      	mov	r0, r6
 23ff356:	f000 f937 	bl	23ff5c8 <_ZN5Print5printEc>
 23ff35a:	4404      	add	r4, r0
 23ff35c:	e7ee      	b.n	23ff33c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff35e:	232f      	movs	r3, #47	; 0x2f
 23ff360:	466a      	mov	r2, sp
 23ff362:	4639      	mov	r1, r7
 23ff364:	200a      	movs	r0, #10
		buf[0] = 0;
 23ff366:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff36a:	f7ff fcb5 	bl	23fecd8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23ff36e:	4668      	mov	r0, sp
 23ff370:	f7ff f842 	bl	23fe3f8 <strlen>
 23ff374:	6833      	ldr	r3, [r6, #0]
 23ff376:	4602      	mov	r2, r0
 23ff378:	4669      	mov	r1, sp
 23ff37a:	4630      	mov	r0, r6
 23ff37c:	68db      	ldr	r3, [r3, #12]
 23ff37e:	4798      	blx	r3
 23ff380:	4604      	mov	r4, r0
    }
    return n;
}
 23ff382:	4620      	mov	r0, r4
 23ff384:	b00d      	add	sp, #52	; 0x34
 23ff386:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff388 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23ff388:	b510      	push	{r4, lr}
 23ff38a:	4604      	mov	r4, r0
 23ff38c:	4b04      	ldr	r3, [pc, #16]	; (23ff3a0 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23ff38e:	2211      	movs	r2, #17
 23ff390:	2100      	movs	r1, #0
 23ff392:	f840 3b04 	str.w	r3, [r0], #4
 23ff396:	f000 fc86 	bl	23ffca6 <memset>
}
 23ff39a:	4620      	mov	r0, r4
 23ff39c:	bd10      	pop	{r4, pc}
 23ff39e:	bf00      	nop
 23ff3a0:	023ffe60 	.word	0x023ffe60

023ff3a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23ff3a4:	4603      	mov	r3, r0
 23ff3a6:	4a07      	ldr	r2, [pc, #28]	; (23ff3c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23ff3a8:	b510      	push	{r4, lr}
 23ff3aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23ff3ae:	f101 0210 	add.w	r2, r1, #16
 23ff3b2:	f851 4b04 	ldr.w	r4, [r1], #4
 23ff3b6:	4291      	cmp	r1, r2
 23ff3b8:	f843 4b04 	str.w	r4, [r3], #4
 23ff3bc:	d1f9      	bne.n	23ff3b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23ff3be:	780a      	ldrb	r2, [r1, #0]
 23ff3c0:	701a      	strb	r2, [r3, #0]
}
 23ff3c2:	bd10      	pop	{r4, pc}
 23ff3c4:	023ffe60 	.word	0x023ffe60

023ff3c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23ff3c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23ff3ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23ff3ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23ff3d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23ff3d6:	2304      	movs	r3, #4
 23ff3d8:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23ff3dc:	6041      	str	r1, [r0, #4]
 23ff3de:	7503      	strb	r3, [r0, #20]
}
 23ff3e0:	bd10      	pop	{r4, pc}
	...

023ff3e4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23ff3e4:	b507      	push	{r0, r1, r2, lr}
 23ff3e6:	4b06      	ldr	r3, [pc, #24]	; (23ff400 <_ZN9IPAddressC1EPKh+0x1c>)
 23ff3e8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23ff3ea:	78cb      	ldrb	r3, [r1, #3]
 23ff3ec:	9300      	str	r3, [sp, #0]
 23ff3ee:	788b      	ldrb	r3, [r1, #2]
 23ff3f0:	784a      	ldrb	r2, [r1, #1]
 23ff3f2:	7809      	ldrb	r1, [r1, #0]
 23ff3f4:	f7ff ffe8 	bl	23ff3c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23ff3f8:	b003      	add	sp, #12
 23ff3fa:	f85d fb04 	ldr.w	pc, [sp], #4
 23ff3fe:	bf00      	nop
 23ff400:	023ffe60 	.word	0x023ffe60

023ff404 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23ff404:	4b01      	ldr	r3, [pc, #4]	; (23ff40c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23ff406:	4a02      	ldr	r2, [pc, #8]	; (23ff410 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23ff408:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23ff40a:	4770      	bx	lr
 23ff40c:	1007ae98 	.word	0x1007ae98
 23ff410:	023ffe6c 	.word	0x023ffe6c

023ff414 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff414:	2300      	movs	r3, #0
 23ff416:	6840      	ldr	r0, [r0, #4]
 23ff418:	461a      	mov	r2, r3
 23ff41a:	f7ff bdd7 	b.w	23fefcc <network_connect>

023ff41e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff41e:	2200      	movs	r2, #0
 23ff420:	2102      	movs	r1, #2
 23ff422:	6840      	ldr	r0, [r0, #4]
 23ff424:	f7ff bdee 	b.w	23ff004 <network_disconnect>

023ff428 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff428:	2200      	movs	r2, #0
 23ff42a:	6840      	ldr	r0, [r0, #4]
 23ff42c:	4611      	mov	r1, r2
 23ff42e:	f7ff bddb 	b.w	23fefe8 <network_connecting>

023ff432 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff432:	2200      	movs	r2, #0
 23ff434:	6840      	ldr	r0, [r0, #4]
 23ff436:	4611      	mov	r1, r2
 23ff438:	f7ff bdf2 	b.w	23ff020 <network_ready>

023ff43c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff43c:	2300      	movs	r3, #0
 23ff43e:	6840      	ldr	r0, [r0, #4]
 23ff440:	461a      	mov	r2, r3
 23ff442:	4619      	mov	r1, r3
 23ff444:	f7ff bdfa 	b.w	23ff03c <network_on>

023ff448 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff448:	2300      	movs	r3, #0
 23ff44a:	6840      	ldr	r0, [r0, #4]
 23ff44c:	461a      	mov	r2, r3
 23ff44e:	4619      	mov	r1, r3
 23ff450:	f7ff be02 	b.w	23ff058 <network_off>

023ff454 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff454:	2100      	movs	r1, #0
 23ff456:	6840      	ldr	r0, [r0, #4]
 23ff458:	f7ff be44 	b.w	23ff0e4 <network_is_on>

023ff45c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff45c:	2100      	movs	r1, #0
 23ff45e:	6840      	ldr	r0, [r0, #4]
 23ff460:	f7ff be4e 	b.w	23ff100 <network_is_off>

023ff464 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff464:	2200      	movs	r2, #0
 23ff466:	6840      	ldr	r0, [r0, #4]
 23ff468:	f081 0101 	eor.w	r1, r1, #1
 23ff46c:	f7ff be02 	b.w	23ff074 <network_listen>

023ff470 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff470:	2200      	movs	r2, #0
 23ff472:	6840      	ldr	r0, [r0, #4]
 23ff474:	f7ff be1a 	b.w	23ff0ac <network_set_listen_timeout>

023ff478 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff478:	2200      	movs	r2, #0
 23ff47a:	6840      	ldr	r0, [r0, #4]
 23ff47c:	4611      	mov	r1, r2
 23ff47e:	f7ff be23 	b.w	23ff0c8 <network_get_listen_timeout>

023ff482 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff482:	2200      	movs	r2, #0
 23ff484:	6840      	ldr	r0, [r0, #4]
 23ff486:	4611      	mov	r1, r2
 23ff488:	f7ff be02 	b.w	23ff090 <network_listening>

023ff48c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff490:	b095      	sub	sp, #84	; 0x54
 23ff492:	4614      	mov	r4, r2
 23ff494:	460d      	mov	r5, r1
 23ff496:	4607      	mov	r7, r0
    IPAddress addr;
 23ff498:	f7ff ff76 	bl	23ff388 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff49c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff49e:	221c      	movs	r2, #28
 23ff4a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff4a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff4a4:	f000 fbff 	bl	23ffca6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff4a8:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff4aa:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff4ac:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff4ae:	2100      	movs	r1, #0
 23ff4b0:	466b      	mov	r3, sp
 23ff4b2:	aa0c      	add	r2, sp, #48	; 0x30
 23ff4b4:	f7ff fc2c 	bl	23fed10 <netdb_getaddrinfo>
    if (!r) {
 23ff4b8:	4604      	mov	r4, r0
 23ff4ba:	2800      	cmp	r0, #0
 23ff4bc:	d14b      	bne.n	23ff556 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff4be:	4602      	mov	r2, r0
 23ff4c0:	2101      	movs	r1, #1
 23ff4c2:	6868      	ldr	r0, [r5, #4]
 23ff4c4:	f7ff fdac 	bl	23ff020 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff4c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff4ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff4cc:	4622      	mov	r2, r4
 23ff4ce:	6868      	ldr	r0, [r5, #4]
 23ff4d0:	f7ff fda6 	bl	23ff020 <network_ready>
        bool ok = false;
 23ff4d4:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff4d6:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff4d8:	9e00      	ldr	r6, [sp, #0]
 23ff4da:	2e00      	cmp	r6, #0
 23ff4dc:	d03b      	beq.n	23ff556 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff4de:	2900      	cmp	r1, #0
 23ff4e0:	d139      	bne.n	23ff556 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff4e2:	6873      	ldr	r3, [r6, #4]
 23ff4e4:	2b02      	cmp	r3, #2
 23ff4e6:	d003      	beq.n	23ff4f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff4e8:	2b0a      	cmp	r3, #10
 23ff4ea:	d011      	beq.n	23ff510 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff4ec:	69f6      	ldr	r6, [r6, #28]
 23ff4ee:	e7f4      	b.n	23ff4da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff4f0:	f1b8 0f00 	cmp.w	r8, #0
 23ff4f4:	d0fa      	beq.n	23ff4ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff4f6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff4f8:	a806      	add	r0, sp, #24
 23ff4fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff4fc:	1d3c      	adds	r4, r7, #4
 23ff4fe:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff500:	f7ff ff70 	bl	23ff3e4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff508:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff50a:	4641      	mov	r1, r8
 23ff50c:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff50e:	e7ed      	b.n	23ff4ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff510:	f1b9 0f00 	cmp.w	r9, #0
 23ff514:	d0ea      	beq.n	23ff4ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff516:	2210      	movs	r2, #16
 23ff518:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff51a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff51c:	f000 fbc3 	bl	23ffca6 <memset>
                    a.v = 6;
 23ff520:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff522:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff524:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff528:	f104 0308 	add.w	r3, r4, #8
 23ff52c:	3418      	adds	r4, #24
 23ff52e:	462a      	mov	r2, r5
 23ff530:	6818      	ldr	r0, [r3, #0]
 23ff532:	6859      	ldr	r1, [r3, #4]
 23ff534:	3308      	adds	r3, #8
 23ff536:	c203      	stmia	r2!, {r0, r1}
 23ff538:	42a3      	cmp	r3, r4
 23ff53a:	4615      	mov	r5, r2
 23ff53c:	d1f7      	bne.n	23ff52e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff53e:	a901      	add	r1, sp, #4
 23ff540:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff542:	1d3c      	adds	r4, r7, #4
 23ff544:	ad07      	add	r5, sp, #28
 23ff546:	f7ff ff2d 	bl	23ff3a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff54a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff54c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff54e:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff550:	4649      	mov	r1, r9
 23ff552:	7023      	strb	r3, [r4, #0]
                    break;
 23ff554:	e7ca      	b.n	23ff4ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff556:	9800      	ldr	r0, [sp, #0]
 23ff558:	f7ff fbcc 	bl	23fecf4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff55c:	4638      	mov	r0, r7
 23ff55e:	b015      	add	sp, #84	; 0x54
 23ff560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff564 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff564:	4b02      	ldr	r3, [pc, #8]	; (23ff570 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff566:	4a03      	ldr	r2, [pc, #12]	; (23ff574 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff568:	601a      	str	r2, [r3, #0]
 23ff56a:	2200      	movs	r2, #0
 23ff56c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff56e:	4770      	bx	lr
 23ff570:	1007ae9c 	.word	0x1007ae9c
 23ff574:	023ffe78 	.word	0x023ffe78

023ff578 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff57a:	4606      	mov	r6, r0
 23ff57c:	460d      	mov	r5, r1
  size_t n = 0;
 23ff57e:	2400      	movs	r4, #0
 23ff580:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff582:	42bd      	cmp	r5, r7
 23ff584:	d00c      	beq.n	23ff5a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff586:	6833      	ldr	r3, [r6, #0]
 23ff588:	4630      	mov	r0, r6
 23ff58a:	689b      	ldr	r3, [r3, #8]
 23ff58c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff590:	4798      	blx	r3
     if (chunk>=0)
 23ff592:	1e03      	subs	r3, r0, #0
 23ff594:	db01      	blt.n	23ff59a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff596:	441c      	add	r4, r3
  while (size--) {
 23ff598:	e7f3      	b.n	23ff582 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff59a:	2c00      	cmp	r4, #0
 23ff59c:	bf08      	it	eq
 23ff59e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff5a0:	4620      	mov	r0, r4
 23ff5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff5a4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff5a4:	b513      	push	{r0, r1, r4, lr}
 23ff5a6:	4604      	mov	r4, r0
    }
 23ff5a8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff5aa:	b159      	cbz	r1, 23ff5c4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff5ac:	9101      	str	r1, [sp, #4]
 23ff5ae:	f7fe ff23 	bl	23fe3f8 <strlen>
 23ff5b2:	4602      	mov	r2, r0
 23ff5b4:	4620      	mov	r0, r4
 23ff5b6:	6823      	ldr	r3, [r4, #0]
 23ff5b8:	9901      	ldr	r1, [sp, #4]
 23ff5ba:	68db      	ldr	r3, [r3, #12]
    }
 23ff5bc:	b002      	add	sp, #8
 23ff5be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff5c2:	4718      	bx	r3
    }
 23ff5c4:	b002      	add	sp, #8
 23ff5c6:	bd10      	pop	{r4, pc}

023ff5c8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23ff5c8:	6803      	ldr	r3, [r0, #0]
 23ff5ca:	689b      	ldr	r3, [r3, #8]
 23ff5cc:	4718      	bx	r3

023ff5ce <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff5ce:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff5d0:	2a01      	cmp	r2, #1
 23ff5d2:	bf98      	it	ls
 23ff5d4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff5d6:	b530      	push	{r4, r5, lr}
 23ff5d8:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff5da:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff5de:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff5e0:	460d      	mov	r5, r1
 23ff5e2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff5e6:	fb01 5312 	mls	r3, r1, r2, r5
 23ff5ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff5ee:	2b09      	cmp	r3, #9
 23ff5f0:	bf94      	ite	ls
 23ff5f2:	3330      	addls	r3, #48	; 0x30
 23ff5f4:	3337      	addhi	r3, #55	; 0x37
 23ff5f6:	b2db      	uxtb	r3, r3
  } while(n);
 23ff5f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff5fa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff5fe:	d9ef      	bls.n	23ff5e0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff600:	4621      	mov	r1, r4
 23ff602:	f7ff ffcf 	bl	23ff5a4 <_ZN5Print5writeEPKc>
}
 23ff606:	b00b      	add	sp, #44	; 0x2c
 23ff608:	bd30      	pop	{r4, r5, pc}
	...

023ff60c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23ff60c:	2200      	movs	r2, #0
 23ff60e:	4b01      	ldr	r3, [pc, #4]	; (23ff614 <_GLOBAL__sub_I_RGB+0x8>)
 23ff610:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff612:	4770      	bx	lr
 23ff614:	1007aea4 	.word	0x1007aea4

023ff618 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff618:	b510      	push	{r4, lr}
 23ff61a:	4604      	mov	r4, r0
 23ff61c:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff61e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff620:	f7ff fb84 	bl	23fed2c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff624:	2300      	movs	r3, #0
}
 23ff626:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff628:	6063      	str	r3, [r4, #4]
}
 23ff62a:	bd10      	pop	{r4, pc}

023ff62c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff62c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff62e:	2000      	movs	r0, #0
 23ff630:	4b04      	ldr	r3, [pc, #16]	; (23ff644 <_GLOBAL__sub_I_System+0x18>)
 23ff632:	601a      	str	r2, [r3, #0]
 23ff634:	4b04      	ldr	r3, [pc, #16]	; (23ff648 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff636:	4a05      	ldr	r2, [pc, #20]	; (23ff64c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff638:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff63c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff63e:	f7ff bc63 	b.w	23fef08 <set_system_mode>
 23ff642:	bf00      	nop
 23ff644:	1007aec0 	.word	0x1007aec0
 23ff648:	1007aeb4 	.word	0x1007aeb4
 23ff64c:	ffff0000 	.word	0xffff0000

023ff650 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff650:	4b02      	ldr	r3, [pc, #8]	; (23ff65c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff652:	681a      	ldr	r2, [r3, #0]
 23ff654:	4b02      	ldr	r3, [pc, #8]	; (23ff660 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff656:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff658:	4770      	bx	lr
 23ff65a:	bf00      	nop
 23ff65c:	1007addc 	.word	0x1007addc
 23ff660:	1007aec4 	.word	0x1007aec4

023ff664 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff664:	4770      	bx	lr

023ff666 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff666:	7441      	strb	r1, [r0, #17]
}
 23ff668:	4770      	bx	lr

023ff66a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff66a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff66c:	7c00      	ldrb	r0, [r0, #16]
 23ff66e:	f7ff fbcd 	bl	23fee0c <hal_usart_available_data_for_write>
}
 23ff672:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff676:	bd08      	pop	{r3, pc}

023ff678 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff678:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff67a:	7c00      	ldrb	r0, [r0, #16]
 23ff67c:	f7ff fb80 	bl	23fed80 <hal_usart_available>
}
 23ff680:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff684:	bd08      	pop	{r3, pc}

023ff686 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff686:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff688:	7c00      	ldrb	r0, [r0, #16]
 23ff68a:	f7ff fb95 	bl	23fedb8 <hal_usart_peek>
}
 23ff68e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff692:	bd08      	pop	{r3, pc}

023ff694 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff694:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff696:	7c00      	ldrb	r0, [r0, #16]
 23ff698:	f7ff fb80 	bl	23fed9c <hal_usart_read>
}
 23ff69c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff6a0:	bd08      	pop	{r3, pc}

023ff6a2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff6a2:	7c00      	ldrb	r0, [r0, #16]
 23ff6a4:	f7ff bb96 	b.w	23fedd4 <hal_usart_flush>

023ff6a8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff6a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff6aa:	7c45      	ldrb	r5, [r0, #17]
{
 23ff6ac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff6ae:	b12d      	cbz	r5, 23ff6bc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff6b0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff6b2:	b003      	add	sp, #12
 23ff6b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff6b8:	f7ff bb54 	b.w	23fed64 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff6bc:	7c00      	ldrb	r0, [r0, #16]
 23ff6be:	9101      	str	r1, [sp, #4]
 23ff6c0:	f7ff fba4 	bl	23fee0c <hal_usart_available_data_for_write>
 23ff6c4:	2800      	cmp	r0, #0
 23ff6c6:	9901      	ldr	r1, [sp, #4]
 23ff6c8:	dcf2      	bgt.n	23ff6b0 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff6ca:	4628      	mov	r0, r5
 23ff6cc:	b003      	add	sp, #12
 23ff6ce:	bd30      	pop	{r4, r5, pc}

023ff6d0 <_ZN11USARTSerialD0Ev>:
 23ff6d0:	b510      	push	{r4, lr}
 23ff6d2:	4604      	mov	r4, r0
 23ff6d4:	2114      	movs	r1, #20
 23ff6d6:	f7fe feb6 	bl	23fe446 <_ZdlPvj>
 23ff6da:	4620      	mov	r0, r4
 23ff6dc:	bd10      	pop	{r4, pc}
	...

023ff6e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff6e0:	b510      	push	{r4, lr}
 23ff6e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff6e6:	4604      	mov	r4, r0
 23ff6e8:	4608      	mov	r0, r1
 23ff6ea:	4611      	mov	r1, r2
 23ff6ec:	2200      	movs	r2, #0
 23ff6ee:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff6f2:	4b04      	ldr	r3, [pc, #16]	; (23ff704 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff6f4:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff6f6:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff6f8:	2301      	movs	r3, #1
 23ff6fa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff6fc:	f7ff fb94 	bl	23fee28 <hal_usart_init_ex>
}
 23ff700:	4620      	mov	r0, r4
 23ff702:	bd10      	pop	{r4, pc}
 23ff704:	023ffed0 	.word	0x023ffed0

023ff708 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff708:	7c00      	ldrb	r0, [r0, #16]
 23ff70a:	f7ff bb71 	b.w	23fedf0 <hal_usart_is_enabled>

023ff70e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff70e:	7441      	strb	r1, [r0, #17]
}
 23ff710:	4770      	bx	lr

023ff712 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff712:	4770      	bx	lr

023ff714 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff714:	4770      	bx	lr

023ff716 <_ZN9USBSerial4readEv>:
{
 23ff716:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff718:	2100      	movs	r1, #0
 23ff71a:	7c00      	ldrb	r0, [r0, #16]
 23ff71c:	f7ff fbca 	bl	23feeb4 <HAL_USB_USART_Receive_Data>
}
 23ff720:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff724:	bd08      	pop	{r3, pc}

023ff726 <_ZN9USBSerial4peekEv>:
{
 23ff726:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff728:	2101      	movs	r1, #1
 23ff72a:	7c00      	ldrb	r0, [r0, #16]
 23ff72c:	f7ff fbc2 	bl	23feeb4 <HAL_USB_USART_Receive_Data>
}
 23ff730:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff734:	bd08      	pop	{r3, pc}

023ff736 <_ZN9USBSerial17availableForWriteEv>:
{
 23ff736:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff738:	7c00      	ldrb	r0, [r0, #16]
 23ff73a:	f7ff fbad 	bl	23fee98 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff73e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff742:	bd08      	pop	{r3, pc}

023ff744 <_ZN9USBSerial9availableEv>:
{
 23ff744:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff746:	7c00      	ldrb	r0, [r0, #16]
 23ff748:	f7ff fb98 	bl	23fee7c <HAL_USB_USART_Available_Data>
}
 23ff74c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff750:	bd08      	pop	{r3, pc}

023ff752 <_ZN9USBSerial5writeEh>:
{
 23ff752:	b513      	push	{r0, r1, r4, lr}
 23ff754:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff756:	7c00      	ldrb	r0, [r0, #16]
{
 23ff758:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff75a:	f7ff fb9d 	bl	23fee98 <HAL_USB_USART_Available_Data_For_Write>
 23ff75e:	2800      	cmp	r0, #0
 23ff760:	9901      	ldr	r1, [sp, #4]
 23ff762:	dc01      	bgt.n	23ff768 <_ZN9USBSerial5writeEh+0x16>
 23ff764:	7c60      	ldrb	r0, [r4, #17]
 23ff766:	b120      	cbz	r0, 23ff772 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff768:	7c20      	ldrb	r0, [r4, #16]
 23ff76a:	f7ff fbb1 	bl	23feed0 <HAL_USB_USART_Send_Data>
 23ff76e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff772:	b002      	add	sp, #8
 23ff774:	bd10      	pop	{r4, pc}

023ff776 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff776:	7c00      	ldrb	r0, [r0, #16]
 23ff778:	f7ff bbb8 	b.w	23feeec <HAL_USB_USART_Flush_Data>

023ff77c <_ZN9USBSerialD0Ev>:
 23ff77c:	b510      	push	{r4, lr}
 23ff77e:	4604      	mov	r4, r0
 23ff780:	2114      	movs	r1, #20
 23ff782:	f7fe fe60 	bl	23fe446 <_ZdlPvj>
 23ff786:	4620      	mov	r0, r4
 23ff788:	bd10      	pop	{r4, pc}
	...

023ff78c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff78c:	b510      	push	{r4, lr}
 23ff78e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff792:	4604      	mov	r4, r0
 23ff794:	4608      	mov	r0, r1
 23ff796:	2100      	movs	r1, #0
 23ff798:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff79c:	4b04      	ldr	r3, [pc, #16]	; (23ff7b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff79e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff7a0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff7a2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff7a4:	4611      	mov	r1, r2
  _blocking = true;
 23ff7a6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff7a8:	f7ff fb4c 	bl	23fee44 <HAL_USB_USART_Init>
}
 23ff7ac:	4620      	mov	r0, r4
 23ff7ae:	bd10      	pop	{r4, pc}
 23ff7b0:	023fff00 	.word	0x023fff00

023ff7b4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff7b4:	2200      	movs	r2, #0
 23ff7b6:	7c00      	ldrb	r0, [r0, #16]
 23ff7b8:	f7ff bb52 	b.w	23fee60 <HAL_USB_USART_Begin>

023ff7bc <_Z19acquireSerialBufferv>:
{
 23ff7bc:	b510      	push	{r4, lr}
 23ff7be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff7c0:	2214      	movs	r2, #20
 23ff7c2:	2100      	movs	r1, #0
 23ff7c4:	f000 fa6f 	bl	23ffca6 <memset>
}
 23ff7c8:	4620      	mov	r0, r4
 23ff7ca:	bd10      	pop	{r4, pc}

023ff7cc <_Z16_fetch_usbserialv>:
{
 23ff7cc:	b510      	push	{r4, lr}
 23ff7ce:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff7d0:	a803      	add	r0, sp, #12
 23ff7d2:	f7ff fff3 	bl	23ff7bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff7d6:	4c0c      	ldr	r4, [pc, #48]	; (23ff808 <_Z16_fetch_usbserialv+0x3c>)
 23ff7d8:	e8d4 1f8f 	ldab	r1, [r4]
 23ff7dc:	f011 0101 	ands.w	r1, r1, #1
 23ff7e0:	d10f      	bne.n	23ff802 <_Z16_fetch_usbserialv+0x36>
 23ff7e2:	4620      	mov	r0, r4
 23ff7e4:	9101      	str	r1, [sp, #4]
 23ff7e6:	f7fe fe30 	bl	23fe44a <__cxa_guard_acquire>
 23ff7ea:	9901      	ldr	r1, [sp, #4]
 23ff7ec:	b148      	cbz	r0, 23ff802 <_Z16_fetch_usbserialv+0x36>
 23ff7ee:	aa03      	add	r2, sp, #12
 23ff7f0:	4806      	ldr	r0, [pc, #24]	; (23ff80c <_Z16_fetch_usbserialv+0x40>)
 23ff7f2:	f7ff ffcb 	bl	23ff78c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff7f6:	4620      	mov	r0, r4
 23ff7f8:	f7fe fe2c 	bl	23fe454 <__cxa_guard_release>
 23ff7fc:	4804      	ldr	r0, [pc, #16]	; (23ff810 <_Z16_fetch_usbserialv+0x44>)
 23ff7fe:	f000 fa3f 	bl	23ffc80 <atexit>
	return _usbserial;
}
 23ff802:	4802      	ldr	r0, [pc, #8]	; (23ff80c <_Z16_fetch_usbserialv+0x40>)
 23ff804:	b008      	add	sp, #32
 23ff806:	bd10      	pop	{r4, pc}
 23ff808:	1007aec8 	.word	0x1007aec8
 23ff80c:	1007aecc 	.word	0x1007aecc
 23ff810:	023ff713 	.word	0x023ff713

023ff814 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff814:	2200      	movs	r2, #0
 23ff816:	6840      	ldr	r0, [r0, #4]
 23ff818:	4611      	mov	r1, r2
 23ff81a:	f7ff bc01 	b.w	23ff020 <network_ready>

023ff81e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff81e:	2200      	movs	r2, #0
 23ff820:	6840      	ldr	r0, [r0, #4]
 23ff822:	4611      	mov	r1, r2
 23ff824:	f7ff bc34 	b.w	23ff090 <network_listening>

023ff828 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff828:	2200      	movs	r2, #0
 23ff82a:	6840      	ldr	r0, [r0, #4]
 23ff82c:	4611      	mov	r1, r2
 23ff82e:	f7ff bc4b 	b.w	23ff0c8 <network_get_listen_timeout>

023ff832 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff832:	2200      	movs	r2, #0
 23ff834:	6840      	ldr	r0, [r0, #4]
 23ff836:	f7ff bc39 	b.w	23ff0ac <network_set_listen_timeout>

023ff83a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff83a:	2200      	movs	r2, #0
 23ff83c:	6840      	ldr	r0, [r0, #4]
 23ff83e:	f081 0101 	eor.w	r1, r1, #1
 23ff842:	f7ff bc17 	b.w	23ff074 <network_listen>

023ff846 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff846:	2300      	movs	r3, #0
 23ff848:	6840      	ldr	r0, [r0, #4]
 23ff84a:	461a      	mov	r2, r3
 23ff84c:	4619      	mov	r1, r3
 23ff84e:	f7ff bc03 	b.w	23ff058 <network_off>

023ff852 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff852:	2300      	movs	r3, #0
 23ff854:	6840      	ldr	r0, [r0, #4]
 23ff856:	461a      	mov	r2, r3
 23ff858:	4619      	mov	r1, r3
 23ff85a:	f7ff bbef 	b.w	23ff03c <network_on>

023ff85e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff85e:	2200      	movs	r2, #0
 23ff860:	6840      	ldr	r0, [r0, #4]
 23ff862:	4611      	mov	r1, r2
 23ff864:	f7ff bbc0 	b.w	23fefe8 <network_connecting>

023ff868 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff868:	2200      	movs	r2, #0
 23ff86a:	2102      	movs	r1, #2
 23ff86c:	6840      	ldr	r0, [r0, #4]
 23ff86e:	f7ff bbc9 	b.w	23ff004 <network_disconnect>

023ff872 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff872:	2300      	movs	r3, #0
 23ff874:	6840      	ldr	r0, [r0, #4]
 23ff876:	461a      	mov	r2, r3
 23ff878:	f7ff bba8 	b.w	23fefcc <network_connect>

023ff87c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff87c:	2204      	movs	r2, #4
 23ff87e:	4b02      	ldr	r3, [pc, #8]	; (23ff888 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff880:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff882:	4a02      	ldr	r2, [pc, #8]	; (23ff88c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff884:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff886:	4770      	bx	lr
 23ff888:	1007aee0 	.word	0x1007aee0
 23ff88c:	023fff30 	.word	0x023fff30

023ff890 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff890:	4b01      	ldr	r3, [pc, #4]	; (23ff898 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff892:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff894:	4770      	bx	lr
 23ff896:	bf00      	nop
 23ff898:	1007ade0 	.word	0x1007ade0

023ff89c <serialEventRun>:
{
 23ff89c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff89e:	4b0f      	ldr	r3, [pc, #60]	; (23ff8dc <serialEventRun+0x40>)
 23ff8a0:	b143      	cbz	r3, 23ff8b4 <serialEventRun+0x18>
 23ff8a2:	f7ff ff93 	bl	23ff7cc <_Z16_fetch_usbserialv>
 23ff8a6:	6803      	ldr	r3, [r0, #0]
 23ff8a8:	691b      	ldr	r3, [r3, #16]
 23ff8aa:	4798      	blx	r3
 23ff8ac:	2800      	cmp	r0, #0
 23ff8ae:	dd01      	ble.n	23ff8b4 <serialEventRun+0x18>
        serialEvent();
 23ff8b0:	e000      	b.n	23ff8b4 <serialEventRun+0x18>
 23ff8b2:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff8b4:	4b0a      	ldr	r3, [pc, #40]	; (23ff8e0 <serialEventRun+0x44>)
 23ff8b6:	b143      	cbz	r3, 23ff8ca <serialEventRun+0x2e>
 23ff8b8:	f000 f950 	bl	23ffb5c <_Z22__fetch_global_Serial1v>
 23ff8bc:	6803      	ldr	r3, [r0, #0]
 23ff8be:	691b      	ldr	r3, [r3, #16]
 23ff8c0:	4798      	blx	r3
 23ff8c2:	2800      	cmp	r0, #0
 23ff8c4:	dd01      	ble.n	23ff8ca <serialEventRun+0x2e>
        serialEvent1();
 23ff8c6:	e000      	b.n	23ff8ca <serialEventRun+0x2e>
 23ff8c8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff8ca:	4b06      	ldr	r3, [pc, #24]	; (23ff8e4 <serialEventRun+0x48>)
 23ff8cc:	b10b      	cbz	r3, 23ff8d2 <serialEventRun+0x36>
 23ff8ce:	f000 f98b 	bl	23ffbe8 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff8d2:	4b05      	ldr	r3, [pc, #20]	; (23ff8e8 <serialEventRun+0x4c>)
 23ff8d4:	b10b      	cbz	r3, 23ff8da <serialEventRun+0x3e>
 23ff8d6:	f000 f9bd 	bl	23ffc54 <_Z15serialEventRun3v>
}
 23ff8da:	bd08      	pop	{r3, pc}
	...

023ff8ec <_post_loop>:
{
 23ff8ec:	b508      	push	{r3, lr}
	serialEventRun();
 23ff8ee:	f7ff ffd5 	bl	23ff89c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff8f2:	f7ff f911 	bl	23feb18 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff8f6:	4b01      	ldr	r3, [pc, #4]	; (23ff8fc <_post_loop+0x10>)
 23ff8f8:	6018      	str	r0, [r3, #0]
}
 23ff8fa:	bd08      	pop	{r3, pc}
 23ff8fc:	1007aef0 	.word	0x1007aef0

023ff900 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff900:	4805      	ldr	r0, [pc, #20]	; (23ff918 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff902:	4a06      	ldr	r2, [pc, #24]	; (23ff91c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff904:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff906:	1a12      	subs	r2, r2, r0
 23ff908:	4905      	ldr	r1, [pc, #20]	; (23ff920 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff90a:	f000 f9bf 	bl	23ffc8c <memcpy>
    __backup_sram_signature = signature;
 23ff90e:	4b05      	ldr	r3, [pc, #20]	; (23ff924 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff910:	4a05      	ldr	r2, [pc, #20]	; (23ff928 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff912:	601a      	str	r2, [r3, #0]
}
 23ff914:	bd08      	pop	{r3, pc}
 23ff916:	bf00      	nop
 23ff918:	1007b400 	.word	0x1007b400
 23ff91c:	1007b404 	.word	0x1007b404
 23ff920:	085ffd04 	.word	0x085ffd04
 23ff924:	1007b400 	.word	0x1007b400
 23ff928:	9a271c1e 	.word	0x9a271c1e

023ff92c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff92c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff92e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff930:	461a      	mov	r2, r3
 23ff932:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff936:	9300      	str	r3, [sp, #0]
 23ff938:	f7ff fb1e 	bl	23fef78 <system_ctrl_set_result>
}
 23ff93c:	b003      	add	sp, #12
 23ff93e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff944 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff944:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff946:	8843      	ldrh	r3, [r0, #2]
 23ff948:	2b0a      	cmp	r3, #10
 23ff94a:	d008      	beq.n	23ff95e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff94c:	2b50      	cmp	r3, #80	; 0x50
 23ff94e:	d10b      	bne.n	23ff968 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff950:	4b09      	ldr	r3, [pc, #36]	; (23ff978 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff952:	681b      	ldr	r3, [r3, #0]
 23ff954:	b14b      	cbz	r3, 23ff96a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff956:	b003      	add	sp, #12
 23ff958:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff95c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff95e:	f7ff ffe5 	bl	23ff92c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff962:	b003      	add	sp, #12
 23ff964:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff968:	2300      	movs	r3, #0
 23ff96a:	461a      	mov	r2, r3
 23ff96c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff970:	9300      	str	r3, [sp, #0]
 23ff972:	f7ff fb01 	bl	23fef78 <system_ctrl_set_result>
}
 23ff976:	e7f4      	b.n	23ff962 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff978:	1007aeec 	.word	0x1007aeec

023ff97c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff97c:	2100      	movs	r1, #0
{
 23ff97e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff980:	4811      	ldr	r0, [pc, #68]	; (23ff9c8 <module_user_init_hook+0x4c>)
 23ff982:	f7ff fbf5 	bl	23ff170 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff986:	4b11      	ldr	r3, [pc, #68]	; (23ff9cc <module_user_init_hook+0x50>)
 23ff988:	681a      	ldr	r2, [r3, #0]
 23ff98a:	4b11      	ldr	r3, [pc, #68]	; (23ff9d0 <module_user_init_hook+0x54>)
 23ff98c:	429a      	cmp	r2, r3
 23ff98e:	bf0c      	ite	eq
 23ff990:	2201      	moveq	r2, #1
 23ff992:	2200      	movne	r2, #0
 23ff994:	4b0f      	ldr	r3, [pc, #60]	; (23ff9d4 <module_user_init_hook+0x58>)
 23ff996:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff998:	d001      	beq.n	23ff99e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff99a:	f7ff ffb1 	bl	23ff900 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff99e:	f7ff f89f 	bl	23feae0 <HAL_RNG_GetRandomNumber>
 23ff9a2:	4604      	mov	r4, r0
    srand(seed);
 23ff9a4:	f000 f988 	bl	23ffcb8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff9a8:	4b0b      	ldr	r3, [pc, #44]	; (23ff9d8 <module_user_init_hook+0x5c>)
 23ff9aa:	b113      	cbz	r3, 23ff9b2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff9ac:	4620      	mov	r0, r4
 23ff9ae:	e000      	b.n	23ff9b2 <module_user_init_hook+0x36>
 23ff9b0:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff9b2:	2100      	movs	r1, #0
 23ff9b4:	4808      	ldr	r0, [pc, #32]	; (23ff9d8 <module_user_init_hook+0x5c>)
 23ff9b6:	f7ff faed 	bl	23fef94 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff9ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff9be:	2100      	movs	r1, #0
 23ff9c0:	4806      	ldr	r0, [pc, #24]	; (23ff9dc <module_user_init_hook+0x60>)
 23ff9c2:	f7ff bacb 	b.w	23fef5c <system_ctrl_set_app_request_handler>
 23ff9c6:	bf00      	nop
 23ff9c8:	023ff891 	.word	0x023ff891
 23ff9cc:	1007b400 	.word	0x1007b400
 23ff9d0:	9a271c1e 	.word	0x9a271c1e
 23ff9d4:	1007aee8 	.word	0x1007aee8
 23ff9d8:	00000000 	.word	0x00000000
 23ff9dc:	023ff945 	.word	0x023ff945

023ff9e0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff9e0:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff9e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff9e4:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff9e6:	d902      	bls.n	23ff9ee <pinAvailable+0xe>
    return false;
 23ff9e8:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff9ea:	b003      	add	sp, #12
 23ff9ec:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff9ee:	f1a0 030f 	sub.w	r3, r0, #15
 23ff9f2:	2b02      	cmp	r3, #2
 23ff9f4:	d90b      	bls.n	23ffa0e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff9f6:	2801      	cmp	r0, #1
 23ff9f8:	d821      	bhi.n	23ffa3e <pinAvailable+0x5e>
 23ff9fa:	f000 f85b 	bl	23ffab4 <_Z19__fetch_global_Wirev>
 23ff9fe:	2100      	movs	r1, #0
 23ffa00:	7c00      	ldrb	r0, [r0, #16]
 23ffa02:	f7ff f94d 	bl	23feca0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ffa06:	f080 0001 	eor.w	r0, r0, #1
 23ffa0a:	b2c0      	uxtb	r0, r0
 23ffa0c:	e7ed      	b.n	23ff9ea <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ffa0e:	4d11      	ldr	r5, [pc, #68]	; (23ffa54 <pinAvailable+0x74>)
 23ffa10:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa14:	f011 0101 	ands.w	r1, r1, #1
 23ffa18:	d10b      	bne.n	23ffa32 <pinAvailable+0x52>
 23ffa1a:	4628      	mov	r0, r5
 23ffa1c:	9101      	str	r1, [sp, #4]
 23ffa1e:	f7fe fd14 	bl	23fe44a <__cxa_guard_acquire>
 23ffa22:	9901      	ldr	r1, [sp, #4]
 23ffa24:	b128      	cbz	r0, 23ffa32 <pinAvailable+0x52>
 23ffa26:	480c      	ldr	r0, [pc, #48]	; (23ffa58 <pinAvailable+0x78>)
 23ffa28:	f7ff fdf6 	bl	23ff618 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ffa2c:	4628      	mov	r0, r5
 23ffa2e:	f7fe fd11 	bl	23fe454 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ffa32:	4b09      	ldr	r3, [pc, #36]	; (23ffa58 <pinAvailable+0x78>)
 23ffa34:	7818      	ldrb	r0, [r3, #0]
 23ffa36:	f7ff f987 	bl	23fed48 <hal_spi_is_enabled>
 23ffa3a:	2800      	cmp	r0, #0
 23ffa3c:	d1d4      	bne.n	23ff9e8 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ffa3e:	3c08      	subs	r4, #8
 23ffa40:	2c01      	cmp	r4, #1
 23ffa42:	d805      	bhi.n	23ffa50 <pinAvailable+0x70>
 23ffa44:	f000 f88a 	bl	23ffb5c <_Z22__fetch_global_Serial1v>
 23ffa48:	7c00      	ldrb	r0, [r0, #16]
 23ffa4a:	f7ff f9d1 	bl	23fedf0 <hal_usart_is_enabled>
 23ffa4e:	e7da      	b.n	23ffa06 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ffa50:	2001      	movs	r0, #1
 23ffa52:	e7ca      	b.n	23ff9ea <pinAvailable+0xa>
 23ffa54:	1007ae80 	.word	0x1007ae80
 23ffa58:	1007ae84 	.word	0x1007ae84

023ffa5c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ffa5c:	281b      	cmp	r0, #27
{
 23ffa5e:	b538      	push	{r3, r4, r5, lr}
 23ffa60:	4604      	mov	r4, r0
 23ffa62:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ffa64:	d80a      	bhi.n	23ffa7c <pinMode+0x20>
 23ffa66:	29ff      	cmp	r1, #255	; 0xff
 23ffa68:	d008      	beq.n	23ffa7c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ffa6a:	f7ff ffb9 	bl	23ff9e0 <pinAvailable>
 23ffa6e:	b128      	cbz	r0, 23ffa7c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ffa70:	4629      	mov	r1, r5
 23ffa72:	4620      	mov	r0, r4
}
 23ffa74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ffa78:	f7ff b86a 	b.w	23feb50 <hal_gpio_mode>
}
 23ffa7c:	bd38      	pop	{r3, r4, r5, pc}

023ffa7e <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa7e:	4770      	bx	lr

023ffa80 <_Z17acquireWireBufferv>:
{
 23ffa80:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ffa82:	4b0a      	ldr	r3, [pc, #40]	; (23ffaac <_Z17acquireWireBufferv+0x2c>)
{
 23ffa84:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ffa86:	6003      	str	r3, [r0, #0]
 23ffa88:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa8a:	4909      	ldr	r1, [pc, #36]	; (23ffab0 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ffa8c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa8e:	2020      	movs	r0, #32
 23ffa90:	f000 f8f4 	bl	23ffc7c <_ZnajRKSt9nothrow_t>
	};
 23ffa94:	2520      	movs	r5, #32
 23ffa96:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa98:	4905      	ldr	r1, [pc, #20]	; (23ffab0 <_Z17acquireWireBufferv+0x30>)
 23ffa9a:	4628      	mov	r0, r5
	};
 23ffa9c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa9e:	f000 f8ed 	bl	23ffc7c <_ZnajRKSt9nothrow_t>
	};
 23ffaa2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ffaa6:	4620      	mov	r0, r4
 23ffaa8:	bd38      	pop	{r3, r4, r5, pc}
 23ffaaa:	bf00      	nop
 23ffaac:	00010018 	.word	0x00010018
 23ffab0:	023fff64 	.word	0x023fff64

023ffab4 <_Z19__fetch_global_Wirev>:
{
 23ffab4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffab6:	4d0e      	ldr	r5, [pc, #56]	; (23ffaf0 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ffab8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffaba:	e8d5 1f8f 	ldab	r1, [r5]
 23ffabe:	f011 0401 	ands.w	r4, r1, #1
 23ffac2:	d111      	bne.n	23ffae8 <_Z19__fetch_global_Wirev+0x34>
 23ffac4:	4628      	mov	r0, r5
 23ffac6:	f7fe fcc0 	bl	23fe44a <__cxa_guard_acquire>
 23ffaca:	b168      	cbz	r0, 23ffae8 <_Z19__fetch_global_Wirev+0x34>
 23ffacc:	4668      	mov	r0, sp
 23fface:	f7ff ffd7 	bl	23ffa80 <_Z17acquireWireBufferv>
 23ffad2:	466a      	mov	r2, sp
 23ffad4:	4621      	mov	r1, r4
 23ffad6:	4807      	ldr	r0, [pc, #28]	; (23ffaf4 <_Z19__fetch_global_Wirev+0x40>)
 23ffad8:	f7ff fbe8 	bl	23ff2ac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ffadc:	4628      	mov	r0, r5
 23ffade:	f7fe fcb9 	bl	23fe454 <__cxa_guard_release>
 23ffae2:	4805      	ldr	r0, [pc, #20]	; (23ffaf8 <_Z19__fetch_global_Wirev+0x44>)
 23ffae4:	f000 f8cc 	bl	23ffc80 <atexit>
	return wire;
}
 23ffae8:	4802      	ldr	r0, [pc, #8]	; (23ffaf4 <_Z19__fetch_global_Wirev+0x40>)
 23ffaea:	b007      	add	sp, #28
 23ffaec:	bd30      	pop	{r4, r5, pc}
 23ffaee:	bf00      	nop
 23ffaf0:	1007aef4 	.word	0x1007aef4
 23ffaf4:	1007aef8 	.word	0x1007aef8
 23ffaf8:	023ffa7f 	.word	0x023ffa7f

023ffafc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffafc:	4770      	bx	lr
	...

023ffb00 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffb00:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ffb02:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffb04:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ffb06:	462a      	mov	r2, r5
 23ffb08:	2100      	movs	r1, #0
 23ffb0a:	f000 f8cc 	bl	23ffca6 <memset>
 23ffb0e:	8025      	strh	r5, [r4, #0]
 23ffb10:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffb12:	4907      	ldr	r1, [pc, #28]	; (23ffb30 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ffb14:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ffb16:	8125      	strh	r5, [r4, #8]
 23ffb18:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffb1a:	f000 f8af 	bl	23ffc7c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffb1e:	4904      	ldr	r1, [pc, #16]	; (23ffb30 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ffb20:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffb22:	4628      	mov	r0, r5
 23ffb24:	f000 f8aa 	bl	23ffc7c <_ZnajRKSt9nothrow_t>
    };
 23ffb28:	60e0      	str	r0, [r4, #12]
}
 23ffb2a:	4620      	mov	r0, r4
 23ffb2c:	bd38      	pop	{r3, r4, r5, pc}
 23ffb2e:	bf00      	nop
 23ffb30:	023fff64 	.word	0x023fff64

023ffb34 <__tcf_2>:
 23ffb34:	4770      	bx	lr

023ffb36 <__tcf_1>:
 23ffb36:	4770      	bx	lr

023ffb38 <_Z20acquireSerial1Bufferv>:
{
 23ffb38:	b510      	push	{r4, lr}
 23ffb3a:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ffb3c:	f7ff ffe0 	bl	23ffb00 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ffb40:	4620      	mov	r0, r4
 23ffb42:	bd10      	pop	{r4, pc}

023ffb44 <_Z20acquireSerial2Bufferv>:
 23ffb44:	b510      	push	{r4, lr}
 23ffb46:	4604      	mov	r4, r0
 23ffb48:	f7ff ffda 	bl	23ffb00 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb4c:	4620      	mov	r0, r4
 23ffb4e:	bd10      	pop	{r4, pc}

023ffb50 <_Z20acquireSerial3Bufferv>:
 23ffb50:	b510      	push	{r4, lr}
 23ffb52:	4604      	mov	r4, r0
 23ffb54:	f7ff ffd4 	bl	23ffb00 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb58:	4620      	mov	r0, r4
 23ffb5a:	bd10      	pop	{r4, pc}

023ffb5c <_Z22__fetch_global_Serial1v>:
{
 23ffb5c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb5e:	4d0e      	ldr	r5, [pc, #56]	; (23ffb98 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffb60:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb62:	e8d5 1f8f 	ldab	r1, [r5]
 23ffb66:	f011 0401 	ands.w	r4, r1, #1
 23ffb6a:	d111      	bne.n	23ffb90 <_Z22__fetch_global_Serial1v+0x34>
 23ffb6c:	4628      	mov	r0, r5
 23ffb6e:	f7fe fc6c 	bl	23fe44a <__cxa_guard_acquire>
 23ffb72:	b168      	cbz	r0, 23ffb90 <_Z22__fetch_global_Serial1v+0x34>
 23ffb74:	a801      	add	r0, sp, #4
 23ffb76:	f7ff ffdf 	bl	23ffb38 <_Z20acquireSerial1Bufferv>
 23ffb7a:	4621      	mov	r1, r4
 23ffb7c:	aa01      	add	r2, sp, #4
 23ffb7e:	4807      	ldr	r0, [pc, #28]	; (23ffb9c <_Z22__fetch_global_Serial1v+0x40>)
 23ffb80:	f7ff fdae 	bl	23ff6e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb84:	4628      	mov	r0, r5
 23ffb86:	f7fe fc65 	bl	23fe454 <__cxa_guard_release>
 23ffb8a:	4805      	ldr	r0, [pc, #20]	; (23ffba0 <_Z22__fetch_global_Serial1v+0x44>)
 23ffb8c:	f000 f878 	bl	23ffc80 <atexit>
    return serial1;
}
 23ffb90:	4802      	ldr	r0, [pc, #8]	; (23ffb9c <_Z22__fetch_global_Serial1v+0x40>)
 23ffb92:	b007      	add	sp, #28
 23ffb94:	bd30      	pop	{r4, r5, pc}
 23ffb96:	bf00      	nop
 23ffb98:	1007af0c 	.word	0x1007af0c
 23ffb9c:	1007af18 	.word	0x1007af18
 23ffba0:	023ffafd 	.word	0x023ffafd

023ffba4 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffba4:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffba6:	4c0d      	ldr	r4, [pc, #52]	; (23ffbdc <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffba8:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffbaa:	e8d4 3f8f 	ldab	r3, [r4]
 23ffbae:	07db      	lsls	r3, r3, #31
 23ffbb0:	d411      	bmi.n	23ffbd6 <_Z22__fetch_global_Serial2v+0x32>
 23ffbb2:	4620      	mov	r0, r4
 23ffbb4:	f7fe fc49 	bl	23fe44a <__cxa_guard_acquire>
 23ffbb8:	b168      	cbz	r0, 23ffbd6 <_Z22__fetch_global_Serial2v+0x32>
 23ffbba:	a801      	add	r0, sp, #4
 23ffbbc:	f7ff ffc2 	bl	23ffb44 <_Z20acquireSerial2Bufferv>
 23ffbc0:	2101      	movs	r1, #1
 23ffbc2:	aa01      	add	r2, sp, #4
 23ffbc4:	4806      	ldr	r0, [pc, #24]	; (23ffbe0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffbc6:	f7ff fd8b 	bl	23ff6e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffbca:	4620      	mov	r0, r4
 23ffbcc:	f7fe fc42 	bl	23fe454 <__cxa_guard_release>
 23ffbd0:	4804      	ldr	r0, [pc, #16]	; (23ffbe4 <_Z22__fetch_global_Serial2v+0x40>)
 23ffbd2:	f000 f855 	bl	23ffc80 <atexit>
	return serial2;
}
 23ffbd6:	4802      	ldr	r0, [pc, #8]	; (23ffbe0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffbd8:	b006      	add	sp, #24
 23ffbda:	bd10      	pop	{r4, pc}
 23ffbdc:	1007af10 	.word	0x1007af10
 23ffbe0:	1007af2c 	.word	0x1007af2c
 23ffbe4:	023ffb37 	.word	0x023ffb37

023ffbe8 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffbe8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffbea:	f7ff ffdb 	bl	23ffba4 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffbee:	4b07      	ldr	r3, [pc, #28]	; (23ffc0c <_Z15serialEventRun2v+0x24>)
 23ffbf0:	4604      	mov	r4, r0
 23ffbf2:	b153      	cbz	r3, 23ffc0a <_Z15serialEventRun2v+0x22>
 23ffbf4:	f7ff fd88 	bl	23ff708 <_ZN11USARTSerial9isEnabledEv>
 23ffbf8:	b138      	cbz	r0, 23ffc0a <_Z15serialEventRun2v+0x22>
 23ffbfa:	6823      	ldr	r3, [r4, #0]
 23ffbfc:	4620      	mov	r0, r4
 23ffbfe:	691b      	ldr	r3, [r3, #16]
 23ffc00:	4798      	blx	r3
 23ffc02:	2800      	cmp	r0, #0
 23ffc04:	dd01      	ble.n	23ffc0a <_Z15serialEventRun2v+0x22>
        handler();
 23ffc06:	e000      	b.n	23ffc0a <_Z15serialEventRun2v+0x22>
 23ffc08:	bf00      	nop
}
 23ffc0a:	bd10      	pop	{r4, pc}
 23ffc0c:	00000000 	.word	0x00000000

023ffc10 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffc10:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffc12:	4c0d      	ldr	r4, [pc, #52]	; (23ffc48 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffc14:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffc16:	e8d4 3f8f 	ldab	r3, [r4]
 23ffc1a:	07db      	lsls	r3, r3, #31
 23ffc1c:	d411      	bmi.n	23ffc42 <_Z22__fetch_global_Serial3v+0x32>
 23ffc1e:	4620      	mov	r0, r4
 23ffc20:	f7fe fc13 	bl	23fe44a <__cxa_guard_acquire>
 23ffc24:	b168      	cbz	r0, 23ffc42 <_Z22__fetch_global_Serial3v+0x32>
 23ffc26:	a801      	add	r0, sp, #4
 23ffc28:	f7ff ff92 	bl	23ffb50 <_Z20acquireSerial3Bufferv>
 23ffc2c:	2102      	movs	r1, #2
 23ffc2e:	aa01      	add	r2, sp, #4
 23ffc30:	4806      	ldr	r0, [pc, #24]	; (23ffc4c <_Z22__fetch_global_Serial3v+0x3c>)
 23ffc32:	f7ff fd55 	bl	23ff6e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffc36:	4620      	mov	r0, r4
 23ffc38:	f7fe fc0c 	bl	23fe454 <__cxa_guard_release>
 23ffc3c:	4804      	ldr	r0, [pc, #16]	; (23ffc50 <_Z22__fetch_global_Serial3v+0x40>)
 23ffc3e:	f000 f81f 	bl	23ffc80 <atexit>
	return serial3;
}
 23ffc42:	4802      	ldr	r0, [pc, #8]	; (23ffc4c <_Z22__fetch_global_Serial3v+0x3c>)
 23ffc44:	b006      	add	sp, #24
 23ffc46:	bd10      	pop	{r4, pc}
 23ffc48:	1007af14 	.word	0x1007af14
 23ffc4c:	1007af40 	.word	0x1007af40
 23ffc50:	023ffb35 	.word	0x023ffb35

023ffc54 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffc54:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffc56:	f7ff ffdb 	bl	23ffc10 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffc5a:	4b07      	ldr	r3, [pc, #28]	; (23ffc78 <_Z15serialEventRun3v+0x24>)
 23ffc5c:	4604      	mov	r4, r0
 23ffc5e:	b153      	cbz	r3, 23ffc76 <_Z15serialEventRun3v+0x22>
 23ffc60:	f7ff fd52 	bl	23ff708 <_ZN11USARTSerial9isEnabledEv>
 23ffc64:	b138      	cbz	r0, 23ffc76 <_Z15serialEventRun3v+0x22>
 23ffc66:	6823      	ldr	r3, [r4, #0]
 23ffc68:	4620      	mov	r0, r4
 23ffc6a:	691b      	ldr	r3, [r3, #16]
 23ffc6c:	4798      	blx	r3
 23ffc6e:	2800      	cmp	r0, #0
 23ffc70:	dd01      	ble.n	23ffc76 <_Z15serialEventRun3v+0x22>
        handler();
 23ffc72:	e000      	b.n	23ffc76 <_Z15serialEventRun3v+0x22>
 23ffc74:	bf00      	nop
}
 23ffc76:	bd10      	pop	{r4, pc}
 23ffc78:	00000000 	.word	0x00000000

023ffc7c <_ZnajRKSt9nothrow_t>:
 23ffc7c:	f7fe bbe1 	b.w	23fe442 <_Znaj>

023ffc80 <atexit>:
 23ffc80:	2300      	movs	r3, #0
 23ffc82:	4601      	mov	r1, r0
 23ffc84:	461a      	mov	r2, r3
 23ffc86:	4618      	mov	r0, r3
 23ffc88:	f000 b844 	b.w	23ffd14 <__register_exitproc>

023ffc8c <memcpy>:
 23ffc8c:	440a      	add	r2, r1
 23ffc8e:	1e43      	subs	r3, r0, #1
 23ffc90:	4291      	cmp	r1, r2
 23ffc92:	d100      	bne.n	23ffc96 <memcpy+0xa>
 23ffc94:	4770      	bx	lr
 23ffc96:	b510      	push	{r4, lr}
 23ffc98:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffc9c:	4291      	cmp	r1, r2
 23ffc9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffca2:	d1f9      	bne.n	23ffc98 <memcpy+0xc>
 23ffca4:	bd10      	pop	{r4, pc}

023ffca6 <memset>:
 23ffca6:	4402      	add	r2, r0
 23ffca8:	4603      	mov	r3, r0
 23ffcaa:	4293      	cmp	r3, r2
 23ffcac:	d100      	bne.n	23ffcb0 <memset+0xa>
 23ffcae:	4770      	bx	lr
 23ffcb0:	f803 1b01 	strb.w	r1, [r3], #1
 23ffcb4:	e7f9      	b.n	23ffcaa <memset+0x4>
	...

023ffcb8 <srand>:
 23ffcb8:	b538      	push	{r3, r4, r5, lr}
 23ffcba:	4b10      	ldr	r3, [pc, #64]	; (23ffcfc <srand+0x44>)
 23ffcbc:	4604      	mov	r4, r0
 23ffcbe:	681d      	ldr	r5, [r3, #0]
 23ffcc0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffcc2:	b9b3      	cbnz	r3, 23ffcf2 <srand+0x3a>
 23ffcc4:	2018      	movs	r0, #24
 23ffcc6:	f7ff fa29 	bl	23ff11c <malloc>
 23ffcca:	4602      	mov	r2, r0
 23ffccc:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffcce:	b920      	cbnz	r0, 23ffcda <srand+0x22>
 23ffcd0:	4b0b      	ldr	r3, [pc, #44]	; (23ffd00 <srand+0x48>)
 23ffcd2:	2142      	movs	r1, #66	; 0x42
 23ffcd4:	480b      	ldr	r0, [pc, #44]	; (23ffd04 <srand+0x4c>)
 23ffcd6:	f7ff fa3d 	bl	23ff154 <__assert_func>
 23ffcda:	490b      	ldr	r1, [pc, #44]	; (23ffd08 <srand+0x50>)
 23ffcdc:	4b0b      	ldr	r3, [pc, #44]	; (23ffd0c <srand+0x54>)
 23ffcde:	e9c0 1300 	strd	r1, r3, [r0]
 23ffce2:	4b0b      	ldr	r3, [pc, #44]	; (23ffd10 <srand+0x58>)
 23ffce4:	2100      	movs	r1, #0
 23ffce6:	6083      	str	r3, [r0, #8]
 23ffce8:	230b      	movs	r3, #11
 23ffcea:	8183      	strh	r3, [r0, #12]
 23ffcec:	2001      	movs	r0, #1
 23ffcee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffcf2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffcf4:	2200      	movs	r2, #0
 23ffcf6:	611c      	str	r4, [r3, #16]
 23ffcf8:	615a      	str	r2, [r3, #20]
 23ffcfa:	bd38      	pop	{r3, r4, r5, pc}
 23ffcfc:	1007ade0 	.word	0x1007ade0
 23ffd00:	023fff65 	.word	0x023fff65
 23ffd04:	023fff7c 	.word	0x023fff7c
 23ffd08:	abcd330e 	.word	0xabcd330e
 23ffd0c:	e66d1234 	.word	0xe66d1234
 23ffd10:	0005deec 	.word	0x0005deec

023ffd14 <__register_exitproc>:
 23ffd14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffd18:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffdd8 <__register_exitproc+0xc4>
 23ffd1c:	4606      	mov	r6, r0
 23ffd1e:	461f      	mov	r7, r3
 23ffd20:	460d      	mov	r5, r1
 23ffd22:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd26:	4691      	mov	r9, r2
 23ffd28:	f000 f858 	bl	23ffddc <__retarget_lock_acquire_recursive>
 23ffd2c:	4b26      	ldr	r3, [pc, #152]	; (23ffdc8 <__register_exitproc+0xb4>)
 23ffd2e:	681c      	ldr	r4, [r3, #0]
 23ffd30:	b934      	cbnz	r4, 23ffd40 <__register_exitproc+0x2c>
 23ffd32:	4c26      	ldr	r4, [pc, #152]	; (23ffdcc <__register_exitproc+0xb8>)
 23ffd34:	601c      	str	r4, [r3, #0]
 23ffd36:	4b26      	ldr	r3, [pc, #152]	; (23ffdd0 <__register_exitproc+0xbc>)
 23ffd38:	b113      	cbz	r3, 23ffd40 <__register_exitproc+0x2c>
 23ffd3a:	681b      	ldr	r3, [r3, #0]
 23ffd3c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffd40:	6863      	ldr	r3, [r4, #4]
 23ffd42:	2b1f      	cmp	r3, #31
 23ffd44:	dd07      	ble.n	23ffd56 <__register_exitproc+0x42>
 23ffd46:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd4a:	f000 f849 	bl	23ffde0 <__retarget_lock_release_recursive>
 23ffd4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffd52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffd56:	b35e      	cbz	r6, 23ffdb0 <__register_exitproc+0x9c>
 23ffd58:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffd5c:	b988      	cbnz	r0, 23ffd82 <__register_exitproc+0x6e>
 23ffd5e:	4b1d      	ldr	r3, [pc, #116]	; (23ffdd4 <__register_exitproc+0xc0>)
 23ffd60:	b923      	cbnz	r3, 23ffd6c <__register_exitproc+0x58>
 23ffd62:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd66:	f000 f83a 	bl	23ffdde <__retarget_lock_release>
 23ffd6a:	e7f0      	b.n	23ffd4e <__register_exitproc+0x3a>
 23ffd6c:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffd70:	f7ff f9d4 	bl	23ff11c <malloc>
 23ffd74:	2800      	cmp	r0, #0
 23ffd76:	d0f4      	beq.n	23ffd62 <__register_exitproc+0x4e>
 23ffd78:	2300      	movs	r3, #0
 23ffd7a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffd7e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffd82:	6863      	ldr	r3, [r4, #4]
 23ffd84:	2201      	movs	r2, #1
 23ffd86:	2e02      	cmp	r6, #2
 23ffd88:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffd8c:	fa02 f203 	lsl.w	r2, r2, r3
 23ffd90:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffd94:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffd98:	ea43 0302 	orr.w	r3, r3, r2
 23ffd9c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffda0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffda4:	bf02      	ittt	eq
 23ffda6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffdaa:	4313      	orreq	r3, r2
 23ffdac:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffdb0:	6863      	ldr	r3, [r4, #4]
 23ffdb2:	f8d8 0000 	ldr.w	r0, [r8]
 23ffdb6:	1c5a      	adds	r2, r3, #1
 23ffdb8:	3302      	adds	r3, #2
 23ffdba:	6062      	str	r2, [r4, #4]
 23ffdbc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffdc0:	f000 f80e 	bl	23ffde0 <__retarget_lock_release_recursive>
 23ffdc4:	2000      	movs	r0, #0
 23ffdc6:	e7c4      	b.n	23ffd52 <__register_exitproc+0x3e>
 23ffdc8:	1007afe0 	.word	0x1007afe0
 23ffdcc:	1007af54 	.word	0x1007af54
 23ffdd0:	00000000 	.word	0x00000000
 23ffdd4:	023ff11d 	.word	0x023ff11d
 23ffdd8:	1007ae44 	.word	0x1007ae44

023ffddc <__retarget_lock_acquire_recursive>:
 23ffddc:	4770      	bx	lr

023ffdde <__retarget_lock_release>:
 23ffdde:	4770      	bx	lr

023ffde0 <__retarget_lock_release_recursive>:
 23ffde0:	4770      	bx	lr
	...

023ffde4 <dynalib_user>:
 23ffde4:	e409 023f e431 023f e435 023f 0000 0000     ..?.1.?.5.?.....

023ffdf4 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdfc:	f237 023f f22d 023f f223 023f f219 023f     7.?.-.?.#.?...?.
 23ffe0c:	f20d 023f f201 023f f455 023f f45d 023f     ..?...?.U.?.].?.
 23ffe1c:	f1f5 023f f1ed 023f f1e3 023f f1d9 023f     ..?...?...?...?.
 23ffe2c:	f48d 023f                                   ..?.

023ffe30 <_ZTV7TwoWire>:
	...
 23ffe38:	f255 023f f29f 023f f277 023f f257 023f     U.?...?.w.?.W.?.
 23ffe48:	f27f 023f f287 023f f28f 023f f297 023f     ..?...?...?...?.

023ffe58 <_ZTV9IPAddress>:
	...
 23ffe60:	f325 023f f315 023f f317 023f 7061 0070     %.?...?...?.app.

023ffe70 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe78:	f415 023f f41f 023f f429 023f f433 023f     ..?...?.).?.3.?.
 23ffe88:	f43d 023f f449 023f f455 023f f45d 023f     =.?.I.?.U.?.].?.
 23ffe98:	f465 023f f471 023f f479 023f f483 023f     e.?.q.?.y.?...?.
 23ffea8:	f48d 023f 5925 252d 2d6d 6425 2554 3a48     ..?.%Y-%m-%dT%H:
 23ffeb8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffec8 <_ZTV11USARTSerial>:
	...
 23ffed0:	f665 023f f6d1 023f f6a9 023f f579 023f     e.?...?...?.y.?.
 23ffee0:	f679 023f f695 023f f687 023f f6a3 023f     y.?...?...?...?.
 23ffef0:	f667 023f f66b 023f                         g.?.k.?.

023ffef8 <_ZTV9USBSerial>:
	...
 23fff00:	f715 023f f77d 023f f753 023f f579 023f     ..?.}.?.S.?.y.?.
 23fff10:	f745 023f f717 023f f727 023f f777 023f     E.?...?.'.?.w.?.
 23fff20:	f737 023f f70f 023f                         7.?...?.

023fff28 <_ZTVN5spark9WiFiClassE>:
	...
 23fff30:	f873 023f f869 023f f85f 023f f815 023f     s.?.i.?._.?...?.
 23fff40:	f853 023f f847 023f f455 023f f45d 023f     S.?.G.?.U.?.].?.
 23fff50:	f83b 023f f833 023f f829 023f f81f 023f     ;.?.3.?.).?...?.
 23fff60:	f48d 023f                                   ..?.

023fff64 <_ZSt7nothrow>:
 23fff64:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff74:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff84:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff94:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd5 <link_const_data_end>:
 23fffd5:	00          	.byte	0x00
	...

023fffd8 <link_constructors_location>:
 23fffd8:	023fe4f5 	.word	0x023fe4f5
 23fffdc:	023ff195 	.word	0x023ff195
 23fffe0:	023ff241 	.word	0x023ff241
 23fffe4:	023ff405 	.word	0x023ff405
 23fffe8:	023ff565 	.word	0x023ff565
 23fffec:	023ff60d 	.word	0x023ff60d
 23ffff0:	023ff62d 	.word	0x023ff62d
 23ffff4:	023ff651 	.word	0x023ff651
 23ffff8:	023ff87d 	.word	0x023ff87d
