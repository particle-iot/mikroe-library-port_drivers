
/Users/Erik-Home/Documents/GitHub/mikroe_port/mikroe_port/target/5.3.0/p2/mikroe_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fc000  085fc000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fc018  085fc018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fd130  085fc088  0000d130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00002ec4  023fd138  085fc090  0000d138  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .data         00000070  1007adb8  085fef54  0001adb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c0  1007ae28  1007ae28  0002ae28  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085fefc4  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000ff0  085fefc8  085fefc8  0001efc8  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001efc8  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00143efc  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000163e5  00000000  00000000  00163efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003a6f2  00000000  00000000  0017a2e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002b18  00000000  00000000  001b49d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000ad50  00000000  00000000  001b74eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b4da  00000000  00000000  001c223b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004ae8f  00000000  00000000  001ed715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ca88e  00000000  00000000  002385a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007a6c  00000000  00000000  00302e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fc018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc018:	480e      	ldr	r0, [pc, #56]	; (85fc054 <module_user_pre_init+0x3c>)
 85fc01a:	490f      	ldr	r1, [pc, #60]	; (85fc058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fc01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc01e:	4288      	cmp	r0, r1
 85fc020:	d005      	beq.n	85fc02e <module_user_pre_init+0x16>
 85fc022:	4a0e      	ldr	r2, [pc, #56]	; (85fc05c <module_user_pre_init+0x44>)
 85fc024:	4282      	cmp	r2, r0
 85fc026:	d002      	beq.n	85fc02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fc028:	4b0d      	ldr	r3, [pc, #52]	; (85fc060 <module_user_pre_init+0x48>)
 85fc02a:	1a12      	subs	r2, r2, r0
 85fc02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fc02e:	480d      	ldr	r0, [pc, #52]	; (85fc064 <module_user_pre_init+0x4c>)
 85fc030:	4a0d      	ldr	r2, [pc, #52]	; (85fc068 <module_user_pre_init+0x50>)
 85fc032:	2100      	movs	r1, #0
 85fc034:	4b0d      	ldr	r3, [pc, #52]	; (85fc06c <module_user_pre_init+0x54>)
 85fc036:	1a12      	subs	r2, r2, r0
 85fc038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fc03a:	480d      	ldr	r0, [pc, #52]	; (85fc070 <module_user_pre_init+0x58>)
 85fc03c:	490d      	ldr	r1, [pc, #52]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc03e:	4288      	cmp	r0, r1
 85fc040:	d005      	beq.n	85fc04e <module_user_pre_init+0x36>
 85fc042:	4a0d      	ldr	r2, [pc, #52]	; (85fc078 <module_user_pre_init+0x60>)
 85fc044:	4282      	cmp	r2, r0
 85fc046:	d002      	beq.n	85fc04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fc048:	4b05      	ldr	r3, [pc, #20]	; (85fc060 <module_user_pre_init+0x48>)
 85fc04a:	1a12      	subs	r2, r2, r0
 85fc04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fc04e:	4801      	ldr	r0, [pc, #4]	; (85fc054 <module_user_pre_init+0x3c>)
 85fc050:	bd08      	pop	{r3, pc}
 85fc052:	bf00      	nop
 85fc054:	1007adb8 	.word	0x1007adb8
 85fc058:	085fef54 	.word	0x085fef54
 85fc05c:	1007ae28 	.word	0x1007ae28
 85fc060:	10110d2d 	.word	0x10110d2d
 85fc064:	1007ae28 	.word	0x1007ae28
 85fc068:	1007afe8 	.word	0x1007afe8
 85fc06c:	10110ea1 	.word	0x10110ea1
 85fc070:	023fd130 	.word	0x023fd130
 85fc074:	085fc088 	.word	0x085fc088
 85fc078:	023ffffc 	.word	0x023ffffc

085fc07c <dynalib_preinit>:
 85fc07c:	085fc019 00000000                       .._.....

Disassembly of section .psram_text:

023fd138 <__aeabi_drsub>:
 23fd138:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fd13c:	e002      	b.n	23fd144 <__adddf3>
 23fd13e:	bf00      	nop

023fd140 <__aeabi_dsub>:
 23fd140:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fd144 <__adddf3>:
 23fd144:	b530      	push	{r4, r5, lr}
 23fd146:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fd14a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fd14e:	ea94 0f05 	teq	r4, r5
 23fd152:	bf08      	it	eq
 23fd154:	ea90 0f02 	teqeq	r0, r2
 23fd158:	bf1f      	itttt	ne
 23fd15a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fd15e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fd162:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fd166:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fd16a:	f000 80e2 	beq.w	23fd332 <__adddf3+0x1ee>
 23fd16e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fd172:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fd176:	bfb8      	it	lt
 23fd178:	426d      	neglt	r5, r5
 23fd17a:	dd0c      	ble.n	23fd196 <__adddf3+0x52>
 23fd17c:	442c      	add	r4, r5
 23fd17e:	ea80 0202 	eor.w	r2, r0, r2
 23fd182:	ea81 0303 	eor.w	r3, r1, r3
 23fd186:	ea82 0000 	eor.w	r0, r2, r0
 23fd18a:	ea83 0101 	eor.w	r1, r3, r1
 23fd18e:	ea80 0202 	eor.w	r2, r0, r2
 23fd192:	ea81 0303 	eor.w	r3, r1, r3
 23fd196:	2d36      	cmp	r5, #54	; 0x36
 23fd198:	bf88      	it	hi
 23fd19a:	bd30      	pophi	{r4, r5, pc}
 23fd19c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fd1a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fd1a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fd1a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fd1ac:	d002      	beq.n	23fd1b4 <__adddf3+0x70>
 23fd1ae:	4240      	negs	r0, r0
 23fd1b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fd1b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fd1b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fd1bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fd1c0:	d002      	beq.n	23fd1c8 <__adddf3+0x84>
 23fd1c2:	4252      	negs	r2, r2
 23fd1c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fd1c8:	ea94 0f05 	teq	r4, r5
 23fd1cc:	f000 80a7 	beq.w	23fd31e <__adddf3+0x1da>
 23fd1d0:	f1a4 0401 	sub.w	r4, r4, #1
 23fd1d4:	f1d5 0e20 	rsbs	lr, r5, #32
 23fd1d8:	db0d      	blt.n	23fd1f6 <__adddf3+0xb2>
 23fd1da:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fd1de:	fa22 f205 	lsr.w	r2, r2, r5
 23fd1e2:	1880      	adds	r0, r0, r2
 23fd1e4:	f141 0100 	adc.w	r1, r1, #0
 23fd1e8:	fa03 f20e 	lsl.w	r2, r3, lr
 23fd1ec:	1880      	adds	r0, r0, r2
 23fd1ee:	fa43 f305 	asr.w	r3, r3, r5
 23fd1f2:	4159      	adcs	r1, r3
 23fd1f4:	e00e      	b.n	23fd214 <__adddf3+0xd0>
 23fd1f6:	f1a5 0520 	sub.w	r5, r5, #32
 23fd1fa:	f10e 0e20 	add.w	lr, lr, #32
 23fd1fe:	2a01      	cmp	r2, #1
 23fd200:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fd204:	bf28      	it	cs
 23fd206:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fd20a:	fa43 f305 	asr.w	r3, r3, r5
 23fd20e:	18c0      	adds	r0, r0, r3
 23fd210:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fd214:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fd218:	d507      	bpl.n	23fd22a <__adddf3+0xe6>
 23fd21a:	f04f 0e00 	mov.w	lr, #0
 23fd21e:	f1dc 0c00 	rsbs	ip, ip, #0
 23fd222:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fd226:	eb6e 0101 	sbc.w	r1, lr, r1
 23fd22a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fd22e:	d31b      	bcc.n	23fd268 <__adddf3+0x124>
 23fd230:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fd234:	d30c      	bcc.n	23fd250 <__adddf3+0x10c>
 23fd236:	0849      	lsrs	r1, r1, #1
 23fd238:	ea5f 0030 	movs.w	r0, r0, rrx
 23fd23c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fd240:	f104 0401 	add.w	r4, r4, #1
 23fd244:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fd248:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fd24c:	f080 809a 	bcs.w	23fd384 <__adddf3+0x240>
 23fd250:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fd254:	bf08      	it	eq
 23fd256:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fd25a:	f150 0000 	adcs.w	r0, r0, #0
 23fd25e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fd262:	ea41 0105 	orr.w	r1, r1, r5
 23fd266:	bd30      	pop	{r4, r5, pc}
 23fd268:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fd26c:	4140      	adcs	r0, r0
 23fd26e:	eb41 0101 	adc.w	r1, r1, r1
 23fd272:	3c01      	subs	r4, #1
 23fd274:	bf28      	it	cs
 23fd276:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fd27a:	d2e9      	bcs.n	23fd250 <__adddf3+0x10c>
 23fd27c:	f091 0f00 	teq	r1, #0
 23fd280:	bf04      	itt	eq
 23fd282:	4601      	moveq	r1, r0
 23fd284:	2000      	moveq	r0, #0
 23fd286:	fab1 f381 	clz	r3, r1
 23fd28a:	bf08      	it	eq
 23fd28c:	3320      	addeq	r3, #32
 23fd28e:	f1a3 030b 	sub.w	r3, r3, #11
 23fd292:	f1b3 0220 	subs.w	r2, r3, #32
 23fd296:	da0c      	bge.n	23fd2b2 <__adddf3+0x16e>
 23fd298:	320c      	adds	r2, #12
 23fd29a:	dd08      	ble.n	23fd2ae <__adddf3+0x16a>
 23fd29c:	f102 0c14 	add.w	ip, r2, #20
 23fd2a0:	f1c2 020c 	rsb	r2, r2, #12
 23fd2a4:	fa01 f00c 	lsl.w	r0, r1, ip
 23fd2a8:	fa21 f102 	lsr.w	r1, r1, r2
 23fd2ac:	e00c      	b.n	23fd2c8 <__adddf3+0x184>
 23fd2ae:	f102 0214 	add.w	r2, r2, #20
 23fd2b2:	bfd8      	it	le
 23fd2b4:	f1c2 0c20 	rsble	ip, r2, #32
 23fd2b8:	fa01 f102 	lsl.w	r1, r1, r2
 23fd2bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fd2c0:	bfdc      	itt	le
 23fd2c2:	ea41 010c 	orrle.w	r1, r1, ip
 23fd2c6:	4090      	lslle	r0, r2
 23fd2c8:	1ae4      	subs	r4, r4, r3
 23fd2ca:	bfa2      	ittt	ge
 23fd2cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fd2d0:	4329      	orrge	r1, r5
 23fd2d2:	bd30      	popge	{r4, r5, pc}
 23fd2d4:	ea6f 0404 	mvn.w	r4, r4
 23fd2d8:	3c1f      	subs	r4, #31
 23fd2da:	da1c      	bge.n	23fd316 <__adddf3+0x1d2>
 23fd2dc:	340c      	adds	r4, #12
 23fd2de:	dc0e      	bgt.n	23fd2fe <__adddf3+0x1ba>
 23fd2e0:	f104 0414 	add.w	r4, r4, #20
 23fd2e4:	f1c4 0220 	rsb	r2, r4, #32
 23fd2e8:	fa20 f004 	lsr.w	r0, r0, r4
 23fd2ec:	fa01 f302 	lsl.w	r3, r1, r2
 23fd2f0:	ea40 0003 	orr.w	r0, r0, r3
 23fd2f4:	fa21 f304 	lsr.w	r3, r1, r4
 23fd2f8:	ea45 0103 	orr.w	r1, r5, r3
 23fd2fc:	bd30      	pop	{r4, r5, pc}
 23fd2fe:	f1c4 040c 	rsb	r4, r4, #12
 23fd302:	f1c4 0220 	rsb	r2, r4, #32
 23fd306:	fa20 f002 	lsr.w	r0, r0, r2
 23fd30a:	fa01 f304 	lsl.w	r3, r1, r4
 23fd30e:	ea40 0003 	orr.w	r0, r0, r3
 23fd312:	4629      	mov	r1, r5
 23fd314:	bd30      	pop	{r4, r5, pc}
 23fd316:	fa21 f004 	lsr.w	r0, r1, r4
 23fd31a:	4629      	mov	r1, r5
 23fd31c:	bd30      	pop	{r4, r5, pc}
 23fd31e:	f094 0f00 	teq	r4, #0
 23fd322:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fd326:	bf06      	itte	eq
 23fd328:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fd32c:	3401      	addeq	r4, #1
 23fd32e:	3d01      	subne	r5, #1
 23fd330:	e74e      	b.n	23fd1d0 <__adddf3+0x8c>
 23fd332:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fd336:	bf18      	it	ne
 23fd338:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fd33c:	d029      	beq.n	23fd392 <__adddf3+0x24e>
 23fd33e:	ea94 0f05 	teq	r4, r5
 23fd342:	bf08      	it	eq
 23fd344:	ea90 0f02 	teqeq	r0, r2
 23fd348:	d005      	beq.n	23fd356 <__adddf3+0x212>
 23fd34a:	ea54 0c00 	orrs.w	ip, r4, r0
 23fd34e:	bf04      	itt	eq
 23fd350:	4619      	moveq	r1, r3
 23fd352:	4610      	moveq	r0, r2
 23fd354:	bd30      	pop	{r4, r5, pc}
 23fd356:	ea91 0f03 	teq	r1, r3
 23fd35a:	bf1e      	ittt	ne
 23fd35c:	2100      	movne	r1, #0
 23fd35e:	2000      	movne	r0, #0
 23fd360:	bd30      	popne	{r4, r5, pc}
 23fd362:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fd366:	d105      	bne.n	23fd374 <__adddf3+0x230>
 23fd368:	0040      	lsls	r0, r0, #1
 23fd36a:	4149      	adcs	r1, r1
 23fd36c:	bf28      	it	cs
 23fd36e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fd372:	bd30      	pop	{r4, r5, pc}
 23fd374:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fd378:	bf3c      	itt	cc
 23fd37a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fd37e:	bd30      	popcc	{r4, r5, pc}
 23fd380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fd384:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fd388:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fd38c:	f04f 0000 	mov.w	r0, #0
 23fd390:	bd30      	pop	{r4, r5, pc}
 23fd392:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fd396:	bf1a      	itte	ne
 23fd398:	4619      	movne	r1, r3
 23fd39a:	4610      	movne	r0, r2
 23fd39c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fd3a0:	bf1c      	itt	ne
 23fd3a2:	460b      	movne	r3, r1
 23fd3a4:	4602      	movne	r2, r0
 23fd3a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fd3aa:	bf06      	itte	eq
 23fd3ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fd3b0:	ea91 0f03 	teqeq	r1, r3
 23fd3b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fd3b8:	bd30      	pop	{r4, r5, pc}
 23fd3ba:	bf00      	nop

023fd3bc <__aeabi_ui2d>:
 23fd3bc:	f090 0f00 	teq	r0, #0
 23fd3c0:	bf04      	itt	eq
 23fd3c2:	2100      	moveq	r1, #0
 23fd3c4:	4770      	bxeq	lr
 23fd3c6:	b530      	push	{r4, r5, lr}
 23fd3c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fd3cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fd3d0:	f04f 0500 	mov.w	r5, #0
 23fd3d4:	f04f 0100 	mov.w	r1, #0
 23fd3d8:	e750      	b.n	23fd27c <__adddf3+0x138>
 23fd3da:	bf00      	nop

023fd3dc <__aeabi_i2d>:
 23fd3dc:	f090 0f00 	teq	r0, #0
 23fd3e0:	bf04      	itt	eq
 23fd3e2:	2100      	moveq	r1, #0
 23fd3e4:	4770      	bxeq	lr
 23fd3e6:	b530      	push	{r4, r5, lr}
 23fd3e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fd3ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fd3f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fd3f4:	bf48      	it	mi
 23fd3f6:	4240      	negmi	r0, r0
 23fd3f8:	f04f 0100 	mov.w	r1, #0
 23fd3fc:	e73e      	b.n	23fd27c <__adddf3+0x138>
 23fd3fe:	bf00      	nop

023fd400 <__aeabi_f2d>:
 23fd400:	0042      	lsls	r2, r0, #1
 23fd402:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fd406:	ea4f 0131 	mov.w	r1, r1, rrx
 23fd40a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fd40e:	bf1f      	itttt	ne
 23fd410:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fd414:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fd418:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fd41c:	4770      	bxne	lr
 23fd41e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fd422:	bf08      	it	eq
 23fd424:	4770      	bxeq	lr
 23fd426:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fd42a:	bf04      	itt	eq
 23fd42c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fd430:	4770      	bxeq	lr
 23fd432:	b530      	push	{r4, r5, lr}
 23fd434:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fd438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fd43c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fd440:	e71c      	b.n	23fd27c <__adddf3+0x138>
 23fd442:	bf00      	nop

023fd444 <__aeabi_ul2d>:
 23fd444:	ea50 0201 	orrs.w	r2, r0, r1
 23fd448:	bf08      	it	eq
 23fd44a:	4770      	bxeq	lr
 23fd44c:	b530      	push	{r4, r5, lr}
 23fd44e:	f04f 0500 	mov.w	r5, #0
 23fd452:	e00a      	b.n	23fd46a <__aeabi_l2d+0x16>

023fd454 <__aeabi_l2d>:
 23fd454:	ea50 0201 	orrs.w	r2, r0, r1
 23fd458:	bf08      	it	eq
 23fd45a:	4770      	bxeq	lr
 23fd45c:	b530      	push	{r4, r5, lr}
 23fd45e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fd462:	d502      	bpl.n	23fd46a <__aeabi_l2d+0x16>
 23fd464:	4240      	negs	r0, r0
 23fd466:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fd46a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fd46e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fd472:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fd476:	f43f aed8 	beq.w	23fd22a <__adddf3+0xe6>
 23fd47a:	f04f 0203 	mov.w	r2, #3
 23fd47e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fd482:	bf18      	it	ne
 23fd484:	3203      	addne	r2, #3
 23fd486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fd48a:	bf18      	it	ne
 23fd48c:	3203      	addne	r2, #3
 23fd48e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fd492:	f1c2 0320 	rsb	r3, r2, #32
 23fd496:	fa00 fc03 	lsl.w	ip, r0, r3
 23fd49a:	fa20 f002 	lsr.w	r0, r0, r2
 23fd49e:	fa01 fe03 	lsl.w	lr, r1, r3
 23fd4a2:	ea40 000e 	orr.w	r0, r0, lr
 23fd4a6:	fa21 f102 	lsr.w	r1, r1, r2
 23fd4aa:	4414      	add	r4, r2
 23fd4ac:	e6bd      	b.n	23fd22a <__adddf3+0xe6>
 23fd4ae:	bf00      	nop

023fd4b0 <__aeabi_dmul>:
 23fd4b0:	b570      	push	{r4, r5, r6, lr}
 23fd4b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fd4b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fd4ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fd4be:	bf1d      	ittte	ne
 23fd4c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fd4c4:	ea94 0f0c 	teqne	r4, ip
 23fd4c8:	ea95 0f0c 	teqne	r5, ip
 23fd4cc:	f000 f8de 	bleq	23fd68c <__aeabi_dmul+0x1dc>
 23fd4d0:	442c      	add	r4, r5
 23fd4d2:	ea81 0603 	eor.w	r6, r1, r3
 23fd4d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fd4da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fd4de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fd4e2:	bf18      	it	ne
 23fd4e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fd4e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd4ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fd4f0:	d038      	beq.n	23fd564 <__aeabi_dmul+0xb4>
 23fd4f2:	fba0 ce02 	umull	ip, lr, r0, r2
 23fd4f6:	f04f 0500 	mov.w	r5, #0
 23fd4fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fd4fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fd502:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fd506:	f04f 0600 	mov.w	r6, #0
 23fd50a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fd50e:	f09c 0f00 	teq	ip, #0
 23fd512:	bf18      	it	ne
 23fd514:	f04e 0e01 	orrne.w	lr, lr, #1
 23fd518:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fd51c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fd520:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fd524:	d204      	bcs.n	23fd530 <__aeabi_dmul+0x80>
 23fd526:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fd52a:	416d      	adcs	r5, r5
 23fd52c:	eb46 0606 	adc.w	r6, r6, r6
 23fd530:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fd534:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fd538:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fd53c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fd540:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fd544:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fd548:	bf88      	it	hi
 23fd54a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fd54e:	d81e      	bhi.n	23fd58e <__aeabi_dmul+0xde>
 23fd550:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fd554:	bf08      	it	eq
 23fd556:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fd55a:	f150 0000 	adcs.w	r0, r0, #0
 23fd55e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fd562:	bd70      	pop	{r4, r5, r6, pc}
 23fd564:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fd568:	ea46 0101 	orr.w	r1, r6, r1
 23fd56c:	ea40 0002 	orr.w	r0, r0, r2
 23fd570:	ea81 0103 	eor.w	r1, r1, r3
 23fd574:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fd578:	bfc2      	ittt	gt
 23fd57a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fd57e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fd582:	bd70      	popgt	{r4, r5, r6, pc}
 23fd584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd588:	f04f 0e00 	mov.w	lr, #0
 23fd58c:	3c01      	subs	r4, #1
 23fd58e:	f300 80ab 	bgt.w	23fd6e8 <__aeabi_dmul+0x238>
 23fd592:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fd596:	bfde      	ittt	le
 23fd598:	2000      	movle	r0, #0
 23fd59a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fd59e:	bd70      	pople	{r4, r5, r6, pc}
 23fd5a0:	f1c4 0400 	rsb	r4, r4, #0
 23fd5a4:	3c20      	subs	r4, #32
 23fd5a6:	da35      	bge.n	23fd614 <__aeabi_dmul+0x164>
 23fd5a8:	340c      	adds	r4, #12
 23fd5aa:	dc1b      	bgt.n	23fd5e4 <__aeabi_dmul+0x134>
 23fd5ac:	f104 0414 	add.w	r4, r4, #20
 23fd5b0:	f1c4 0520 	rsb	r5, r4, #32
 23fd5b4:	fa00 f305 	lsl.w	r3, r0, r5
 23fd5b8:	fa20 f004 	lsr.w	r0, r0, r4
 23fd5bc:	fa01 f205 	lsl.w	r2, r1, r5
 23fd5c0:	ea40 0002 	orr.w	r0, r0, r2
 23fd5c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fd5c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fd5cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fd5d0:	fa21 f604 	lsr.w	r6, r1, r4
 23fd5d4:	eb42 0106 	adc.w	r1, r2, r6
 23fd5d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fd5dc:	bf08      	it	eq
 23fd5de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fd5e2:	bd70      	pop	{r4, r5, r6, pc}
 23fd5e4:	f1c4 040c 	rsb	r4, r4, #12
 23fd5e8:	f1c4 0520 	rsb	r5, r4, #32
 23fd5ec:	fa00 f304 	lsl.w	r3, r0, r4
 23fd5f0:	fa20 f005 	lsr.w	r0, r0, r5
 23fd5f4:	fa01 f204 	lsl.w	r2, r1, r4
 23fd5f8:	ea40 0002 	orr.w	r0, r0, r2
 23fd5fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fd604:	f141 0100 	adc.w	r1, r1, #0
 23fd608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fd60c:	bf08      	it	eq
 23fd60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fd612:	bd70      	pop	{r4, r5, r6, pc}
 23fd614:	f1c4 0520 	rsb	r5, r4, #32
 23fd618:	fa00 f205 	lsl.w	r2, r0, r5
 23fd61c:	ea4e 0e02 	orr.w	lr, lr, r2
 23fd620:	fa20 f304 	lsr.w	r3, r0, r4
 23fd624:	fa01 f205 	lsl.w	r2, r1, r5
 23fd628:	ea43 0302 	orr.w	r3, r3, r2
 23fd62c:	fa21 f004 	lsr.w	r0, r1, r4
 23fd630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd634:	fa21 f204 	lsr.w	r2, r1, r4
 23fd638:	ea20 0002 	bic.w	r0, r0, r2
 23fd63c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fd640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fd644:	bf08      	it	eq
 23fd646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fd64a:	bd70      	pop	{r4, r5, r6, pc}
 23fd64c:	f094 0f00 	teq	r4, #0
 23fd650:	d10f      	bne.n	23fd672 <__aeabi_dmul+0x1c2>
 23fd652:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fd656:	0040      	lsls	r0, r0, #1
 23fd658:	eb41 0101 	adc.w	r1, r1, r1
 23fd65c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fd660:	bf08      	it	eq
 23fd662:	3c01      	subeq	r4, #1
 23fd664:	d0f7      	beq.n	23fd656 <__aeabi_dmul+0x1a6>
 23fd666:	ea41 0106 	orr.w	r1, r1, r6
 23fd66a:	f095 0f00 	teq	r5, #0
 23fd66e:	bf18      	it	ne
 23fd670:	4770      	bxne	lr
 23fd672:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fd676:	0052      	lsls	r2, r2, #1
 23fd678:	eb43 0303 	adc.w	r3, r3, r3
 23fd67c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fd680:	bf08      	it	eq
 23fd682:	3d01      	subeq	r5, #1
 23fd684:	d0f7      	beq.n	23fd676 <__aeabi_dmul+0x1c6>
 23fd686:	ea43 0306 	orr.w	r3, r3, r6
 23fd68a:	4770      	bx	lr
 23fd68c:	ea94 0f0c 	teq	r4, ip
 23fd690:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fd694:	bf18      	it	ne
 23fd696:	ea95 0f0c 	teqne	r5, ip
 23fd69a:	d00c      	beq.n	23fd6b6 <__aeabi_dmul+0x206>
 23fd69c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fd6a0:	bf18      	it	ne
 23fd6a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fd6a6:	d1d1      	bne.n	23fd64c <__aeabi_dmul+0x19c>
 23fd6a8:	ea81 0103 	eor.w	r1, r1, r3
 23fd6ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd6b0:	f04f 0000 	mov.w	r0, #0
 23fd6b4:	bd70      	pop	{r4, r5, r6, pc}
 23fd6b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fd6ba:	bf06      	itte	eq
 23fd6bc:	4610      	moveq	r0, r2
 23fd6be:	4619      	moveq	r1, r3
 23fd6c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fd6c4:	d019      	beq.n	23fd6fa <__aeabi_dmul+0x24a>
 23fd6c6:	ea94 0f0c 	teq	r4, ip
 23fd6ca:	d102      	bne.n	23fd6d2 <__aeabi_dmul+0x222>
 23fd6cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fd6d0:	d113      	bne.n	23fd6fa <__aeabi_dmul+0x24a>
 23fd6d2:	ea95 0f0c 	teq	r5, ip
 23fd6d6:	d105      	bne.n	23fd6e4 <__aeabi_dmul+0x234>
 23fd6d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fd6dc:	bf1c      	itt	ne
 23fd6de:	4610      	movne	r0, r2
 23fd6e0:	4619      	movne	r1, r3
 23fd6e2:	d10a      	bne.n	23fd6fa <__aeabi_dmul+0x24a>
 23fd6e4:	ea81 0103 	eor.w	r1, r1, r3
 23fd6e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fd6ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fd6f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fd6f4:	f04f 0000 	mov.w	r0, #0
 23fd6f8:	bd70      	pop	{r4, r5, r6, pc}
 23fd6fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fd6fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fd702:	bd70      	pop	{r4, r5, r6, pc}

023fd704 <__aeabi_ddiv>:
 23fd704:	b570      	push	{r4, r5, r6, lr}
 23fd706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fd70a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fd70e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fd712:	bf1d      	ittte	ne
 23fd714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fd718:	ea94 0f0c 	teqne	r4, ip
 23fd71c:	ea95 0f0c 	teqne	r5, ip
 23fd720:	f000 f8a7 	bleq	23fd872 <__aeabi_ddiv+0x16e>
 23fd724:	eba4 0405 	sub.w	r4, r4, r5
 23fd728:	ea81 0e03 	eor.w	lr, r1, r3
 23fd72c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fd730:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fd734:	f000 8088 	beq.w	23fd848 <__aeabi_ddiv+0x144>
 23fd738:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fd73c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fd740:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fd744:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fd748:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fd74c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fd750:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fd754:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fd758:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fd75c:	429d      	cmp	r5, r3
 23fd75e:	bf08      	it	eq
 23fd760:	4296      	cmpeq	r6, r2
 23fd762:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fd766:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fd76a:	d202      	bcs.n	23fd772 <__aeabi_ddiv+0x6e>
 23fd76c:	085b      	lsrs	r3, r3, #1
 23fd76e:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd772:	1ab6      	subs	r6, r6, r2
 23fd774:	eb65 0503 	sbc.w	r5, r5, r3
 23fd778:	085b      	lsrs	r3, r3, #1
 23fd77a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd77e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fd782:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fd786:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd78a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd78e:	bf22      	ittt	cs
 23fd790:	1ab6      	subcs	r6, r6, r2
 23fd792:	4675      	movcs	r5, lr
 23fd794:	ea40 000c 	orrcs.w	r0, r0, ip
 23fd798:	085b      	lsrs	r3, r3, #1
 23fd79a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd79e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd7a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd7a6:	bf22      	ittt	cs
 23fd7a8:	1ab6      	subcs	r6, r6, r2
 23fd7aa:	4675      	movcs	r5, lr
 23fd7ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fd7b0:	085b      	lsrs	r3, r3, #1
 23fd7b2:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd7b6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd7ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd7be:	bf22      	ittt	cs
 23fd7c0:	1ab6      	subcs	r6, r6, r2
 23fd7c2:	4675      	movcs	r5, lr
 23fd7c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fd7c8:	085b      	lsrs	r3, r3, #1
 23fd7ca:	ea4f 0232 	mov.w	r2, r2, rrx
 23fd7ce:	ebb6 0e02 	subs.w	lr, r6, r2
 23fd7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fd7d6:	bf22      	ittt	cs
 23fd7d8:	1ab6      	subcs	r6, r6, r2
 23fd7da:	4675      	movcs	r5, lr
 23fd7dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fd7e0:	ea55 0e06 	orrs.w	lr, r5, r6
 23fd7e4:	d018      	beq.n	23fd818 <__aeabi_ddiv+0x114>
 23fd7e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fd7ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fd7ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fd7f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fd7f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fd7fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fd7fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fd802:	d1c0      	bne.n	23fd786 <__aeabi_ddiv+0x82>
 23fd804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fd808:	d10b      	bne.n	23fd822 <__aeabi_ddiv+0x11e>
 23fd80a:	ea41 0100 	orr.w	r1, r1, r0
 23fd80e:	f04f 0000 	mov.w	r0, #0
 23fd812:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fd816:	e7b6      	b.n	23fd786 <__aeabi_ddiv+0x82>
 23fd818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fd81c:	bf04      	itt	eq
 23fd81e:	4301      	orreq	r1, r0
 23fd820:	2000      	moveq	r0, #0
 23fd822:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fd826:	bf88      	it	hi
 23fd828:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fd82c:	f63f aeaf 	bhi.w	23fd58e <__aeabi_dmul+0xde>
 23fd830:	ebb5 0c03 	subs.w	ip, r5, r3
 23fd834:	bf04      	itt	eq
 23fd836:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fd83a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fd83e:	f150 0000 	adcs.w	r0, r0, #0
 23fd842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fd846:	bd70      	pop	{r4, r5, r6, pc}
 23fd848:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fd84c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fd850:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fd854:	bfc2      	ittt	gt
 23fd856:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fd85a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fd85e:	bd70      	popgt	{r4, r5, r6, pc}
 23fd860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fd864:	f04f 0e00 	mov.w	lr, #0
 23fd868:	3c01      	subs	r4, #1
 23fd86a:	e690      	b.n	23fd58e <__aeabi_dmul+0xde>
 23fd86c:	ea45 0e06 	orr.w	lr, r5, r6
 23fd870:	e68d      	b.n	23fd58e <__aeabi_dmul+0xde>
 23fd872:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fd876:	ea94 0f0c 	teq	r4, ip
 23fd87a:	bf08      	it	eq
 23fd87c:	ea95 0f0c 	teqeq	r5, ip
 23fd880:	f43f af3b 	beq.w	23fd6fa <__aeabi_dmul+0x24a>
 23fd884:	ea94 0f0c 	teq	r4, ip
 23fd888:	d10a      	bne.n	23fd8a0 <__aeabi_ddiv+0x19c>
 23fd88a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fd88e:	f47f af34 	bne.w	23fd6fa <__aeabi_dmul+0x24a>
 23fd892:	ea95 0f0c 	teq	r5, ip
 23fd896:	f47f af25 	bne.w	23fd6e4 <__aeabi_dmul+0x234>
 23fd89a:	4610      	mov	r0, r2
 23fd89c:	4619      	mov	r1, r3
 23fd89e:	e72c      	b.n	23fd6fa <__aeabi_dmul+0x24a>
 23fd8a0:	ea95 0f0c 	teq	r5, ip
 23fd8a4:	d106      	bne.n	23fd8b4 <__aeabi_ddiv+0x1b0>
 23fd8a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fd8aa:	f43f aefd 	beq.w	23fd6a8 <__aeabi_dmul+0x1f8>
 23fd8ae:	4610      	mov	r0, r2
 23fd8b0:	4619      	mov	r1, r3
 23fd8b2:	e722      	b.n	23fd6fa <__aeabi_dmul+0x24a>
 23fd8b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fd8b8:	bf18      	it	ne
 23fd8ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fd8be:	f47f aec5 	bne.w	23fd64c <__aeabi_dmul+0x19c>
 23fd8c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fd8c6:	f47f af0d 	bne.w	23fd6e4 <__aeabi_dmul+0x234>
 23fd8ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fd8ce:	f47f aeeb 	bne.w	23fd6a8 <__aeabi_dmul+0x1f8>
 23fd8d2:	e712      	b.n	23fd6fa <__aeabi_dmul+0x24a>

023fd8d4 <__gedf2>:
 23fd8d4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fd8d8:	e006      	b.n	23fd8e8 <__cmpdf2+0x4>
 23fd8da:	bf00      	nop

023fd8dc <__ledf2>:
 23fd8dc:	f04f 0c01 	mov.w	ip, #1
 23fd8e0:	e002      	b.n	23fd8e8 <__cmpdf2+0x4>
 23fd8e2:	bf00      	nop

023fd8e4 <__cmpdf2>:
 23fd8e4:	f04f 0c01 	mov.w	ip, #1
 23fd8e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fd8ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fd8f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd8f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fd8f8:	bf18      	it	ne
 23fd8fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fd8fe:	d01b      	beq.n	23fd938 <__cmpdf2+0x54>
 23fd900:	b001      	add	sp, #4
 23fd902:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fd906:	bf0c      	ite	eq
 23fd908:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fd90c:	ea91 0f03 	teqne	r1, r3
 23fd910:	bf02      	ittt	eq
 23fd912:	ea90 0f02 	teqeq	r0, r2
 23fd916:	2000      	moveq	r0, #0
 23fd918:	4770      	bxeq	lr
 23fd91a:	f110 0f00 	cmn.w	r0, #0
 23fd91e:	ea91 0f03 	teq	r1, r3
 23fd922:	bf58      	it	pl
 23fd924:	4299      	cmppl	r1, r3
 23fd926:	bf08      	it	eq
 23fd928:	4290      	cmpeq	r0, r2
 23fd92a:	bf2c      	ite	cs
 23fd92c:	17d8      	asrcs	r0, r3, #31
 23fd92e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fd932:	f040 0001 	orr.w	r0, r0, #1
 23fd936:	4770      	bx	lr
 23fd938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fd93c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd940:	d102      	bne.n	23fd948 <__cmpdf2+0x64>
 23fd942:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fd946:	d107      	bne.n	23fd958 <__cmpdf2+0x74>
 23fd948:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fd94c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd950:	d1d6      	bne.n	23fd900 <__cmpdf2+0x1c>
 23fd952:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fd956:	d0d3      	beq.n	23fd900 <__cmpdf2+0x1c>
 23fd958:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fd95c:	4770      	bx	lr
 23fd95e:	bf00      	nop

023fd960 <__aeabi_cdrcmple>:
 23fd960:	4684      	mov	ip, r0
 23fd962:	4610      	mov	r0, r2
 23fd964:	4662      	mov	r2, ip
 23fd966:	468c      	mov	ip, r1
 23fd968:	4619      	mov	r1, r3
 23fd96a:	4663      	mov	r3, ip
 23fd96c:	e000      	b.n	23fd970 <__aeabi_cdcmpeq>
 23fd96e:	bf00      	nop

023fd970 <__aeabi_cdcmpeq>:
 23fd970:	b501      	push	{r0, lr}
 23fd972:	f7ff ffb7 	bl	23fd8e4 <__cmpdf2>
 23fd976:	2800      	cmp	r0, #0
 23fd978:	bf48      	it	mi
 23fd97a:	f110 0f00 	cmnmi.w	r0, #0
 23fd97e:	bd01      	pop	{r0, pc}

023fd980 <__aeabi_dcmpeq>:
 23fd980:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd984:	f7ff fff4 	bl	23fd970 <__aeabi_cdcmpeq>
 23fd988:	bf0c      	ite	eq
 23fd98a:	2001      	moveq	r0, #1
 23fd98c:	2000      	movne	r0, #0
 23fd98e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd992:	bf00      	nop

023fd994 <__aeabi_dcmplt>:
 23fd994:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd998:	f7ff ffea 	bl	23fd970 <__aeabi_cdcmpeq>
 23fd99c:	bf34      	ite	cc
 23fd99e:	2001      	movcc	r0, #1
 23fd9a0:	2000      	movcs	r0, #0
 23fd9a2:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd9a6:	bf00      	nop

023fd9a8 <__aeabi_dcmple>:
 23fd9a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd9ac:	f7ff ffe0 	bl	23fd970 <__aeabi_cdcmpeq>
 23fd9b0:	bf94      	ite	ls
 23fd9b2:	2001      	movls	r0, #1
 23fd9b4:	2000      	movhi	r0, #0
 23fd9b6:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd9ba:	bf00      	nop

023fd9bc <__aeabi_dcmpge>:
 23fd9bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd9c0:	f7ff ffce 	bl	23fd960 <__aeabi_cdrcmple>
 23fd9c4:	bf94      	ite	ls
 23fd9c6:	2001      	movls	r0, #1
 23fd9c8:	2000      	movhi	r0, #0
 23fd9ca:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd9ce:	bf00      	nop

023fd9d0 <__aeabi_dcmpgt>:
 23fd9d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fd9d4:	f7ff ffc4 	bl	23fd960 <__aeabi_cdrcmple>
 23fd9d8:	bf34      	ite	cc
 23fd9da:	2001      	movcc	r0, #1
 23fd9dc:	2000      	movcs	r0, #0
 23fd9de:	f85d fb08 	ldr.w	pc, [sp], #8
 23fd9e2:	bf00      	nop

023fd9e4 <__aeabi_dcmpun>:
 23fd9e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fd9e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd9ec:	d102      	bne.n	23fd9f4 <__aeabi_dcmpun+0x10>
 23fd9ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fd9f2:	d10a      	bne.n	23fda0a <__aeabi_dcmpun+0x26>
 23fd9f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fd9f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fd9fc:	d102      	bne.n	23fda04 <__aeabi_dcmpun+0x20>
 23fd9fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fda02:	d102      	bne.n	23fda0a <__aeabi_dcmpun+0x26>
 23fda04:	f04f 0000 	mov.w	r0, #0
 23fda08:	4770      	bx	lr
 23fda0a:	f04f 0001 	mov.w	r0, #1
 23fda0e:	4770      	bx	lr

023fda10 <__aeabi_d2iz>:
 23fda10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fda14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fda18:	d215      	bcs.n	23fda46 <__aeabi_d2iz+0x36>
 23fda1a:	d511      	bpl.n	23fda40 <__aeabi_d2iz+0x30>
 23fda1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fda20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fda24:	d912      	bls.n	23fda4c <__aeabi_d2iz+0x3c>
 23fda26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fda2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fda2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fda32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fda36:	fa23 f002 	lsr.w	r0, r3, r2
 23fda3a:	bf18      	it	ne
 23fda3c:	4240      	negne	r0, r0
 23fda3e:	4770      	bx	lr
 23fda40:	f04f 0000 	mov.w	r0, #0
 23fda44:	4770      	bx	lr
 23fda46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fda4a:	d105      	bne.n	23fda58 <__aeabi_d2iz+0x48>
 23fda4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23fda50:	bf08      	it	eq
 23fda52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23fda56:	4770      	bx	lr
 23fda58:	f04f 0000 	mov.w	r0, #0
 23fda5c:	4770      	bx	lr
 23fda5e:	bf00      	nop

023fda60 <__aeabi_d2uiz>:
 23fda60:	004a      	lsls	r2, r1, #1
 23fda62:	d211      	bcs.n	23fda88 <__aeabi_d2uiz+0x28>
 23fda64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fda68:	d211      	bcs.n	23fda8e <__aeabi_d2uiz+0x2e>
 23fda6a:	d50d      	bpl.n	23fda88 <__aeabi_d2uiz+0x28>
 23fda6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fda70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fda74:	d40e      	bmi.n	23fda94 <__aeabi_d2uiz+0x34>
 23fda76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fda7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fda7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fda82:	fa23 f002 	lsr.w	r0, r3, r2
 23fda86:	4770      	bx	lr
 23fda88:	f04f 0000 	mov.w	r0, #0
 23fda8c:	4770      	bx	lr
 23fda8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fda92:	d102      	bne.n	23fda9a <__aeabi_d2uiz+0x3a>
 23fda94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fda98:	4770      	bx	lr
 23fda9a:	f04f 0000 	mov.w	r0, #0
 23fda9e:	4770      	bx	lr

023fdaa0 <__aeabi_d2f>:
 23fdaa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23fdaa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23fdaa8:	bf24      	itt	cs
 23fdaaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23fdaae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23fdab2:	d90d      	bls.n	23fdad0 <__aeabi_d2f+0x30>
 23fdab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23fdab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23fdabc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23fdac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23fdac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23fdac8:	bf08      	it	eq
 23fdaca:	f020 0001 	biceq.w	r0, r0, #1
 23fdace:	4770      	bx	lr
 23fdad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23fdad4:	d121      	bne.n	23fdb1a <__aeabi_d2f+0x7a>
 23fdad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23fdada:	bfbc      	itt	lt
 23fdadc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23fdae0:	4770      	bxlt	lr
 23fdae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fdae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23fdaea:	f1c2 0218 	rsb	r2, r2, #24
 23fdaee:	f1c2 0c20 	rsb	ip, r2, #32
 23fdaf2:	fa10 f30c 	lsls.w	r3, r0, ip
 23fdaf6:	fa20 f002 	lsr.w	r0, r0, r2
 23fdafa:	bf18      	it	ne
 23fdafc:	f040 0001 	orrne.w	r0, r0, #1
 23fdb00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fdb04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23fdb08:	fa03 fc0c 	lsl.w	ip, r3, ip
 23fdb0c:	ea40 000c 	orr.w	r0, r0, ip
 23fdb10:	fa23 f302 	lsr.w	r3, r3, r2
 23fdb14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23fdb18:	e7cc      	b.n	23fdab4 <__aeabi_d2f+0x14>
 23fdb1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23fdb1e:	d107      	bne.n	23fdb30 <__aeabi_d2f+0x90>
 23fdb20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23fdb24:	bf1e      	ittt	ne
 23fdb26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23fdb2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23fdb2e:	4770      	bxne	lr
 23fdb30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23fdb34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23fdb38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23fdb3c:	4770      	bx	lr
 23fdb3e:	bf00      	nop

023fdb40 <strlen>:
 23fdb40:	4603      	mov	r3, r0
 23fdb42:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fdb46:	2a00      	cmp	r2, #0
 23fdb48:	d1fb      	bne.n	23fdb42 <strlen+0x2>
 23fdb4a:	1a18      	subs	r0, r3, r0
 23fdb4c:	3801      	subs	r0, #1
 23fdb4e:	4770      	bx	lr

023fdb50 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fdb50:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fdb52:	f001 fecf 	bl	23ff8f4 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fdb56:	2500      	movs	r5, #0
 23fdb58:	4e05      	ldr	r6, [pc, #20]	; (23fdb70 <module_user_init+0x20>)
 23fdb5a:	4c06      	ldr	r4, [pc, #24]	; (23fdb74 <module_user_init+0x24>)
 23fdb5c:	1ba4      	subs	r4, r4, r6
 23fdb5e:	08a4      	lsrs	r4, r4, #2
 23fdb60:	42ac      	cmp	r4, r5
 23fdb62:	d100      	bne.n	23fdb66 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fdb64:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fdb66:	f856 3b04 	ldr.w	r3, [r6], #4
 23fdb6a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fdb6c:	3501      	adds	r5, #1
 23fdb6e:	e7f7      	b.n	23fdb60 <module_user_init+0x10>
 23fdb70:	023fffd8 	.word	0x023fffd8
 23fdb74:	023ffffc 	.word	0x023ffffc

023fdb78 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fdb78:	f000 b814 	b.w	23fdba4 <setup>

023fdb7c <module_user_loop>:
}

void module_user_loop() {
 23fdb7c:	b508      	push	{r3, lr}
    loop();
 23fdb7e:	f000 f8d7 	bl	23fdd30 <loop>
    _post_loop();
}
 23fdb82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fdb86:	f001 be6d 	b.w	23ff864 <_post_loop>

023fdb8a <_Znaj>:
 23fdb8a:	f001 b8d7 	b.w	23fed3c <malloc>

023fdb8e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fdb8e:	f001 b8e3 	b.w	23fed58 <free>

023fdb92 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fdb92:	7800      	ldrb	r0, [r0, #0]
 23fdb94:	fab0 f080 	clz	r0, r0
 23fdb98:	0940      	lsrs	r0, r0, #5
 23fdb9a:	4770      	bx	lr

023fdb9c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fdb9c:	2301      	movs	r3, #1
 23fdb9e:	7003      	strb	r3, [r0, #0]
 23fdba0:	4770      	bx	lr
	...

023fdba4 <setup>:
static eeprom7_t eeprom7;       //from eeprom7 main.c
static temphum13_t temphum13;   //from temphum13 main.c


void setup() 
{
 23fdba4:	b510      	push	{r4, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 23fdba6:	2400      	movs	r4, #0
 23fdba8:	b08c      	sub	sp, #48	; 0x30

  Serial.begin(9600);
 23fdbaa:	f001 fdcb 	bl	23ff744 <_Z16_fetch_usbserialv>
 23fdbae:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fdbb2:	f001 fdbb 	bl	23ff72c <_ZN9USBSerial5beginEl>
  Particle.disconnect();
 23fdbb6:	a808      	add	r0, sp, #32
 23fdbb8:	e9cd 4408 	strd	r4, r4, [sp, #32]
        bool clearSession) :
 23fdbbc:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
 23fdbc0:	f001 f900 	bl	23fedc4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 23fdbc4:	4819      	ldr	r0, [pc, #100]	; (23fdc2c <setup+0x88>)
 23fdbc6:	4622      	mov	r2, r4
 23fdbc8:	4623      	mov	r3, r4
 23fdbca:	4621      	mov	r1, r4
 23fdbcc:	6840      	ldr	r0, [r0, #4]
 23fdbce:	f001 f853 	bl	23fec78 <network_off>
  WiFi.off();

//from ac current
  accurrent_cfg_t accurrent_cfg;
  accurrent_cfg_setup( &accurrent_cfg ); 
 23fdbd2:	a804      	add	r0, sp, #16
 23fdbd4:	f000 f8d0 	bl	23fdd78 <accurrent_cfg_setup>
  ACCURRENT_MAP_MIKROBUS( accurrent_cfg, MIKROBUS_1 );
 23fdbd8:	4b15      	ldr	r3, [pc, #84]	; (23fdc30 <setup+0x8c>)
  accurrent_init( &accurrent, &accurrent_cfg );
 23fdbda:	a904      	add	r1, sp, #16
  ACCURRENT_MAP_MIKROBUS( accurrent_cfg, MIKROBUS_1 );
 23fdbdc:	9304      	str	r3, [sp, #16]
 23fdbde:	230b      	movs	r3, #11
  accurrent_init( &accurrent, &accurrent_cfg );
 23fdbe0:	4814      	ldr	r0, [pc, #80]	; (23fdc34 <setup+0x90>)
  ACCURRENT_MAP_MIKROBUS( accurrent_cfg, MIKROBUS_1 );
 23fdbe2:	f88d 3014 	strb.w	r3, [sp, #20]
  accurrent_init( &accurrent, &accurrent_cfg );
 23fdbe6:	f000 f8d3 	bl	23fdd90 <accurrent_init>

//from eeprom7
  eeprom7_cfg_t eeprom7_cfg;  //Click config object
  eeprom7_cfg_setup( &eeprom7_cfg );
 23fdbea:	a808      	add	r0, sp, #32
 23fdbec:	f000 f950 	bl	23fde90 <_Z17eeprom7_cfg_setupP13eeprom7_cfg_t>
  EEPROM7_MAP_MIKROBUS( eeprom7_cfg, MIKROBUS_2 );
 23fdbf0:	4b11      	ldr	r3, [pc, #68]	; (23fdc38 <setup+0x94>)
  eeprom7_init( &eeprom7, &eeprom7_cfg );
 23fdbf2:	4c12      	ldr	r4, [pc, #72]	; (23fdc3c <setup+0x98>)
  EEPROM7_MAP_MIKROBUS( eeprom7_cfg, MIKROBUS_2 );
 23fdbf4:	9308      	str	r3, [sp, #32]
 23fdbf6:	f640 2307 	movw	r3, #2567	; 0xa07
  eeprom7_init( &eeprom7, &eeprom7_cfg );
 23fdbfa:	a908      	add	r1, sp, #32
 23fdbfc:	4620      	mov	r0, r4
  EEPROM7_MAP_MIKROBUS( eeprom7_cfg, MIKROBUS_2 );
 23fdbfe:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  eeprom7_init( &eeprom7, &eeprom7_cfg );
 23fdc02:	f000 f951 	bl	23fdea8 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t>
  eeprom7_default_cfg ( &eeprom7 );
 23fdc06:	4620      	mov	r0, r4
 23fdc08:	f000 f9eb 	bl	23fdfe2 <_Z19eeprom7_default_cfgP9eeprom7_t>

//from temphum13
  temphum13_cfg_t temphum13_cfg;
  temphum13_cfg_setup( &temphum13_cfg );
 23fdc0c:	a801      	add	r0, sp, #4
 23fdc0e:	f000 fc36 	bl	23fe47e <temphum13_cfg_setup>
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fdc12:	2301      	movs	r3, #1
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fdc14:	4c0a      	ldr	r4, [pc, #40]	; (23fdc40 <setup+0x9c>)
 23fdc16:	a901      	add	r1, sp, #4
 23fdc18:	4620      	mov	r0, r4
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fdc1a:	f8ad 3004 	strh.w	r3, [sp, #4]
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fdc1e:	f000 fc36 	bl	23fe48e <temphum13_init>
  temphum13_default_cfg( &temphum13 );
 23fdc22:	4620      	mov	r0, r4
 23fdc24:	f000 fce0 	bl	23fe5e8 <temphum13_default_cfg>

}
 23fdc28:	b00c      	add	sp, #48	; 0x30
 23fdc2a:	bd10      	pop	{r4, pc}
 23fdc2c:	1007aee0 	.word	0x1007aee0
 23fdc30:	12110f10 	.word	0x12110f10
 23fdc34:	1007ae48 	.word	0x1007ae48
 23fdc38:	05110f10 	.word	0x05110f10
 23fdc3c:	1007ae34 	.word	0x1007ae34
 23fdc40:	1007ae5c 	.word	0x1007ae5c

023fdc44 <_Z14ACcurrent_mainv>:

}

//accurrent main.c example
void ACcurrent_main()
{
 23fdc44:	b507      	push	{r0, r1, r2, lr}
  float ac_current;
  ac_current = accurrent_get_ma( &accurrent );
 23fdc46:	480c      	ldr	r0, [pc, #48]	; (23fdc78 <_Z14ACcurrent_mainv+0x34>)
 23fdc48:	f000 f8e0 	bl	23fde0c <accurrent_get_ma>
 23fdc4c:	ed8d 0a01 	vstr	s0, [sp, #4]
  Serial.print("Current value = ");
 23fdc50:	f001 fd78 	bl	23ff744 <_Z16_fetch_usbserialv>
 23fdc54:	4909      	ldr	r1, [pc, #36]	; (23fdc7c <_Z14ACcurrent_mainv+0x38>)
 23fdc56:	f001 faed 	bl	23ff234 <_ZN5Print5printEPKc>
	Serial.print(ac_current, DEC); 
 23fdc5a:	f001 fd73 	bl	23ff744 <_Z16_fetch_usbserialv>
 23fdc5e:	210a      	movs	r1, #10
 23fdc60:	ed9d 0a01 	vldr	s0, [sp, #4]
 23fdc64:	f001 fbea 	bl	23ff43c <_ZN5Print5printEfi>
	Serial.println("");
 23fdc68:	f001 fd6c 	bl	23ff744 <_Z16_fetch_usbserialv>
 23fdc6c:	4904      	ldr	r1, [pc, #16]	; (23fdc80 <_Z14ACcurrent_mainv+0x3c>)
}
 23fdc6e:	b003      	add	sp, #12
 23fdc70:	f85d eb04 	ldr.w	lr, [sp], #4
	Serial.println("");
 23fdc74:	f001 baf1 	b.w	23ff25a <_ZN5Print7printlnEPKc>
 23fdc78:	1007ae48 	.word	0x1007ae48
 23fdc7c:	023ffda0 	.word	0x023ffda0
 23fdc80:	023ffdb0 	.word	0x023ffdb0

023fdc84 <_Z14temphum13_mainv>:

}

//temphum13 main.c example
void temphum13_main()
{
 23fdc84:	b538      	push	{r3, r4, r5, lr}
  static float temperature;
  static float humidity;

  temperature = temphum13_get_temperature( &temphum13 );
 23fdc86:	4823      	ldr	r0, [pc, #140]	; (23fdd14 <_Z14temphum13_mainv+0x90>)
{
 23fdc88:	ed2d 8b02 	vpush	{d8}
  temperature = temphum13_get_temperature( &temphum13 );
 23fdc8c:	f000 fc3c 	bl	23fe508 <temphum13_get_temperature>
 23fdc90:	4d21      	ldr	r5, [pc, #132]	; (23fdd18 <_Z14temphum13_mainv+0x94>)
  humidity = temphum13_get_humidity( &temphum13 );
 23fdc92:	4820      	ldr	r0, [pc, #128]	; (23fdd14 <_Z14temphum13_mainv+0x90>)
  temperature = temphum13_get_temperature( &temphum13 );
 23fdc94:	ed85 0a00 	vstr	s0, [r5]
    
  if ( temperature != 65536.0 )
 23fdc98:	ed9f 8a20 	vldr	s16, [pc, #128]	; 23fdd1c <_Z14temphum13_mainv+0x98>
  humidity = temphum13_get_humidity( &temphum13 );
 23fdc9c:	f000 fc72 	bl	23fe584 <temphum13_get_humidity>
  if ( temperature != 65536.0 )
 23fdca0:	edd5 7a00 	vldr	s15, [r5]
 23fdca4:	eef4 7a48 	vcmp.f32	s15, s16
 23fdca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  humidity = temphum13_get_humidity( &temphum13 );
 23fdcac:	4c1c      	ldr	r4, [pc, #112]	; (23fdd20 <_Z14temphum13_mainv+0x9c>)
 23fdcae:	ed84 0a00 	vstr	s0, [r4]
  if ( temperature != 65536.0 )
 23fdcb2:	d010      	beq.n	23fdcd6 <_Z14temphum13_mainv+0x52>
  {
    Serial.print("Temp in Celcuis = ");
 23fdcb4:	f001 fd46 	bl	23ff744 <_Z16_fetch_usbserialv>
 23fdcb8:	491a      	ldr	r1, [pc, #104]	; (23fdd24 <_Z14temphum13_mainv+0xa0>)
 23fdcba:	f001 fabb 	bl	23ff234 <_ZN5Print5printEPKc>
	  Serial.print(temperature, DEC); 
 23fdcbe:	f001 fd41 	bl	23ff744 <_Z16_fetch_usbserialv>
 23fdcc2:	210a      	movs	r1, #10
 23fdcc4:	ed95 0a00 	vldr	s0, [r5]
 23fdcc8:	f001 fbb8 	bl	23ff43c <_ZN5Print5printEfi>
	  Serial.println("");
 23fdccc:	f001 fd3a 	bl	23ff744 <_Z16_fetch_usbserialv>
 23fdcd0:	4915      	ldr	r1, [pc, #84]	; (23fdd28 <_Z14temphum13_mainv+0xa4>)
 23fdcd2:	f001 fac2 	bl	23ff25a <_ZN5Print7printlnEPKc>
  }

  if ( humidity != 65536.0 )
 23fdcd6:	edd4 7a00 	vldr	s15, [r4]
 23fdcda:	eef4 7a48 	vcmp.f32	s15, s16
 23fdcde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fdce2:	d014      	beq.n	23fdd0e <_Z14temphum13_mainv+0x8a>
  {       
    Serial.print("Relative Humidity = ");
 23fdce4:	f001 fd2e 	bl	23ff744 <_Z16_fetch_usbserialv>
 23fdce8:	4910      	ldr	r1, [pc, #64]	; (23fdd2c <_Z14temphum13_mainv+0xa8>)
 23fdcea:	f001 faa3 	bl	23ff234 <_ZN5Print5printEPKc>
	  Serial.print(humidity, DEC); 
 23fdcee:	f001 fd29 	bl	23ff744 <_Z16_fetch_usbserialv>
 23fdcf2:	210a      	movs	r1, #10
 23fdcf4:	ed94 0a00 	vldr	s0, [r4]
 23fdcf8:	f001 fba0 	bl	23ff43c <_ZN5Print5printEfi>
	  Serial.println("");
 23fdcfc:	f001 fd22 	bl	23ff744 <_Z16_fetch_usbserialv>
  } 
}
 23fdd00:	ecbd 8b02 	vpop	{d8}
 23fdd04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	  Serial.println("");
 23fdd08:	4907      	ldr	r1, [pc, #28]	; (23fdd28 <_Z14temphum13_mainv+0xa4>)
 23fdd0a:	f001 baa6 	b.w	23ff25a <_ZN5Print7printlnEPKc>
}
 23fdd0e:	ecbd 8b02 	vpop	{d8}
 23fdd12:	bd38      	pop	{r3, r4, r5, pc}
 23fdd14:	1007ae5c 	.word	0x1007ae5c
 23fdd18:	1007ae6c 	.word	0x1007ae6c
 23fdd1c:	47800000 	.word	0x47800000
 23fdd20:	1007ae70 	.word	0x1007ae70
 23fdd24:	023ffdb1 	.word	0x023ffdb1
 23fdd28:	023ffdb0 	.word	0x023ffdb0
 23fdd2c:	023ffdc4 	.word	0x023ffdc4

023fdd30 <loop>:
void loop() {
 23fdd30:	b508      	push	{r3, lr}
  ACcurrent_main();
 23fdd32:	f7ff ff87 	bl	23fdc44 <_Z14ACcurrent_mainv>

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
 23fdd36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fdd3a:	f001 f837 	bl	23fedac <delay>
  temphum13_main();
 23fdd3e:	f7ff ffa1 	bl	23fdc84 <_Z14temphum13_mainv>
}
 23fdd42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay (500);
 23fdd46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fdd4a:	f001 b82f 	b.w	23fedac <delay>
	...

023fdd50 <_GLOBAL__sub_I_SystemMode>:
  i2c_master_set_speed(NULL, 1000000);
  i2c_master_open(NULL, NULL);
  i2c_master_set_slave_address(NULL, 0x50);
  i2c_master_write(NULL, text, 6);
  i2c_master_close(NULL);
}
 23fdd50:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fdd52:	2400      	movs	r4, #0
 23fdd54:	4b06      	ldr	r3, [pc, #24]	; (23fdd70 <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
 23fdd56:	4a07      	ldr	r2, [pc, #28]	; (23fdd74 <_GLOBAL__sub_I_SystemMode+0x24>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fdd58:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 23fdd5a:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fdd5e:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fdd60:	f000 fee2 	bl	23feb28 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fdd64:	4621      	mov	r1, r4
}
 23fdd66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
 23fdd6a:	2001      	movs	r0, #1
 23fdd6c:	f000 bef8 	b.w	23feb60 <system_thread_set_state>
 23fdd70:	1007ae28 	.word	0x1007ae28
 23fdd74:	ffff0000 	.word	0xffff0000

023fdd78 <accurrent_cfg_setup>:
void accurrent_cfg_setup ( accurrent_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->sck = HAL_PIN_NC;
    cfg->miso = HAL_PIN_NC;
 23fdd78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fdd7c:	6003      	str	r3, [r0, #0]
    cfg->mosi = HAL_PIN_NC;
    cfg->cs = HAL_PIN_NC;

    // Additional gpio pins

    cfg->an = HAL_PIN_NC;
 23fdd7e:	7103      	strb	r3, [r0, #4]

    cfg->spi_mode = SPI_MASTER_MODE_0;
    cfg->cs_polarity = SPI_MASTER_CHIP_SELECT_POLARITY_ACTIVE_LOW;
    cfg->spi_speed = 100000; 
 23fdd80:	4b02      	ldr	r3, [pc, #8]	; (23fdd8c <accurrent_cfg_setup+0x14>)
 23fdd82:	6083      	str	r3, [r0, #8]
    cfg->spi_mode = SPI_MASTER_MODE_0;
 23fdd84:	2300      	movs	r3, #0
 23fdd86:	8183      	strh	r3, [r0, #12]
}
 23fdd88:	4770      	bx	lr
 23fdd8a:	bf00      	nop
 23fdd8c:	000186a0 	.word	0x000186a0

023fdd90 <accurrent_init>:

ACCURRENT_RETVAL accurrent_init ( accurrent_t *ctx, accurrent_cfg_t *cfg )
{
 23fdd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdd92:	460c      	mov	r4, r1
 23fdd94:	4605      	mov	r5, r0
    spi_cfg.speed     = cfg->spi_speed;
    spi_cfg.mode      = cfg->spi_mode;
    spi_cfg.sck       = cfg->sck;
    spi_cfg.miso      = cfg->miso;
    spi_cfg.mosi      = cfg->mosi;
    spi_cfg.default_write_data = ACCURRENT_DUMMY;
 23fdd96:	2600      	movs	r6, #0
{
 23fdd98:	b085      	sub	sp, #20
    spi_master_configure_default( &spi_cfg );
 23fdd9a:	a801      	add	r0, sp, #4
 23fdd9c:	f000 fa26 	bl	23fe1ec <_Z28spi_master_configure_defaultP19spi_master_config_t>
    spi_cfg.speed     = cfg->spi_speed;
 23fdda0:	68a3      	ldr	r3, [r4, #8]

    digital_out_init( &ctx->cs, cfg->cs );
 23fdda2:	78e1      	ldrb	r1, [r4, #3]
    spi_cfg.speed     = cfg->spi_speed;
 23fdda4:	9302      	str	r3, [sp, #8]
    spi_cfg.mode      = cfg->spi_mode;
 23fdda6:	7b23      	ldrb	r3, [r4, #12]
    digital_out_init( &ctx->cs, cfg->cs );
 23fdda8:	4628      	mov	r0, r5
    spi_cfg.mode      = cfg->spi_mode;
 23fddaa:	f88d 300c 	strb.w	r3, [sp, #12]
    spi_cfg.sck       = cfg->sck;
 23fddae:	78a3      	ldrb	r3, [r4, #2]
    spi_cfg.default_write_data = ACCURRENT_DUMMY;
 23fddb0:	f88d 6004 	strb.w	r6, [sp, #4]
    spi_cfg.sck       = cfg->sck;
 23fddb4:	f88d 3005 	strb.w	r3, [sp, #5]
    spi_cfg.miso      = cfg->miso;
 23fddb8:	8823      	ldrh	r3, [r4, #0]
    ctx->chip_select = cfg->cs;

    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fddba:	1d2f      	adds	r7, r5, #4
    spi_cfg.miso      = cfg->miso;
 23fddbc:	f8ad 3006 	strh.w	r3, [sp, #6]
    digital_out_init( &ctx->cs, cfg->cs );
 23fddc0:	f000 f92d 	bl	23fe01e <_Z16digital_out_initP13digital_out_th>
    ctx->chip_select = cfg->cs;
 23fddc4:	78e3      	ldrb	r3, [r4, #3]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fddc6:	4638      	mov	r0, r7
    ctx->chip_select = cfg->cs;
 23fddc8:	742b      	strb	r3, [r5, #16]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR )
 23fddca:	a901      	add	r1, sp, #4
 23fddcc:	f000 f9f4 	bl	23fe1b8 <_Z15spi_master_openP12spi_master_tP19spi_master_config_t>
 23fddd0:	3001      	adds	r0, #1
 23fddd2:	d019      	beq.n	23fde08 <accurrent_init+0x78>
    {
        return ACCURRENT_INIT_ERROR;
    }

    spi_master_set_default_write_data( &ctx->spi, ACCURRENT_DUMMY );
 23fddd4:	4631      	mov	r1, r6
 23fddd6:	4638      	mov	r0, r7
 23fddd8:	f000 f9d2 	bl	23fe180 <_Z33spi_master_set_default_write_dataP12spi_master_th>
    spi_master_set_mode( &ctx->spi, spi_cfg.mode );
 23fdddc:	f89d 100c 	ldrb.w	r1, [sp, #12]
 23fdde0:	4638      	mov	r0, r7
 23fdde2:	f000 fa27 	bl	23fe234 <_Z19spi_master_set_modeP12spi_master_th>
    spi_master_set_speed( &ctx->spi, spi_cfg.speed );
 23fdde6:	9902      	ldr	r1, [sp, #8]
 23fdde8:	4638      	mov	r0, r7
 23fddea:	f000 fa2e 	bl	23fe24a <_Z20spi_master_set_speedP12spi_master_tm>
    spi_master_set_chip_select_polarity( cfg->cs_polarity );
 23fddee:	7b60      	ldrb	r0, [r4, #13]
 23fddf0:	f000 f9be 	bl	23fe170 <_Z35spi_master_set_chip_select_polarityh>

    digital_in_init( &ctx->an, cfg->an );
 23fddf4:	7921      	ldrb	r1, [r4, #4]
 23fddf6:	1ca8      	adds	r0, r5, #2
 23fddf8:	f000 f906 	bl	23fe008 <_Z15digital_in_initP12digital_in_th>
    spi_master_deselect_device( ctx->chip_select );  
 23fddfc:	7c28      	ldrb	r0, [r5, #16]
 23fddfe:	f000 f9a5 	bl	23fe14c <_Z26spi_master_deselect_deviceh>

    return ACCURRENT_OK;
 23fde02:	4630      	mov	r0, r6
}
 23fde04:	b005      	add	sp, #20
 23fde06:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return ACCURRENT_INIT_ERROR;
 23fde08:	20ff      	movs	r0, #255	; 0xff
 23fde0a:	e7fb      	b.n	23fde04 <accurrent_init+0x74>

023fde0c <accurrent_get_ma>:
    spi_master_write_then_read( &ctx->spi, wr_buf, wr_len, rd_buf, rd_len );
    spi_master_deselect_device( ctx->chip_select );   
}

float accurrent_get_ma ( accurrent_t *ctx )
{
 23fde0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fde0e:	4606      	mov	r6, r0
 23fde10:	250a      	movs	r5, #10

    // Initialize variables
    msb_mask = 0x00;
    tmp = 0;
    avg = 0;
    sum = 0;
 23fde12:	2400      	movs	r4, #0
{
 23fde14:	b085      	sub	sp, #20
        
    // SPI reading
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
    {
        spi_master_select_device( ctx->chip_select );
        spi_master_read( &ctx->spi, buffer, 2 );
 23fde16:	1d07      	adds	r7, r0, #4
        spi_master_select_device( ctx->chip_select );
 23fde18:	7c30      	ldrb	r0, [r6, #16]
 23fde1a:	f000 f987 	bl	23fe12c <_Z24spi_master_select_deviceh>
        spi_master_read( &ctx->spi, buffer, 2 );
 23fde1e:	2202      	movs	r2, #2
 23fde20:	a901      	add	r1, sp, #4
 23fde22:	4638      	mov	r0, r7
 23fde24:	f000 fa9c 	bl	23fe360 <_Z15spi_master_readP12spi_master_tPhj>
        spi_master_deselect_device( ctx->chip_select );
 23fde28:	7c30      	ldrb	r0, [r6, #16]
 23fde2a:	f000 f98f 	bl	23fe14c <_Z26spi_master_deselect_deviceh>
        
        // Reading most significant and least significant bytes
        read_msb = buffer[ 0 ] & msb_mask;
 23fde2e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fde32:	3d01      	subs	r5, #1
        read_lsb = buffer[ 1 ];
        
        // Forming ADC_CONVERSION_SIZE
        tmp = ( ( read_msb & msb_mask ) << 8 );
 23fde34:	f003 021f 	and.w	r2, r3, #31
        tmp =  tmp | read_lsb;
 23fde38:	f89d 3005 	ldrb.w	r3, [sp, #5]
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fde3c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
        tmp =  tmp | read_lsb;
 23fde40:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        
        sum = sum + tmp;                            // Sum of the ADC readings
 23fde44:	441c      	add	r4, r3
 23fde46:	b2a4      	uxth	r4, r4
    for( i = 0; i < ACCURRENT_ADC_ITERATION_SIZE; i++ )
 23fde48:	d1e6      	bne.n	23fde18 <accurrent_get_ma+0xc>
    }
    
    // Average ADC value based on sum of the ADC readings
    avg = ( float ) ( sum / ACCURRENT_ADC_ITERATION_SIZE );
 23fde4a:	230a      	movs	r3, #10
 23fde4c:	fbb4 f4f3 	udiv	r4, r4, r3
 23fde50:	ee07 4a90 	vmov	s15, r4
    avg = ( avg / max_val ) * 8.25 * 1000;
 23fde54:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 23fde84 <accurrent_get_ma+0x78>
    avg = ( float ) ( sum / ACCURRENT_ADC_ITERATION_SIZE );
 23fde58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    avg = ( avg / max_val ) * 8.25 * 1000;
 23fde5c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 23fde60:	ee17 0a90 	vmov	r0, s15
 23fde64:	f7ff facc 	bl	23fd400 <__aeabi_f2d>
 23fde68:	2200      	movs	r2, #0
 23fde6a:	4b07      	ldr	r3, [pc, #28]	; (23fde88 <accurrent_get_ma+0x7c>)
 23fde6c:	f7ff fb20 	bl	23fd4b0 <__aeabi_dmul>
 23fde70:	2200      	movs	r2, #0
 23fde72:	4b06      	ldr	r3, [pc, #24]	; (23fde8c <accurrent_get_ma+0x80>)
 23fde74:	f7ff fb1c 	bl	23fd4b0 <__aeabi_dmul>
 23fde78:	f7ff fe12 	bl	23fdaa0 <__aeabi_d2f>

    return avg;                                   // Returns the average ADC value
}
 23fde7c:	ee00 0a10 	vmov	s0, r0
 23fde80:	b005      	add	sp, #20
 23fde82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fde84:	457ff000 	.word	0x457ff000
 23fde88:	40208000 	.word	0x40208000
 23fde8c:	408f4000 	.word	0x408f4000

023fde90 <_Z17eeprom7_cfg_setupP13eeprom7_cfg_t>:
 */
#define DUMMY  0x00

void eeprom7_cfg_setup ( eeprom7_cfg_t *cfg ) {
    cfg->sck  = HAL_PIN_NC;
    cfg->miso = HAL_PIN_NC;
 23fde90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 23fde94:	6003      	str	r3, [r0, #0]
    cfg->mosi = HAL_PIN_NC;
    cfg->cs   = HAL_PIN_NC;
    cfg->wp = HAL_PIN_NC;
 23fde96:	8083      	strh	r3, [r0, #4]
    cfg->hld = HAL_PIN_NC;

    cfg->spi_speed   = 100000;
 23fde98:	4b02      	ldr	r3, [pc, #8]	; (23fdea4 <_Z17eeprom7_cfg_setupP13eeprom7_cfg_t+0x14>)
 23fde9a:	6083      	str	r3, [r0, #8]
    cfg->spi_mode    = SPI_MASTER_MODE_0;
 23fde9c:	2300      	movs	r3, #0
 23fde9e:	8183      	strh	r3, [r0, #12]
    cfg->cs_polarity = SPI_MASTER_CHIP_SELECT_POLARITY_ACTIVE_LOW;
}
 23fdea0:	4770      	bx	lr
 23fdea2:	bf00      	nop
 23fdea4:	000186a0 	.word	0x000186a0

023fdea8 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t>:

err_t eeprom7_init ( eeprom7_t *ctx, eeprom7_cfg_t *cfg ) {
 23fdea8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fdeaa:	460c      	mov	r4, r1
 23fdeac:	4605      	mov	r5, r0
    spi_master_config_t spi_cfg;

    spi_master_configure_default( &spi_cfg );
 23fdeae:	a801      	add	r0, sp, #4
 23fdeb0:	f000 f99c 	bl	23fe1ec <_Z28spi_master_configure_defaultP19spi_master_config_t>

    spi_cfg.sck  = cfg->sck;
 23fdeb4:	78a3      	ldrb	r3, [r4, #2]
    spi_cfg.miso = cfg->miso;
    spi_cfg.mosi = cfg->mosi;

    ctx->chip_select = cfg->cs;

    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR ) {
 23fdeb6:	1d2e      	adds	r6, r5, #4
    spi_cfg.sck  = cfg->sck;
 23fdeb8:	f88d 3005 	strb.w	r3, [sp, #5]
    spi_cfg.miso = cfg->miso;
 23fdebc:	8823      	ldrh	r3, [r4, #0]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR ) {
 23fdebe:	4630      	mov	r0, r6
    spi_cfg.miso = cfg->miso;
 23fdec0:	f8ad 3006 	strh.w	r3, [sp, #6]
    ctx->chip_select = cfg->cs;
 23fdec4:	78e3      	ldrb	r3, [r4, #3]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR ) {
 23fdec6:	a901      	add	r1, sp, #4
    ctx->chip_select = cfg->cs;
 23fdec8:	742b      	strb	r3, [r5, #16]
    if ( spi_master_open( &ctx->spi, &spi_cfg ) == SPI_MASTER_ERROR ) {
 23fdeca:	f000 f975 	bl	23fe1b8 <_Z15spi_master_openP12spi_master_tP19spi_master_config_t>
 23fdece:	3001      	adds	r0, #1
 23fded0:	d103      	bne.n	23fdeda <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t+0x32>
        return SPI_MASTER_ERROR;
 23fded2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    digital_out_init( &ctx->wp, cfg->wp );
    digital_out_init( &ctx->hld, cfg->hld );
    
    return SPI_MASTER_SUCCESS;
}
 23fded6:	b004      	add	sp, #16
 23fded8:	bd70      	pop	{r4, r5, r6, pc}
    if ( spi_master_set_default_write_data( &ctx->spi, DUMMY ) == SPI_MASTER_ERROR ) {
 23fdeda:	2100      	movs	r1, #0
 23fdedc:	4630      	mov	r0, r6
 23fdede:	f000 f94f 	bl	23fe180 <_Z33spi_master_set_default_write_dataP12spi_master_th>
 23fdee2:	3001      	adds	r0, #1
 23fdee4:	d0f5      	beq.n	23fded2 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t+0x2a>
    if ( spi_master_set_mode( &ctx->spi, cfg->spi_mode ) == SPI_MASTER_ERROR ) {
 23fdee6:	4630      	mov	r0, r6
 23fdee8:	7b21      	ldrb	r1, [r4, #12]
 23fdeea:	f000 f9a3 	bl	23fe234 <_Z19spi_master_set_modeP12spi_master_th>
 23fdeee:	3001      	adds	r0, #1
 23fdef0:	d0ef      	beq.n	23fded2 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t+0x2a>
    if ( spi_master_set_speed( &ctx->spi, cfg->spi_speed ) == SPI_MASTER_ERROR ) {
 23fdef2:	4630      	mov	r0, r6
 23fdef4:	68a1      	ldr	r1, [r4, #8]
 23fdef6:	f000 f9a8 	bl	23fe24a <_Z20spi_master_set_speedP12spi_master_tm>
 23fdefa:	3001      	adds	r0, #1
 23fdefc:	d0e9      	beq.n	23fded2 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t+0x2a>
    spi_master_set_chip_select_polarity( cfg->cs_polarity );
 23fdefe:	7b60      	ldrb	r0, [r4, #13]
 23fdf00:	f000 f936 	bl	23fe170 <_Z35spi_master_set_chip_select_polarityh>
    spi_master_deselect_device( ctx->chip_select );
 23fdf04:	7c28      	ldrb	r0, [r5, #16]
 23fdf06:	f000 f921 	bl	23fe14c <_Z26spi_master_deselect_deviceh>
    digital_out_init( &ctx->wp, cfg->wp );
 23fdf0a:	7921      	ldrb	r1, [r4, #4]
 23fdf0c:	4628      	mov	r0, r5
 23fdf0e:	f000 f886 	bl	23fe01e <_Z16digital_out_initP13digital_out_th>
    digital_out_init( &ctx->hld, cfg->hld );
 23fdf12:	7961      	ldrb	r1, [r4, #5]
 23fdf14:	1ca8      	adds	r0, r5, #2
 23fdf16:	f000 f882 	bl	23fe01e <_Z16digital_out_initP13digital_out_th>
    return SPI_MASTER_SUCCESS;
 23fdf1a:	2000      	movs	r0, #0
 23fdf1c:	e7db      	b.n	23fded6 <_Z12eeprom7_initP9eeprom7_tP13eeprom7_cfg_t+0x2e>

023fdf1e <_Z21eeprom7_generic_writeP9eeprom7_thPhh>:
    eeprom7_set_status( ctx, 0x00 );
    eeprom7_enable_hold_operation( ctx, 1 );
    return EEPROM7_OK;
}

err_t eeprom7_generic_write ( eeprom7_t *ctx, uint8_t reg, uint8_t *data_in, uint8_t len ) {
 23fdf1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdf22:	4688      	mov	r8, r1
    uint8_t tx_buf[ 257 ] = { 0 };
 23fdf24:	2100      	movs	r1, #0
err_t eeprom7_generic_write ( eeprom7_t *ctx, uint8_t reg, uint8_t *data_in, uint8_t len ) {
 23fdf26:	b0c2      	sub	sp, #264	; 0x108
 23fdf28:	4604      	mov	r4, r0
 23fdf2a:	4617      	mov	r7, r2
    uint8_t tx_buf[ 257 ] = { 0 };
 23fdf2c:	a802      	add	r0, sp, #8
 23fdf2e:	22fd      	movs	r2, #253	; 0xfd
 23fdf30:	9101      	str	r1, [sp, #4]
err_t eeprom7_generic_write ( eeprom7_t *ctx, uint8_t reg, uint8_t *data_in, uint8_t len ) {
 23fdf32:	461e      	mov	r6, r3
    uint8_t tx_buf[ 257 ] = { 0 };
 23fdf34:	f001 fe8d 	bl	23ffc52 <memset>
    uint8_t cnt;

    tx_buf[ 0 ] = reg;
    for ( cnt = 1; cnt <= len; cnt++ ) {
 23fdf38:	2101      	movs	r1, #1
    uint8_t tx_buf[ 257 ] = { 0 };
 23fdf3a:	ad01      	add	r5, sp, #4
    tx_buf[ 0 ] = reg;
 23fdf3c:	f885 8000 	strb.w	r8, [r5]
    for ( cnt = 1; cnt <= len; cnt++ ) {
 23fdf40:	42b1      	cmp	r1, r6
 23fdf42:	d806      	bhi.n	23fdf52 <_Z21eeprom7_generic_writeP9eeprom7_thPhh+0x34>
        tx_buf[ cnt ] = data_in[ cnt - 1 ];
 23fdf44:	187b      	adds	r3, r7, r1
 23fdf46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 23fdf4a:	546b      	strb	r3, [r5, r1]
    for ( cnt = 1; cnt <= len; cnt++ ) {
 23fdf4c:	3101      	adds	r1, #1
 23fdf4e:	b2c9      	uxtb	r1, r1
 23fdf50:	e7f6      	b.n	23fdf40 <_Z21eeprom7_generic_writeP9eeprom7_thPhh+0x22>
    }

    spi_master_select_device( ctx->chip_select );
 23fdf52:	7c20      	ldrb	r0, [r4, #16]
 23fdf54:	f000 f8ea 	bl	23fe12c <_Z24spi_master_select_deviceh>
    err_t error_flag = spi_master_write( &ctx->spi, tx_buf, len + 1 );
 23fdf58:	4629      	mov	r1, r5
 23fdf5a:	1c72      	adds	r2, r6, #1
 23fdf5c:	1d20      	adds	r0, r4, #4
 23fdf5e:	f000 f9cf 	bl	23fe300 <_Z16spi_master_writeP12spi_master_tPhj>
 23fdf62:	4605      	mov	r5, r0
    spi_master_deselect_device( ctx->chip_select );
 23fdf64:	7c20      	ldrb	r0, [r4, #16]
 23fdf66:	f000 f8f1 	bl	23fe14c <_Z26spi_master_deselect_deviceh>

    return error_flag;
}
 23fdf6a:	4628      	mov	r0, r5
 23fdf6c:	b042      	add	sp, #264	; 0x108
 23fdf6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fdf72 <_Z20eeprom7_generic_readP9eeprom7_thPhh>:

err_t eeprom7_generic_read ( eeprom7_t *ctx, uint8_t reg, uint8_t *data_out, uint8_t len ) {
 23fdf72:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fdf74:	4604      	mov	r4, r0
 23fdf76:	4615      	mov	r5, r2
 23fdf78:	461e      	mov	r6, r3
    spi_master_select_device( ctx->chip_select );
 23fdf7a:	7c00      	ldrb	r0, [r0, #16]
err_t eeprom7_generic_read ( eeprom7_t *ctx, uint8_t reg, uint8_t *data_out, uint8_t len ) {
 23fdf7c:	f88d 100f 	strb.w	r1, [sp, #15]
    spi_master_select_device( ctx->chip_select );
 23fdf80:	f000 f8d4 	bl	23fe12c <_Z24spi_master_select_deviceh>
    err_t error_flag = spi_master_write_then_read( &ctx->spi, &reg, 1, data_out, len );
 23fdf84:	462b      	mov	r3, r5
 23fdf86:	2201      	movs	r2, #1
 23fdf88:	f10d 010f 	add.w	r1, sp, #15
 23fdf8c:	9600      	str	r6, [sp, #0]
 23fdf8e:	1d20      	adds	r0, r4, #4
 23fdf90:	f000 f968 	bl	23fe264 <_Z26spi_master_write_then_readP12spi_master_tPhjS1_j>
 23fdf94:	4605      	mov	r5, r0
    spi_master_deselect_device( ctx->chip_select );
 23fdf96:	7c20      	ldrb	r0, [r4, #16]
 23fdf98:	f000 f8d8 	bl	23fe14c <_Z26spi_master_deselect_deviceh>

    return error_flag;
}
 23fdf9c:	4628      	mov	r0, r5
 23fdf9e:	b004      	add	sp, #16
 23fdfa0:	bd70      	pop	{r4, r5, r6, pc}

023fdfa2 <_Z16eeprom7_send_cmdP9eeprom7_th>:
    
    return is_ready;
}

err_t eeprom7_send_cmd ( eeprom7_t *ctx, uint8_t cmd ) {
    uint8_t rx_buf[ 2 ] = { 0 };
 23fdfa2:	2300      	movs	r3, #0
err_t eeprom7_send_cmd ( eeprom7_t *ctx, uint8_t cmd ) {
 23fdfa4:	b507      	push	{r0, r1, r2, lr}
    
    if ( cmd == EEPROM7_OPCODE_STATUS_WRBP ) {        
 23fdfa6:	2908      	cmp	r1, #8
    uint8_t rx_buf[ 2 ] = { 0 };
 23fdfa8:	f8ad 3004 	strh.w	r3, [sp, #4]
    if ( cmd == EEPROM7_OPCODE_STATUS_WRBP ) {        
 23fdfac:	d108      	bne.n	23fdfc0 <_Z16eeprom7_send_cmdP9eeprom7_th+0x1e>
        eeprom7_generic_read( ctx, cmd, rx_buf, 1 );
 23fdfae:	2301      	movs	r3, #1
 23fdfb0:	aa01      	add	r2, sp, #4
 23fdfb2:	f7ff ffde 	bl	23fdf72 <_Z20eeprom7_generic_readP9eeprom7_thPhh>

        return rx_buf[ 0 ];
 23fdfb6:	f99d 0004 	ldrsb.w	r0, [sp, #4]
    } else {        
        eeprom7_generic_write( ctx, cmd, NULL, 0 );

        return EEPROM7_STATUS_SUCCESS;
    }
}
 23fdfba:	b003      	add	sp, #12
 23fdfbc:	f85d fb04 	ldr.w	pc, [sp], #4
        eeprom7_generic_write( ctx, cmd, NULL, 0 );
 23fdfc0:	461a      	mov	r2, r3
 23fdfc2:	f7ff ffac 	bl	23fdf1e <_Z21eeprom7_generic_writeP9eeprom7_thPhh>
 23fdfc6:	2001      	movs	r0, #1
 23fdfc8:	e7f7      	b.n	23fdfba <_Z16eeprom7_send_cmdP9eeprom7_th+0x18>

023fdfca <_Z18eeprom7_set_statusP9eeprom7_th>:
void eeprom7_sw_reset ( eeprom7_t *ctx ) {
    eeprom7_send_cmd( ctx, EEPROM7_OPCODE_SW_RESET_SRST );
}

void eeprom7_set_status ( eeprom7_t *ctx, uint8_t status ) {    
    eeprom7_generic_write( ctx, EEPROM7_OPCODE_STATUS_WRSR, &status, 1 );
 23fdfca:	2301      	movs	r3, #1
void eeprom7_set_status ( eeprom7_t *ctx, uint8_t status ) {    
 23fdfcc:	b507      	push	{r0, r1, r2, lr}
 23fdfce:	f88d 1007 	strb.w	r1, [sp, #7]
    eeprom7_generic_write( ctx, EEPROM7_OPCODE_STATUS_WRSR, &status, 1 );
 23fdfd2:	f10d 0207 	add.w	r2, sp, #7
 23fdfd6:	4619      	mov	r1, r3
 23fdfd8:	f7ff ffa1 	bl	23fdf1e <_Z21eeprom7_generic_writeP9eeprom7_thPhh>
}
 23fdfdc:	b003      	add	sp, #12
 23fdfde:	f85d fb04 	ldr.w	pc, [sp], #4

023fdfe2 <_Z19eeprom7_default_cfgP9eeprom7_t>:
err_t eeprom7_default_cfg ( eeprom7_t *ctx ) {
 23fdfe2:	b510      	push	{r4, lr}
 23fdfe4:	4604      	mov	r4, r0
    digital_out_write( &ctx->wp, en_write_protect );
 23fdfe6:	2101      	movs	r1, #1
 23fdfe8:	f000 f824 	bl	23fe034 <_Z17digital_out_writeP13digital_out_th>
    eeprom7_send_cmd( ctx, EEPROM7_OPCODE_STATUS_WREN );
 23fdfec:	2106      	movs	r1, #6
 23fdfee:	4620      	mov	r0, r4
 23fdff0:	f7ff ffd7 	bl	23fdfa2 <_Z16eeprom7_send_cmdP9eeprom7_th>
    eeprom7_set_status( ctx, 0x00 );
 23fdff4:	4620      	mov	r0, r4
 23fdff6:	2100      	movs	r1, #0
 23fdff8:	f7ff ffe7 	bl	23fdfca <_Z18eeprom7_set_statusP9eeprom7_th>
    digital_out_write( &ctx->hld, en_hold );
 23fdffc:	1ca0      	adds	r0, r4, #2
 23fdffe:	2101      	movs	r1, #1
 23fe000:	f000 f818 	bl	23fe034 <_Z17digital_out_writeP13digital_out_th>
}
 23fe004:	2000      	movs	r0, #0
 23fe006:	bd10      	pop	{r4, pc}

023fe008 <_Z15digital_in_initP12digital_in_th>:
#include "drv_digital_in.h"

//function for setting pin as input
int8_t digital_in_init(digital_in_t *in, uint8_t mode)
{
 23fe008:	b510      	push	{r4, lr}
    if (mode == INPUT)
 23fe00a:	460c      	mov	r4, r1
 23fe00c:	b921      	cbnz	r1, 23fe018 <_Z15digital_in_initP12digital_in_th+0x10>
    {
        pinMode(in->pin, static_cast<PinMode>(mode));
 23fe00e:	7800      	ldrb	r0, [r0, #0]
 23fe010:	f001 fce0 	bl	23ff9d4 <pinMode>
        return DIGITAL_IN_SUCCESS;      //return status
 23fe014:	4620      	mov	r0, r4
    }
    else        //mode other than input selected
    {
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
    }
}
 23fe016:	bd10      	pop	{r4, pc}
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
 23fe018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe01c:	e7fb      	b.n	23fe016 <_Z15digital_in_initP12digital_in_th+0xe>

023fe01e <_Z16digital_out_initP13digital_out_th>:
#include "drv_digital_out.h"

//function for setting pin as output
int8_t digital_out_init(digital_out_t *out, uint8_t mode)
{
    if (mode == OUTPUT)
 23fe01e:	2901      	cmp	r1, #1
{
 23fe020:	b508      	push	{r3, lr}
    if (mode == OUTPUT)
 23fe022:	d104      	bne.n	23fe02e <_Z16digital_out_initP13digital_out_th+0x10>
    {
        pinMode(out->pin, static_cast<PinMode>(mode));
 23fe024:	8800      	ldrh	r0, [r0, #0]
 23fe026:	f001 fcd5 	bl	23ff9d4 <pinMode>
        return DIGITAL_OUT_SUCCESS;     //return status
 23fe02a:	2000      	movs	r0, #0
    }
    else
    {
        return DIGITAL_OUT_UNSUPPORTED_PIN;       //return status
    }
}
 23fe02c:	bd08      	pop	{r3, pc}
        return DIGITAL_OUT_UNSUPPORTED_PIN;       //return status
 23fe02e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe032:	e7fb      	b.n	23fe02c <_Z16digital_out_initP13digital_out_th+0xe>

023fe034 <_Z17digital_out_writeP13digital_out_th>:
}

//function for writing pin state
void digital_out_write(digital_out_t *out, uint8_t value)
{
    digitalWrite(out->pin, value);
 23fe034:	8800      	ldrh	r0, [r0, #0]
 23fe036:	f001 bcde 	b.w	23ff9f6 <digitalWrite>
	...

023fe03c <_Z28i2c_master_configure_defaultP19i2c_master_config_t>:
static uint32_t set_speed;      //scl speed variable, static as previous value should be retained
static uint8_t addr;            //7-bit cleint address variable, status as previous value should be retained

//Configures i2c_master_config_t struct to default initialization values
void i2c_master_configure_default(i2c_master_config_t *config)
{
 23fe03c:	b510      	push	{r4, lr}
    addr = 0x00;                                    //set client address to 0x00
 23fe03e:	2400      	movs	r4, #0
 23fe040:	4b05      	ldr	r3, [pc, #20]	; (23fe058 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x1c>)
 23fe042:	701c      	strb	r4, [r3, #0]
    set_speed = I2C_MASTER_SPEED_STANDARD;          //set static global variable to new speed value
 23fe044:	4b05      	ldr	r3, [pc, #20]	; (23fe05c <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x20>)
 23fe046:	601c      	str	r4, [r3, #0]
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fe048:	f001 fd0a 	bl	23ffa60 <_Z19__fetch_global_Wirev>
 23fe04c:	4621      	mov	r1, r4
}
 23fe04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fe052:	f000 bf59 	b.w	23fef08 <_ZN7TwoWire8setSpeedEm>
 23fe056:	bf00      	nop
 23fe058:	1007ae74 	.word	0x1007ae74
 23fe05c:	1007ae78 	.word	0x1007ae78

023fe060 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>:

//Opens the I2C Master driver object on selected pins
int8_t i2c_master_open(i2c_master_t *obj, i2c_master_config_t *config)
{
 23fe060:	b508      	push	{r3, lr}
    Wire.setSpeed(set_speed);       //set speed, must be done before Wire.begin() and set to whatever the static global variable is set to
 23fe062:	f001 fcfd 	bl	23ffa60 <_Z19__fetch_global_Wirev>
 23fe066:	4b05      	ldr	r3, [pc, #20]	; (23fe07c <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t+0x1c>)
 23fe068:	6819      	ldr	r1, [r3, #0]
 23fe06a:	f000 ff4d 	bl	23fef08 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();                   //join i2c bus as host                   
 23fe06e:	f001 fcf7 	bl	23ffa60 <_Z19__fetch_global_Wirev>
 23fe072:	f000 ff4d 	bl	23fef10 <_ZN7TwoWire5beginEv>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe076:	2000      	movs	r0, #0
 23fe078:	bd08      	pop	{r3, pc}
 23fe07a:	bf00      	nop
 23fe07c:	1007ae78 	.word	0x1007ae78

023fe080 <_Z20i2c_master_set_speedP12i2c_master_tm>:

//set scl speed
int8_t i2c_master_set_speed(i2c_master_t *obj, uint32_t speed)
{
 23fe080:	b510      	push	{r4, lr}
 23fe082:	460c      	mov	r4, r1
    set_speed = speed;              //set static global variable to new speed value
 23fe084:	4b04      	ldr	r3, [pc, #16]	; (23fe098 <_Z20i2c_master_set_speedP12i2c_master_tm+0x18>)
 23fe086:	6019      	str	r1, [r3, #0]
    Wire.setSpeed(speed);           //set speed, must be done before Wire.begin()
 23fe088:	f001 fcea 	bl	23ffa60 <_Z19__fetch_global_Wirev>
 23fe08c:	4621      	mov	r1, r4
 23fe08e:	f000 ff3b 	bl	23fef08 <_ZN7TwoWire8setSpeedEm>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe092:	2000      	movs	r0, #0
 23fe094:	bd10      	pop	{r4, pc}
 23fe096:	bf00      	nop
 23fe098:	1007ae78 	.word	0x1007ae78

023fe09c <_Z28i2c_master_set_slave_addressP12i2c_master_th>:
}

//set 7-bit client address
int8_t i2c_master_set_slave_address(i2c_master_t *obj, uint8_t address)
{
    addr = address;                 //set function parameter to global variable
 23fe09c:	4b01      	ldr	r3, [pc, #4]	; (23fe0a4 <_Z28i2c_master_set_slave_addressP12i2c_master_th+0x8>)
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe09e:	2000      	movs	r0, #0
    addr = address;                 //set function parameter to global variable
 23fe0a0:	7019      	strb	r1, [r3, #0]
}
 23fe0a2:	4770      	bx	lr
 23fe0a4:	1007ae74 	.word	0x1007ae74

023fe0a8 <_Z16i2c_master_writeP12i2c_master_tPhj>:

//i2c write operation, R/W = 0
int8_t i2c_master_write(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data)
{
 23fe0a8:	b513      	push	{r0, r1, r4, lr}
 23fe0aa:	460c      	mov	r4, r1
 23fe0ac:	9201      	str	r2, [sp, #4]
    Wire.beginTransmission(addr);                       //send device address byte using 7-bit client address
 23fe0ae:	f001 fcd7 	bl	23ffa60 <_Z19__fetch_global_Wirev>
 23fe0b2:	4b0b      	ldr	r3, [pc, #44]	; (23fe0e0 <_Z16i2c_master_writeP12i2c_master_tPhj+0x38>)
 23fe0b4:	7819      	ldrb	r1, [r3, #0]
 23fe0b6:	f000 ff5a 	bl	23fef6e <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);
 23fe0ba:	f001 fcd1 	bl	23ffa60 <_Z19__fetch_global_Wirev>
 23fe0be:	6803      	ldr	r3, [r0, #0]
 23fe0c0:	4621      	mov	r1, r4
 23fe0c2:	68db      	ldr	r3, [r3, #12]
 23fe0c4:	9a01      	ldr	r2, [sp, #4]
 23fe0c6:	4798      	blx	r3
    if (Wire.endTransmission(TRUE) == TRUE)     //send stop condition (true)
 23fe0c8:	f001 fcca 	bl	23ffa60 <_Z19__fetch_global_Wirev>
 23fe0cc:	2101      	movs	r1, #1
 23fe0ce:	f000 ff52 	bl	23fef76 <_ZN7TwoWire15endTransmissionEh>
    {
        return I2C_MASTER_SUCCESS;      //return status
    }
    return I2C_MASTER_ERROR;        //return status    
}
 23fe0d2:	3801      	subs	r0, #1
 23fe0d4:	bf18      	it	ne
 23fe0d6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fe0da:	b002      	add	sp, #8
 23fe0dc:	bd10      	pop	{r4, pc}
 23fe0de:	bf00      	nop
 23fe0e0:	1007ae74 	.word	0x1007ae74

023fe0e4 <_Z15i2c_master_readP12i2c_master_tPhj>:

//i2c read operation, R/W = 1
int8_t i2c_master_read(i2c_master_t *obj, uint8_t *read_data_buf, size_t len_read_data)
{
 23fe0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe0e8:	4615      	mov	r5, r2
 23fe0ea:	460e      	mov	r6, r1
    //local variable
    uint8_t temp;     //variable for determining error

    temp = Wire.requestFrom(addr, len_read_data, true);     //true signals send stop after read
 23fe0ec:	f001 fcb8 	bl	23ffa60 <_Z19__fetch_global_Wirev>
 23fe0f0:	490d      	ldr	r1, [pc, #52]	; (23fe128 <_Z15i2c_master_readP12i2c_master_tPhj+0x44>)
 23fe0f2:	2301      	movs	r3, #1
 23fe0f4:	462a      	mov	r2, r5
 23fe0f6:	7809      	ldrb	r1, [r1, #0]
 23fe0f8:	f000 ff27 	bl	23fef4a <_ZN7TwoWire11requestFromEhjh>
 23fe0fc:	2700      	movs	r7, #0
 23fe0fe:	b2c4      	uxtb	r4, r0
    for(uint8_t ii = 0; ii < len_read_data; ii++)           //unpack pointer function parameter
 23fe100:	fa5f f887 	uxtb.w	r8, r7
 23fe104:	4545      	cmp	r5, r8
 23fe106:	f107 0701 	add.w	r7, r7, #1
 23fe10a:	d907      	bls.n	23fe11c <_Z15i2c_master_readP12i2c_master_tPhj+0x38>
    {
        read_data_buf[ii] = Wire.read();        //write pointer function parameter
 23fe10c:	f001 fca8 	bl	23ffa60 <_Z19__fetch_global_Wirev>
 23fe110:	6803      	ldr	r3, [r0, #0]
 23fe112:	695b      	ldr	r3, [r3, #20]
 23fe114:	4798      	blx	r3
 23fe116:	f806 0008 	strb.w	r0, [r6, r8]
    for(uint8_t ii = 0; ii < len_read_data; ii++)           //unpack pointer function parameter
 23fe11a:	e7f1      	b.n	23fe100 <_Z15i2c_master_readP12i2c_master_tPhj+0x1c>
    }
    
    //logic for successful transfer
    if(temp != 0)     //requestFrom() returns 0 if timeout occurs
 23fe11c:	fab4 f084 	clz	r0, r4
 23fe120:	0940      	lsrs	r0, r0, #5
    {
        return I2C_MASTER_SUCCESS;      //return status
    }
    return I2C_MASTER_ERROR;        //return status
}
 23fe122:	4240      	negs	r0, r0
 23fe124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe128:	1007ae74 	.word	0x1007ae74

023fe12c <_Z24spi_master_select_deviceh>:
    return SPI_MASTER_SUCCESS;                      //return status
}

//assert chip select
void spi_master_select_device(uint8_t chip_select)
{
 23fe12c:	b507      	push	{r0, r1, r2, lr}
    pinMode(chip_select, OUTPUT);               //set function parameter as output
 23fe12e:	2101      	movs	r1, #1
 23fe130:	9001      	str	r0, [sp, #4]
 23fe132:	f001 fc4f 	bl	23ff9d4 <pinMode>
    digitalWrite(chip_select, cs_polarity);     //assert CS 
 23fe136:	4b04      	ldr	r3, [pc, #16]	; (23fe148 <_Z24spi_master_select_deviceh+0x1c>)
 23fe138:	9801      	ldr	r0, [sp, #4]
 23fe13a:	7819      	ldrb	r1, [r3, #0]
}
 23fe13c:	b003      	add	sp, #12
 23fe13e:	f85d eb04 	ldr.w	lr, [sp], #4
    digitalWrite(chip_select, cs_polarity);     //assert CS 
 23fe142:	f001 bc58 	b.w	23ff9f6 <digitalWrite>
 23fe146:	bf00      	nop
 23fe148:	1007ae88 	.word	0x1007ae88

023fe14c <_Z26spi_master_deselect_deviceh>:

//de-assert chip select
void spi_master_deselect_device(uint8_t chip_select) 
{
 23fe14c:	b507      	push	{r0, r1, r2, lr}
    pinMode(chip_select, OUTPUT);                   //set function parameter as output
 23fe14e:	2101      	movs	r1, #1
 23fe150:	9001      	str	r0, [sp, #4]
 23fe152:	f001 fc3f 	bl	23ff9d4 <pinMode>
    digitalWrite(chip_select, !cs_polarity);        //de-assert CS 
 23fe156:	4b05      	ldr	r3, [pc, #20]	; (23fe16c <_Z26spi_master_deselect_deviceh+0x20>)
 23fe158:	9801      	ldr	r0, [sp, #4]
 23fe15a:	7819      	ldrb	r1, [r3, #0]
 23fe15c:	fab1 f181 	clz	r1, r1
 23fe160:	0949      	lsrs	r1, r1, #5
}
 23fe162:	b003      	add	sp, #12
 23fe164:	f85d eb04 	ldr.w	lr, [sp], #4
    digitalWrite(chip_select, !cs_polarity);        //de-assert CS 
 23fe168:	f001 bc45 	b.w	23ff9f6 <digitalWrite>
 23fe16c:	1007ae88 	.word	0x1007ae88

023fe170 <_Z35spi_master_set_chip_select_polarityh>:

//sets chip select polarity
void spi_master_set_chip_select_polarity(uint8_t polarity)
{
    if ((polarity == LOW) || (polarity == HIGH))        //check for valid function parameter
 23fe170:	2801      	cmp	r0, #1
    {
        cs_polarity = polarity;     //set new CS polarity
 23fe172:	bf9c      	itt	ls
 23fe174:	4b01      	ldrls	r3, [pc, #4]	; (23fe17c <_Z35spi_master_set_chip_select_polarityh+0xc>)
 23fe176:	7018      	strbls	r0, [r3, #0]
    }
}
 23fe178:	4770      	bx	lr
 23fe17a:	bf00      	nop
 23fe17c:	1007ae88 	.word	0x1007ae88

023fe180 <_Z33spi_master_set_default_write_dataP12spi_master_th>:
//sets SPI default value, not implemented
int8_t spi_master_set_default_write_data(spi_master_t *obj, uint8_t  default_write_data) 
{
    #warning spi_master_set_default_write_data() function is not implemented
    return SPI_MASTER_SUCCESS;      //return status
}
 23fe180:	2000      	movs	r0, #0
 23fe182:	4770      	bx	lr

023fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 23fe184:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
 23fe186:	4c0a      	ldr	r4, [pc, #40]	; (23fe1b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x2c>)
 23fe188:	e8d4 1f8f 	ldab	r1, [r4]
 23fe18c:	f011 0101 	ands.w	r1, r1, #1
 23fe190:	d10b      	bne.n	23fe1aa <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fe192:	4620      	mov	r0, r4
 23fe194:	9101      	str	r1, [sp, #4]
 23fe196:	f7ff fcfc 	bl	23fdb92 <__cxa_guard_acquire>
 23fe19a:	9901      	ldr	r1, [sp, #4]
 23fe19c:	b128      	cbz	r0, 23fe1aa <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x26>
 23fe19e:	4805      	ldr	r0, [pc, #20]	; (23fe1b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fe1a0:	f001 f968 	bl	23ff474 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fe1a4:	4620      	mov	r0, r4
 23fe1a6:	f7ff fcf9 	bl	23fdb9c <__cxa_guard_release>
        return instance;
    }
 23fe1aa:	4802      	ldr	r0, [pc, #8]	; (23fe1b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
 23fe1ac:	b002      	add	sp, #8
 23fe1ae:	bd10      	pop	{r4, pc}
 23fe1b0:	1007ae7c 	.word	0x1007ae7c
 23fe1b4:	1007ae80 	.word	0x1007ae80

023fe1b8 <_Z15spi_master_openP12spi_master_tP19spi_master_config_t>:
{       
 23fe1b8:	b508      	push	{r3, lr}
    pinMode(SS, OUTPUT);                            //set SS sginal mikroBUS1 as output
 23fe1ba:	2101      	movs	r1, #1
 23fe1bc:	2012      	movs	r0, #18
 23fe1be:	f001 fc09 	bl	23ff9d4 <pinMode>
    pinMode(SS1, OUTPUT);                           //set SS1 sginal mikroBUS2 as output
 23fe1c2:	2101      	movs	r1, #1
 23fe1c4:	2005      	movs	r0, #5
 23fe1c6:	f001 fc05 	bl	23ff9d4 <pinMode>
    digitalWrite(SS, HIGH);                         //set SS HIGH
 23fe1ca:	2101      	movs	r1, #1
 23fe1cc:	2012      	movs	r0, #18
 23fe1ce:	f001 fc12 	bl	23ff9f6 <digitalWrite>
    digitalWrite(SS1, HIGH);                        //set SS1 HIGH
 23fe1d2:	2101      	movs	r1, #1
 23fe1d4:	2005      	movs	r0, #5
 23fe1d6:	f001 fc0e 	bl	23ff9f6 <digitalWrite>
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
    }
    void begin(hal_spi_mode_t mode, uint16_t ss_pin = SPI_DEFAULT_SS) {
        instance().begin(mode, ss_pin);
 23fe1da:	f7ff ffd3 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe1de:	22ff      	movs	r2, #255	; 0xff
 23fe1e0:	2100      	movs	r1, #0
 23fe1e2:	f001 f951 	bl	23ff488 <_ZN8SPIClass5beginE14hal_spi_mode_tt>
}
 23fe1e6:	2000      	movs	r0, #0
 23fe1e8:	bd08      	pop	{r3, pc}
	...

023fe1ec <_Z28spi_master_configure_defaultP19spi_master_config_t>:
{
 23fe1ec:	b510      	push	{r4, lr}
    cs_polarity = LOW;              //set CS active low          
 23fe1ee:	2400      	movs	r4, #0
    pinMode(SS, OUTPUT);            //set SS sginal mikroBUS1 as output
 23fe1f0:	2101      	movs	r1, #1
 23fe1f2:	2012      	movs	r0, #18
 23fe1f4:	f001 fbee 	bl	23ff9d4 <pinMode>
    pinMode(SS1, OUTPUT);           //set SS1 sginal mikroBUS2 as output
 23fe1f8:	2101      	movs	r1, #1
 23fe1fa:	2005      	movs	r0, #5
 23fe1fc:	f001 fbea 	bl	23ff9d4 <pinMode>
    digitalWrite(SS, HIGH);         //set SS HIGH
 23fe200:	2101      	movs	r1, #1
 23fe202:	2012      	movs	r0, #18
 23fe204:	f001 fbf7 	bl	23ff9f6 <digitalWrite>
    digitalWrite(SS1, HIGH);        //set SS1 HIGH
 23fe208:	2101      	movs	r1, #1
 23fe20a:	2005      	movs	r0, #5
 23fe20c:	f001 fbf3 	bl	23ff9f6 <digitalWrite>
    cs_polarity = LOW;              //set CS active low          
 23fe210:	4b07      	ldr	r3, [pc, #28]	; (23fe230 <_Z28spi_master_configure_defaultP19spi_master_config_t+0x44>)
 23fe212:	701c      	strb	r4, [r3, #0]
    }
    void setBitOrder(uint8_t order) {
        instance().setBitOrder(order);
    }
    void setDataMode(uint8_t mode) {
        instance().setDataMode(mode);
 23fe214:	f7ff ffb6 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe218:	4621      	mov	r1, r4
 23fe21a:	f001 f94c 	bl	23ff4b6 <_ZN8SPIClass11setDataModeEh>
    }
    void setClockDivider(uint8_t divider) {
        instance().setClockDivider(divider);
    }
    unsigned setClockSpeed(unsigned value, unsigned scale=HZ) {
        return instance().setClockSpeed(value, scale);
 23fe21e:	f7ff ffb1 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
}
 23fe222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fe226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 23fe22a:	2164      	movs	r1, #100	; 0x64
 23fe22c:	f001 b974 	b.w	23ff518 <_ZN8SPIClass13setClockSpeedEjj>
 23fe230:	1007ae88 	.word	0x1007ae88

023fe234 <_Z19spi_master_set_modeP12spi_master_th>:
{
 23fe234:	b507      	push	{r0, r1, r2, lr}
 23fe236:	9101      	str	r1, [sp, #4]
        instance().setDataMode(mode);
 23fe238:	f7ff ffa4 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe23c:	9901      	ldr	r1, [sp, #4]
 23fe23e:	f001 f93a 	bl	23ff4b6 <_ZN8SPIClass11setDataModeEh>
}
 23fe242:	2000      	movs	r0, #0
 23fe244:	b003      	add	sp, #12
 23fe246:	f85d fb04 	ldr.w	pc, [sp], #4

023fe24a <_Z20spi_master_set_speedP12spi_master_tm>:
{
 23fe24a:	b510      	push	{r4, lr}
 23fe24c:	460c      	mov	r4, r1
        return instance().setClockSpeed(value, scale);
 23fe24e:	f7ff ff99 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe252:	2201      	movs	r2, #1
 23fe254:	4621      	mov	r1, r4
 23fe256:	f001 f95f 	bl	23ff518 <_ZN8SPIClass13setClockSpeedEjj>
}
 23fe25a:	1a20      	subs	r0, r4, r0
 23fe25c:	bf18      	it	ne
 23fe25e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fe262:	bd10      	pop	{r4, pc}

023fe264 <_Z26spi_master_write_then_readP12spi_master_tPhjS1_j>:
    return SPI_MASTER_SUCCESS;                                              //return status
}

//write a sequence of byte(s) to SPI bus followed by read
int8_t spi_master_write_then_read(spi_master_t *obj, uint8_t *write_data_buffer, size_t length_write_data, uint8_t *read_data_buffer, size_t length_read_data)   
{
 23fe264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //compiler warning indicating assumption
    #warning spi_master_write_then_read() assumes the fist element of write_data_buffer is the first byte to be transmitted, IE the opcode/register if required

    //create dummy array size of write fill with zeros
    uint8_t write_dummy[length_write_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe268:	2400      	movs	r4, #0
{
 23fe26a:	4615      	mov	r5, r2
 23fe26c:	b083      	sub	sp, #12
 23fe26e:	4698      	mov	r8, r3
    uint8_t write_dummy[length_write_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe270:	1dd3      	adds	r3, r2, #7
 23fe272:	f023 0307 	bic.w	r3, r3, #7
{
 23fe276:	af02      	add	r7, sp, #8
 23fe278:	6abe      	ldr	r6, [r7, #40]	; 0x28
    uint8_t write_dummy[length_write_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe27a:	ebad 0d03 	sub.w	sp, sp, r3
 23fe27e:	42a5      	cmp	r5, r4
 23fe280:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 23fe284:	f10d 0009 	add.w	r0, sp, #9
 23fe288:	bfd8      	it	le
 23fe28a:	4622      	movle	r2, r4
{
 23fe28c:	4689      	mov	r9, r1
    uint8_t write_dummy[length_write_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe28e:	4621      	mov	r1, r4
 23fe290:	f88d 4008 	strb.w	r4, [sp, #8]
 23fe294:	f001 fcdd 	bl	23ffc52 <memset>

    //create dummy array size of read fill with zeros
    uint8_t read_dummy[length_read_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe298:	1df3      	adds	r3, r6, #7
 23fe29a:	f023 0307 	bic.w	r3, r3, #7
 23fe29e:	42a6      	cmp	r6, r4
    uint8_t write_dummy[length_write_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe2a0:	f10d 0b08 	add.w	fp, sp, #8
    uint8_t read_dummy[length_read_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe2a4:	ebad 0d03 	sub.w	sp, sp, r3
 23fe2a8:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 23fe2ac:	4621      	mov	r1, r4
 23fe2ae:	bfd8      	it	le
 23fe2b0:	4622      	movle	r2, r4
 23fe2b2:	f10d 0009 	add.w	r0, sp, #9
 23fe2b6:	f88d 4008 	strb.w	r4, [sp, #8]
 23fe2ba:	f001 fcca 	bl	23ffc52 <memset>
        return instance().beginTransaction();
 23fe2be:	f7ff ff61 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe2c2:	f001 f90c 	bl	23ff4de <_ZN8SPIClass16beginTransactionEv>

    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe2c6:	1c43      	adds	r3, r0, #1
    uint8_t read_dummy[length_read_data] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe2c8:	f10d 0a08 	add.w	sl, sp, #8
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe2cc:	d014      	beq.n	23fe2f8 <_Z26spi_master_write_then_readP12spi_master_tPhjS1_j+0x94>
    }
    byte transfer(byte data) {
        return instance().transfer(data);
    }
    void transfer(const void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback) {
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
 23fe2ce:	f7ff ff59 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe2d2:	462b      	mov	r3, r5
 23fe2d4:	465a      	mov	r2, fp
 23fe2d6:	4649      	mov	r1, r9
 23fe2d8:	9400      	str	r4, [sp, #0]
 23fe2da:	f001 f94f 	bl	23ff57c <_ZN8SPIClass8transferEPKvPvjPFvvE>
 23fe2de:	f7ff ff51 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe2e2:	4633      	mov	r3, r6
 23fe2e4:	4642      	mov	r2, r8
 23fe2e6:	4651      	mov	r1, sl
 23fe2e8:	9400      	str	r4, [sp, #0]
 23fe2ea:	f001 f947 	bl	23ff57c <_ZN8SPIClass8transferEPKvPvjPFvvE>
        instance().endTransaction();
 23fe2ee:	f7ff ff49 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe2f2:	f001 f8f7 	bl	23ff4e4 <_ZN8SPIClass14endTransactionEv>
    }
    
    SPI.transfer(write_data_buffer, write_dummy, length_write_data, NULL);      //spi transaction for write (read = NULL)
    SPI.transfer(read_dummy, read_data_buffer, length_read_data, NULL);         //spi transaction for read (write = NULL)
    SPI.endTransaction();                                                       //end transaction and release spi peripheral lock
    return SPI_MASTER_SUCCESS;                                                  //return status                                         
 23fe2f6:	4620      	mov	r0, r4
}                                                           
 23fe2f8:	3704      	adds	r7, #4
 23fe2fa:	46bd      	mov	sp, r7
 23fe2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fe300 <_Z16spi_master_writeP12spi_master_tPhj>:
{
 23fe300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe304:	2500      	movs	r5, #0
{
 23fe306:	4614      	mov	r4, r2
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe308:	1dd3      	adds	r3, r2, #7
 23fe30a:	f023 0307 	bic.w	r3, r3, #7
{
 23fe30e:	b082      	sub	sp, #8
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe310:	42ac      	cmp	r4, r5
{
 23fe312:	af02      	add	r7, sp, #8
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe314:	ebad 0d03 	sub.w	sp, sp, r3
 23fe318:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
{
 23fe31c:	460e      	mov	r6, r1
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe31e:	bfd8      	it	le
 23fe320:	462a      	movle	r2, r5
 23fe322:	4629      	mov	r1, r5
 23fe324:	f10d 0009 	add.w	r0, sp, #9
 23fe328:	f88d 5008 	strb.w	r5, [sp, #8]
 23fe32c:	f001 fc91 	bl	23ffc52 <memset>
        return instance().beginTransaction();
 23fe330:	f7ff ff28 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe334:	f001 f8d3 	bl	23ff4de <_ZN8SPIClass16beginTransactionEv>
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe338:	1c43      	adds	r3, r0, #1
    uint8_t write_dummy[write_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size
 23fe33a:	f10d 0808 	add.w	r8, sp, #8
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe33e:	d00c      	beq.n	23fe35a <_Z16spi_master_writeP12spi_master_tPhj+0x5a>
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
 23fe340:	f7ff ff20 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe344:	4623      	mov	r3, r4
 23fe346:	4642      	mov	r2, r8
 23fe348:	4631      	mov	r1, r6
 23fe34a:	9500      	str	r5, [sp, #0]
 23fe34c:	f001 f916 	bl	23ff57c <_ZN8SPIClass8transferEPKvPvjPFvvE>
        instance().endTransaction();
 23fe350:	f7ff ff18 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe354:	f001 f8c6 	bl	23ff4e4 <_ZN8SPIClass14endTransactionEv>
    return SPI_MASTER_SUCCESS;                                                  //return status
 23fe358:	4628      	mov	r0, r5
}
 23fe35a:	46bd      	mov	sp, r7
 23fe35c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe360 <_Z15spi_master_readP12spi_master_tPhj>:
{
 23fe360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe364:	2500      	movs	r5, #0
{
 23fe366:	4614      	mov	r4, r2
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe368:	1dd3      	adds	r3, r2, #7
 23fe36a:	f023 0307 	bic.w	r3, r3, #7
{
 23fe36e:	b082      	sub	sp, #8
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe370:	42ac      	cmp	r4, r5
{
 23fe372:	af02      	add	r7, sp, #8
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe374:	ebad 0d03 	sub.w	sp, sp, r3
 23fe378:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
{
 23fe37c:	460e      	mov	r6, r1
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe37e:	bfd8      	it	le
 23fe380:	462a      	movle	r2, r5
 23fe382:	4629      	mov	r1, r5
 23fe384:	f10d 0009 	add.w	r0, sp, #9
 23fe388:	f88d 5008 	strb.w	r5, [sp, #8]
 23fe38c:	f001 fc61 	bl	23ffc52 <memset>
        return instance().beginTransaction();
 23fe390:	f7ff fef8 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe394:	f001 f8a3 	bl	23ff4de <_ZN8SPIClass16beginTransactionEv>
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe398:	1c43      	adds	r3, r0, #1
    uint8_t read_dummy[read_data_length] = {0};     //required for SPI.transfer read/write arrays must be of same size  
 23fe39a:	f10d 0808 	add.w	r8, sp, #8
    if(SPI.beginTransaction() == SPI_MASTER_ERROR)      //setup fail
 23fe39e:	d00c      	beq.n	23fe3ba <_Z15spi_master_readP12spi_master_tPhj+0x5a>
        instance().transfer(tx_buffer, rx_buffer, length, user_callback);
 23fe3a0:	f7ff fef0 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe3a4:	4623      	mov	r3, r4
 23fe3a6:	4632      	mov	r2, r6
 23fe3a8:	4641      	mov	r1, r8
 23fe3aa:	9500      	str	r5, [sp, #0]
 23fe3ac:	f001 f8e6 	bl	23ff57c <_ZN8SPIClass8transferEPKvPvjPFvvE>
        instance().endTransaction();
 23fe3b0:	f7ff fee8 	bl	23fe184 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 23fe3b4:	f001 f896 	bl	23ff4e4 <_ZN8SPIClass14endTransactionEv>
    return SPI_MASTER_SUCCESS;                                              //return status
 23fe3b8:	4628      	mov	r0, r5
}
 23fe3ba:	46bd      	mov	sp, r7
 23fe3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe3c0 <_ZL13temphum13_crct>:
}

// ----------------------------------------------- PRIVATE FUNCTION DEFINITIONS

static uint8_t temphum13_crc ( uint16_t input_value )
{
 23fe3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe3c4:	b087      	sub	sp, #28
 23fe3c6:	ab02      	add	r3, sp, #8
 23fe3c8:	4601      	mov	r1, r0
    char do_invert;
    uint8_t ret_val;
    uint16_t aux_mask;
    char bit_string[ 16 ];
    
    aux_mask = 0x8000;
 23fe3ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
{
 23fe3ce:	2010      	movs	r0, #16
 23fe3d0:	469c      	mov	ip, r3
        {
            bit_string[ i ] = '1';
        }
        else
        {
            bit_string[ i ] = '0';
 23fe3d2:	2430      	movs	r4, #48	; 0x30
            bit_string[ i ] = '1';
 23fe3d4:	2531      	movs	r5, #49	; 0x31
        if ( ( ( input_value & aux_mask ) != 0x0000 ) )
 23fe3d6:	4211      	tst	r1, r2
    for ( i = 0; i < 16; i ++ )
 23fe3d8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
            bit_string[ i ] = '1';
 23fe3dc:	bf14      	ite	ne
 23fe3de:	701d      	strbne	r5, [r3, #0]
            bit_string[ i ] = '0';
 23fe3e0:	701c      	strbeq	r4, [r3, #0]
    for ( i = 0; i < 16; i ++ )
 23fe3e2:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
        }
        
        aux_mask >>= 1;
 23fe3e6:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for ( i = 0; i < 16; i ++ )
 23fe3ea:	f103 0301 	add.w	r3, r3, #1
 23fe3ee:	d1f2      	bne.n	23fe3d6 <_ZL13temphum13_crct+0x16>
 23fe3f0:	4606      	mov	r6, r0
 23fe3f2:	4607      	mov	r7, r0
 23fe3f4:	4686      	mov	lr, r0
 23fe3f6:	4683      	mov	fp, r0
 23fe3f8:	4603      	mov	r3, r0
 23fe3fa:	4680      	mov	r8, r0
 23fe3fc:	4681      	mov	r9, r0
 23fe3fe:	4602      	mov	r2, r0
 23fe400:	4605      	mov	r5, r0
        crc[ i ] = 0;
    }

    for ( i = 0; i < 16; ++ i )
    {
        do_invert = ( '1' == bit_string[ i ] ) ^ crc[ 7 ];
 23fe402:	f81c 1005 	ldrb.w	r1, [ip, r5]
    for ( i = 0; i < 16; ++ i )
 23fe406:	3501      	adds	r5, #1
        do_invert = ( '1' == bit_string[ i ] ) ^ crc[ 7 ];
 23fe408:	2931      	cmp	r1, #49	; 0x31
 23fe40a:	bf08      	it	eq
 23fe40c:	f082 0201 	eoreq.w	r2, r2, #1
 23fe410:	b2d4      	uxtb	r4, r2

        crc[ 7 ] = crc[ 6 ];
        crc[ 6 ] = crc[ 5 ];
        crc[ 5 ] = crc[ 4 ] ^ do_invert;
 23fe412:	46c2      	mov	sl, r8
    for ( i = 0; i < 16; ++ i )
 23fe414:	2d10      	cmp	r5, #16
        crc[ 5 ] = crc[ 4 ] ^ do_invert;
 23fe416:	ea84 0803 	eor.w	r8, r4, r3
        crc[ 4 ] = crc[ 3 ] ^ do_invert;
 23fe41a:	ea84 030b 	eor.w	r3, r4, fp
 23fe41e:	464a      	mov	r2, r9
 23fe420:	46f3      	mov	fp, lr
 23fe422:	4631      	mov	r1, r6
 23fe424:	b2db      	uxtb	r3, r3
    for ( i = 0; i < 16; ++ i )
 23fe426:	d122      	bne.n	23fe46e <_ZL13temphum13_crct+0xae>
 23fe428:	f88d 3004 	strb.w	r3, [sp, #4]
 23fe42c:	4669      	mov	r1, sp
    }

    ret_val = 0x00;
    aux_mask = 0x0001;
    
    for ( i = 0; i < 8; i ++ )
 23fe42e:	2300      	movs	r3, #0
    aux_mask = 0x0001;
 23fe430:	2201      	movs	r2, #1
 23fe432:	f88d 9007 	strb.w	r9, [sp, #7]
 23fe436:	f88d a006 	strb.w	sl, [sp, #6]
 23fe43a:	f88d 8005 	strb.w	r8, [sp, #5]
 23fe43e:	f88d e003 	strb.w	lr, [sp, #3]
 23fe442:	f88d 7002 	strb.w	r7, [sp, #2]
 23fe446:	f88d 6001 	strb.w	r6, [sp, #1]
 23fe44a:	f88d 4000 	strb.w	r4, [sp]
    {
        if ( ( ( crc[ i ] & 0x01 ) == 0x01 ) )
 23fe44e:	f811 4b01 	ldrb.w	r4, [r1], #1
    for ( i = 0; i < 8; i ++ )
 23fe452:	3301      	adds	r3, #1
        if ( ( ( crc[ i ] & 0x01 ) == 0x01 ) )
 23fe454:	07e4      	lsls	r4, r4, #31
        {
            ret_val |= aux_mask;
 23fe456:	bf48      	it	mi
 23fe458:	4310      	orrmi	r0, r2
    for ( i = 0; i < 8; i ++ )
 23fe45a:	b2db      	uxtb	r3, r3
            ret_val |= aux_mask;
 23fe45c:	bf48      	it	mi
 23fe45e:	b2c0      	uxtbmi	r0, r0
        }
        aux_mask <<= 1;
 23fe460:	0052      	lsls	r2, r2, #1
    for ( i = 0; i < 8; i ++ )
 23fe462:	2b08      	cmp	r3, #8
        aux_mask <<= 1;
 23fe464:	b292      	uxth	r2, r2
    for ( i = 0; i < 8; i ++ )
 23fe466:	d1f2      	bne.n	23fe44e <_ZL13temphum13_crct+0x8e>
    }
    
    return ret_val;
}
 23fe468:	b007      	add	sp, #28
 23fe46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fe46e:	46be      	mov	lr, r7
        do_invert = ( '1' == bit_string[ i ] ) ^ crc[ 7 ];
 23fe470:	4626      	mov	r6, r4
 23fe472:	460f      	mov	r7, r1
 23fe474:	46d1      	mov	r9, sl
 23fe476:	e7c4      	b.n	23fe402 <_ZL13temphum13_crct+0x42>

023fe478 <_Z11Delay_100msv>:
#define HAL_CHANNEL_ERROR (uint8_t)(0xFFFFFFFF)        //channel error, (timer, ADC, etc.)
#define HAL_PIN_NC (uint8_t)(0xFFFFFFFF)               //pin error, wrong pin selected
#define HAL_PORT_NC (uint8_t)(0xFFFFFFFF)              //port error, wrong port selected

//function for mikroE delays for libray port compability
inline void Delay_100ms( ) {delay(100);}
 23fe478:	2064      	movs	r0, #100	; 0x64
 23fe47a:	f000 bc97 	b.w	23fedac <delay>

023fe47e <temphum13_cfg_setup>:
    cfg->scl = HAL_PIN_NC;
 23fe47e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe482:	8003      	strh	r3, [r0, #0]
    cfg->i2c_speed = I2C_MASTER_SPEED_STANDARD; 
 23fe484:	2300      	movs	r3, #0
 23fe486:	6043      	str	r3, [r0, #4]
    cfg->i2c_address = TEMPHUM13_DEVICE_ADDRESS;
 23fe488:	2340      	movs	r3, #64	; 0x40
 23fe48a:	7203      	strb	r3, [r0, #8]
}
 23fe48c:	4770      	bx	lr

023fe48e <temphum13_init>:
{
 23fe48e:	b530      	push	{r4, r5, lr}
 23fe490:	460d      	mov	r5, r1
 23fe492:	4604      	mov	r4, r0
 23fe494:	b085      	sub	sp, #20
    i2c_master_configure_default( &i2c_cfg );
 23fe496:	a801      	add	r0, sp, #4
 23fe498:	f7ff fdd0 	bl	23fe03c <_Z28i2c_master_configure_defaultP19i2c_master_config_t>
    i2c_cfg.speed  = cfg->i2c_speed;
 23fe49c:	686b      	ldr	r3, [r5, #4]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fe49e:	4620      	mov	r0, r4
    i2c_cfg.speed  = cfg->i2c_speed;
 23fe4a0:	9302      	str	r3, [sp, #8]
    i2c_cfg.scl    = cfg->scl;
 23fe4a2:	782b      	ldrb	r3, [r5, #0]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fe4a4:	a901      	add	r1, sp, #4
    i2c_cfg.scl    = cfg->scl;
 23fe4a6:	f88d 3006 	strb.w	r3, [sp, #6]
    i2c_cfg.sda    = cfg->sda;
 23fe4aa:	786b      	ldrb	r3, [r5, #1]
 23fe4ac:	f88d 3005 	strb.w	r3, [sp, #5]
    ctx->slave_address = cfg->i2c_address;
 23fe4b0:	7a2b      	ldrb	r3, [r5, #8]
 23fe4b2:	7323      	strb	r3, [r4, #12]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fe4b4:	f7ff fdd4 	bl	23fe060 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>
 23fe4b8:	3001      	adds	r0, #1
 23fe4ba:	d00a      	beq.n	23fe4d2 <temphum13_init+0x44>
    i2c_master_set_slave_address( &ctx->i2c, ctx->slave_address );
 23fe4bc:	7b21      	ldrb	r1, [r4, #12]
 23fe4be:	4620      	mov	r0, r4
 23fe4c0:	f7ff fdec 	bl	23fe09c <_Z28i2c_master_set_slave_addressP12i2c_master_th>
    i2c_master_set_speed( &ctx->i2c, cfg->i2c_speed );
 23fe4c4:	4620      	mov	r0, r4
 23fe4c6:	6869      	ldr	r1, [r5, #4]
 23fe4c8:	f7ff fdda 	bl	23fe080 <_Z20i2c_master_set_speedP12i2c_master_tm>
    return TEMPHUM13_OK;
 23fe4cc:	2000      	movs	r0, #0
}
 23fe4ce:	b005      	add	sp, #20
 23fe4d0:	bd30      	pop	{r4, r5, pc}
        return TEMPHUM13_INIT_ERROR;
 23fe4d2:	20ff      	movs	r0, #255	; 0xff
 23fe4d4:	e7fb      	b.n	23fe4ce <temphum13_init+0x40>

023fe4d6 <temphum13_generic_read>:
{
 23fe4d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe4d8:	461e      	mov	r6, r3
 23fe4da:	4604      	mov	r4, r0
 23fe4dc:	4615      	mov	r5, r2
 23fe4de:	f88d 1007 	strb.w	r1, [sp, #7]
    i2c_master_write( &ctx->i2c, &reg, 1 );
 23fe4e2:	2201      	movs	r2, #1
 23fe4e4:	f10d 0107 	add.w	r1, sp, #7
 23fe4e8:	f7ff fdde 	bl	23fe0a8 <_Z16i2c_master_writeP12i2c_master_tPhj>
    Delay_100ms( );
 23fe4ec:	f7ff ffc4 	bl	23fe478 <_Z11Delay_100msv>
    i2c_master_read( &ctx->i2c,data_buf, len );
 23fe4f0:	4632      	mov	r2, r6
 23fe4f2:	4629      	mov	r1, r5
 23fe4f4:	4620      	mov	r0, r4
 23fe4f6:	f7ff fdf5 	bl	23fe0e4 <_Z15i2c_master_readP12i2c_master_tPhj>
    Delay_100ms();
 23fe4fa:	f7ff ffbd 	bl	23fe478 <_Z11Delay_100msv>
}
 23fe4fe:	b002      	add	sp, #8
 23fe500:	bd70      	pop	{r4, r5, r6, pc}
 23fe502:	0000      	movs	r0, r0
 23fe504:	0000      	movs	r0, r0
	...

023fe508 <temphum13_get_temperature>:
{
 23fe508:	b537      	push	{r0, r1, r2, r4, r5, lr}
    temphum13_generic_read( ctx, aux_command, aux_buffer, 3 );
 23fe50a:	2303      	movs	r3, #3
 23fe50c:	21e3      	movs	r1, #227	; 0xe3
 23fe50e:	aa01      	add	r2, sp, #4
 23fe510:	f7ff ffe1 	bl	23fe4d6 <temphum13_generic_read>
    aux_temperature |= aux_buffer[ 1 ];
 23fe514:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    if ( aux_buffer[ 2 ] == temphum13_crc( aux_temperature ) )
 23fe518:	f89d 5006 	ldrb.w	r5, [sp, #6]
 23fe51c:	ba64      	rev16	r4, r4
 23fe51e:	b2a4      	uxth	r4, r4
 23fe520:	4620      	mov	r0, r4
 23fe522:	f7ff ff4d 	bl	23fe3c0 <_ZL13temphum13_crct>
 23fe526:	4285      	cmp	r5, r0
 23fe528:	d11d      	bne.n	23fe566 <temphum13_get_temperature+0x5e>
        aux_temperature &= 0xFFFC;
 23fe52a:	f024 0003 	bic.w	r0, r4, #3
        retval_temperature *= 175.72;
 23fe52e:	ee07 0a90 	vmov	s15, r0
 23fe532:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 23fe536:	ee17 0a90 	vmov	r0, s15
 23fe53a:	f7fe ff61 	bl	23fd400 <__aeabi_f2d>
 23fe53e:	a30d      	add	r3, pc, #52	; (adr r3, 23fe574 <temphum13_get_temperature+0x6c>)
 23fe540:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe544:	f7fe ffb4 	bl	23fd4b0 <__aeabi_dmul>
 23fe548:	f7ff faaa 	bl	23fdaa0 <__aeabi_d2f>
        retval_temperature -= 46.85;
 23fe54c:	f7fe ff58 	bl	23fd400 <__aeabi_f2d>
 23fe550:	a30a      	add	r3, pc, #40	; (adr r3, 23fe57c <temphum13_get_temperature+0x74>)
 23fe552:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fe556:	f7fe fdf3 	bl	23fd140 <__aeabi_dsub>
 23fe55a:	f7ff faa1 	bl	23fdaa0 <__aeabi_d2f>
 23fe55e:	ee00 0a10 	vmov	s0, r0
}
 23fe562:	b003      	add	sp, #12
 23fe564:	bd30      	pop	{r4, r5, pc}
    return 65536.00;
 23fe566:	ed9f 0a02 	vldr	s0, [pc, #8]	; 23fe570 <temphum13_get_temperature+0x68>
 23fe56a:	e7fa      	b.n	23fe562 <temphum13_get_temperature+0x5a>
 23fe56c:	f3af 8000 	nop.w
 23fe570:	47800000 	.word	0x47800000
 23fe574:	3d70a3d7 	.word	0x3d70a3d7
 23fe578:	4065f70a 	.word	0x4065f70a
 23fe57c:	cccccccd 	.word	0xcccccccd
 23fe580:	40476ccc 	.word	0x40476ccc

023fe584 <temphum13_get_humidity>:
{
 23fe584:	b537      	push	{r0, r1, r2, r4, r5, lr}
    temphum13_generic_read( ctx, aux_command, aux_buffer, 3 );
 23fe586:	2303      	movs	r3, #3
 23fe588:	21e5      	movs	r1, #229	; 0xe5
 23fe58a:	aa01      	add	r2, sp, #4
 23fe58c:	f7ff ffa3 	bl	23fe4d6 <temphum13_generic_read>
    aux_humidity |= aux_buffer[ 1 ];
 23fe590:	f8bd 4004 	ldrh.w	r4, [sp, #4]
    if ( aux_buffer[ 2 ] == temphum13_crc( aux_humidity ) )
 23fe594:	f89d 5006 	ldrb.w	r5, [sp, #6]
 23fe598:	ba64      	rev16	r4, r4
 23fe59a:	b2a4      	uxth	r4, r4
 23fe59c:	4620      	mov	r0, r4
 23fe59e:	f7ff ff0f 	bl	23fe3c0 <_ZL13temphum13_crct>
 23fe5a2:	4285      	cmp	r5, r0
        aux_humidity &= 0xFFFC;
 23fe5a4:	bf01      	itttt	eq
 23fe5a6:	f024 0303 	biceq.w	r3, r4, #3
 23fe5aa:	ee07 3a90 	vmoveq	s15, r3
        retval_humidity -= 6.0;
 23fe5ae:	eeb9 0a08 	vmoveq.f32	s0, #152	; 0xc0c00000 -6.0
        retval_humidity /= 65536;
 23fe5b2:	eefb 7ac8 	vcvteq.f32.u32	s15, s15, #16
        retval_humidity -= 6.0;
 23fe5b6:	bf0a      	itet	eq
 23fe5b8:	ed9f 7a03 	vldreq	s14, [pc, #12]	; 23fe5c8 <temphum13_get_humidity+0x44>
    return 65536.00;
 23fe5bc:	ed9f 0a03 	vldrne	s0, [pc, #12]	; 23fe5cc <temphum13_get_humidity+0x48>
        retval_humidity -= 6.0;
 23fe5c0:	eea7 0a87 	vfmaeq.f32	s0, s15, s14
}
 23fe5c4:	b003      	add	sp, #12
 23fe5c6:	bd30      	pop	{r4, r5, pc}
 23fe5c8:	42fa0000 	.word	0x42fa0000
 23fe5cc:	47800000 	.word	0x47800000

023fe5d0 <temphum13_soft_reset>:
    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fe5d0:	23fe      	movs	r3, #254	; 0xfe
{
 23fe5d2:	b507      	push	{r0, r1, r2, lr}
    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fe5d4:	2201      	movs	r2, #1
 23fe5d6:	f10d 0107 	add.w	r1, sp, #7
    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23fe5da:	f88d 3007 	strb.w	r3, [sp, #7]
    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23fe5de:	f7ff fd63 	bl	23fe0a8 <_Z16i2c_master_writeP12i2c_master_tPhj>
}
 23fe5e2:	b003      	add	sp, #12
 23fe5e4:	f85d fb04 	ldr.w	pc, [sp], #4

023fe5e8 <temphum13_default_cfg>:
{
 23fe5e8:	b507      	push	{r0, r1, r2, lr}
 23fe5ea:	9001      	str	r0, [sp, #4]
    Delay_100ms( );
 23fe5ec:	f7ff ff44 	bl	23fe478 <_Z11Delay_100msv>
    Delay_100ms( );
 23fe5f0:	f7ff ff42 	bl	23fe478 <_Z11Delay_100msv>
    Delay_100ms( );
 23fe5f4:	f7ff ff40 	bl	23fe478 <_Z11Delay_100msv>
    Delay_100ms( );
 23fe5f8:	f7ff ff3e 	bl	23fe478 <_Z11Delay_100msv>
    Delay_100ms( );
 23fe5fc:	f7ff ff3c 	bl	23fe478 <_Z11Delay_100msv>
    temphum13_soft_reset( ctx );
 23fe600:	9801      	ldr	r0, [sp, #4]
 23fe602:	f7ff ffe5 	bl	23fe5d0 <temphum13_soft_reset>
    Delay_100ms( );
 23fe606:	f7ff ff37 	bl	23fe478 <_Z11Delay_100msv>
    Delay_100ms( );
 23fe60a:	f7ff ff35 	bl	23fe478 <_Z11Delay_100msv>
    Delay_100ms( );
 23fe60e:	f7ff ff33 	bl	23fe478 <_Z11Delay_100msv>
    Delay_100ms( );
 23fe612:	f7ff ff31 	bl	23fe478 <_Z11Delay_100msv>
    Delay_100ms( );
 23fe616:	f7ff ff2f 	bl	23fe478 <_Z11Delay_100msv>
}
 23fe61a:	b003      	add	sp, #12
 23fe61c:	f85d fb04 	ldr.w	pc, [sp], #4

023fe620 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fe620:	b509      	push	{r0, r3, lr}
 23fe622:	4804      	ldr	r0, [pc, #16]	; (23fe634 <os_mutex_recursive_create+0x14>)
 23fe624:	6800      	ldr	r0, [r0, #0]
 23fe626:	4b04      	ldr	r3, [pc, #16]	; (23fe638 <os_mutex_recursive_create+0x18>)
 23fe628:	4403      	add	r3, r0
 23fe62a:	681b      	ldr	r3, [r3, #0]
 23fe62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe62e:	9302      	str	r3, [sp, #8]
 23fe630:	bd09      	pop	{r0, r3, pc}
 23fe632:	0000      	.short	0x0000
 23fe634:	1007adb8 	.word	0x1007adb8
 23fe638:	00000030 	.word	0x00000030

023fe63c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fe63c:	b509      	push	{r0, r3, lr}
 23fe63e:	4804      	ldr	r0, [pc, #16]	; (23fe650 <HAL_RNG_GetRandomNumber+0x14>)
 23fe640:	6800      	ldr	r0, [r0, #0]
 23fe642:	4b04      	ldr	r3, [pc, #16]	; (23fe654 <HAL_RNG_GetRandomNumber+0x18>)
 23fe644:	4403      	add	r3, r0
 23fe646:	681b      	ldr	r3, [r3, #0]
 23fe648:	685b      	ldr	r3, [r3, #4]
 23fe64a:	9302      	str	r3, [sp, #8]
 23fe64c:	bd09      	pop	{r0, r3, pc}
 23fe64e:	0000      	.short	0x0000
 23fe650:	1007adb8 	.word	0x1007adb8
 23fe654:	00000000 	.word	0x00000000

023fe658 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fe658:	b509      	push	{r0, r3, lr}
 23fe65a:	4804      	ldr	r0, [pc, #16]	; (23fe66c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fe65c:	6800      	ldr	r0, [r0, #0]
 23fe65e:	4b04      	ldr	r3, [pc, #16]	; (23fe670 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fe660:	4403      	add	r3, r0
 23fe662:	681b      	ldr	r3, [r3, #0]
 23fe664:	695b      	ldr	r3, [r3, #20]
 23fe666:	9302      	str	r3, [sp, #8]
 23fe668:	bd09      	pop	{r0, r3, pc}
 23fe66a:	0000      	.short	0x0000
 23fe66c:	1007adb8 	.word	0x1007adb8
 23fe670:	00000000 	.word	0x00000000

023fe674 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fe674:	b509      	push	{r0, r3, lr}
 23fe676:	4804      	ldr	r0, [pc, #16]	; (23fe688 <hal_gpio_mode+0x14>)
 23fe678:	6800      	ldr	r0, [r0, #0]
 23fe67a:	4b04      	ldr	r3, [pc, #16]	; (23fe68c <hal_gpio_mode+0x18>)
 23fe67c:	4403      	add	r3, r0
 23fe67e:	681b      	ldr	r3, [r3, #0]
 23fe680:	689b      	ldr	r3, [r3, #8]
 23fe682:	9302      	str	r3, [sp, #8]
 23fe684:	bd09      	pop	{r0, r3, pc}
 23fe686:	0000      	.short	0x0000
 23fe688:	1007adb8 	.word	0x1007adb8
 23fe68c:	00000014 	.word	0x00000014

023fe690 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fe690:	b509      	push	{r0, r3, lr}
 23fe692:	4804      	ldr	r0, [pc, #16]	; (23fe6a4 <hal_gpio_get_mode+0x14>)
 23fe694:	6800      	ldr	r0, [r0, #0]
 23fe696:	4b04      	ldr	r3, [pc, #16]	; (23fe6a8 <hal_gpio_get_mode+0x18>)
 23fe698:	4403      	add	r3, r0
 23fe69a:	681b      	ldr	r3, [r3, #0]
 23fe69c:	68db      	ldr	r3, [r3, #12]
 23fe69e:	9302      	str	r3, [sp, #8]
 23fe6a0:	bd09      	pop	{r0, r3, pc}
 23fe6a2:	0000      	.short	0x0000
 23fe6a4:	1007adb8 	.word	0x1007adb8
 23fe6a8:	00000014 	.word	0x00000014

023fe6ac <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fe6ac:	b509      	push	{r0, r3, lr}
 23fe6ae:	4804      	ldr	r0, [pc, #16]	; (23fe6c0 <hal_gpio_write+0x14>)
 23fe6b0:	6800      	ldr	r0, [r0, #0]
 23fe6b2:	4b04      	ldr	r3, [pc, #16]	; (23fe6c4 <hal_gpio_write+0x18>)
 23fe6b4:	4403      	add	r3, r0
 23fe6b6:	681b      	ldr	r3, [r3, #0]
 23fe6b8:	691b      	ldr	r3, [r3, #16]
 23fe6ba:	9302      	str	r3, [sp, #8]
 23fe6bc:	bd09      	pop	{r0, r3, pc}
 23fe6be:	0000      	.short	0x0000
 23fe6c0:	1007adb8 	.word	0x1007adb8
 23fe6c4:	00000014 	.word	0x00000014

023fe6c8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fe6c8:	b509      	push	{r0, r3, lr}
 23fe6ca:	4804      	ldr	r0, [pc, #16]	; (23fe6dc <hal_i2c_set_speed+0x14>)
 23fe6cc:	6800      	ldr	r0, [r0, #0]
 23fe6ce:	4b04      	ldr	r3, [pc, #16]	; (23fe6e0 <hal_i2c_set_speed+0x18>)
 23fe6d0:	4403      	add	r3, r0
 23fe6d2:	681b      	ldr	r3, [r3, #0]
 23fe6d4:	681b      	ldr	r3, [r3, #0]
 23fe6d6:	9302      	str	r3, [sp, #8]
 23fe6d8:	bd09      	pop	{r0, r3, pc}
 23fe6da:	0000      	.short	0x0000
 23fe6dc:	1007adb8 	.word	0x1007adb8
 23fe6e0:	00000010 	.word	0x00000010

023fe6e4 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fe6e4:	b509      	push	{r0, r3, lr}
 23fe6e6:	4804      	ldr	r0, [pc, #16]	; (23fe6f8 <hal_i2c_begin+0x14>)
 23fe6e8:	6800      	ldr	r0, [r0, #0]
 23fe6ea:	4b04      	ldr	r3, [pc, #16]	; (23fe6fc <hal_i2c_begin+0x18>)
 23fe6ec:	4403      	add	r3, r0
 23fe6ee:	681b      	ldr	r3, [r3, #0]
 23fe6f0:	68db      	ldr	r3, [r3, #12]
 23fe6f2:	9302      	str	r3, [sp, #8]
 23fe6f4:	bd09      	pop	{r0, r3, pc}
 23fe6f6:	0000      	.short	0x0000
 23fe6f8:	1007adb8 	.word	0x1007adb8
 23fe6fc:	00000010 	.word	0x00000010

023fe700 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fe700:	b509      	push	{r0, r3, lr}
 23fe702:	4804      	ldr	r0, [pc, #16]	; (23fe714 <hal_i2c_begin_transmission+0x14>)
 23fe704:	6800      	ldr	r0, [r0, #0]
 23fe706:	4b04      	ldr	r3, [pc, #16]	; (23fe718 <hal_i2c_begin_transmission+0x18>)
 23fe708:	4403      	add	r3, r0
 23fe70a:	681b      	ldr	r3, [r3, #0]
 23fe70c:	699b      	ldr	r3, [r3, #24]
 23fe70e:	9302      	str	r3, [sp, #8]
 23fe710:	bd09      	pop	{r0, r3, pc}
 23fe712:	0000      	.short	0x0000
 23fe714:	1007adb8 	.word	0x1007adb8
 23fe718:	00000010 	.word	0x00000010

023fe71c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fe71c:	b509      	push	{r0, r3, lr}
 23fe71e:	4804      	ldr	r0, [pc, #16]	; (23fe730 <hal_i2c_end_transmission+0x14>)
 23fe720:	6800      	ldr	r0, [r0, #0]
 23fe722:	4b04      	ldr	r3, [pc, #16]	; (23fe734 <hal_i2c_end_transmission+0x18>)
 23fe724:	4403      	add	r3, r0
 23fe726:	681b      	ldr	r3, [r3, #0]
 23fe728:	69db      	ldr	r3, [r3, #28]
 23fe72a:	9302      	str	r3, [sp, #8]
 23fe72c:	bd09      	pop	{r0, r3, pc}
 23fe72e:	0000      	.short	0x0000
 23fe730:	1007adb8 	.word	0x1007adb8
 23fe734:	00000010 	.word	0x00000010

023fe738 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fe738:	b509      	push	{r0, r3, lr}
 23fe73a:	4804      	ldr	r0, [pc, #16]	; (23fe74c <hal_i2c_write+0x14>)
 23fe73c:	6800      	ldr	r0, [r0, #0]
 23fe73e:	4b04      	ldr	r3, [pc, #16]	; (23fe750 <hal_i2c_write+0x18>)
 23fe740:	4403      	add	r3, r0
 23fe742:	681b      	ldr	r3, [r3, #0]
 23fe744:	6a1b      	ldr	r3, [r3, #32]
 23fe746:	9302      	str	r3, [sp, #8]
 23fe748:	bd09      	pop	{r0, r3, pc}
 23fe74a:	0000      	.short	0x0000
 23fe74c:	1007adb8 	.word	0x1007adb8
 23fe750:	00000010 	.word	0x00000010

023fe754 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fe754:	b509      	push	{r0, r3, lr}
 23fe756:	4804      	ldr	r0, [pc, #16]	; (23fe768 <hal_i2c_available+0x14>)
 23fe758:	6800      	ldr	r0, [r0, #0]
 23fe75a:	4b04      	ldr	r3, [pc, #16]	; (23fe76c <hal_i2c_available+0x18>)
 23fe75c:	4403      	add	r3, r0
 23fe75e:	681b      	ldr	r3, [r3, #0]
 23fe760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe762:	9302      	str	r3, [sp, #8]
 23fe764:	bd09      	pop	{r0, r3, pc}
 23fe766:	0000      	.short	0x0000
 23fe768:	1007adb8 	.word	0x1007adb8
 23fe76c:	00000010 	.word	0x00000010

023fe770 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fe770:	b509      	push	{r0, r3, lr}
 23fe772:	4804      	ldr	r0, [pc, #16]	; (23fe784 <hal_i2c_read+0x14>)
 23fe774:	6800      	ldr	r0, [r0, #0]
 23fe776:	4b04      	ldr	r3, [pc, #16]	; (23fe788 <hal_i2c_read+0x18>)
 23fe778:	4403      	add	r3, r0
 23fe77a:	681b      	ldr	r3, [r3, #0]
 23fe77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe77e:	9302      	str	r3, [sp, #8]
 23fe780:	bd09      	pop	{r0, r3, pc}
 23fe782:	0000      	.short	0x0000
 23fe784:	1007adb8 	.word	0x1007adb8
 23fe788:	00000010 	.word	0x00000010

023fe78c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fe78c:	b509      	push	{r0, r3, lr}
 23fe78e:	4804      	ldr	r0, [pc, #16]	; (23fe7a0 <hal_i2c_peek+0x14>)
 23fe790:	6800      	ldr	r0, [r0, #0]
 23fe792:	4b04      	ldr	r3, [pc, #16]	; (23fe7a4 <hal_i2c_peek+0x18>)
 23fe794:	4403      	add	r3, r0
 23fe796:	681b      	ldr	r3, [r3, #0]
 23fe798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe79a:	9302      	str	r3, [sp, #8]
 23fe79c:	bd09      	pop	{r0, r3, pc}
 23fe79e:	0000      	.short	0x0000
 23fe7a0:	1007adb8 	.word	0x1007adb8
 23fe7a4:	00000010 	.word	0x00000010

023fe7a8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fe7a8:	b509      	push	{r0, r3, lr}
 23fe7aa:	4804      	ldr	r0, [pc, #16]	; (23fe7bc <hal_i2c_flush+0x14>)
 23fe7ac:	6800      	ldr	r0, [r0, #0]
 23fe7ae:	4b04      	ldr	r3, [pc, #16]	; (23fe7c0 <hal_i2c_flush+0x18>)
 23fe7b0:	4403      	add	r3, r0
 23fe7b2:	681b      	ldr	r3, [r3, #0]
 23fe7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe7b6:	9302      	str	r3, [sp, #8]
 23fe7b8:	bd09      	pop	{r0, r3, pc}
 23fe7ba:	0000      	.short	0x0000
 23fe7bc:	1007adb8 	.word	0x1007adb8
 23fe7c0:	00000010 	.word	0x00000010

023fe7c4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fe7c4:	b509      	push	{r0, r3, lr}
 23fe7c6:	4804      	ldr	r0, [pc, #16]	; (23fe7d8 <hal_i2c_is_enabled+0x14>)
 23fe7c8:	6800      	ldr	r0, [r0, #0]
 23fe7ca:	4b04      	ldr	r3, [pc, #16]	; (23fe7dc <hal_i2c_is_enabled+0x18>)
 23fe7cc:	4403      	add	r3, r0
 23fe7ce:	681b      	ldr	r3, [r3, #0]
 23fe7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe7d2:	9302      	str	r3, [sp, #8]
 23fe7d4:	bd09      	pop	{r0, r3, pc}
 23fe7d6:	0000      	.short	0x0000
 23fe7d8:	1007adb8 	.word	0x1007adb8
 23fe7dc:	00000010 	.word	0x00000010

023fe7e0 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fe7e0:	b509      	push	{r0, r3, lr}
 23fe7e2:	4804      	ldr	r0, [pc, #16]	; (23fe7f4 <hal_i2c_init+0x14>)
 23fe7e4:	6800      	ldr	r0, [r0, #0]
 23fe7e6:	4b04      	ldr	r3, [pc, #16]	; (23fe7f8 <hal_i2c_init+0x18>)
 23fe7e8:	4403      	add	r3, r0
 23fe7ea:	681b      	ldr	r3, [r3, #0]
 23fe7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe7ee:	9302      	str	r3, [sp, #8]
 23fe7f0:	bd09      	pop	{r0, r3, pc}
 23fe7f2:	0000      	.short	0x0000
 23fe7f4:	1007adb8 	.word	0x1007adb8
 23fe7f8:	00000010 	.word	0x00000010

023fe7fc <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fe7fc:	b509      	push	{r0, r3, lr}
 23fe7fe:	4804      	ldr	r0, [pc, #16]	; (23fe810 <hal_i2c_request_ex+0x14>)
 23fe800:	6800      	ldr	r0, [r0, #0]
 23fe802:	4b04      	ldr	r3, [pc, #16]	; (23fe814 <hal_i2c_request_ex+0x18>)
 23fe804:	4403      	add	r3, r0
 23fe806:	681b      	ldr	r3, [r3, #0]
 23fe808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fe80a:	9302      	str	r3, [sp, #8]
 23fe80c:	bd09      	pop	{r0, r3, pc}
 23fe80e:	0000      	.short	0x0000
 23fe810:	1007adb8 	.word	0x1007adb8
 23fe814:	00000010 	.word	0x00000010

023fe818 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fe818:	b509      	push	{r0, r3, lr}
 23fe81a:	4804      	ldr	r0, [pc, #16]	; (23fe82c <inet_inet_ntop+0x14>)
 23fe81c:	6800      	ldr	r0, [r0, #0]
 23fe81e:	4b04      	ldr	r3, [pc, #16]	; (23fe830 <inet_inet_ntop+0x18>)
 23fe820:	4403      	add	r3, r0
 23fe822:	681b      	ldr	r3, [r3, #0]
 23fe824:	695b      	ldr	r3, [r3, #20]
 23fe826:	9302      	str	r3, [sp, #8]
 23fe828:	bd09      	pop	{r0, r3, pc}
 23fe82a:	0000      	.short	0x0000
 23fe82c:	1007adb8 	.word	0x1007adb8
 23fe830:	0000004c 	.word	0x0000004c

023fe834 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fe834:	b509      	push	{r0, r3, lr}
 23fe836:	4804      	ldr	r0, [pc, #16]	; (23fe848 <netdb_freeaddrinfo+0x14>)
 23fe838:	6800      	ldr	r0, [r0, #0]
 23fe83a:	4b04      	ldr	r3, [pc, #16]	; (23fe84c <netdb_freeaddrinfo+0x18>)
 23fe83c:	4403      	add	r3, r0
 23fe83e:	681b      	ldr	r3, [r3, #0]
 23fe840:	689b      	ldr	r3, [r3, #8]
 23fe842:	9302      	str	r3, [sp, #8]
 23fe844:	bd09      	pop	{r0, r3, pc}
 23fe846:	0000      	.short	0x0000
 23fe848:	1007adb8 	.word	0x1007adb8
 23fe84c:	00000050 	.word	0x00000050

023fe850 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fe850:	b509      	push	{r0, r3, lr}
 23fe852:	4804      	ldr	r0, [pc, #16]	; (23fe864 <netdb_getaddrinfo+0x14>)
 23fe854:	6800      	ldr	r0, [r0, #0]
 23fe856:	4b04      	ldr	r3, [pc, #16]	; (23fe868 <netdb_getaddrinfo+0x18>)
 23fe858:	4403      	add	r3, r0
 23fe85a:	681b      	ldr	r3, [r3, #0]
 23fe85c:	68db      	ldr	r3, [r3, #12]
 23fe85e:	9302      	str	r3, [sp, #8]
 23fe860:	bd09      	pop	{r0, r3, pc}
 23fe862:	0000      	.short	0x0000
 23fe864:	1007adb8 	.word	0x1007adb8
 23fe868:	00000050 	.word	0x00000050

023fe86c <hal_spi_set_data_mode>:
DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
 23fe86c:	b509      	push	{r0, r3, lr}
 23fe86e:	4804      	ldr	r0, [pc, #16]	; (23fe880 <hal_spi_set_data_mode+0x14>)
 23fe870:	6800      	ldr	r0, [r0, #0]
 23fe872:	4b04      	ldr	r3, [pc, #16]	; (23fe884 <hal_spi_set_data_mode+0x18>)
 23fe874:	4403      	add	r3, r0
 23fe876:	681b      	ldr	r3, [r3, #0]
 23fe878:	68db      	ldr	r3, [r3, #12]
 23fe87a:	9302      	str	r3, [sp, #8]
 23fe87c:	bd09      	pop	{r0, r3, pc}
 23fe87e:	0000      	.short	0x0000
 23fe880:	1007adb8 	.word	0x1007adb8
 23fe884:	00000018 	.word	0x00000018

023fe888 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fe888:	b509      	push	{r0, r3, lr}
 23fe88a:	4804      	ldr	r0, [pc, #16]	; (23fe89c <hal_spi_set_clock_divider+0x14>)
 23fe88c:	6800      	ldr	r0, [r0, #0]
 23fe88e:	4b04      	ldr	r3, [pc, #16]	; (23fe8a0 <hal_spi_set_clock_divider+0x18>)
 23fe890:	4403      	add	r3, r0
 23fe892:	681b      	ldr	r3, [r3, #0]
 23fe894:	691b      	ldr	r3, [r3, #16]
 23fe896:	9302      	str	r3, [sp, #8]
 23fe898:	bd09      	pop	{r0, r3, pc}
 23fe89a:	0000      	.short	0x0000
 23fe89c:	1007adb8 	.word	0x1007adb8
 23fe8a0:	00000018 	.word	0x00000018

023fe8a4 <hal_spi_init>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fe8a4:	b509      	push	{r0, r3, lr}
 23fe8a6:	4804      	ldr	r0, [pc, #16]	; (23fe8b8 <hal_spi_init+0x14>)
 23fe8a8:	6800      	ldr	r0, [r0, #0]
 23fe8aa:	4b04      	ldr	r3, [pc, #16]	; (23fe8bc <hal_spi_init+0x18>)
 23fe8ac:	4403      	add	r3, r0
 23fe8ae:	681b      	ldr	r3, [r3, #0]
 23fe8b0:	69db      	ldr	r3, [r3, #28]
 23fe8b2:	9302      	str	r3, [sp, #8]
 23fe8b4:	bd09      	pop	{r0, r3, pc}
 23fe8b6:	0000      	.short	0x0000
 23fe8b8:	1007adb8 	.word	0x1007adb8
 23fe8bc:	00000018 	.word	0x00000018

023fe8c0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fe8c0:	b509      	push	{r0, r3, lr}
 23fe8c2:	4804      	ldr	r0, [pc, #16]	; (23fe8d4 <hal_spi_is_enabled+0x14>)
 23fe8c4:	6800      	ldr	r0, [r0, #0]
 23fe8c6:	4b04      	ldr	r3, [pc, #16]	; (23fe8d8 <hal_spi_is_enabled+0x18>)
 23fe8c8:	4403      	add	r3, r0
 23fe8ca:	681b      	ldr	r3, [r3, #0]
 23fe8cc:	6a1b      	ldr	r3, [r3, #32]
 23fe8ce:	9302      	str	r3, [sp, #8]
 23fe8d0:	bd09      	pop	{r0, r3, pc}
 23fe8d2:	0000      	.short	0x0000
 23fe8d4:	1007adb8 	.word	0x1007adb8
 23fe8d8:	00000018 	.word	0x00000018

023fe8dc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fe8dc:	b509      	push	{r0, r3, lr}
 23fe8de:	4804      	ldr	r0, [pc, #16]	; (23fe8f0 <hal_spi_info+0x14>)
 23fe8e0:	6800      	ldr	r0, [r0, #0]
 23fe8e2:	4b04      	ldr	r3, [pc, #16]	; (23fe8f4 <hal_spi_info+0x18>)
 23fe8e4:	4403      	add	r3, r0
 23fe8e6:	681b      	ldr	r3, [r3, #0]
 23fe8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fe8ea:	9302      	str	r3, [sp, #8]
 23fe8ec:	bd09      	pop	{r0, r3, pc}
 23fe8ee:	0000      	.short	0x0000
 23fe8f0:	1007adb8 	.word	0x1007adb8
 23fe8f4:	00000018 	.word	0x00000018

023fe8f8 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fe8f8:	b509      	push	{r0, r3, lr}
 23fe8fa:	4804      	ldr	r0, [pc, #16]	; (23fe90c <hal_spi_transfer_dma+0x14>)
 23fe8fc:	6800      	ldr	r0, [r0, #0]
 23fe8fe:	4b04      	ldr	r3, [pc, #16]	; (23fe910 <hal_spi_transfer_dma+0x18>)
 23fe900:	4403      	add	r3, r0
 23fe902:	681b      	ldr	r3, [r3, #0]
 23fe904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe906:	9302      	str	r3, [sp, #8]
 23fe908:	bd09      	pop	{r0, r3, pc}
 23fe90a:	0000      	.short	0x0000
 23fe90c:	1007adb8 	.word	0x1007adb8
 23fe910:	00000018 	.word	0x00000018

023fe914 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
 23fe914:	b509      	push	{r0, r3, lr}
 23fe916:	4804      	ldr	r0, [pc, #16]	; (23fe928 <hal_spi_begin_ext+0x14>)
 23fe918:	6800      	ldr	r0, [r0, #0]
 23fe91a:	4b04      	ldr	r3, [pc, #16]	; (23fe92c <hal_spi_begin_ext+0x18>)
 23fe91c:	4403      	add	r3, r0
 23fe91e:	681b      	ldr	r3, [r3, #0]
 23fe920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe922:	9302      	str	r3, [sp, #8]
 23fe924:	bd09      	pop	{r0, r3, pc}
 23fe926:	0000      	.short	0x0000
 23fe928:	1007adb8 	.word	0x1007adb8
 23fe92c:	00000018 	.word	0x00000018

023fe930 <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fe930:	b509      	push	{r0, r3, lr}
 23fe932:	4804      	ldr	r0, [pc, #16]	; (23fe944 <hal_spi_transfer_dma_status+0x14>)
 23fe934:	6800      	ldr	r0, [r0, #0]
 23fe936:	4b04      	ldr	r3, [pc, #16]	; (23fe948 <hal_spi_transfer_dma_status+0x18>)
 23fe938:	4403      	add	r3, r0
 23fe93a:	681b      	ldr	r3, [r3, #0]
 23fe93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fe93e:	9302      	str	r3, [sp, #8]
 23fe940:	bd09      	pop	{r0, r3, pc}
 23fe942:	0000      	.short	0x0000
 23fe944:	1007adb8 	.word	0x1007adb8
 23fe948:	00000018 	.word	0x00000018

023fe94c <hal_spi_acquire>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fe94c:	b509      	push	{r0, r3, lr}
 23fe94e:	4804      	ldr	r0, [pc, #16]	; (23fe960 <hal_spi_acquire+0x14>)
 23fe950:	6800      	ldr	r0, [r0, #0]
 23fe952:	4b04      	ldr	r3, [pc, #16]	; (23fe964 <hal_spi_acquire+0x18>)
 23fe954:	4403      	add	r3, r0
 23fe956:	681b      	ldr	r3, [r3, #0]
 23fe958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe95a:	9302      	str	r3, [sp, #8]
 23fe95c:	bd09      	pop	{r0, r3, pc}
 23fe95e:	0000      	.short	0x0000
 23fe960:	1007adb8 	.word	0x1007adb8
 23fe964:	00000018 	.word	0x00000018

023fe968 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fe968:	b509      	push	{r0, r3, lr}
 23fe96a:	4804      	ldr	r0, [pc, #16]	; (23fe97c <hal_spi_release+0x14>)
 23fe96c:	6800      	ldr	r0, [r0, #0]
 23fe96e:	4b04      	ldr	r3, [pc, #16]	; (23fe980 <hal_spi_release+0x18>)
 23fe970:	4403      	add	r3, r0
 23fe972:	681b      	ldr	r3, [r3, #0]
 23fe974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe976:	9302      	str	r3, [sp, #8]
 23fe978:	bd09      	pop	{r0, r3, pc}
 23fe97a:	0000      	.short	0x0000
 23fe97c:	1007adb8 	.word	0x1007adb8
 23fe980:	00000018 	.word	0x00000018

023fe984 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fe984:	b509      	push	{r0, r3, lr}
 23fe986:	4804      	ldr	r0, [pc, #16]	; (23fe998 <hal_usart_write+0x14>)
 23fe988:	6800      	ldr	r0, [r0, #0]
 23fe98a:	4b04      	ldr	r3, [pc, #16]	; (23fe99c <hal_usart_write+0x18>)
 23fe98c:	4403      	add	r3, r0
 23fe98e:	681b      	ldr	r3, [r3, #0]
 23fe990:	68db      	ldr	r3, [r3, #12]
 23fe992:	9302      	str	r3, [sp, #8]
 23fe994:	bd09      	pop	{r0, r3, pc}
 23fe996:	0000      	.short	0x0000
 23fe998:	1007adb8 	.word	0x1007adb8
 23fe99c:	00000024 	.word	0x00000024

023fe9a0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fe9a0:	b509      	push	{r0, r3, lr}
 23fe9a2:	4804      	ldr	r0, [pc, #16]	; (23fe9b4 <hal_usart_available+0x14>)
 23fe9a4:	6800      	ldr	r0, [r0, #0]
 23fe9a6:	4b04      	ldr	r3, [pc, #16]	; (23fe9b8 <hal_usart_available+0x18>)
 23fe9a8:	4403      	add	r3, r0
 23fe9aa:	681b      	ldr	r3, [r3, #0]
 23fe9ac:	691b      	ldr	r3, [r3, #16]
 23fe9ae:	9302      	str	r3, [sp, #8]
 23fe9b0:	bd09      	pop	{r0, r3, pc}
 23fe9b2:	0000      	.short	0x0000
 23fe9b4:	1007adb8 	.word	0x1007adb8
 23fe9b8:	00000024 	.word	0x00000024

023fe9bc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fe9bc:	b509      	push	{r0, r3, lr}
 23fe9be:	4804      	ldr	r0, [pc, #16]	; (23fe9d0 <hal_usart_read+0x14>)
 23fe9c0:	6800      	ldr	r0, [r0, #0]
 23fe9c2:	4b04      	ldr	r3, [pc, #16]	; (23fe9d4 <hal_usart_read+0x18>)
 23fe9c4:	4403      	add	r3, r0
 23fe9c6:	681b      	ldr	r3, [r3, #0]
 23fe9c8:	695b      	ldr	r3, [r3, #20]
 23fe9ca:	9302      	str	r3, [sp, #8]
 23fe9cc:	bd09      	pop	{r0, r3, pc}
 23fe9ce:	0000      	.short	0x0000
 23fe9d0:	1007adb8 	.word	0x1007adb8
 23fe9d4:	00000024 	.word	0x00000024

023fe9d8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fe9d8:	b509      	push	{r0, r3, lr}
 23fe9da:	4804      	ldr	r0, [pc, #16]	; (23fe9ec <hal_usart_peek+0x14>)
 23fe9dc:	6800      	ldr	r0, [r0, #0]
 23fe9de:	4b04      	ldr	r3, [pc, #16]	; (23fe9f0 <hal_usart_peek+0x18>)
 23fe9e0:	4403      	add	r3, r0
 23fe9e2:	681b      	ldr	r3, [r3, #0]
 23fe9e4:	699b      	ldr	r3, [r3, #24]
 23fe9e6:	9302      	str	r3, [sp, #8]
 23fe9e8:	bd09      	pop	{r0, r3, pc}
 23fe9ea:	0000      	.short	0x0000
 23fe9ec:	1007adb8 	.word	0x1007adb8
 23fe9f0:	00000024 	.word	0x00000024

023fe9f4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fe9f4:	b509      	push	{r0, r3, lr}
 23fe9f6:	4804      	ldr	r0, [pc, #16]	; (23fea08 <hal_usart_flush+0x14>)
 23fe9f8:	6800      	ldr	r0, [r0, #0]
 23fe9fa:	4b04      	ldr	r3, [pc, #16]	; (23fea0c <hal_usart_flush+0x18>)
 23fe9fc:	4403      	add	r3, r0
 23fe9fe:	681b      	ldr	r3, [r3, #0]
 23fea00:	69db      	ldr	r3, [r3, #28]
 23fea02:	9302      	str	r3, [sp, #8]
 23fea04:	bd09      	pop	{r0, r3, pc}
 23fea06:	0000      	.short	0x0000
 23fea08:	1007adb8 	.word	0x1007adb8
 23fea0c:	00000024 	.word	0x00000024

023fea10 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fea10:	b509      	push	{r0, r3, lr}
 23fea12:	4804      	ldr	r0, [pc, #16]	; (23fea24 <hal_usart_is_enabled+0x14>)
 23fea14:	6800      	ldr	r0, [r0, #0]
 23fea16:	4b04      	ldr	r3, [pc, #16]	; (23fea28 <hal_usart_is_enabled+0x18>)
 23fea18:	4403      	add	r3, r0
 23fea1a:	681b      	ldr	r3, [r3, #0]
 23fea1c:	6a1b      	ldr	r3, [r3, #32]
 23fea1e:	9302      	str	r3, [sp, #8]
 23fea20:	bd09      	pop	{r0, r3, pc}
 23fea22:	0000      	.short	0x0000
 23fea24:	1007adb8 	.word	0x1007adb8
 23fea28:	00000024 	.word	0x00000024

023fea2c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fea2c:	b509      	push	{r0, r3, lr}
 23fea2e:	4804      	ldr	r0, [pc, #16]	; (23fea40 <hal_usart_available_data_for_write+0x14>)
 23fea30:	6800      	ldr	r0, [r0, #0]
 23fea32:	4b04      	ldr	r3, [pc, #16]	; (23fea44 <hal_usart_available_data_for_write+0x18>)
 23fea34:	4403      	add	r3, r0
 23fea36:	681b      	ldr	r3, [r3, #0]
 23fea38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fea3a:	9302      	str	r3, [sp, #8]
 23fea3c:	bd09      	pop	{r0, r3, pc}
 23fea3e:	0000      	.short	0x0000
 23fea40:	1007adb8 	.word	0x1007adb8
 23fea44:	00000024 	.word	0x00000024

023fea48 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fea48:	b509      	push	{r0, r3, lr}
 23fea4a:	4804      	ldr	r0, [pc, #16]	; (23fea5c <hal_usart_init_ex+0x14>)
 23fea4c:	6800      	ldr	r0, [r0, #0]
 23fea4e:	4b04      	ldr	r3, [pc, #16]	; (23fea60 <hal_usart_init_ex+0x18>)
 23fea50:	4403      	add	r3, r0
 23fea52:	681b      	ldr	r3, [r3, #0]
 23fea54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fea56:	9302      	str	r3, [sp, #8]
 23fea58:	bd09      	pop	{r0, r3, pc}
 23fea5a:	0000      	.short	0x0000
 23fea5c:	1007adb8 	.word	0x1007adb8
 23fea60:	00000024 	.word	0x00000024

023fea64 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fea64:	b509      	push	{r0, r3, lr}
 23fea66:	4804      	ldr	r0, [pc, #16]	; (23fea78 <HAL_USB_USART_Init+0x14>)
 23fea68:	6800      	ldr	r0, [r0, #0]
 23fea6a:	4b04      	ldr	r3, [pc, #16]	; (23fea7c <HAL_USB_USART_Init+0x18>)
 23fea6c:	4403      	add	r3, r0
 23fea6e:	681b      	ldr	r3, [r3, #0]
 23fea70:	681b      	ldr	r3, [r3, #0]
 23fea72:	9302      	str	r3, [sp, #8]
 23fea74:	bd09      	pop	{r0, r3, pc}
 23fea76:	0000      	.short	0x0000
 23fea78:	1007adb8 	.word	0x1007adb8
 23fea7c:	00000034 	.word	0x00000034

023fea80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fea80:	b509      	push	{r0, r3, lr}
 23fea82:	4804      	ldr	r0, [pc, #16]	; (23fea94 <HAL_USB_USART_Begin+0x14>)
 23fea84:	6800      	ldr	r0, [r0, #0]
 23fea86:	4b04      	ldr	r3, [pc, #16]	; (23fea98 <HAL_USB_USART_Begin+0x18>)
 23fea88:	4403      	add	r3, r0
 23fea8a:	681b      	ldr	r3, [r3, #0]
 23fea8c:	685b      	ldr	r3, [r3, #4]
 23fea8e:	9302      	str	r3, [sp, #8]
 23fea90:	bd09      	pop	{r0, r3, pc}
 23fea92:	0000      	.short	0x0000
 23fea94:	1007adb8 	.word	0x1007adb8
 23fea98:	00000034 	.word	0x00000034

023fea9c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fea9c:	b509      	push	{r0, r3, lr}
 23fea9e:	4804      	ldr	r0, [pc, #16]	; (23feab0 <HAL_USB_USART_Available_Data+0x14>)
 23feaa0:	6800      	ldr	r0, [r0, #0]
 23feaa2:	4b04      	ldr	r3, [pc, #16]	; (23feab4 <HAL_USB_USART_Available_Data+0x18>)
 23feaa4:	4403      	add	r3, r0
 23feaa6:	681b      	ldr	r3, [r3, #0]
 23feaa8:	691b      	ldr	r3, [r3, #16]
 23feaaa:	9302      	str	r3, [sp, #8]
 23feaac:	bd09      	pop	{r0, r3, pc}
 23feaae:	0000      	.short	0x0000
 23feab0:	1007adb8 	.word	0x1007adb8
 23feab4:	00000034 	.word	0x00000034

023feab8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23feab8:	b509      	push	{r0, r3, lr}
 23feaba:	4804      	ldr	r0, [pc, #16]	; (23feacc <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23feabc:	6800      	ldr	r0, [r0, #0]
 23feabe:	4b04      	ldr	r3, [pc, #16]	; (23fead0 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23feac0:	4403      	add	r3, r0
 23feac2:	681b      	ldr	r3, [r3, #0]
 23feac4:	695b      	ldr	r3, [r3, #20]
 23feac6:	9302      	str	r3, [sp, #8]
 23feac8:	bd09      	pop	{r0, r3, pc}
 23feaca:	0000      	.short	0x0000
 23feacc:	1007adb8 	.word	0x1007adb8
 23fead0:	00000034 	.word	0x00000034

023fead4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fead4:	b509      	push	{r0, r3, lr}
 23fead6:	4804      	ldr	r0, [pc, #16]	; (23feae8 <HAL_USB_USART_Receive_Data+0x14>)
 23fead8:	6800      	ldr	r0, [r0, #0]
 23feada:	4b04      	ldr	r3, [pc, #16]	; (23feaec <HAL_USB_USART_Receive_Data+0x18>)
 23feadc:	4403      	add	r3, r0
 23feade:	681b      	ldr	r3, [r3, #0]
 23feae0:	699b      	ldr	r3, [r3, #24]
 23feae2:	9302      	str	r3, [sp, #8]
 23feae4:	bd09      	pop	{r0, r3, pc}
 23feae6:	0000      	.short	0x0000
 23feae8:	1007adb8 	.word	0x1007adb8
 23feaec:	00000034 	.word	0x00000034

023feaf0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23feaf0:	b509      	push	{r0, r3, lr}
 23feaf2:	4804      	ldr	r0, [pc, #16]	; (23feb04 <HAL_USB_USART_Send_Data+0x14>)
 23feaf4:	6800      	ldr	r0, [r0, #0]
 23feaf6:	4b04      	ldr	r3, [pc, #16]	; (23feb08 <HAL_USB_USART_Send_Data+0x18>)
 23feaf8:	4403      	add	r3, r0
 23feafa:	681b      	ldr	r3, [r3, #0]
 23feafc:	69db      	ldr	r3, [r3, #28]
 23feafe:	9302      	str	r3, [sp, #8]
 23feb00:	bd09      	pop	{r0, r3, pc}
 23feb02:	0000      	.short	0x0000
 23feb04:	1007adb8 	.word	0x1007adb8
 23feb08:	00000034 	.word	0x00000034

023feb0c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23feb0c:	b509      	push	{r0, r3, lr}
 23feb0e:	4804      	ldr	r0, [pc, #16]	; (23feb20 <HAL_USB_USART_Flush_Data+0x14>)
 23feb10:	6800      	ldr	r0, [r0, #0]
 23feb12:	4b04      	ldr	r3, [pc, #16]	; (23feb24 <HAL_USB_USART_Flush_Data+0x18>)
 23feb14:	4403      	add	r3, r0
 23feb16:	681b      	ldr	r3, [r3, #0]
 23feb18:	6a1b      	ldr	r3, [r3, #32]
 23feb1a:	9302      	str	r3, [sp, #8]
 23feb1c:	bd09      	pop	{r0, r3, pc}
 23feb1e:	0000      	.short	0x0000
 23feb20:	1007adb8 	.word	0x1007adb8
 23feb24:	00000034 	.word	0x00000034

023feb28 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23feb28:	b509      	push	{r0, r3, lr}
 23feb2a:	4804      	ldr	r0, [pc, #16]	; (23feb3c <set_system_mode+0x14>)
 23feb2c:	6800      	ldr	r0, [r0, #0]
 23feb2e:	4b04      	ldr	r3, [pc, #16]	; (23feb40 <set_system_mode+0x18>)
 23feb30:	4403      	add	r3, r0
 23feb32:	681b      	ldr	r3, [r3, #0]
 23feb34:	685b      	ldr	r3, [r3, #4]
 23feb36:	9302      	str	r3, [sp, #8]
 23feb38:	bd09      	pop	{r0, r3, pc}
 23feb3a:	0000      	.short	0x0000
 23feb3c:	1007adb8 	.word	0x1007adb8
 23feb40:	00000008 	.word	0x00000008

023feb44 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23feb44:	b509      	push	{r0, r3, lr}
 23feb46:	4804      	ldr	r0, [pc, #16]	; (23feb58 <system_delay_ms+0x14>)
 23feb48:	6800      	ldr	r0, [r0, #0]
 23feb4a:	4b04      	ldr	r3, [pc, #16]	; (23feb5c <system_delay_ms+0x18>)
 23feb4c:	4403      	add	r3, r0
 23feb4e:	681b      	ldr	r3, [r3, #0]
 23feb50:	695b      	ldr	r3, [r3, #20]
 23feb52:	9302      	str	r3, [sp, #8]
 23feb54:	bd09      	pop	{r0, r3, pc}
 23feb56:	0000      	.short	0x0000
 23feb58:	1007adb8 	.word	0x1007adb8
 23feb5c:	00000008 	.word	0x00000008

023feb60 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23feb60:	b509      	push	{r0, r3, lr}
 23feb62:	4804      	ldr	r0, [pc, #16]	; (23feb74 <system_thread_set_state+0x14>)
 23feb64:	6800      	ldr	r0, [r0, #0]
 23feb66:	4b04      	ldr	r3, [pc, #16]	; (23feb78 <system_thread_set_state+0x18>)
 23feb68:	4403      	add	r3, r0
 23feb6a:	681b      	ldr	r3, [r3, #0]
 23feb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23feb6e:	9302      	str	r3, [sp, #8]
 23feb70:	bd09      	pop	{r0, r3, pc}
 23feb72:	0000      	.short	0x0000
 23feb74:	1007adb8 	.word	0x1007adb8
 23feb78:	00000008 	.word	0x00000008

023feb7c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23feb7c:	b509      	push	{r0, r3, lr}
 23feb7e:	4804      	ldr	r0, [pc, #16]	; (23feb90 <system_ctrl_set_app_request_handler+0x14>)
 23feb80:	6800      	ldr	r0, [r0, #0]
 23feb82:	4b04      	ldr	r3, [pc, #16]	; (23feb94 <system_ctrl_set_app_request_handler+0x18>)
 23feb84:	4403      	add	r3, r0
 23feb86:	681b      	ldr	r3, [r3, #0]
 23feb88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23feb8c:	9302      	str	r3, [sp, #8]
 23feb8e:	bd09      	pop	{r0, r3, pc}
 23feb90:	1007adb8 	.word	0x1007adb8
 23feb94:	00000008 	.word	0x00000008

023feb98 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23feb98:	b509      	push	{r0, r3, lr}
 23feb9a:	4804      	ldr	r0, [pc, #16]	; (23febac <system_ctrl_set_result+0x14>)
 23feb9c:	6800      	ldr	r0, [r0, #0]
 23feb9e:	4b04      	ldr	r3, [pc, #16]	; (23febb0 <system_ctrl_set_result+0x18>)
 23feba0:	4403      	add	r3, r0
 23feba2:	681b      	ldr	r3, [r3, #0]
 23feba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23feba8:	9302      	str	r3, [sp, #8]
 23febaa:	bd09      	pop	{r0, r3, pc}
 23febac:	1007adb8 	.word	0x1007adb8
 23febb0:	00000008 	.word	0x00000008

023febb4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23febb4:	b509      	push	{r0, r3, lr}
 23febb6:	4804      	ldr	r0, [pc, #16]	; (23febc8 <spark_set_random_seed_from_cloud_handler+0x14>)
 23febb8:	6800      	ldr	r0, [r0, #0]
 23febba:	4b04      	ldr	r3, [pc, #16]	; (23febcc <spark_set_random_seed_from_cloud_handler+0x18>)
 23febbc:	4403      	add	r3, r0
 23febbe:	681b      	ldr	r3, [r3, #0]
 23febc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23febc2:	9302      	str	r3, [sp, #8]
 23febc4:	bd09      	pop	{r0, r3, pc}
 23febc6:	0000      	.short	0x0000
 23febc8:	1007adb8 	.word	0x1007adb8
 23febcc:	0000002c 	.word	0x0000002c

023febd0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23febd0:	b509      	push	{r0, r3, lr}
 23febd2:	4804      	ldr	r0, [pc, #16]	; (23febe4 <spark_cloud_disconnect+0x14>)
 23febd4:	6800      	ldr	r0, [r0, #0]
 23febd6:	4b04      	ldr	r3, [pc, #16]	; (23febe8 <spark_cloud_disconnect+0x18>)
 23febd8:	4403      	add	r3, r0
 23febda:	681b      	ldr	r3, [r3, #0]
 23febdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23febde:	9302      	str	r3, [sp, #8]
 23febe0:	bd09      	pop	{r0, r3, pc}
 23febe2:	0000      	.short	0x0000
 23febe4:	1007adb8 	.word	0x1007adb8
 23febe8:	0000002c 	.word	0x0000002c

023febec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23febec:	b509      	push	{r0, r3, lr}
 23febee:	4804      	ldr	r0, [pc, #16]	; (23fec00 <network_connect+0x14>)
 23febf0:	6800      	ldr	r0, [r0, #0]
 23febf2:	4b04      	ldr	r3, [pc, #16]	; (23fec04 <network_connect+0x18>)
 23febf4:	4403      	add	r3, r0
 23febf6:	681b      	ldr	r3, [r3, #0]
 23febf8:	685b      	ldr	r3, [r3, #4]
 23febfa:	9302      	str	r3, [sp, #8]
 23febfc:	bd09      	pop	{r0, r3, pc}
 23febfe:	0000      	.short	0x0000
 23fec00:	1007adb8 	.word	0x1007adb8
 23fec04:	00000028 	.word	0x00000028

023fec08 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fec08:	b509      	push	{r0, r3, lr}
 23fec0a:	4804      	ldr	r0, [pc, #16]	; (23fec1c <network_connecting+0x14>)
 23fec0c:	6800      	ldr	r0, [r0, #0]
 23fec0e:	4b04      	ldr	r3, [pc, #16]	; (23fec20 <network_connecting+0x18>)
 23fec10:	4403      	add	r3, r0
 23fec12:	681b      	ldr	r3, [r3, #0]
 23fec14:	689b      	ldr	r3, [r3, #8]
 23fec16:	9302      	str	r3, [sp, #8]
 23fec18:	bd09      	pop	{r0, r3, pc}
 23fec1a:	0000      	.short	0x0000
 23fec1c:	1007adb8 	.word	0x1007adb8
 23fec20:	00000028 	.word	0x00000028

023fec24 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fec24:	b509      	push	{r0, r3, lr}
 23fec26:	4804      	ldr	r0, [pc, #16]	; (23fec38 <network_disconnect+0x14>)
 23fec28:	6800      	ldr	r0, [r0, #0]
 23fec2a:	4b04      	ldr	r3, [pc, #16]	; (23fec3c <network_disconnect+0x18>)
 23fec2c:	4403      	add	r3, r0
 23fec2e:	681b      	ldr	r3, [r3, #0]
 23fec30:	68db      	ldr	r3, [r3, #12]
 23fec32:	9302      	str	r3, [sp, #8]
 23fec34:	bd09      	pop	{r0, r3, pc}
 23fec36:	0000      	.short	0x0000
 23fec38:	1007adb8 	.word	0x1007adb8
 23fec3c:	00000028 	.word	0x00000028

023fec40 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fec40:	b509      	push	{r0, r3, lr}
 23fec42:	4804      	ldr	r0, [pc, #16]	; (23fec54 <network_ready+0x14>)
 23fec44:	6800      	ldr	r0, [r0, #0]
 23fec46:	4b04      	ldr	r3, [pc, #16]	; (23fec58 <network_ready+0x18>)
 23fec48:	4403      	add	r3, r0
 23fec4a:	681b      	ldr	r3, [r3, #0]
 23fec4c:	691b      	ldr	r3, [r3, #16]
 23fec4e:	9302      	str	r3, [sp, #8]
 23fec50:	bd09      	pop	{r0, r3, pc}
 23fec52:	0000      	.short	0x0000
 23fec54:	1007adb8 	.word	0x1007adb8
 23fec58:	00000028 	.word	0x00000028

023fec5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fec5c:	b509      	push	{r0, r3, lr}
 23fec5e:	4804      	ldr	r0, [pc, #16]	; (23fec70 <network_on+0x14>)
 23fec60:	6800      	ldr	r0, [r0, #0]
 23fec62:	4b04      	ldr	r3, [pc, #16]	; (23fec74 <network_on+0x18>)
 23fec64:	4403      	add	r3, r0
 23fec66:	681b      	ldr	r3, [r3, #0]
 23fec68:	695b      	ldr	r3, [r3, #20]
 23fec6a:	9302      	str	r3, [sp, #8]
 23fec6c:	bd09      	pop	{r0, r3, pc}
 23fec6e:	0000      	.short	0x0000
 23fec70:	1007adb8 	.word	0x1007adb8
 23fec74:	00000028 	.word	0x00000028

023fec78 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fec78:	b509      	push	{r0, r3, lr}
 23fec7a:	4804      	ldr	r0, [pc, #16]	; (23fec8c <network_off+0x14>)
 23fec7c:	6800      	ldr	r0, [r0, #0]
 23fec7e:	4b04      	ldr	r3, [pc, #16]	; (23fec90 <network_off+0x18>)
 23fec80:	4403      	add	r3, r0
 23fec82:	681b      	ldr	r3, [r3, #0]
 23fec84:	699b      	ldr	r3, [r3, #24]
 23fec86:	9302      	str	r3, [sp, #8]
 23fec88:	bd09      	pop	{r0, r3, pc}
 23fec8a:	0000      	.short	0x0000
 23fec8c:	1007adb8 	.word	0x1007adb8
 23fec90:	00000028 	.word	0x00000028

023fec94 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fec94:	b509      	push	{r0, r3, lr}
 23fec96:	4804      	ldr	r0, [pc, #16]	; (23feca8 <network_listen+0x14>)
 23fec98:	6800      	ldr	r0, [r0, #0]
 23fec9a:	4b04      	ldr	r3, [pc, #16]	; (23fecac <network_listen+0x18>)
 23fec9c:	4403      	add	r3, r0
 23fec9e:	681b      	ldr	r3, [r3, #0]
 23feca0:	69db      	ldr	r3, [r3, #28]
 23feca2:	9302      	str	r3, [sp, #8]
 23feca4:	bd09      	pop	{r0, r3, pc}
 23feca6:	0000      	.short	0x0000
 23feca8:	1007adb8 	.word	0x1007adb8
 23fecac:	00000028 	.word	0x00000028

023fecb0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fecb0:	b509      	push	{r0, r3, lr}
 23fecb2:	4804      	ldr	r0, [pc, #16]	; (23fecc4 <network_listening+0x14>)
 23fecb4:	6800      	ldr	r0, [r0, #0]
 23fecb6:	4b04      	ldr	r3, [pc, #16]	; (23fecc8 <network_listening+0x18>)
 23fecb8:	4403      	add	r3, r0
 23fecba:	681b      	ldr	r3, [r3, #0]
 23fecbc:	6a1b      	ldr	r3, [r3, #32]
 23fecbe:	9302      	str	r3, [sp, #8]
 23fecc0:	bd09      	pop	{r0, r3, pc}
 23fecc2:	0000      	.short	0x0000
 23fecc4:	1007adb8 	.word	0x1007adb8
 23fecc8:	00000028 	.word	0x00000028

023feccc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23feccc:	b509      	push	{r0, r3, lr}
 23fecce:	4804      	ldr	r0, [pc, #16]	; (23fece0 <network_set_listen_timeout+0x14>)
 23fecd0:	6800      	ldr	r0, [r0, #0]
 23fecd2:	4b04      	ldr	r3, [pc, #16]	; (23fece4 <network_set_listen_timeout+0x18>)
 23fecd4:	4403      	add	r3, r0
 23fecd6:	681b      	ldr	r3, [r3, #0]
 23fecd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fecda:	9302      	str	r3, [sp, #8]
 23fecdc:	bd09      	pop	{r0, r3, pc}
 23fecde:	0000      	.short	0x0000
 23fece0:	1007adb8 	.word	0x1007adb8
 23fece4:	00000028 	.word	0x00000028

023fece8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fece8:	b509      	push	{r0, r3, lr}
 23fecea:	4804      	ldr	r0, [pc, #16]	; (23fecfc <network_get_listen_timeout+0x14>)
 23fecec:	6800      	ldr	r0, [r0, #0]
 23fecee:	4b04      	ldr	r3, [pc, #16]	; (23fed00 <network_get_listen_timeout+0x18>)
 23fecf0:	4403      	add	r3, r0
 23fecf2:	681b      	ldr	r3, [r3, #0]
 23fecf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fecf6:	9302      	str	r3, [sp, #8]
 23fecf8:	bd09      	pop	{r0, r3, pc}
 23fecfa:	0000      	.short	0x0000
 23fecfc:	1007adb8 	.word	0x1007adb8
 23fed00:	00000028 	.word	0x00000028

023fed04 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fed04:	b509      	push	{r0, r3, lr}
 23fed06:	4804      	ldr	r0, [pc, #16]	; (23fed18 <network_is_on+0x14>)
 23fed08:	6800      	ldr	r0, [r0, #0]
 23fed0a:	4b04      	ldr	r3, [pc, #16]	; (23fed1c <network_is_on+0x18>)
 23fed0c:	4403      	add	r3, r0
 23fed0e:	681b      	ldr	r3, [r3, #0]
 23fed10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fed12:	9302      	str	r3, [sp, #8]
 23fed14:	bd09      	pop	{r0, r3, pc}
 23fed16:	0000      	.short	0x0000
 23fed18:	1007adb8 	.word	0x1007adb8
 23fed1c:	00000028 	.word	0x00000028

023fed20 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fed20:	b509      	push	{r0, r3, lr}
 23fed22:	4804      	ldr	r0, [pc, #16]	; (23fed34 <network_is_off+0x14>)
 23fed24:	6800      	ldr	r0, [r0, #0]
 23fed26:	4b04      	ldr	r3, [pc, #16]	; (23fed38 <network_is_off+0x18>)
 23fed28:	4403      	add	r3, r0
 23fed2a:	681b      	ldr	r3, [r3, #0]
 23fed2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fed2e:	9302      	str	r3, [sp, #8]
 23fed30:	bd09      	pop	{r0, r3, pc}
 23fed32:	0000      	.short	0x0000
 23fed34:	1007adb8 	.word	0x1007adb8
 23fed38:	00000028 	.word	0x00000028

023fed3c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fed3c:	b509      	push	{r0, r3, lr}
 23fed3e:	4804      	ldr	r0, [pc, #16]	; (23fed50 <malloc+0x14>)
 23fed40:	6800      	ldr	r0, [r0, #0]
 23fed42:	4b04      	ldr	r3, [pc, #16]	; (23fed54 <malloc+0x18>)
 23fed44:	4403      	add	r3, r0
 23fed46:	681b      	ldr	r3, [r3, #0]
 23fed48:	681b      	ldr	r3, [r3, #0]
 23fed4a:	9302      	str	r3, [sp, #8]
 23fed4c:	bd09      	pop	{r0, r3, pc}
 23fed4e:	0000      	.short	0x0000
 23fed50:	1007adb8 	.word	0x1007adb8
 23fed54:	00000004 	.word	0x00000004

023fed58 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fed58:	b509      	push	{r0, r3, lr}
 23fed5a:	4804      	ldr	r0, [pc, #16]	; (23fed6c <free+0x14>)
 23fed5c:	6800      	ldr	r0, [r0, #0]
 23fed5e:	4b04      	ldr	r3, [pc, #16]	; (23fed70 <free+0x18>)
 23fed60:	4403      	add	r3, r0
 23fed62:	681b      	ldr	r3, [r3, #0]
 23fed64:	685b      	ldr	r3, [r3, #4]
 23fed66:	9302      	str	r3, [sp, #8]
 23fed68:	bd09      	pop	{r0, r3, pc}
 23fed6a:	0000      	.short	0x0000
 23fed6c:	1007adb8 	.word	0x1007adb8
 23fed70:	00000004 	.word	0x00000004

023fed74 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fed74:	b509      	push	{r0, r3, lr}
 23fed76:	4804      	ldr	r0, [pc, #16]	; (23fed88 <__assert_func+0x14>)
 23fed78:	6800      	ldr	r0, [r0, #0]
 23fed7a:	4b04      	ldr	r3, [pc, #16]	; (23fed8c <__assert_func+0x18>)
 23fed7c:	4403      	add	r3, r0
 23fed7e:	681b      	ldr	r3, [r3, #0]
 23fed80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fed82:	9302      	str	r3, [sp, #8]
 23fed84:	bd09      	pop	{r0, r3, pc}
 23fed86:	0000      	.short	0x0000
 23fed88:	1007adb8 	.word	0x1007adb8
 23fed8c:	00000004 	.word	0x00000004

023fed90 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fed90:	b509      	push	{r0, r3, lr}
 23fed92:	4804      	ldr	r0, [pc, #16]	; (23feda4 <newlib_impure_ptr_callback+0x14>)
 23fed94:	6800      	ldr	r0, [r0, #0]
 23fed96:	4b04      	ldr	r3, [pc, #16]	; (23feda8 <newlib_impure_ptr_callback+0x18>)
 23fed98:	4403      	add	r3, r0
 23fed9a:	681b      	ldr	r3, [r3, #0]
 23fed9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fed9e:	9302      	str	r3, [sp, #8]
 23feda0:	bd09      	pop	{r0, r3, pc}
 23feda2:	0000      	.short	0x0000
 23feda4:	1007adb8 	.word	0x1007adb8
 23feda8:	00000004 	.word	0x00000004

023fedac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fedac:	2100      	movs	r1, #0
 23fedae:	f7ff bec9 	b.w	23feb44 <system_delay_ms>
	...

023fedb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fedb4:	2300      	movs	r3, #0
 23fedb6:	4802      	ldr	r0, [pc, #8]	; (23fedc0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fedb8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fedba:	f7ff bc31 	b.w	23fe620 <os_mutex_recursive_create>
 23fedbe:	bf00      	nop
 23fedc0:	1007ae8c 	.word	0x1007ae8c

023fedc4 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23fedc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 23fedc6:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 23fedc8:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 23fedca:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 23fedce:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 23fedd0:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 23fedd4:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 23fedd8:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 23fedda:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 23fedde:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 23fede2:	6843      	ldr	r3, [r0, #4]
 23fede4:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 23fede6:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fede8:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 23fedea:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fedee:	f7ff feef 	bl	23febd0 <spark_cloud_disconnect>
}
 23fedf2:	b005      	add	sp, #20
 23fedf4:	f85d fb04 	ldr.w	pc, [sp], #4

023fedf8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fedf8:	2200      	movs	r2, #0
 23fedfa:	6840      	ldr	r0, [r0, #4]
 23fedfc:	4611      	mov	r1, r2
 23fedfe:	f7ff bf57 	b.w	23fecb0 <network_listening>

023fee02 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fee02:	2200      	movs	r2, #0
 23fee04:	6840      	ldr	r0, [r0, #4]
 23fee06:	4611      	mov	r1, r2
 23fee08:	f7ff bf6e 	b.w	23fece8 <network_get_listen_timeout>

023fee0c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fee0c:	2200      	movs	r2, #0
 23fee0e:	6840      	ldr	r0, [r0, #4]
 23fee10:	f7ff bf5c 	b.w	23feccc <network_set_listen_timeout>

023fee14 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fee14:	2200      	movs	r2, #0
 23fee16:	6840      	ldr	r0, [r0, #4]
 23fee18:	f081 0101 	eor.w	r1, r1, #1
 23fee1c:	f7ff bf3a 	b.w	23fec94 <network_listen>

023fee20 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fee20:	2300      	movs	r3, #0
 23fee22:	6840      	ldr	r0, [r0, #4]
 23fee24:	461a      	mov	r2, r3
 23fee26:	4619      	mov	r1, r3
 23fee28:	f7ff bf26 	b.w	23fec78 <network_off>

023fee2c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fee2c:	2300      	movs	r3, #0
 23fee2e:	6840      	ldr	r0, [r0, #4]
 23fee30:	461a      	mov	r2, r3
 23fee32:	4619      	mov	r1, r3
 23fee34:	f7ff bf12 	b.w	23fec5c <network_on>

023fee38 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fee38:	2200      	movs	r2, #0
 23fee3a:	6840      	ldr	r0, [r0, #4]
 23fee3c:	4611      	mov	r1, r2
 23fee3e:	f7ff beff 	b.w	23fec40 <network_ready>

023fee42 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fee42:	2200      	movs	r2, #0
 23fee44:	6840      	ldr	r0, [r0, #4]
 23fee46:	4611      	mov	r1, r2
 23fee48:	f7ff bede 	b.w	23fec08 <network_connecting>

023fee4c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fee4c:	2200      	movs	r2, #0
 23fee4e:	2102      	movs	r1, #2
 23fee50:	6840      	ldr	r0, [r0, #4]
 23fee52:	f7ff bee7 	b.w	23fec24 <network_disconnect>

023fee56 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fee56:	2300      	movs	r3, #0
 23fee58:	6840      	ldr	r0, [r0, #4]
 23fee5a:	461a      	mov	r2, r3
 23fee5c:	f7ff bec6 	b.w	23febec <network_connect>

023fee60 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fee60:	2203      	movs	r2, #3
 23fee62:	4b02      	ldr	r3, [pc, #8]	; (23fee6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fee64:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fee66:	4a02      	ldr	r2, [pc, #8]	; (23fee70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fee68:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fee6a:	4770      	bx	lr
 23fee6c:	1007ae90 	.word	0x1007ae90
 23fee70:	023ffde4 	.word	0x023ffde4

023fee74 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fee74:	4770      	bx	lr

023fee76 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fee76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fee78:	4606      	mov	r6, r0
 23fee7a:	4615      	mov	r5, r2
 23fee7c:	460c      	mov	r4, r1
 23fee7e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fee80:	42bc      	cmp	r4, r7
 23fee82:	d006      	beq.n	23fee92 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fee84:	6833      	ldr	r3, [r6, #0]
 23fee86:	4630      	mov	r0, r6
 23fee88:	689b      	ldr	r3, [r3, #8]
 23fee8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fee8e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fee90:	e7f6      	b.n	23fee80 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fee92:	4628      	mov	r0, r5
 23fee94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fee96 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fee96:	2200      	movs	r2, #0
 23fee98:	7c00      	ldrb	r0, [r0, #16]
 23fee9a:	f7ff bc4d 	b.w	23fe738 <hal_i2c_write>

023fee9e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fee9e:	2100      	movs	r1, #0
 23feea0:	7c00      	ldrb	r0, [r0, #16]
 23feea2:	f7ff bc57 	b.w	23fe754 <hal_i2c_available>

023feea6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23feea6:	2100      	movs	r1, #0
 23feea8:	7c00      	ldrb	r0, [r0, #16]
 23feeaa:	f7ff bc61 	b.w	23fe770 <hal_i2c_read>

023feeae <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23feeae:	2100      	movs	r1, #0
 23feeb0:	7c00      	ldrb	r0, [r0, #16]
 23feeb2:	f7ff bc6b 	b.w	23fe78c <hal_i2c_peek>

023feeb6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23feeb6:	2100      	movs	r1, #0
 23feeb8:	7c00      	ldrb	r0, [r0, #16]
 23feeba:	f7ff bc75 	b.w	23fe7a8 <hal_i2c_flush>

023feebe <_ZN7TwoWireD0Ev>:
 23feebe:	b510      	push	{r4, lr}
 23feec0:	4604      	mov	r4, r0
 23feec2:	2114      	movs	r1, #20
 23feec4:	f7fe fe63 	bl	23fdb8e <_ZdlPvj>
 23feec8:	4620      	mov	r0, r4
 23feeca:	bd10      	pop	{r4, pc}

023feecc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23feecc:	b538      	push	{r3, r4, r5, lr}
 23feece:	4604      	mov	r4, r0
 23feed0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23feed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23feed6:	2200      	movs	r2, #0
 23feed8:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23feedc:	4b09      	ldr	r3, [pc, #36]	; (23fef04 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23feede:	4608      	mov	r0, r1
  _i2c = i2c;
 23feee0:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23feee2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23feee4:	4629      	mov	r1, r5
 23feee6:	f7ff fc7b 	bl	23fe7e0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23feeea:	30bf      	adds	r0, #191	; 0xbf
 23feeec:	d108      	bne.n	23fef00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23feeee:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23feef0:	07db      	lsls	r3, r3, #31
 23feef2:	d505      	bpl.n	23fef00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23feef4:	6868      	ldr	r0, [r5, #4]
 23feef6:	f7ff ff2f 	bl	23fed58 <free>
    free(conf.tx_buffer);
 23feefa:	68e8      	ldr	r0, [r5, #12]
 23feefc:	f7ff ff2c 	bl	23fed58 <free>
}
 23fef00:	4620      	mov	r0, r4
 23fef02:	bd38      	pop	{r3, r4, r5, pc}
 23fef04:	023ffe20 	.word	0x023ffe20

023fef08 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23fef08:	2200      	movs	r2, #0
 23fef0a:	7c00      	ldrb	r0, [r0, #16]
 23fef0c:	f7ff bbdc 	b.w	23fe6c8 <hal_i2c_set_speed>

023fef10 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fef10:	2300      	movs	r3, #0
 23fef12:	7c00      	ldrb	r0, [r0, #16]
 23fef14:	461a      	mov	r2, r3
 23fef16:	4619      	mov	r1, r3
 23fef18:	f7ff bbe4 	b.w	23fe6e4 <hal_i2c_begin>

023fef1c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fef1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fef1e:	2200      	movs	r2, #0
 23fef20:	2314      	movs	r3, #20
 23fef22:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fef26:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fef2a:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fef2c:	7c00      	ldrb	r0, [r0, #16]
 23fef2e:	f88d 3008 	strb.w	r3, [sp, #8]
 23fef32:	684b      	ldr	r3, [r1, #4]
 23fef34:	9303      	str	r3, [sp, #12]
 23fef36:	68cb      	ldr	r3, [r1, #12]
 23fef38:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fef3a:	7a0b      	ldrb	r3, [r1, #8]
 23fef3c:	a901      	add	r1, sp, #4
 23fef3e:	9305      	str	r3, [sp, #20]
 23fef40:	f7ff fc5c 	bl	23fe7fc <hal_i2c_request_ex>
}
 23fef44:	b007      	add	sp, #28
 23fef46:	f85d fb04 	ldr.w	pc, [sp], #4

023fef4a <_ZN7TwoWire11requestFromEhjh>:
{
 23fef4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fef4c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fef4e:	f88d 1000 	strb.w	r1, [sp]
 23fef52:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fef56:	bf18      	it	ne
 23fef58:	2301      	movne	r3, #1
 23fef5a:	9103      	str	r1, [sp, #12]
 23fef5c:	4669      	mov	r1, sp
    size_ = size;
 23fef5e:	9201      	str	r2, [sp, #4]
 23fef60:	f88d 3008 	strb.w	r3, [sp, #8]
 23fef64:	f7ff ffda 	bl	23fef1c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fef68:	b005      	add	sp, #20
 23fef6a:	f85d fb04 	ldr.w	pc, [sp], #4

023fef6e <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fef6e:	2200      	movs	r2, #0
 23fef70:	7c00      	ldrb	r0, [r0, #16]
 23fef72:	f7ff bbc5 	b.w	23fe700 <hal_i2c_begin_transmission>

023fef76 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fef76:	2200      	movs	r2, #0
 23fef78:	7c00      	ldrb	r0, [r0, #16]
 23fef7a:	f7ff bbcf 	b.w	23fe71c <hal_i2c_end_transmission>

023fef7e <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fef7e:	4770      	bx	lr

023fef80 <_ZN9IPAddressD0Ev>:
 23fef80:	b510      	push	{r4, lr}
 23fef82:	4604      	mov	r4, r0
 23fef84:	2118      	movs	r1, #24
 23fef86:	f7fe fe02 	bl	23fdb8e <_ZdlPvj>
 23fef8a:	4620      	mov	r0, r4
 23fef8c:	bd10      	pop	{r4, pc}

023fef8e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fef8e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fef90:	7d03      	ldrb	r3, [r0, #20]
{
 23fef92:	460e      	mov	r6, r1
	if (address.v==6) {
 23fef94:	2b06      	cmp	r3, #6
 23fef96:	f04f 0400 	mov.w	r4, #0
{
 23fef9a:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fef9c:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fefa0:	d012      	beq.n	23fefc8 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fefa2:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fefa6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fefaa:	220a      	movs	r2, #10
 23fefac:	4630      	mov	r0, r6
 23fefae:	f000 f95e 	bl	23ff26e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fefb2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fefb4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fefb6:	d019      	beq.n	23fefec <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fefb8:	2c00      	cmp	r4, #0
 23fefba:	d0f4      	beq.n	23fefa6 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fefbc:	212e      	movs	r1, #46	; 0x2e
 23fefbe:	4630      	mov	r0, r6
 23fefc0:	f000 f93c 	bl	23ff23c <_ZN5Print5printEc>
 23fefc4:	4404      	add	r4, r0
 23fefc6:	e7ee      	b.n	23fefa6 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fefc8:	232f      	movs	r3, #47	; 0x2f
 23fefca:	466a      	mov	r2, sp
 23fefcc:	4639      	mov	r1, r7
 23fefce:	200a      	movs	r0, #10
		buf[0] = 0;
 23fefd0:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fefd4:	f7ff fc20 	bl	23fe818 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fefd8:	4668      	mov	r0, sp
 23fefda:	f7fe fdb1 	bl	23fdb40 <strlen>
 23fefde:	6833      	ldr	r3, [r6, #0]
 23fefe0:	4602      	mov	r2, r0
 23fefe2:	4669      	mov	r1, sp
 23fefe4:	4630      	mov	r0, r6
 23fefe6:	68db      	ldr	r3, [r3, #12]
 23fefe8:	4798      	blx	r3
 23fefea:	4604      	mov	r4, r0
    }
    return n;
}
 23fefec:	4620      	mov	r0, r4
 23fefee:	b00d      	add	sp, #52	; 0x34
 23feff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023feff4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23feff4:	b510      	push	{r4, lr}
 23feff6:	4604      	mov	r4, r0
 23feff8:	4b04      	ldr	r3, [pc, #16]	; (23ff00c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23feffa:	2211      	movs	r2, #17
 23feffc:	2100      	movs	r1, #0
 23feffe:	f840 3b04 	str.w	r3, [r0], #4
 23ff002:	f000 fe26 	bl	23ffc52 <memset>
}
 23ff006:	4620      	mov	r0, r4
 23ff008:	bd10      	pop	{r4, pc}
 23ff00a:	bf00      	nop
 23ff00c:	023ffe48 	.word	0x023ffe48

023ff010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23ff010:	4603      	mov	r3, r0
 23ff012:	4a07      	ldr	r2, [pc, #28]	; (23ff030 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23ff014:	b510      	push	{r4, lr}
 23ff016:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23ff01a:	f101 0210 	add.w	r2, r1, #16
 23ff01e:	f851 4b04 	ldr.w	r4, [r1], #4
 23ff022:	4291      	cmp	r1, r2
 23ff024:	f843 4b04 	str.w	r4, [r3], #4
 23ff028:	d1f9      	bne.n	23ff01e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23ff02a:	780a      	ldrb	r2, [r1, #0]
 23ff02c:	701a      	strb	r2, [r3, #0]
}
 23ff02e:	bd10      	pop	{r4, pc}
 23ff030:	023ffe48 	.word	0x023ffe48

023ff034 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23ff034:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23ff036:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23ff03a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23ff03e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23ff042:	2304      	movs	r3, #4
 23ff044:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23ff048:	6041      	str	r1, [r0, #4]
 23ff04a:	7503      	strb	r3, [r0, #20]
}
 23ff04c:	bd10      	pop	{r4, pc}
	...

023ff050 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23ff050:	b507      	push	{r0, r1, r2, lr}
 23ff052:	4b06      	ldr	r3, [pc, #24]	; (23ff06c <_ZN9IPAddressC1EPKh+0x1c>)
 23ff054:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23ff056:	78cb      	ldrb	r3, [r1, #3]
 23ff058:	9300      	str	r3, [sp, #0]
 23ff05a:	788b      	ldrb	r3, [r1, #2]
 23ff05c:	784a      	ldrb	r2, [r1, #1]
 23ff05e:	7809      	ldrb	r1, [r1, #0]
 23ff060:	f7ff ffe8 	bl	23ff034 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23ff064:	b003      	add	sp, #12
 23ff066:	f85d fb04 	ldr.w	pc, [sp], #4
 23ff06a:	bf00      	nop
 23ff06c:	023ffe48 	.word	0x023ffe48

023ff070 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23ff070:	4b01      	ldr	r3, [pc, #4]	; (23ff078 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23ff072:	4a02      	ldr	r2, [pc, #8]	; (23ff07c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23ff074:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23ff076:	4770      	bx	lr
 23ff078:	1007ae98 	.word	0x1007ae98
 23ff07c:	023ffe54 	.word	0x023ffe54

023ff080 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff080:	2300      	movs	r3, #0
 23ff082:	6840      	ldr	r0, [r0, #4]
 23ff084:	461a      	mov	r2, r3
 23ff086:	f7ff bdb1 	b.w	23febec <network_connect>

023ff08a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff08a:	2200      	movs	r2, #0
 23ff08c:	2102      	movs	r1, #2
 23ff08e:	6840      	ldr	r0, [r0, #4]
 23ff090:	f7ff bdc8 	b.w	23fec24 <network_disconnect>

023ff094 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff094:	2200      	movs	r2, #0
 23ff096:	6840      	ldr	r0, [r0, #4]
 23ff098:	4611      	mov	r1, r2
 23ff09a:	f7ff bdb5 	b.w	23fec08 <network_connecting>

023ff09e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff09e:	2200      	movs	r2, #0
 23ff0a0:	6840      	ldr	r0, [r0, #4]
 23ff0a2:	4611      	mov	r1, r2
 23ff0a4:	f7ff bdcc 	b.w	23fec40 <network_ready>

023ff0a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff0a8:	2300      	movs	r3, #0
 23ff0aa:	6840      	ldr	r0, [r0, #4]
 23ff0ac:	461a      	mov	r2, r3
 23ff0ae:	4619      	mov	r1, r3
 23ff0b0:	f7ff bdd4 	b.w	23fec5c <network_on>

023ff0b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff0b4:	2300      	movs	r3, #0
 23ff0b6:	6840      	ldr	r0, [r0, #4]
 23ff0b8:	461a      	mov	r2, r3
 23ff0ba:	4619      	mov	r1, r3
 23ff0bc:	f7ff bddc 	b.w	23fec78 <network_off>

023ff0c0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff0c0:	2100      	movs	r1, #0
 23ff0c2:	6840      	ldr	r0, [r0, #4]
 23ff0c4:	f7ff be1e 	b.w	23fed04 <network_is_on>

023ff0c8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff0c8:	2100      	movs	r1, #0
 23ff0ca:	6840      	ldr	r0, [r0, #4]
 23ff0cc:	f7ff be28 	b.w	23fed20 <network_is_off>

023ff0d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff0d0:	2200      	movs	r2, #0
 23ff0d2:	6840      	ldr	r0, [r0, #4]
 23ff0d4:	f081 0101 	eor.w	r1, r1, #1
 23ff0d8:	f7ff bddc 	b.w	23fec94 <network_listen>

023ff0dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff0dc:	2200      	movs	r2, #0
 23ff0de:	6840      	ldr	r0, [r0, #4]
 23ff0e0:	f7ff bdf4 	b.w	23feccc <network_set_listen_timeout>

023ff0e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff0e4:	2200      	movs	r2, #0
 23ff0e6:	6840      	ldr	r0, [r0, #4]
 23ff0e8:	4611      	mov	r1, r2
 23ff0ea:	f7ff bdfd 	b.w	23fece8 <network_get_listen_timeout>

023ff0ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff0ee:	2200      	movs	r2, #0
 23ff0f0:	6840      	ldr	r0, [r0, #4]
 23ff0f2:	4611      	mov	r1, r2
 23ff0f4:	f7ff bddc 	b.w	23fecb0 <network_listening>

023ff0f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff0f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff0fc:	b095      	sub	sp, #84	; 0x54
 23ff0fe:	4614      	mov	r4, r2
 23ff100:	460d      	mov	r5, r1
 23ff102:	4607      	mov	r7, r0
    IPAddress addr;
 23ff104:	f7ff ff76 	bl	23feff4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff108:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff10a:	221c      	movs	r2, #28
 23ff10c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff10e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff110:	f000 fd9f 	bl	23ffc52 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff114:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff116:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff118:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff11a:	2100      	movs	r1, #0
 23ff11c:	466b      	mov	r3, sp
 23ff11e:	aa0c      	add	r2, sp, #48	; 0x30
 23ff120:	f7ff fb96 	bl	23fe850 <netdb_getaddrinfo>
    if (!r) {
 23ff124:	4604      	mov	r4, r0
 23ff126:	2800      	cmp	r0, #0
 23ff128:	d14b      	bne.n	23ff1c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff12a:	4602      	mov	r2, r0
 23ff12c:	2101      	movs	r1, #1
 23ff12e:	6868      	ldr	r0, [r5, #4]
 23ff130:	f7ff fd86 	bl	23fec40 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff134:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff136:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff138:	4622      	mov	r2, r4
 23ff13a:	6868      	ldr	r0, [r5, #4]
 23ff13c:	f7ff fd80 	bl	23fec40 <network_ready>
        bool ok = false;
 23ff140:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff142:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff144:	9e00      	ldr	r6, [sp, #0]
 23ff146:	2e00      	cmp	r6, #0
 23ff148:	d03b      	beq.n	23ff1c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff14a:	2900      	cmp	r1, #0
 23ff14c:	d139      	bne.n	23ff1c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff14e:	6873      	ldr	r3, [r6, #4]
 23ff150:	2b02      	cmp	r3, #2
 23ff152:	d003      	beq.n	23ff15c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff154:	2b0a      	cmp	r3, #10
 23ff156:	d011      	beq.n	23ff17c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff158:	69f6      	ldr	r6, [r6, #28]
 23ff15a:	e7f4      	b.n	23ff146 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff15c:	f1b8 0f00 	cmp.w	r8, #0
 23ff160:	d0fa      	beq.n	23ff158 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff162:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff164:	a806      	add	r0, sp, #24
 23ff166:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff168:	1d3c      	adds	r4, r7, #4
 23ff16a:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff16c:	f7ff ff70 	bl	23ff050 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff174:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff176:	4641      	mov	r1, r8
 23ff178:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff17a:	e7ed      	b.n	23ff158 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff17c:	f1b9 0f00 	cmp.w	r9, #0
 23ff180:	d0ea      	beq.n	23ff158 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff182:	2210      	movs	r2, #16
 23ff184:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff186:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff188:	f000 fd63 	bl	23ffc52 <memset>
                    a.v = 6;
 23ff18c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff18e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff190:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff194:	f104 0308 	add.w	r3, r4, #8
 23ff198:	3418      	adds	r4, #24
 23ff19a:	462a      	mov	r2, r5
 23ff19c:	6818      	ldr	r0, [r3, #0]
 23ff19e:	6859      	ldr	r1, [r3, #4]
 23ff1a0:	3308      	adds	r3, #8
 23ff1a2:	c203      	stmia	r2!, {r0, r1}
 23ff1a4:	42a3      	cmp	r3, r4
 23ff1a6:	4615      	mov	r5, r2
 23ff1a8:	d1f7      	bne.n	23ff19a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff1aa:	a901      	add	r1, sp, #4
 23ff1ac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff1ae:	1d3c      	adds	r4, r7, #4
 23ff1b0:	ad07      	add	r5, sp, #28
 23ff1b2:	f7ff ff2d 	bl	23ff010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff1b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff1b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff1ba:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff1bc:	4649      	mov	r1, r9
 23ff1be:	7023      	strb	r3, [r4, #0]
                    break;
 23ff1c0:	e7ca      	b.n	23ff158 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff1c2:	9800      	ldr	r0, [sp, #0]
 23ff1c4:	f7ff fb36 	bl	23fe834 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff1c8:	4638      	mov	r0, r7
 23ff1ca:	b015      	add	sp, #84	; 0x54
 23ff1cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff1d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff1d0:	4b02      	ldr	r3, [pc, #8]	; (23ff1dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff1d2:	4a03      	ldr	r2, [pc, #12]	; (23ff1e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff1d4:	601a      	str	r2, [r3, #0]
 23ff1d6:	2200      	movs	r2, #0
 23ff1d8:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff1da:	4770      	bx	lr
 23ff1dc:	1007ae9c 	.word	0x1007ae9c
 23ff1e0:	023ffe60 	.word	0x023ffe60

023ff1e4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff1e6:	4606      	mov	r6, r0
 23ff1e8:	460d      	mov	r5, r1
  size_t n = 0;
 23ff1ea:	2400      	movs	r4, #0
 23ff1ec:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff1ee:	42bd      	cmp	r5, r7
 23ff1f0:	d00c      	beq.n	23ff20c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff1f2:	6833      	ldr	r3, [r6, #0]
 23ff1f4:	4630      	mov	r0, r6
 23ff1f6:	689b      	ldr	r3, [r3, #8]
 23ff1f8:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff1fc:	4798      	blx	r3
     if (chunk>=0)
 23ff1fe:	1e03      	subs	r3, r0, #0
 23ff200:	db01      	blt.n	23ff206 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff202:	441c      	add	r4, r3
  while (size--) {
 23ff204:	e7f3      	b.n	23ff1ee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff206:	2c00      	cmp	r4, #0
 23ff208:	bf08      	it	eq
 23ff20a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff20c:	4620      	mov	r0, r4
 23ff20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff210 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff210:	b513      	push	{r0, r1, r4, lr}
 23ff212:	4604      	mov	r4, r0
    }
 23ff214:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff216:	b159      	cbz	r1, 23ff230 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff218:	9101      	str	r1, [sp, #4]
 23ff21a:	f7fe fc91 	bl	23fdb40 <strlen>
 23ff21e:	4602      	mov	r2, r0
 23ff220:	4620      	mov	r0, r4
 23ff222:	6823      	ldr	r3, [r4, #0]
 23ff224:	9901      	ldr	r1, [sp, #4]
 23ff226:	68db      	ldr	r3, [r3, #12]
    }
 23ff228:	b002      	add	sp, #8
 23ff22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff22e:	4718      	bx	r3
    }
 23ff230:	b002      	add	sp, #8
 23ff232:	bd10      	pop	{r4, pc}

023ff234 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23ff234:	b508      	push	{r3, lr}
  return write(str);
 23ff236:	f7ff ffeb 	bl	23ff210 <_ZN5Print5writeEPKc>
}
 23ff23a:	bd08      	pop	{r3, pc}

023ff23c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23ff23c:	6803      	ldr	r3, [r0, #0]
 23ff23e:	689b      	ldr	r3, [r3, #8]
 23ff240:	4718      	bx	r3

023ff242 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23ff242:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23ff244:	210d      	movs	r1, #13
{
 23ff246:	4605      	mov	r5, r0
  size_t n = print('\r');
 23ff248:	f7ff fff8 	bl	23ff23c <_ZN5Print5printEc>
  n += print('\n');
 23ff24c:	210a      	movs	r1, #10
  size_t n = print('\r');
 23ff24e:	4604      	mov	r4, r0
  n += print('\n');
 23ff250:	4628      	mov	r0, r5
 23ff252:	f7ff fff3 	bl	23ff23c <_ZN5Print5printEc>
  return n;
}
 23ff256:	4420      	add	r0, r4
 23ff258:	bd38      	pop	{r3, r4, r5, pc}

023ff25a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23ff25a:	b538      	push	{r3, r4, r5, lr}
 23ff25c:	4605      	mov	r5, r0
  return write(str);
 23ff25e:	f7ff ffd7 	bl	23ff210 <_ZN5Print5writeEPKc>
 23ff262:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23ff264:	4628      	mov	r0, r5
 23ff266:	f7ff ffec 	bl	23ff242 <_ZN5Print7printlnEv>
  return n;
}
 23ff26a:	4420      	add	r0, r4
 23ff26c:	bd38      	pop	{r3, r4, r5, pc}

023ff26e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff26e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff270:	2a01      	cmp	r2, #1
 23ff272:	bf98      	it	ls
 23ff274:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff276:	b530      	push	{r4, r5, lr}
 23ff278:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff27a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff27e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff280:	460d      	mov	r5, r1
 23ff282:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff286:	fb01 5312 	mls	r3, r1, r2, r5
 23ff28a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff28e:	2b09      	cmp	r3, #9
 23ff290:	bf94      	ite	ls
 23ff292:	3330      	addls	r3, #48	; 0x30
 23ff294:	3337      	addhi	r3, #55	; 0x37
 23ff296:	b2db      	uxtb	r3, r3
  } while(n);
 23ff298:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff29a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff29e:	d9ef      	bls.n	23ff280 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff2a0:	4621      	mov	r1, r4
 23ff2a2:	f7ff ffb5 	bl	23ff210 <_ZN5Print5writeEPKc>
}
 23ff2a6:	b00b      	add	sp, #44	; 0x2c
 23ff2a8:	bd30      	pop	{r4, r5, pc}
	...

023ff2ac <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23ff2ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff2b0:	ec55 4b10 	vmov	r4, r5, d0
 23ff2b4:	4606      	mov	r6, r0
 23ff2b6:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23ff2b8:	ee10 2a10 	vmov	r2, s0
 23ff2bc:	462b      	mov	r3, r5
 23ff2be:	ee10 0a10 	vmov	r0, s0
 23ff2c2:	4629      	mov	r1, r5
 23ff2c4:	f7fe fb8e 	bl	23fd9e4 <__aeabi_dcmpun>
 23ff2c8:	b140      	cbz	r0, 23ff2dc <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23ff2ca:	4953      	ldr	r1, [pc, #332]	; (23ff418 <_ZN5Print10printFloatEdh+0x16c>)
 23ff2cc:	4630      	mov	r0, r6
 23ff2ce:	f7ff ff9f 	bl	23ff210 <_ZN5Print5writeEPKc>
 23ff2d2:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23ff2d4:	4650      	mov	r0, sl
 23ff2d6:	b003      	add	sp, #12
 23ff2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23ff2dc:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23ff2e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ff2e4:	4620      	mov	r0, r4
 23ff2e6:	4649      	mov	r1, r9
 23ff2e8:	4b4c      	ldr	r3, [pc, #304]	; (23ff41c <_ZN5Print10printFloatEdh+0x170>)
 23ff2ea:	f7fe fb7b 	bl	23fd9e4 <__aeabi_dcmpun>
 23ff2ee:	b948      	cbnz	r0, 23ff304 <_ZN5Print10printFloatEdh+0x58>
 23ff2f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23ff2f4:	4620      	mov	r0, r4
 23ff2f6:	4649      	mov	r1, r9
 23ff2f8:	4b48      	ldr	r3, [pc, #288]	; (23ff41c <_ZN5Print10printFloatEdh+0x170>)
 23ff2fa:	f7fe fb55 	bl	23fd9a8 <__aeabi_dcmple>
 23ff2fe:	b908      	cbnz	r0, 23ff304 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23ff300:	4947      	ldr	r1, [pc, #284]	; (23ff420 <_ZN5Print10printFloatEdh+0x174>)
 23ff302:	e7e3      	b.n	23ff2cc <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23ff304:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23ff308:	4620      	mov	r0, r4
 23ff30a:	4629      	mov	r1, r5
 23ff30c:	4b45      	ldr	r3, [pc, #276]	; (23ff424 <_ZN5Print10printFloatEdh+0x178>)
 23ff30e:	f7fe fb5f 	bl	23fd9d0 <__aeabi_dcmpgt>
 23ff312:	b108      	cbz	r0, 23ff318 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23ff314:	4944      	ldr	r1, [pc, #272]	; (23ff428 <_ZN5Print10printFloatEdh+0x17c>)
 23ff316:	e7d9      	b.n	23ff2cc <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23ff318:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23ff31c:	4620      	mov	r0, r4
 23ff31e:	4629      	mov	r1, r5
 23ff320:	4b42      	ldr	r3, [pc, #264]	; (23ff42c <_ZN5Print10printFloatEdh+0x180>)
 23ff322:	f7fe fb37 	bl	23fd994 <__aeabi_dcmplt>
 23ff326:	2800      	cmp	r0, #0
 23ff328:	d1f4      	bne.n	23ff314 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23ff32a:	2200      	movs	r2, #0
 23ff32c:	2300      	movs	r3, #0
 23ff32e:	4620      	mov	r0, r4
 23ff330:	4629      	mov	r1, r5
 23ff332:	f7fe fb2f 	bl	23fd994 <__aeabi_dcmplt>
 23ff336:	b1d0      	cbz	r0, 23ff36e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23ff338:	212d      	movs	r1, #45	; 0x2d
 23ff33a:	4630      	mov	r0, r6
 23ff33c:	f7ff ff7e 	bl	23ff23c <_ZN5Print5printEc>
     number = -number;
 23ff340:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23ff344:	4682      	mov	sl, r0
     number = -number;
 23ff346:	461d      	mov	r5, r3
  size_t n = 0;
 23ff348:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23ff34c:	2000      	movs	r0, #0
    rounding /= 10.0;
 23ff34e:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23ff352:	4937      	ldr	r1, [pc, #220]	; (23ff430 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23ff354:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23ff438 <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23ff358:	fa5f f38b 	uxtb.w	r3, fp
 23ff35c:	429f      	cmp	r7, r3
 23ff35e:	d908      	bls.n	23ff372 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23ff360:	4642      	mov	r2, r8
 23ff362:	464b      	mov	r3, r9
 23ff364:	f7fe f9ce 	bl	23fd704 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23ff368:	f10b 0b01 	add.w	fp, fp, #1
 23ff36c:	e7f4      	b.n	23ff358 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23ff36e:	4682      	mov	sl, r0
 23ff370:	e7ea      	b.n	23ff348 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23ff372:	4622      	mov	r2, r4
 23ff374:	462b      	mov	r3, r5
 23ff376:	f7fd fee5 	bl	23fd144 <__adddf3>
 23ff37a:	460d      	mov	r5, r1
 23ff37c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23ff37e:	f7fe fb6f 	bl	23fda60 <__aeabi_d2uiz>
 23ff382:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23ff384:	f7fe f81a 	bl	23fd3bc <__aeabi_ui2d>
 23ff388:	4602      	mov	r2, r0
 23ff38a:	460b      	mov	r3, r1
 23ff38c:	4620      	mov	r0, r4
 23ff38e:	4629      	mov	r1, r5
 23ff390:	f7fd fed6 	bl	23fd140 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23ff394:	220a      	movs	r2, #10
 23ff396:	4604      	mov	r4, r0
 23ff398:	460d      	mov	r5, r1
 23ff39a:	4630      	mov	r0, r6
 23ff39c:	4641      	mov	r1, r8
 23ff39e:	f7ff ff66 	bl	23ff26e <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23ff3a2:	4482      	add	sl, r0
  if (digits > 0) {
 23ff3a4:	2f00      	cmp	r7, #0
 23ff3a6:	d095      	beq.n	23ff2d4 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23ff3a8:	4630      	mov	r0, r6
 23ff3aa:	4922      	ldr	r1, [pc, #136]	; (23ff434 <_ZN5Print10printFloatEdh+0x188>)
 23ff3ac:	f7ff ff30 	bl	23ff210 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23ff3b0:	f04f 0800 	mov.w	r8, #0
 23ff3b4:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23ff438 <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23ff3b8:	4482      	add	sl, r0
  while (digits-- > 0)
 23ff3ba:	2f00      	cmp	r7, #0
 23ff3bc:	d08a      	beq.n	23ff2d4 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23ff3be:	4642      	mov	r2, r8
 23ff3c0:	464b      	mov	r3, r9
 23ff3c2:	4620      	mov	r0, r4
 23ff3c4:	4629      	mov	r1, r5
 23ff3c6:	f7fe f873 	bl	23fd4b0 <__aeabi_dmul>
 23ff3ca:	4604      	mov	r4, r0
 23ff3cc:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23ff3ce:	f7fe fb1f 	bl	23fda10 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23ff3d2:	f1b0 0b00 	subs.w	fp, r0, #0
 23ff3d6:	da1c      	bge.n	23ff412 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23ff3d8:	212d      	movs	r1, #45	; 0x2d
 23ff3da:	4630      	mov	r0, r6
 23ff3dc:	f7ff ff2e 	bl	23ff23c <_ZN5Print5printEc>
 23ff3e0:	4603      	mov	r3, r0
            val = -n;
 23ff3e2:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23ff3e6:	220a      	movs	r2, #10
 23ff3e8:	4630      	mov	r0, r6
 23ff3ea:	9301      	str	r3, [sp, #4]
 23ff3ec:	f7ff ff3f 	bl	23ff26e <_ZN5Print11printNumberEmh>
 23ff3f0:	9b01      	ldr	r3, [sp, #4]
 23ff3f2:	3f01      	subs	r7, #1
 23ff3f4:	4418      	add	r0, r3
    n += print(toPrint);
 23ff3f6:	4482      	add	sl, r0
    remainder -= toPrint;
 23ff3f8:	4658      	mov	r0, fp
 23ff3fa:	f7fd ffef 	bl	23fd3dc <__aeabi_i2d>
 23ff3fe:	4602      	mov	r2, r0
 23ff400:	460b      	mov	r3, r1
 23ff402:	4620      	mov	r0, r4
 23ff404:	4629      	mov	r1, r5
 23ff406:	f7fd fe9b 	bl	23fd140 <__aeabi_dsub>
 23ff40a:	b2ff      	uxtb	r7, r7
 23ff40c:	4604      	mov	r4, r0
 23ff40e:	460d      	mov	r5, r1
  while (digits-- > 0)
 23ff410:	e7d3      	b.n	23ff3ba <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23ff412:	4659      	mov	r1, fp
        size_t t = 0;
 23ff414:	2300      	movs	r3, #0
 23ff416:	e7e6      	b.n	23ff3e6 <_ZN5Print10printFloatEdh+0x13a>
 23ff418:	023ffe94 	.word	0x023ffe94
 23ff41c:	7fefffff 	.word	0x7fefffff
 23ff420:	023ffe98 	.word	0x023ffe98
 23ff424:	41efffff 	.word	0x41efffff
 23ff428:	023ffe9c 	.word	0x023ffe9c
 23ff42c:	c1efffff 	.word	0xc1efffff
 23ff430:	3fe00000 	.word	0x3fe00000
 23ff434:	023ffea0 	.word	0x023ffea0
 23ff438:	40240000 	.word	0x40240000

023ff43c <_ZN5Print5printEfi>:
{
 23ff43c:	b538      	push	{r3, r4, r5, lr}
 23ff43e:	4604      	mov	r4, r0
 23ff440:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23ff444:	b2cd      	uxtb	r5, r1
 23ff446:	f7fd ffdb 	bl	23fd400 <__aeabi_f2d>
 23ff44a:	ec41 0b10 	vmov	d0, r0, r1
 23ff44e:	4629      	mov	r1, r5
 23ff450:	4620      	mov	r0, r4
}
 23ff452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23ff456:	f7ff bf29 	b.w	23ff2ac <_ZN5Print10printFloatEdh>
	...

023ff45c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23ff45c:	2200      	movs	r2, #0
 23ff45e:	4b01      	ldr	r3, [pc, #4]	; (23ff464 <_GLOBAL__sub_I_RGB+0x8>)
 23ff460:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff462:	4770      	bx	lr
 23ff464:	1007aea4 	.word	0x1007aea4

023ff468 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23ff468:	2100      	movs	r1, #0
 23ff46a:	f7ff ba7d 	b.w	23fe968 <hal_spi_release>

023ff46e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23ff46e:	2100      	movs	r1, #0
 23ff470:	f7ff ba6c 	b.w	23fe94c <hal_spi_acquire>

023ff474 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff474:	b510      	push	{r4, lr}
 23ff476:	4604      	mov	r4, r0
 23ff478:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff47a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff47c:	f7ff fa12 	bl	23fe8a4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff480:	2300      	movs	r3, #0
}
 23ff482:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff484:	6063      	str	r3, [r4, #4]
}
 23ff486:	bd10      	pop	{r4, pc}

023ff488 <_ZN8SPIClass5beginE14hal_spi_mode_tt>:
        unlock();
    }
}

void SPIClass::begin(hal_spi_mode_t mode, uint16_t ss_pin)
{
 23ff488:	b513      	push	{r0, r1, r4, lr}
 23ff48a:	4604      	mov	r4, r0
    if (!lock())
 23ff48c:	7800      	ldrb	r0, [r0, #0]
{
 23ff48e:	e9cd 2100 	strd	r2, r1, [sp]
    if (!lock())
 23ff492:	f7ff ffec 	bl	23ff46e <_ZN8SPIClass4lockEv.isra.0>
 23ff496:	e9dd 2100 	ldrd	r2, r1, [sp]
 23ff49a:	4603      	mov	r3, r0
 23ff49c:	b948      	cbnz	r0, 23ff4b2 <_ZN8SPIClass5beginE14hal_spi_mode_tt+0x2a>
 23ff49e:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin_ext(_spi, mode, ss_pin, NULL);
 23ff4a0:	9000      	str	r0, [sp, #0]
 23ff4a2:	f7ff fa37 	bl	23fe914 <hal_spi_begin_ext>
        unlock();
 23ff4a6:	9800      	ldr	r0, [sp, #0]
    }
}
 23ff4a8:	b002      	add	sp, #8
 23ff4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23ff4ae:	f7ff bfdb 	b.w	23ff468 <_ZN8SPIClass6unlockEv.isra.0>
 23ff4b2:	b002      	add	sp, #8
 23ff4b4:	bd10      	pop	{r4, pc}

023ff4b6 <_ZN8SPIClass11setDataModeEh>:
        unlock();
    }
}

void SPIClass::setDataMode(uint8_t mode)
{
 23ff4b6:	b513      	push	{r0, r1, r4, lr}
 23ff4b8:	4604      	mov	r4, r0
    if (!lock())
 23ff4ba:	7800      	ldrb	r0, [r0, #0]
{
 23ff4bc:	9101      	str	r1, [sp, #4]
    if (!lock())
 23ff4be:	f7ff ffd6 	bl	23ff46e <_ZN8SPIClass4lockEv.isra.0>
 23ff4c2:	9901      	ldr	r1, [sp, #4]
 23ff4c4:	b948      	cbnz	r0, 23ff4da <_ZN8SPIClass11setDataModeEh+0x24>
 23ff4c6:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
 23ff4c8:	9001      	str	r0, [sp, #4]
 23ff4ca:	f7ff f9cf 	bl	23fe86c <hal_spi_set_data_mode>
        unlock();
 23ff4ce:	9801      	ldr	r0, [sp, #4]
    }
}
 23ff4d0:	b002      	add	sp, #8
 23ff4d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23ff4d6:	f7ff bfc7 	b.w	23ff468 <_ZN8SPIClass6unlockEv.isra.0>
 23ff4da:	b002      	add	sp, #8
 23ff4dc:	bd10      	pop	{r4, pc}

023ff4de <_ZN8SPIClass16beginTransactionEv>:

int32_t SPIClass::beginTransaction()
{
    return lock();
 23ff4de:	7800      	ldrb	r0, [r0, #0]
 23ff4e0:	f7ff bfc5 	b.w	23ff46e <_ZN8SPIClass4lockEv.isra.0>

023ff4e4 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23ff4e4:	7800      	ldrb	r0, [r0, #0]
 23ff4e6:	f7ff bfbf 	b.w	23ff468 <_ZN8SPIClass6unlockEv.isra.0>
	...

023ff4ec <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23ff4ec:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23ff4ee:	2400      	movs	r4, #0
 23ff4f0:	0840      	lsrs	r0, r0, #1
 23ff4f2:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23ff4f4:	6818      	ldr	r0, [r3, #0]
 23ff4f6:	b2e5      	uxtb	r5, r4
 23ff4f8:	4288      	cmp	r0, r1
 23ff4fa:	d906      	bls.n	23ff50a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23ff4fc:	3401      	adds	r4, #1
 23ff4fe:	2c08      	cmp	r4, #8
 23ff500:	d002      	beq.n	23ff508 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23ff502:	0840      	lsrs	r0, r0, #1
 23ff504:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23ff506:	e7f5      	b.n	23ff4f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23ff508:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23ff50a:	4b02      	ldr	r3, [pc, #8]	; (23ff514 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23ff50c:	5d5b      	ldrb	r3, [r3, r5]
 23ff50e:	7013      	strb	r3, [r2, #0]
}
 23ff510:	bd30      	pop	{r4, r5, pc}
 23ff512:	bf00      	nop
 23ff514:	023ffea2 	.word	0x023ffea2

023ff518 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23ff518:	2300      	movs	r3, #0
{
 23ff51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23ff51e:	4604      	mov	r4, r0
 23ff520:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23ff522:	7800      	ldrb	r0, [r0, #0]
{
 23ff524:	460e      	mov	r6, r1
 23ff526:	4617      	mov	r7, r2
    unsigned clock = 0;
 23ff528:	9302      	str	r3, [sp, #8]
    if (!lock())
 23ff52a:	f7ff ffa0 	bl	23ff46e <_ZN8SPIClass4lockEv.isra.0>
 23ff52e:	4605      	mov	r5, r0
 23ff530:	bb00      	cbnz	r0, 23ff574 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23ff532:	4601      	mov	r1, r0
 23ff534:	2214      	movs	r2, #20
 23ff536:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23ff538:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23ff53c:	f000 fb89 	bl	23ffc52 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23ff540:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23ff542:	462a      	mov	r2, r5
 23ff544:	4640      	mov	r0, r8
 23ff546:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23ff548:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23ff54c:	f7ff f9c6 	bl	23fe8dc <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23ff550:	fb07 f106 	mul.w	r1, r7, r6
 23ff554:	9804      	ldr	r0, [sp, #16]
 23ff556:	ab02      	add	r3, sp, #8
 23ff558:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23ff55c:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23ff560:	f7ff ffc4 	bl	23ff4ec <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23ff564:	7820      	ldrb	r0, [r4, #0]
 23ff566:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23ff56a:	f7ff f98d 	bl	23fe888 <hal_spi_set_clock_divider>
        unlock();
 23ff56e:	7820      	ldrb	r0, [r4, #0]
 23ff570:	f7ff ff7a 	bl	23ff468 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23ff574:	9802      	ldr	r0, [sp, #8]
 23ff576:	b008      	add	sp, #32
 23ff578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023ff57c <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23ff57c:	b530      	push	{r4, r5, lr}
 23ff57e:	b087      	sub	sp, #28
 23ff580:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23ff582:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23ff584:	9500      	str	r5, [sp, #0]
 23ff586:	7800      	ldrb	r0, [r0, #0]
 23ff588:	f7ff f9b6 	bl	23fe8f8 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23ff58c:	b93d      	cbnz	r5, 23ff59e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23ff58e:	7820      	ldrb	r0, [r4, #0]
 23ff590:	a902      	add	r1, sp, #8
 23ff592:	f7ff f9cd 	bl	23fe930 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23ff596:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23ff59a:	07db      	lsls	r3, r3, #31
 23ff59c:	d4f7      	bmi.n	23ff58e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23ff59e:	b007      	add	sp, #28
 23ff5a0:	bd30      	pop	{r4, r5, pc}
	...

023ff5a4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff5a4:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff5a6:	2000      	movs	r0, #0
 23ff5a8:	4b04      	ldr	r3, [pc, #16]	; (23ff5bc <_GLOBAL__sub_I_System+0x18>)
 23ff5aa:	601a      	str	r2, [r3, #0]
 23ff5ac:	4b04      	ldr	r3, [pc, #16]	; (23ff5c0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff5ae:	4a05      	ldr	r2, [pc, #20]	; (23ff5c4 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff5b0:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff5b4:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff5b6:	f7ff bab7 	b.w	23feb28 <set_system_mode>
 23ff5ba:	bf00      	nop
 23ff5bc:	1007aec0 	.word	0x1007aec0
 23ff5c0:	1007aeb4 	.word	0x1007aeb4
 23ff5c4:	ffff0000 	.word	0xffff0000

023ff5c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff5c8:	4b02      	ldr	r3, [pc, #8]	; (23ff5d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff5ca:	681a      	ldr	r2, [r3, #0]
 23ff5cc:	4b02      	ldr	r3, [pc, #8]	; (23ff5d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff5ce:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff5d0:	4770      	bx	lr
 23ff5d2:	bf00      	nop
 23ff5d4:	1007adbc 	.word	0x1007adbc
 23ff5d8:	1007aec4 	.word	0x1007aec4

023ff5dc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff5dc:	4770      	bx	lr

023ff5de <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff5de:	7441      	strb	r1, [r0, #17]
}
 23ff5e0:	4770      	bx	lr

023ff5e2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff5e2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff5e4:	7c00      	ldrb	r0, [r0, #16]
 23ff5e6:	f7ff fa21 	bl	23fea2c <hal_usart_available_data_for_write>
}
 23ff5ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff5ee:	bd08      	pop	{r3, pc}

023ff5f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff5f0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff5f2:	7c00      	ldrb	r0, [r0, #16]
 23ff5f4:	f7ff f9d4 	bl	23fe9a0 <hal_usart_available>
}
 23ff5f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff5fc:	bd08      	pop	{r3, pc}

023ff5fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff5fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff600:	7c00      	ldrb	r0, [r0, #16]
 23ff602:	f7ff f9e9 	bl	23fe9d8 <hal_usart_peek>
}
 23ff606:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff60a:	bd08      	pop	{r3, pc}

023ff60c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff60c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff60e:	7c00      	ldrb	r0, [r0, #16]
 23ff610:	f7ff f9d4 	bl	23fe9bc <hal_usart_read>
}
 23ff614:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff618:	bd08      	pop	{r3, pc}

023ff61a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff61a:	7c00      	ldrb	r0, [r0, #16]
 23ff61c:	f7ff b9ea 	b.w	23fe9f4 <hal_usart_flush>

023ff620 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff620:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff622:	7c45      	ldrb	r5, [r0, #17]
{
 23ff624:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff626:	b12d      	cbz	r5, 23ff634 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff628:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff62a:	b003      	add	sp, #12
 23ff62c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff630:	f7ff b9a8 	b.w	23fe984 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff634:	7c00      	ldrb	r0, [r0, #16]
 23ff636:	9101      	str	r1, [sp, #4]
 23ff638:	f7ff f9f8 	bl	23fea2c <hal_usart_available_data_for_write>
 23ff63c:	2800      	cmp	r0, #0
 23ff63e:	9901      	ldr	r1, [sp, #4]
 23ff640:	dcf2      	bgt.n	23ff628 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff642:	4628      	mov	r0, r5
 23ff644:	b003      	add	sp, #12
 23ff646:	bd30      	pop	{r4, r5, pc}

023ff648 <_ZN11USARTSerialD0Ev>:
 23ff648:	b510      	push	{r4, lr}
 23ff64a:	4604      	mov	r4, r0
 23ff64c:	2114      	movs	r1, #20
 23ff64e:	f7fe fa9e 	bl	23fdb8e <_ZdlPvj>
 23ff652:	4620      	mov	r0, r4
 23ff654:	bd10      	pop	{r4, pc}
	...

023ff658 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff658:	b510      	push	{r4, lr}
 23ff65a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff65e:	4604      	mov	r4, r0
 23ff660:	4608      	mov	r0, r1
 23ff662:	4611      	mov	r1, r2
 23ff664:	2200      	movs	r2, #0
 23ff666:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff66a:	4b04      	ldr	r3, [pc, #16]	; (23ff67c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff66c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff66e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff670:	2301      	movs	r3, #1
 23ff672:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff674:	f7ff f9e8 	bl	23fea48 <hal_usart_init_ex>
}
 23ff678:	4620      	mov	r0, r4
 23ff67a:	bd10      	pop	{r4, pc}
 23ff67c:	023ffed0 	.word	0x023ffed0

023ff680 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff680:	7c00      	ldrb	r0, [r0, #16]
 23ff682:	f7ff b9c5 	b.w	23fea10 <hal_usart_is_enabled>

023ff686 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff686:	7441      	strb	r1, [r0, #17]
}
 23ff688:	4770      	bx	lr

023ff68a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff68a:	4770      	bx	lr

023ff68c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff68c:	4770      	bx	lr

023ff68e <_ZN9USBSerial4readEv>:
{
 23ff68e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff690:	2100      	movs	r1, #0
 23ff692:	7c00      	ldrb	r0, [r0, #16]
 23ff694:	f7ff fa1e 	bl	23fead4 <HAL_USB_USART_Receive_Data>
}
 23ff698:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff69c:	bd08      	pop	{r3, pc}

023ff69e <_ZN9USBSerial4peekEv>:
{
 23ff69e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff6a0:	2101      	movs	r1, #1
 23ff6a2:	7c00      	ldrb	r0, [r0, #16]
 23ff6a4:	f7ff fa16 	bl	23fead4 <HAL_USB_USART_Receive_Data>
}
 23ff6a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff6ac:	bd08      	pop	{r3, pc}

023ff6ae <_ZN9USBSerial17availableForWriteEv>:
{
 23ff6ae:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff6b0:	7c00      	ldrb	r0, [r0, #16]
 23ff6b2:	f7ff fa01 	bl	23feab8 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff6b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff6ba:	bd08      	pop	{r3, pc}

023ff6bc <_ZN9USBSerial9availableEv>:
{
 23ff6bc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff6be:	7c00      	ldrb	r0, [r0, #16]
 23ff6c0:	f7ff f9ec 	bl	23fea9c <HAL_USB_USART_Available_Data>
}
 23ff6c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff6c8:	bd08      	pop	{r3, pc}

023ff6ca <_ZN9USBSerial5writeEh>:
{
 23ff6ca:	b513      	push	{r0, r1, r4, lr}
 23ff6cc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff6ce:	7c00      	ldrb	r0, [r0, #16]
{
 23ff6d0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff6d2:	f7ff f9f1 	bl	23feab8 <HAL_USB_USART_Available_Data_For_Write>
 23ff6d6:	2800      	cmp	r0, #0
 23ff6d8:	9901      	ldr	r1, [sp, #4]
 23ff6da:	dc01      	bgt.n	23ff6e0 <_ZN9USBSerial5writeEh+0x16>
 23ff6dc:	7c60      	ldrb	r0, [r4, #17]
 23ff6de:	b120      	cbz	r0, 23ff6ea <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff6e0:	7c20      	ldrb	r0, [r4, #16]
 23ff6e2:	f7ff fa05 	bl	23feaf0 <HAL_USB_USART_Send_Data>
 23ff6e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff6ea:	b002      	add	sp, #8
 23ff6ec:	bd10      	pop	{r4, pc}

023ff6ee <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff6ee:	7c00      	ldrb	r0, [r0, #16]
 23ff6f0:	f7ff ba0c 	b.w	23feb0c <HAL_USB_USART_Flush_Data>

023ff6f4 <_ZN9USBSerialD0Ev>:
 23ff6f4:	b510      	push	{r4, lr}
 23ff6f6:	4604      	mov	r4, r0
 23ff6f8:	2114      	movs	r1, #20
 23ff6fa:	f7fe fa48 	bl	23fdb8e <_ZdlPvj>
 23ff6fe:	4620      	mov	r0, r4
 23ff700:	bd10      	pop	{r4, pc}
	...

023ff704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff704:	b510      	push	{r4, lr}
 23ff706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff70a:	4604      	mov	r4, r0
 23ff70c:	4608      	mov	r0, r1
 23ff70e:	2100      	movs	r1, #0
 23ff710:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff714:	4b04      	ldr	r3, [pc, #16]	; (23ff728 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff716:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff718:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff71a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff71c:	4611      	mov	r1, r2
  _blocking = true;
 23ff71e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff720:	f7ff f9a0 	bl	23fea64 <HAL_USB_USART_Init>
}
 23ff724:	4620      	mov	r0, r4
 23ff726:	bd10      	pop	{r4, pc}
 23ff728:	023fff00 	.word	0x023fff00

023ff72c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff72c:	2200      	movs	r2, #0
 23ff72e:	7c00      	ldrb	r0, [r0, #16]
 23ff730:	f7ff b9a6 	b.w	23fea80 <HAL_USB_USART_Begin>

023ff734 <_Z19acquireSerialBufferv>:
{
 23ff734:	b510      	push	{r4, lr}
 23ff736:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff738:	2214      	movs	r2, #20
 23ff73a:	2100      	movs	r1, #0
 23ff73c:	f000 fa89 	bl	23ffc52 <memset>
}
 23ff740:	4620      	mov	r0, r4
 23ff742:	bd10      	pop	{r4, pc}

023ff744 <_Z16_fetch_usbserialv>:
{
 23ff744:	b510      	push	{r4, lr}
 23ff746:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff748:	a803      	add	r0, sp, #12
 23ff74a:	f7ff fff3 	bl	23ff734 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff74e:	4c0c      	ldr	r4, [pc, #48]	; (23ff780 <_Z16_fetch_usbserialv+0x3c>)
 23ff750:	e8d4 1f8f 	ldab	r1, [r4]
 23ff754:	f011 0101 	ands.w	r1, r1, #1
 23ff758:	d10f      	bne.n	23ff77a <_Z16_fetch_usbserialv+0x36>
 23ff75a:	4620      	mov	r0, r4
 23ff75c:	9101      	str	r1, [sp, #4]
 23ff75e:	f7fe fa18 	bl	23fdb92 <__cxa_guard_acquire>
 23ff762:	9901      	ldr	r1, [sp, #4]
 23ff764:	b148      	cbz	r0, 23ff77a <_Z16_fetch_usbserialv+0x36>
 23ff766:	aa03      	add	r2, sp, #12
 23ff768:	4806      	ldr	r0, [pc, #24]	; (23ff784 <_Z16_fetch_usbserialv+0x40>)
 23ff76a:	f7ff ffcb 	bl	23ff704 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff76e:	4620      	mov	r0, r4
 23ff770:	f7fe fa14 	bl	23fdb9c <__cxa_guard_release>
 23ff774:	4804      	ldr	r0, [pc, #16]	; (23ff788 <_Z16_fetch_usbserialv+0x44>)
 23ff776:	f000 fa59 	bl	23ffc2c <atexit>
	return _usbserial;
}
 23ff77a:	4802      	ldr	r0, [pc, #8]	; (23ff784 <_Z16_fetch_usbserialv+0x40>)
 23ff77c:	b008      	add	sp, #32
 23ff77e:	bd10      	pop	{r4, pc}
 23ff780:	1007aec8 	.word	0x1007aec8
 23ff784:	1007aecc 	.word	0x1007aecc
 23ff788:	023ff68b 	.word	0x023ff68b

023ff78c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff78c:	2200      	movs	r2, #0
 23ff78e:	6840      	ldr	r0, [r0, #4]
 23ff790:	4611      	mov	r1, r2
 23ff792:	f7ff ba55 	b.w	23fec40 <network_ready>

023ff796 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff796:	2200      	movs	r2, #0
 23ff798:	6840      	ldr	r0, [r0, #4]
 23ff79a:	4611      	mov	r1, r2
 23ff79c:	f7ff ba88 	b.w	23fecb0 <network_listening>

023ff7a0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff7a0:	2200      	movs	r2, #0
 23ff7a2:	6840      	ldr	r0, [r0, #4]
 23ff7a4:	4611      	mov	r1, r2
 23ff7a6:	f7ff ba9f 	b.w	23fece8 <network_get_listen_timeout>

023ff7aa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff7aa:	2200      	movs	r2, #0
 23ff7ac:	6840      	ldr	r0, [r0, #4]
 23ff7ae:	f7ff ba8d 	b.w	23feccc <network_set_listen_timeout>

023ff7b2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff7b2:	2200      	movs	r2, #0
 23ff7b4:	6840      	ldr	r0, [r0, #4]
 23ff7b6:	f081 0101 	eor.w	r1, r1, #1
 23ff7ba:	f7ff ba6b 	b.w	23fec94 <network_listen>

023ff7be <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff7be:	2300      	movs	r3, #0
 23ff7c0:	6840      	ldr	r0, [r0, #4]
 23ff7c2:	461a      	mov	r2, r3
 23ff7c4:	4619      	mov	r1, r3
 23ff7c6:	f7ff ba57 	b.w	23fec78 <network_off>

023ff7ca <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff7ca:	2300      	movs	r3, #0
 23ff7cc:	6840      	ldr	r0, [r0, #4]
 23ff7ce:	461a      	mov	r2, r3
 23ff7d0:	4619      	mov	r1, r3
 23ff7d2:	f7ff ba43 	b.w	23fec5c <network_on>

023ff7d6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff7d6:	2200      	movs	r2, #0
 23ff7d8:	6840      	ldr	r0, [r0, #4]
 23ff7da:	4611      	mov	r1, r2
 23ff7dc:	f7ff ba14 	b.w	23fec08 <network_connecting>

023ff7e0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff7e0:	2200      	movs	r2, #0
 23ff7e2:	2102      	movs	r1, #2
 23ff7e4:	6840      	ldr	r0, [r0, #4]
 23ff7e6:	f7ff ba1d 	b.w	23fec24 <network_disconnect>

023ff7ea <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff7ea:	2300      	movs	r3, #0
 23ff7ec:	6840      	ldr	r0, [r0, #4]
 23ff7ee:	461a      	mov	r2, r3
 23ff7f0:	f7ff b9fc 	b.w	23febec <network_connect>

023ff7f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff7f4:	2204      	movs	r2, #4
 23ff7f6:	4b02      	ldr	r3, [pc, #8]	; (23ff800 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff7f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff7fa:	4a02      	ldr	r2, [pc, #8]	; (23ff804 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff7fc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff7fe:	4770      	bx	lr
 23ff800:	1007aee0 	.word	0x1007aee0
 23ff804:	023fff30 	.word	0x023fff30

023ff808 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff808:	4b01      	ldr	r3, [pc, #4]	; (23ff810 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff80a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff80c:	4770      	bx	lr
 23ff80e:	bf00      	nop
 23ff810:	1007adc0 	.word	0x1007adc0

023ff814 <serialEventRun>:
{
 23ff814:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff816:	4b0f      	ldr	r3, [pc, #60]	; (23ff854 <serialEventRun+0x40>)
 23ff818:	b143      	cbz	r3, 23ff82c <serialEventRun+0x18>
 23ff81a:	f7ff ff93 	bl	23ff744 <_Z16_fetch_usbserialv>
 23ff81e:	6803      	ldr	r3, [r0, #0]
 23ff820:	691b      	ldr	r3, [r3, #16]
 23ff822:	4798      	blx	r3
 23ff824:	2800      	cmp	r0, #0
 23ff826:	dd01      	ble.n	23ff82c <serialEventRun+0x18>
        serialEvent();
 23ff828:	e000      	b.n	23ff82c <serialEventRun+0x18>
 23ff82a:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff82c:	4b0a      	ldr	r3, [pc, #40]	; (23ff858 <serialEventRun+0x44>)
 23ff82e:	b143      	cbz	r3, 23ff842 <serialEventRun+0x2e>
 23ff830:	f000 f96a 	bl	23ffb08 <_Z22__fetch_global_Serial1v>
 23ff834:	6803      	ldr	r3, [r0, #0]
 23ff836:	691b      	ldr	r3, [r3, #16]
 23ff838:	4798      	blx	r3
 23ff83a:	2800      	cmp	r0, #0
 23ff83c:	dd01      	ble.n	23ff842 <serialEventRun+0x2e>
        serialEvent1();
 23ff83e:	e000      	b.n	23ff842 <serialEventRun+0x2e>
 23ff840:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff842:	4b06      	ldr	r3, [pc, #24]	; (23ff85c <serialEventRun+0x48>)
 23ff844:	b10b      	cbz	r3, 23ff84a <serialEventRun+0x36>
 23ff846:	f000 f9a5 	bl	23ffb94 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff84a:	4b05      	ldr	r3, [pc, #20]	; (23ff860 <serialEventRun+0x4c>)
 23ff84c:	b10b      	cbz	r3, 23ff852 <serialEventRun+0x3e>
 23ff84e:	f000 f9d7 	bl	23ffc00 <_Z15serialEventRun3v>
}
 23ff852:	bd08      	pop	{r3, pc}
	...

023ff864 <_post_loop>:
{
 23ff864:	b508      	push	{r3, lr}
	serialEventRun();
 23ff866:	f7ff ffd5 	bl	23ff814 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff86a:	f7fe fef5 	bl	23fe658 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff86e:	4b01      	ldr	r3, [pc, #4]	; (23ff874 <_post_loop+0x10>)
 23ff870:	6018      	str	r0, [r3, #0]
}
 23ff872:	bd08      	pop	{r3, pc}
 23ff874:	1007aef0 	.word	0x1007aef0

023ff878 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff878:	4805      	ldr	r0, [pc, #20]	; (23ff890 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff87a:	4a06      	ldr	r2, [pc, #24]	; (23ff894 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff87c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff87e:	1a12      	subs	r2, r2, r0
 23ff880:	4905      	ldr	r1, [pc, #20]	; (23ff898 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff882:	f000 f9d9 	bl	23ffc38 <memcpy>
    __backup_sram_signature = signature;
 23ff886:	4b05      	ldr	r3, [pc, #20]	; (23ff89c <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff888:	4a05      	ldr	r2, [pc, #20]	; (23ff8a0 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff88a:	601a      	str	r2, [r3, #0]
}
 23ff88c:	bd08      	pop	{r3, pc}
 23ff88e:	bf00      	nop
 23ff890:	1007b400 	.word	0x1007b400
 23ff894:	1007b404 	.word	0x1007b404
 23ff898:	085fefc4 	.word	0x085fefc4
 23ff89c:	1007b400 	.word	0x1007b400
 23ff8a0:	9a271c1e 	.word	0x9a271c1e

023ff8a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8a4:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff8a6:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8a8:	461a      	mov	r2, r3
 23ff8aa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff8ae:	9300      	str	r3, [sp, #0]
 23ff8b0:	f7ff f972 	bl	23feb98 <system_ctrl_set_result>
}
 23ff8b4:	b003      	add	sp, #12
 23ff8b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff8bc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff8bc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff8be:	8843      	ldrh	r3, [r0, #2]
 23ff8c0:	2b0a      	cmp	r3, #10
 23ff8c2:	d008      	beq.n	23ff8d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff8c4:	2b50      	cmp	r3, #80	; 0x50
 23ff8c6:	d10b      	bne.n	23ff8e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff8c8:	4b09      	ldr	r3, [pc, #36]	; (23ff8f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff8ca:	681b      	ldr	r3, [r3, #0]
 23ff8cc:	b14b      	cbz	r3, 23ff8e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff8ce:	b003      	add	sp, #12
 23ff8d0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff8d4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff8d6:	f7ff ffe5 	bl	23ff8a4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff8da:	b003      	add	sp, #12
 23ff8dc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff8e0:	2300      	movs	r3, #0
 23ff8e2:	461a      	mov	r2, r3
 23ff8e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff8e8:	9300      	str	r3, [sp, #0]
 23ff8ea:	f7ff f955 	bl	23feb98 <system_ctrl_set_result>
}
 23ff8ee:	e7f4      	b.n	23ff8da <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff8f0:	1007aeec 	.word	0x1007aeec

023ff8f4 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff8f4:	2100      	movs	r1, #0
{
 23ff8f6:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff8f8:	4811      	ldr	r0, [pc, #68]	; (23ff940 <module_user_init_hook+0x4c>)
 23ff8fa:	f7ff fa49 	bl	23fed90 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff8fe:	4b11      	ldr	r3, [pc, #68]	; (23ff944 <module_user_init_hook+0x50>)
 23ff900:	681a      	ldr	r2, [r3, #0]
 23ff902:	4b11      	ldr	r3, [pc, #68]	; (23ff948 <module_user_init_hook+0x54>)
 23ff904:	429a      	cmp	r2, r3
 23ff906:	bf0c      	ite	eq
 23ff908:	2201      	moveq	r2, #1
 23ff90a:	2200      	movne	r2, #0
 23ff90c:	4b0f      	ldr	r3, [pc, #60]	; (23ff94c <module_user_init_hook+0x58>)
 23ff90e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff910:	d001      	beq.n	23ff916 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff912:	f7ff ffb1 	bl	23ff878 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff916:	f7fe fe91 	bl	23fe63c <HAL_RNG_GetRandomNumber>
 23ff91a:	4604      	mov	r4, r0
    srand(seed);
 23ff91c:	f000 f9a2 	bl	23ffc64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff920:	4b0b      	ldr	r3, [pc, #44]	; (23ff950 <module_user_init_hook+0x5c>)
 23ff922:	b113      	cbz	r3, 23ff92a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff924:	4620      	mov	r0, r4
 23ff926:	e000      	b.n	23ff92a <module_user_init_hook+0x36>
 23ff928:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff92a:	2100      	movs	r1, #0
 23ff92c:	4808      	ldr	r0, [pc, #32]	; (23ff950 <module_user_init_hook+0x5c>)
 23ff92e:	f7ff f941 	bl	23febb4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff936:	2100      	movs	r1, #0
 23ff938:	4806      	ldr	r0, [pc, #24]	; (23ff954 <module_user_init_hook+0x60>)
 23ff93a:	f7ff b91f 	b.w	23feb7c <system_ctrl_set_app_request_handler>
 23ff93e:	bf00      	nop
 23ff940:	023ff809 	.word	0x023ff809
 23ff944:	1007b400 	.word	0x1007b400
 23ff948:	9a271c1e 	.word	0x9a271c1e
 23ff94c:	1007aee8 	.word	0x1007aee8
 23ff950:	00000000 	.word	0x00000000
 23ff954:	023ff8bd 	.word	0x023ff8bd

023ff958 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff958:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff95a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff95c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff95e:	d902      	bls.n	23ff966 <pinAvailable+0xe>
    return false;
 23ff960:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff962:	b003      	add	sp, #12
 23ff964:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff966:	f1a0 030f 	sub.w	r3, r0, #15
 23ff96a:	2b02      	cmp	r3, #2
 23ff96c:	d90b      	bls.n	23ff986 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff96e:	2801      	cmp	r0, #1
 23ff970:	d821      	bhi.n	23ff9b6 <pinAvailable+0x5e>
 23ff972:	f000 f875 	bl	23ffa60 <_Z19__fetch_global_Wirev>
 23ff976:	2100      	movs	r1, #0
 23ff978:	7c00      	ldrb	r0, [r0, #16]
 23ff97a:	f7fe ff23 	bl	23fe7c4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff97e:	f080 0001 	eor.w	r0, r0, #1
 23ff982:	b2c0      	uxtb	r0, r0
 23ff984:	e7ed      	b.n	23ff962 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff986:	4d11      	ldr	r5, [pc, #68]	; (23ff9cc <pinAvailable+0x74>)
 23ff988:	e8d5 1f8f 	ldab	r1, [r5]
 23ff98c:	f011 0101 	ands.w	r1, r1, #1
 23ff990:	d10b      	bne.n	23ff9aa <pinAvailable+0x52>
 23ff992:	4628      	mov	r0, r5
 23ff994:	9101      	str	r1, [sp, #4]
 23ff996:	f7fe f8fc 	bl	23fdb92 <__cxa_guard_acquire>
 23ff99a:	9901      	ldr	r1, [sp, #4]
 23ff99c:	b128      	cbz	r0, 23ff9aa <pinAvailable+0x52>
 23ff99e:	480c      	ldr	r0, [pc, #48]	; (23ff9d0 <pinAvailable+0x78>)
 23ff9a0:	f7ff fd68 	bl	23ff474 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff9a4:	4628      	mov	r0, r5
 23ff9a6:	f7fe f8f9 	bl	23fdb9c <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff9aa:	4b09      	ldr	r3, [pc, #36]	; (23ff9d0 <pinAvailable+0x78>)
 23ff9ac:	7818      	ldrb	r0, [r3, #0]
 23ff9ae:	f7fe ff87 	bl	23fe8c0 <hal_spi_is_enabled>
 23ff9b2:	2800      	cmp	r0, #0
 23ff9b4:	d1d4      	bne.n	23ff960 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff9b6:	3c08      	subs	r4, #8
 23ff9b8:	2c01      	cmp	r4, #1
 23ff9ba:	d805      	bhi.n	23ff9c8 <pinAvailable+0x70>
 23ff9bc:	f000 f8a4 	bl	23ffb08 <_Z22__fetch_global_Serial1v>
 23ff9c0:	7c00      	ldrb	r0, [r0, #16]
 23ff9c2:	f7ff f825 	bl	23fea10 <hal_usart_is_enabled>
 23ff9c6:	e7da      	b.n	23ff97e <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff9c8:	2001      	movs	r0, #1
 23ff9ca:	e7ca      	b.n	23ff962 <pinAvailable+0xa>
 23ff9cc:	1007ae7c 	.word	0x1007ae7c
 23ff9d0:	1007ae80 	.word	0x1007ae80

023ff9d4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff9d4:	281b      	cmp	r0, #27
{
 23ff9d6:	b538      	push	{r3, r4, r5, lr}
 23ff9d8:	4604      	mov	r4, r0
 23ff9da:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff9dc:	d80a      	bhi.n	23ff9f4 <pinMode+0x20>
 23ff9de:	29ff      	cmp	r1, #255	; 0xff
 23ff9e0:	d008      	beq.n	23ff9f4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff9e2:	f7ff ffb9 	bl	23ff958 <pinAvailable>
 23ff9e6:	b128      	cbz	r0, 23ff9f4 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff9e8:	4629      	mov	r1, r5
 23ff9ea:	4620      	mov	r0, r4
}
 23ff9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff9f0:	f7fe be40 	b.w	23fe674 <hal_gpio_mode>
}
 23ff9f4:	bd38      	pop	{r3, r4, r5, pc}

023ff9f6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff9f6:	b538      	push	{r3, r4, r5, lr}
 23ff9f8:	4604      	mov	r4, r0
 23ff9fa:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff9fc:	f7fe fe48 	bl	23fe690 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ffa00:	28ff      	cmp	r0, #255	; 0xff
 23ffa02:	d010      	beq.n	23ffa26 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ffa04:	2806      	cmp	r0, #6
 23ffa06:	d804      	bhi.n	23ffa12 <digitalWrite+0x1c>
 23ffa08:	234d      	movs	r3, #77	; 0x4d
 23ffa0a:	fa23 f000 	lsr.w	r0, r3, r0
 23ffa0e:	07c3      	lsls	r3, r0, #31
 23ffa10:	d409      	bmi.n	23ffa26 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ffa12:	4620      	mov	r0, r4
 23ffa14:	f7ff ffa0 	bl	23ff958 <pinAvailable>
 23ffa18:	b128      	cbz	r0, 23ffa26 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ffa1a:	4629      	mov	r1, r5
 23ffa1c:	4620      	mov	r0, r4
}
 23ffa1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ffa22:	f7fe be43 	b.w	23fe6ac <hal_gpio_write>
}
 23ffa26:	bd38      	pop	{r3, r4, r5, pc}

023ffa28 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa28:	4770      	bx	lr
	...

023ffa2c <_Z17acquireWireBufferv>:
{
 23ffa2c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ffa2e:	4b0a      	ldr	r3, [pc, #40]	; (23ffa58 <_Z17acquireWireBufferv+0x2c>)
{
 23ffa30:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ffa32:	6003      	str	r3, [r0, #0]
 23ffa34:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa36:	4909      	ldr	r1, [pc, #36]	; (23ffa5c <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ffa38:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa3a:	2020      	movs	r0, #32
 23ffa3c:	f000 f8f4 	bl	23ffc28 <_ZnajRKSt9nothrow_t>
	};
 23ffa40:	2520      	movs	r5, #32
 23ffa42:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa44:	4905      	ldr	r1, [pc, #20]	; (23ffa5c <_Z17acquireWireBufferv+0x30>)
 23ffa46:	4628      	mov	r0, r5
	};
 23ffa48:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa4a:	f000 f8ed 	bl	23ffc28 <_ZnajRKSt9nothrow_t>
	};
 23ffa4e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ffa52:	4620      	mov	r0, r4
 23ffa54:	bd38      	pop	{r3, r4, r5, pc}
 23ffa56:	bf00      	nop
 23ffa58:	00010018 	.word	0x00010018
 23ffa5c:	023fff64 	.word	0x023fff64

023ffa60 <_Z19__fetch_global_Wirev>:
{
 23ffa60:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa62:	4d0e      	ldr	r5, [pc, #56]	; (23ffa9c <_Z19__fetch_global_Wirev+0x3c>)
{
 23ffa64:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa66:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa6a:	f011 0401 	ands.w	r4, r1, #1
 23ffa6e:	d111      	bne.n	23ffa94 <_Z19__fetch_global_Wirev+0x34>
 23ffa70:	4628      	mov	r0, r5
 23ffa72:	f7fe f88e 	bl	23fdb92 <__cxa_guard_acquire>
 23ffa76:	b168      	cbz	r0, 23ffa94 <_Z19__fetch_global_Wirev+0x34>
 23ffa78:	4668      	mov	r0, sp
 23ffa7a:	f7ff ffd7 	bl	23ffa2c <_Z17acquireWireBufferv>
 23ffa7e:	466a      	mov	r2, sp
 23ffa80:	4621      	mov	r1, r4
 23ffa82:	4807      	ldr	r0, [pc, #28]	; (23ffaa0 <_Z19__fetch_global_Wirev+0x40>)
 23ffa84:	f7ff fa22 	bl	23feecc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ffa88:	4628      	mov	r0, r5
 23ffa8a:	f7fe f887 	bl	23fdb9c <__cxa_guard_release>
 23ffa8e:	4805      	ldr	r0, [pc, #20]	; (23ffaa4 <_Z19__fetch_global_Wirev+0x44>)
 23ffa90:	f000 f8cc 	bl	23ffc2c <atexit>
	return wire;
}
 23ffa94:	4802      	ldr	r0, [pc, #8]	; (23ffaa0 <_Z19__fetch_global_Wirev+0x40>)
 23ffa96:	b007      	add	sp, #28
 23ffa98:	bd30      	pop	{r4, r5, pc}
 23ffa9a:	bf00      	nop
 23ffa9c:	1007aef4 	.word	0x1007aef4
 23ffaa0:	1007aef8 	.word	0x1007aef8
 23ffaa4:	023ffa29 	.word	0x023ffa29

023ffaa8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffaa8:	4770      	bx	lr
	...

023ffaac <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffaac:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ffaae:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffab0:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ffab2:	462a      	mov	r2, r5
 23ffab4:	2100      	movs	r1, #0
 23ffab6:	f000 f8cc 	bl	23ffc52 <memset>
 23ffaba:	8025      	strh	r5, [r4, #0]
 23ffabc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffabe:	4907      	ldr	r1, [pc, #28]	; (23ffadc <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ffac0:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ffac2:	8125      	strh	r5, [r4, #8]
 23ffac4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffac6:	f000 f8af 	bl	23ffc28 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffaca:	4904      	ldr	r1, [pc, #16]	; (23ffadc <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ffacc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fface:	4628      	mov	r0, r5
 23ffad0:	f000 f8aa 	bl	23ffc28 <_ZnajRKSt9nothrow_t>
    };
 23ffad4:	60e0      	str	r0, [r4, #12]
}
 23ffad6:	4620      	mov	r0, r4
 23ffad8:	bd38      	pop	{r3, r4, r5, pc}
 23ffada:	bf00      	nop
 23ffadc:	023fff64 	.word	0x023fff64

023ffae0 <__tcf_2>:
 23ffae0:	4770      	bx	lr

023ffae2 <__tcf_1>:
 23ffae2:	4770      	bx	lr

023ffae4 <_Z20acquireSerial1Bufferv>:
{
 23ffae4:	b510      	push	{r4, lr}
 23ffae6:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ffae8:	f7ff ffe0 	bl	23ffaac <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ffaec:	4620      	mov	r0, r4
 23ffaee:	bd10      	pop	{r4, pc}

023ffaf0 <_Z20acquireSerial2Bufferv>:
 23ffaf0:	b510      	push	{r4, lr}
 23ffaf2:	4604      	mov	r4, r0
 23ffaf4:	f7ff ffda 	bl	23ffaac <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffaf8:	4620      	mov	r0, r4
 23ffafa:	bd10      	pop	{r4, pc}

023ffafc <_Z20acquireSerial3Bufferv>:
 23ffafc:	b510      	push	{r4, lr}
 23ffafe:	4604      	mov	r4, r0
 23ffb00:	f7ff ffd4 	bl	23ffaac <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb04:	4620      	mov	r0, r4
 23ffb06:	bd10      	pop	{r4, pc}

023ffb08 <_Z22__fetch_global_Serial1v>:
{
 23ffb08:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb0a:	4d0e      	ldr	r5, [pc, #56]	; (23ffb44 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffb0c:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb0e:	e8d5 1f8f 	ldab	r1, [r5]
 23ffb12:	f011 0401 	ands.w	r4, r1, #1
 23ffb16:	d111      	bne.n	23ffb3c <_Z22__fetch_global_Serial1v+0x34>
 23ffb18:	4628      	mov	r0, r5
 23ffb1a:	f7fe f83a 	bl	23fdb92 <__cxa_guard_acquire>
 23ffb1e:	b168      	cbz	r0, 23ffb3c <_Z22__fetch_global_Serial1v+0x34>
 23ffb20:	a801      	add	r0, sp, #4
 23ffb22:	f7ff ffdf 	bl	23ffae4 <_Z20acquireSerial1Bufferv>
 23ffb26:	4621      	mov	r1, r4
 23ffb28:	aa01      	add	r2, sp, #4
 23ffb2a:	4807      	ldr	r0, [pc, #28]	; (23ffb48 <_Z22__fetch_global_Serial1v+0x40>)
 23ffb2c:	f7ff fd94 	bl	23ff658 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb30:	4628      	mov	r0, r5
 23ffb32:	f7fe f833 	bl	23fdb9c <__cxa_guard_release>
 23ffb36:	4805      	ldr	r0, [pc, #20]	; (23ffb4c <_Z22__fetch_global_Serial1v+0x44>)
 23ffb38:	f000 f878 	bl	23ffc2c <atexit>
    return serial1;
}
 23ffb3c:	4802      	ldr	r0, [pc, #8]	; (23ffb48 <_Z22__fetch_global_Serial1v+0x40>)
 23ffb3e:	b007      	add	sp, #28
 23ffb40:	bd30      	pop	{r4, r5, pc}
 23ffb42:	bf00      	nop
 23ffb44:	1007af0c 	.word	0x1007af0c
 23ffb48:	1007af18 	.word	0x1007af18
 23ffb4c:	023ffaa9 	.word	0x023ffaa9

023ffb50 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffb50:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb52:	4c0d      	ldr	r4, [pc, #52]	; (23ffb88 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffb54:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb56:	e8d4 3f8f 	ldab	r3, [r4]
 23ffb5a:	07db      	lsls	r3, r3, #31
 23ffb5c:	d411      	bmi.n	23ffb82 <_Z22__fetch_global_Serial2v+0x32>
 23ffb5e:	4620      	mov	r0, r4
 23ffb60:	f7fe f817 	bl	23fdb92 <__cxa_guard_acquire>
 23ffb64:	b168      	cbz	r0, 23ffb82 <_Z22__fetch_global_Serial2v+0x32>
 23ffb66:	a801      	add	r0, sp, #4
 23ffb68:	f7ff ffc2 	bl	23ffaf0 <_Z20acquireSerial2Bufferv>
 23ffb6c:	2101      	movs	r1, #1
 23ffb6e:	aa01      	add	r2, sp, #4
 23ffb70:	4806      	ldr	r0, [pc, #24]	; (23ffb8c <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb72:	f7ff fd71 	bl	23ff658 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb76:	4620      	mov	r0, r4
 23ffb78:	f7fe f810 	bl	23fdb9c <__cxa_guard_release>
 23ffb7c:	4804      	ldr	r0, [pc, #16]	; (23ffb90 <_Z22__fetch_global_Serial2v+0x40>)
 23ffb7e:	f000 f855 	bl	23ffc2c <atexit>
	return serial2;
}
 23ffb82:	4802      	ldr	r0, [pc, #8]	; (23ffb8c <_Z22__fetch_global_Serial2v+0x3c>)
 23ffb84:	b006      	add	sp, #24
 23ffb86:	bd10      	pop	{r4, pc}
 23ffb88:	1007af10 	.word	0x1007af10
 23ffb8c:	1007af2c 	.word	0x1007af2c
 23ffb90:	023ffae3 	.word	0x023ffae3

023ffb94 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffb94:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffb96:	f7ff ffdb 	bl	23ffb50 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffb9a:	4b07      	ldr	r3, [pc, #28]	; (23ffbb8 <_Z15serialEventRun2v+0x24>)
 23ffb9c:	4604      	mov	r4, r0
 23ffb9e:	b153      	cbz	r3, 23ffbb6 <_Z15serialEventRun2v+0x22>
 23ffba0:	f7ff fd6e 	bl	23ff680 <_ZN11USARTSerial9isEnabledEv>
 23ffba4:	b138      	cbz	r0, 23ffbb6 <_Z15serialEventRun2v+0x22>
 23ffba6:	6823      	ldr	r3, [r4, #0]
 23ffba8:	4620      	mov	r0, r4
 23ffbaa:	691b      	ldr	r3, [r3, #16]
 23ffbac:	4798      	blx	r3
 23ffbae:	2800      	cmp	r0, #0
 23ffbb0:	dd01      	ble.n	23ffbb6 <_Z15serialEventRun2v+0x22>
        handler();
 23ffbb2:	e000      	b.n	23ffbb6 <_Z15serialEventRun2v+0x22>
 23ffbb4:	bf00      	nop
}
 23ffbb6:	bd10      	pop	{r4, pc}
 23ffbb8:	00000000 	.word	0x00000000

023ffbbc <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffbbc:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffbbe:	4c0d      	ldr	r4, [pc, #52]	; (23ffbf4 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffbc0:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffbc2:	e8d4 3f8f 	ldab	r3, [r4]
 23ffbc6:	07db      	lsls	r3, r3, #31
 23ffbc8:	d411      	bmi.n	23ffbee <_Z22__fetch_global_Serial3v+0x32>
 23ffbca:	4620      	mov	r0, r4
 23ffbcc:	f7fd ffe1 	bl	23fdb92 <__cxa_guard_acquire>
 23ffbd0:	b168      	cbz	r0, 23ffbee <_Z22__fetch_global_Serial3v+0x32>
 23ffbd2:	a801      	add	r0, sp, #4
 23ffbd4:	f7ff ff92 	bl	23ffafc <_Z20acquireSerial3Bufferv>
 23ffbd8:	2102      	movs	r1, #2
 23ffbda:	aa01      	add	r2, sp, #4
 23ffbdc:	4806      	ldr	r0, [pc, #24]	; (23ffbf8 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffbde:	f7ff fd3b 	bl	23ff658 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffbe2:	4620      	mov	r0, r4
 23ffbe4:	f7fd ffda 	bl	23fdb9c <__cxa_guard_release>
 23ffbe8:	4804      	ldr	r0, [pc, #16]	; (23ffbfc <_Z22__fetch_global_Serial3v+0x40>)
 23ffbea:	f000 f81f 	bl	23ffc2c <atexit>
	return serial3;
}
 23ffbee:	4802      	ldr	r0, [pc, #8]	; (23ffbf8 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffbf0:	b006      	add	sp, #24
 23ffbf2:	bd10      	pop	{r4, pc}
 23ffbf4:	1007af14 	.word	0x1007af14
 23ffbf8:	1007af40 	.word	0x1007af40
 23ffbfc:	023ffae1 	.word	0x023ffae1

023ffc00 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffc00:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffc02:	f7ff ffdb 	bl	23ffbbc <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffc06:	4b07      	ldr	r3, [pc, #28]	; (23ffc24 <_Z15serialEventRun3v+0x24>)
 23ffc08:	4604      	mov	r4, r0
 23ffc0a:	b153      	cbz	r3, 23ffc22 <_Z15serialEventRun3v+0x22>
 23ffc0c:	f7ff fd38 	bl	23ff680 <_ZN11USARTSerial9isEnabledEv>
 23ffc10:	b138      	cbz	r0, 23ffc22 <_Z15serialEventRun3v+0x22>
 23ffc12:	6823      	ldr	r3, [r4, #0]
 23ffc14:	4620      	mov	r0, r4
 23ffc16:	691b      	ldr	r3, [r3, #16]
 23ffc18:	4798      	blx	r3
 23ffc1a:	2800      	cmp	r0, #0
 23ffc1c:	dd01      	ble.n	23ffc22 <_Z15serialEventRun3v+0x22>
        handler();
 23ffc1e:	e000      	b.n	23ffc22 <_Z15serialEventRun3v+0x22>
 23ffc20:	bf00      	nop
}
 23ffc22:	bd10      	pop	{r4, pc}
 23ffc24:	00000000 	.word	0x00000000

023ffc28 <_ZnajRKSt9nothrow_t>:
 23ffc28:	f7fd bfaf 	b.w	23fdb8a <_Znaj>

023ffc2c <atexit>:
 23ffc2c:	2300      	movs	r3, #0
 23ffc2e:	4601      	mov	r1, r0
 23ffc30:	461a      	mov	r2, r3
 23ffc32:	4618      	mov	r0, r3
 23ffc34:	f000 b844 	b.w	23ffcc0 <__register_exitproc>

023ffc38 <memcpy>:
 23ffc38:	440a      	add	r2, r1
 23ffc3a:	1e43      	subs	r3, r0, #1
 23ffc3c:	4291      	cmp	r1, r2
 23ffc3e:	d100      	bne.n	23ffc42 <memcpy+0xa>
 23ffc40:	4770      	bx	lr
 23ffc42:	b510      	push	{r4, lr}
 23ffc44:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffc48:	4291      	cmp	r1, r2
 23ffc4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffc4e:	d1f9      	bne.n	23ffc44 <memcpy+0xc>
 23ffc50:	bd10      	pop	{r4, pc}

023ffc52 <memset>:
 23ffc52:	4402      	add	r2, r0
 23ffc54:	4603      	mov	r3, r0
 23ffc56:	4293      	cmp	r3, r2
 23ffc58:	d100      	bne.n	23ffc5c <memset+0xa>
 23ffc5a:	4770      	bx	lr
 23ffc5c:	f803 1b01 	strb.w	r1, [r3], #1
 23ffc60:	e7f9      	b.n	23ffc56 <memset+0x4>
	...

023ffc64 <srand>:
 23ffc64:	b538      	push	{r3, r4, r5, lr}
 23ffc66:	4b10      	ldr	r3, [pc, #64]	; (23ffca8 <srand+0x44>)
 23ffc68:	4604      	mov	r4, r0
 23ffc6a:	681d      	ldr	r5, [r3, #0]
 23ffc6c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffc6e:	b9b3      	cbnz	r3, 23ffc9e <srand+0x3a>
 23ffc70:	2018      	movs	r0, #24
 23ffc72:	f7ff f863 	bl	23fed3c <malloc>
 23ffc76:	4602      	mov	r2, r0
 23ffc78:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffc7a:	b920      	cbnz	r0, 23ffc86 <srand+0x22>
 23ffc7c:	4b0b      	ldr	r3, [pc, #44]	; (23ffcac <srand+0x48>)
 23ffc7e:	2142      	movs	r1, #66	; 0x42
 23ffc80:	480b      	ldr	r0, [pc, #44]	; (23ffcb0 <srand+0x4c>)
 23ffc82:	f7ff f877 	bl	23fed74 <__assert_func>
 23ffc86:	490b      	ldr	r1, [pc, #44]	; (23ffcb4 <srand+0x50>)
 23ffc88:	4b0b      	ldr	r3, [pc, #44]	; (23ffcb8 <srand+0x54>)
 23ffc8a:	e9c0 1300 	strd	r1, r3, [r0]
 23ffc8e:	4b0b      	ldr	r3, [pc, #44]	; (23ffcbc <srand+0x58>)
 23ffc90:	2100      	movs	r1, #0
 23ffc92:	6083      	str	r3, [r0, #8]
 23ffc94:	230b      	movs	r3, #11
 23ffc96:	8183      	strh	r3, [r0, #12]
 23ffc98:	2001      	movs	r0, #1
 23ffc9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffc9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffca0:	2200      	movs	r2, #0
 23ffca2:	611c      	str	r4, [r3, #16]
 23ffca4:	615a      	str	r2, [r3, #20]
 23ffca6:	bd38      	pop	{r3, r4, r5, pc}
 23ffca8:	1007adc0 	.word	0x1007adc0
 23ffcac:	023fff65 	.word	0x023fff65
 23ffcb0:	023fff7c 	.word	0x023fff7c
 23ffcb4:	abcd330e 	.word	0xabcd330e
 23ffcb8:	e66d1234 	.word	0xe66d1234
 23ffcbc:	0005deec 	.word	0x0005deec

023ffcc0 <__register_exitproc>:
 23ffcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffcc4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffd84 <__register_exitproc+0xc4>
 23ffcc8:	4606      	mov	r6, r0
 23ffcca:	461f      	mov	r7, r3
 23ffccc:	460d      	mov	r5, r1
 23ffcce:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcd2:	4691      	mov	r9, r2
 23ffcd4:	f000 f858 	bl	23ffd88 <__retarget_lock_acquire_recursive>
 23ffcd8:	4b26      	ldr	r3, [pc, #152]	; (23ffd74 <__register_exitproc+0xb4>)
 23ffcda:	681c      	ldr	r4, [r3, #0]
 23ffcdc:	b934      	cbnz	r4, 23ffcec <__register_exitproc+0x2c>
 23ffcde:	4c26      	ldr	r4, [pc, #152]	; (23ffd78 <__register_exitproc+0xb8>)
 23ffce0:	601c      	str	r4, [r3, #0]
 23ffce2:	4b26      	ldr	r3, [pc, #152]	; (23ffd7c <__register_exitproc+0xbc>)
 23ffce4:	b113      	cbz	r3, 23ffcec <__register_exitproc+0x2c>
 23ffce6:	681b      	ldr	r3, [r3, #0]
 23ffce8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffcec:	6863      	ldr	r3, [r4, #4]
 23ffcee:	2b1f      	cmp	r3, #31
 23ffcf0:	dd07      	ble.n	23ffd02 <__register_exitproc+0x42>
 23ffcf2:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcf6:	f000 f849 	bl	23ffd8c <__retarget_lock_release_recursive>
 23ffcfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffcfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffd02:	b35e      	cbz	r6, 23ffd5c <__register_exitproc+0x9c>
 23ffd04:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffd08:	b988      	cbnz	r0, 23ffd2e <__register_exitproc+0x6e>
 23ffd0a:	4b1d      	ldr	r3, [pc, #116]	; (23ffd80 <__register_exitproc+0xc0>)
 23ffd0c:	b923      	cbnz	r3, 23ffd18 <__register_exitproc+0x58>
 23ffd0e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd12:	f000 f83a 	bl	23ffd8a <__retarget_lock_release>
 23ffd16:	e7f0      	b.n	23ffcfa <__register_exitproc+0x3a>
 23ffd18:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffd1c:	f7ff f80e 	bl	23fed3c <malloc>
 23ffd20:	2800      	cmp	r0, #0
 23ffd22:	d0f4      	beq.n	23ffd0e <__register_exitproc+0x4e>
 23ffd24:	2300      	movs	r3, #0
 23ffd26:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffd2a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffd2e:	6863      	ldr	r3, [r4, #4]
 23ffd30:	2201      	movs	r2, #1
 23ffd32:	2e02      	cmp	r6, #2
 23ffd34:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffd38:	fa02 f203 	lsl.w	r2, r2, r3
 23ffd3c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffd40:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffd44:	ea43 0302 	orr.w	r3, r3, r2
 23ffd48:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffd4c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffd50:	bf02      	ittt	eq
 23ffd52:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffd56:	4313      	orreq	r3, r2
 23ffd58:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffd5c:	6863      	ldr	r3, [r4, #4]
 23ffd5e:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd62:	1c5a      	adds	r2, r3, #1
 23ffd64:	3302      	adds	r3, #2
 23ffd66:	6062      	str	r2, [r4, #4]
 23ffd68:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffd6c:	f000 f80e 	bl	23ffd8c <__retarget_lock_release_recursive>
 23ffd70:	2000      	movs	r0, #0
 23ffd72:	e7c4      	b.n	23ffcfe <__register_exitproc+0x3e>
 23ffd74:	1007afe0 	.word	0x1007afe0
 23ffd78:	1007af54 	.word	0x1007af54
 23ffd7c:	00000000 	.word	0x00000000
 23ffd80:	023fed3d 	.word	0x023fed3d
 23ffd84:	1007ae24 	.word	0x1007ae24

023ffd88 <__retarget_lock_acquire_recursive>:
 23ffd88:	4770      	bx	lr

023ffd8a <__retarget_lock_release>:
 23ffd8a:	4770      	bx	lr

023ffd8c <__retarget_lock_release_recursive>:
 23ffd8c:	4770      	bx	lr
	...

023ffd90 <dynalib_user>:
 23ffd90:	db51 023f db79 023f db7d 023f 0000 0000     Q.?.y.?.}.?.....
 23ffda0:	7543 7272 6e65 2074 6176 756c 2065 203d     Current value = 
 23ffdb0:	5400 6d65 2070 6e69 4320 6c65 7563 7369     .Temp in Celcuis
 23ffdc0:	3d20 0020 6552 616c 6974 6576 4820 6d75      = .Relative Hum
 23ffdd0:	6469 7469 2079 203d 0000 0000               idity = ....

023ffddc <_ZTVN5spark13EthernetClassE>:
	...
 23ffde4:	ee57 023f ee4d 023f ee43 023f ee39 023f     W.?.M.?.C.?.9.?.
 23ffdf4:	ee2d 023f ee21 023f f0c1 023f f0c9 023f     -.?.!.?...?...?.
 23ffe04:	ee15 023f ee0d 023f ee03 023f edf9 023f     ..?...?...?...?.
 23ffe14:	f0f9 023f                                   ..?.

023ffe18 <_ZTV7TwoWire>:
	...
 23ffe20:	ee75 023f eebf 023f ee97 023f ee77 023f     u.?...?...?.w.?.
 23ffe30:	ee9f 023f eea7 023f eeaf 023f eeb7 023f     ..?...?...?...?.

023ffe40 <_ZTV9IPAddress>:
	...
 23ffe48:	ef8f 023f ef7f 023f ef81 023f 7061 0070     ..?...?...?.app.

023ffe58 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe60:	f081 023f f08b 023f f095 023f f09f 023f     ..?...?...?...?.
 23ffe70:	f0a9 023f f0b5 023f f0c1 023f f0c9 023f     ..?...?...?...?.
 23ffe80:	f0d1 023f f0dd 023f f0e5 023f f0ef 023f     ..?...?...?...?.
 23ffe90:	f0f9 023f 616e 006e 6e69 0066 766f 0066     ..?.nan.inf.ovf.
 23ffea0:	002e                                        ..

023ffea2 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffea2:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffeb2:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffec2:	6d69 0065 0000                              ime...

023ffec8 <_ZTV11USARTSerial>:
	...
 23ffed0:	f5dd 023f f649 023f f621 023f f1e5 023f     ..?.I.?.!.?...?.
 23ffee0:	f5f1 023f f60d 023f f5ff 023f f61b 023f     ..?...?...?...?.
 23ffef0:	f5df 023f f5e3 023f                         ..?...?.

023ffef8 <_ZTV9USBSerial>:
	...
 23fff00:	f68d 023f f6f5 023f f6cb 023f f1e5 023f     ..?...?...?...?.
 23fff10:	f6bd 023f f68f 023f f69f 023f f6ef 023f     ..?...?...?...?.
 23fff20:	f6af 023f f687 023f                         ..?...?.

023fff28 <_ZTVN5spark9WiFiClassE>:
	...
 23fff30:	f7eb 023f f7e1 023f f7d7 023f f78d 023f     ..?...?...?...?.
 23fff40:	f7cb 023f f7bf 023f f0c1 023f f0c9 023f     ..?...?...?...?.
 23fff50:	f7b3 023f f7ab 023f f7a1 023f f797 023f     ..?...?...?...?.
 23fff60:	f0f9 023f                                   ..?.

023fff64 <_ZSt7nothrow>:
 23fff64:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff74:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff84:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff94:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd5 <link_const_data_end>:
 23fffd5:	00          	.byte	0x00
	...

023fffd8 <link_constructors_location>:
 23fffd8:	023fdd51 	.word	0x023fdd51
 23fffdc:	023fedb5 	.word	0x023fedb5
 23fffe0:	023fee61 	.word	0x023fee61
 23fffe4:	023ff071 	.word	0x023ff071
 23fffe8:	023ff1d1 	.word	0x023ff1d1
 23fffec:	023ff45d 	.word	0x023ff45d
 23ffff0:	023ff5a5 	.word	0x023ff5a5
 23ffff4:	023ff5c9 	.word	0x023ff5c9
 23ffff8:	023ff7f5 	.word	0x023ff7f5
