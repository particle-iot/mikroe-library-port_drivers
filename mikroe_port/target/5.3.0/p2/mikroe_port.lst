
/Users/Erik-Home/Documents/GitHub/mikroe_port/mikroe_port/target/5.3.0/p2/mikroe_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fe000  085fe000  0000e000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fe018  085fe018  0000e018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fe580  085fe088  0000e580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00001a70  023fe588  085fe090  0000e588  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000070  1007a9d0  085ffb00  0001a9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005a8  1007aa40  1007aa40  0002aa40  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffb70  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000444  085ffb74  085ffb74  0001fb74  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fb74  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00143674  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000164a2  00000000  00000000  00163674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0003a096  00000000  00000000  00179b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002b00  00000000  00000000  001b3bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000ad50  00000000  00000000  001b66ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b425  00000000  00000000  001c13fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004aaf4  00000000  00000000  001ec821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ca587  00000000  00000000  00237315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000077a4  00000000  00000000  0030189c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fe018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fe018:	480e      	ldr	r0, [pc, #56]	; (85fe054 <module_user_pre_init+0x3c>)
 85fe01a:	490f      	ldr	r1, [pc, #60]	; (85fe058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fe01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fe01e:	4288      	cmp	r0, r1
 85fe020:	d005      	beq.n	85fe02e <module_user_pre_init+0x16>
 85fe022:	4a0e      	ldr	r2, [pc, #56]	; (85fe05c <module_user_pre_init+0x44>)
 85fe024:	4282      	cmp	r2, r0
 85fe026:	d002      	beq.n	85fe02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fe028:	4b0d      	ldr	r3, [pc, #52]	; (85fe060 <module_user_pre_init+0x48>)
 85fe02a:	1a12      	subs	r2, r2, r0
 85fe02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fe02e:	480d      	ldr	r0, [pc, #52]	; (85fe064 <module_user_pre_init+0x4c>)
 85fe030:	4a0d      	ldr	r2, [pc, #52]	; (85fe068 <module_user_pre_init+0x50>)
 85fe032:	2100      	movs	r1, #0
 85fe034:	4b0d      	ldr	r3, [pc, #52]	; (85fe06c <module_user_pre_init+0x54>)
 85fe036:	1a12      	subs	r2, r2, r0
 85fe038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fe03a:	480d      	ldr	r0, [pc, #52]	; (85fe070 <module_user_pre_init+0x58>)
 85fe03c:	490d      	ldr	r1, [pc, #52]	; (85fe074 <module_user_pre_init+0x5c>)
 85fe03e:	4288      	cmp	r0, r1
 85fe040:	d005      	beq.n	85fe04e <module_user_pre_init+0x36>
 85fe042:	4a0d      	ldr	r2, [pc, #52]	; (85fe078 <module_user_pre_init+0x60>)
 85fe044:	4282      	cmp	r2, r0
 85fe046:	d002      	beq.n	85fe04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fe048:	4b05      	ldr	r3, [pc, #20]	; (85fe060 <module_user_pre_init+0x48>)
 85fe04a:	1a12      	subs	r2, r2, r0
 85fe04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fe04e:	4801      	ldr	r0, [pc, #4]	; (85fe054 <module_user_pre_init+0x3c>)
 85fe050:	bd08      	pop	{r3, pc}
 85fe052:	bf00      	nop
 85fe054:	1007a9d0 	.word	0x1007a9d0
 85fe058:	085ffb00 	.word	0x085ffb00
 85fe05c:	1007aa40 	.word	0x1007aa40
 85fe060:	10110d2d 	.word	0x10110d2d
 85fe064:	1007aa40 	.word	0x1007aa40
 85fe068:	1007afe8 	.word	0x1007afe8
 85fe06c:	10110ea1 	.word	0x10110ea1
 85fe070:	023fe580 	.word	0x023fe580
 85fe074:	085fe088 	.word	0x085fe088
 85fe078:	023ffff8 	.word	0x023ffff8

085fe07c <dynalib_preinit>:
 85fe07c:	085fe019 00000000                       .._.....

Disassembly of section .psram_text:

023fe588 <strlen>:
 23fe588:	4603      	mov	r3, r0
 23fe58a:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe58e:	2a00      	cmp	r2, #0
 23fe590:	d1fb      	bne.n	23fe58a <strlen+0x2>
 23fe592:	1a18      	subs	r0, r3, r0
 23fe594:	3801      	subs	r0, #1
 23fe596:	4770      	bx	lr

023fe598 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fe598:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fe59a:	f001 f9e9 	bl	23ff970 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe59e:	2500      	movs	r5, #0
 23fe5a0:	4e05      	ldr	r6, [pc, #20]	; (23fe5b8 <module_user_init+0x20>)
 23fe5a2:	4c06      	ldr	r4, [pc, #24]	; (23fe5bc <module_user_init+0x24>)
 23fe5a4:	1ba4      	subs	r4, r4, r6
 23fe5a6:	08a4      	lsrs	r4, r4, #2
 23fe5a8:	42ac      	cmp	r4, r5
 23fe5aa:	d100      	bne.n	23fe5ae <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fe5ac:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fe5ae:	f856 3b04 	ldr.w	r3, [r6], #4
 23fe5b2:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fe5b4:	3501      	adds	r5, #1
 23fe5b6:	e7f7      	b.n	23fe5a8 <module_user_init+0x10>
 23fe5b8:	023fffd4 	.word	0x023fffd4
 23fe5bc:	023ffff8 	.word	0x023ffff8

023fe5c0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fe5c0:	f000 b814 	b.w	23fe5ec <setup>

023fe5c4 <module_user_loop>:
}

void module_user_loop() {
 23fe5c4:	b508      	push	{r3, lr}
    loop();
 23fe5c6:	f000 f867 	bl	23fe698 <loop>
    _post_loop();
}
 23fe5ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fe5ce:	f001 b987 	b.w	23ff8e0 <_post_loop>

023fe5d2 <_Znaj>:
 23fe5d2:	f000 bd9b 	b.w	23ff10c <malloc>

023fe5d6 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fe5d6:	f000 bda7 	b.w	23ff128 <free>

023fe5da <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fe5da:	7800      	ldrb	r0, [r0, #0]
 23fe5dc:	fab0 f080 	clz	r0, r0
 23fe5e0:	0940      	lsrs	r0, r0, #5
 23fe5e2:	4770      	bx	lr

023fe5e4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fe5e4:	2301      	movs	r3, #1
 23fe5e6:	7003      	strb	r3, [r0, #0]
 23fe5e8:	4770      	bx	lr
	...

023fe5ec <setup>:

//variables from rs232 main.c


void setup() 
{
 23fe5ec:	b510      	push	{r4, lr}
inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful,
        bool clearSession) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful),
        clearSession_(clearSession) {
 23fe5ee:	2400      	movs	r4, #0
 23fe5f0:	b086      	sub	sp, #24

  Serial.begin(9600);
 23fe5f2:	f001 f8e5 	bl	23ff7c0 <_Z16_fetch_usbserialv>
 23fe5f6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fe5fa:	f001 f8d5 	bl	23ff7a8 <_ZN9USBSerial5beginEl>

  Particle.disconnect();
 23fe5fe:	a803      	add	r0, sp, #12
 23fe600:	e9cd 4403 	strd	r4, r4, [sp, #12]
        bool clearSession) :
 23fe604:	f8ad 4014 	strh.w	r4, [sp, #20]
 23fe608:	f000 fdc4 	bl	23ff194 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 23fe60c:	480f      	ldr	r0, [pc, #60]	; (23fe64c <setup+0x60>)
 23fe60e:	4622      	mov	r2, r4
 23fe610:	4623      	mov	r3, r4
 23fe612:	4621      	mov	r1, r4
 23fe614:	6840      	ldr	r0, [r0, #4]
 23fe616:	f000 fd17 	bl	23ff048 <network_off>
  eeprom7_default_cfg ( &eeprom7 );
  */

  //from temphum13
  temphum13_cfg_t temphum13_cfg;
  temphum13_cfg_setup( &temphum13_cfg );
 23fe61a:	4668      	mov	r0, sp
 23fe61c:	f000 fa20 	bl	23fea60 <temphum13_cfg_setup>
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fe620:	2301      	movs	r3, #1
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fe622:	4c0b      	ldr	r4, [pc, #44]	; (23fe650 <setup+0x64>)
 23fe624:	4669      	mov	r1, sp
 23fe626:	4620      	mov	r0, r4
  TEMPHUM13_MAP_MIKROBUS( temphum13_cfg, MIKROBUS_2 );
 23fe628:	f8ad 3000 	strh.w	r3, [sp]
  temphum13_init( &temphum13, &temphum13_cfg );   
 23fe62c:	f000 fa20 	bl	23fea70 <temphum13_init>
  temphum13_default_cfg( &temphum13 );
 23fe630:	4620      	mov	r0, r4
 23fe632:	f000 fa4d 	bl	23fead0 <temphum13_default_cfg>

  //from rs232
  rs232_cfg_t rs232_cfg;
  rs232_cfg_setup( &rs232_cfg );
 23fe636:	a803      	add	r0, sp, #12
 23fe638:	f000 f9c9 	bl	23fe9ce <rs232_cfg_setup>
  RS232_MAP_MIKROBUS( rs232_cfg, MIKROBUS_1 );
 23fe63c:	4b05      	ldr	r3, [pc, #20]	; (23fe654 <setup+0x68>)
  rs232_init( &rs232, &rs232_cfg );   //includes uart config
 23fe63e:	a903      	add	r1, sp, #12
 23fe640:	4805      	ldr	r0, [pc, #20]	; (23fe658 <setup+0x6c>)
  RS232_MAP_MIKROBUS( rs232_cfg, MIKROBUS_1 );
 23fe642:	9303      	str	r3, [sp, #12]
  rs232_init( &rs232, &rs232_cfg );   //includes uart config
 23fe644:	f000 f9cd 	bl	23fe9e2 <rs232_init>

}
 23fe648:	b006      	add	sp, #24
 23fe64a:	bd10      	pop	{r4, pc}
 23fe64c:	1007aee0 	.word	0x1007aee0
 23fe650:	1007ae58 	.word	0x1007ae58
 23fe654:	13120809 	.word	0x13120809
 23fe658:	1007aa4c 	.word	0x1007aa4c

023fe65c <_Z10rs232_mainv>:
}
*/

//rs232 m,ain.c example
void rs232_main()
{
 23fe65c:	b507      	push	{r0, r1, r2, lr}
  static int32_t rsp_size;
  static char uart_rx_buffer[ PROCESS_RX_BUFFER_SIZE ] = { 0 };
  char message[ ] = "MikroE";
 23fe65e:	4b0c      	ldr	r3, [pc, #48]	; (23fe690 <_Z10rs232_mainv+0x34>)
 23fe660:	6818      	ldr	r0, [r3, #0]
 23fe662:	889a      	ldrh	r2, [r3, #4]
 23fe664:	799b      	ldrb	r3, [r3, #6]
 23fe666:	9000      	str	r0, [sp, #0]


  rs232_generic_write( &rs232, message, strlen( message ) );
 23fe668:	4668      	mov	r0, sp
  char message[ ] = "MikroE";
 23fe66a:	f88d 3006 	strb.w	r3, [sp, #6]
 23fe66e:	f8ad 2004 	strh.w	r2, [sp, #4]
  rs232_generic_write( &rs232, message, strlen( message ) );
 23fe672:	f7ff ff89 	bl	23fe588 <strlen>
 23fe676:	4669      	mov	r1, sp
 23fe678:	b282      	uxth	r2, r0
 23fe67a:	4806      	ldr	r0, [pc, #24]	; (23fe694 <_Z10rs232_mainv+0x38>)
 23fe67c:	f000 f9ea 	bl	23fea54 <rs232_generic_write>
//function for mikroE delays for libray port compability
inline void Delay_1ms( ) {delay(1);}
inline void Delay_10ms( ) {delay(10);}
inline void Delay_100ms( ) {delay(100);}
inline void Delay_1000ms( ) {delay(1000);}
inline void Delay_ms(unsigned long ms) {delay(ms);}
 23fe680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fe684:	f000 fd7a 	bl	23ff17c <delay>
  Delay_ms( 1000 );

 23fe688:	b003      	add	sp, #12
 23fe68a:	f85d fb04 	ldr.w	pc, [sp], #4
 23fe68e:	bf00      	nop
 23fe690:	023ffde8 	.word	0x023ffde8
 23fe694:	1007aa4c 	.word	0x1007aa4c

023fe698 <loop>:
void loop() {
 23fe698:	b508      	push	{r3, lr}
rs232_main();
 23fe69a:	f7ff ffdf 	bl	23fe65c <_Z10rs232_mainv>
}
 23fe69e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
delay(500);
 23fe6a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 23fe6a6:	f000 bd69 	b.w	23ff17c <delay>
	...

023fe6ac <_GLOBAL__sub_I_SystemMode>:
 23fe6ac:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fe6ae:	2400      	movs	r4, #0
 23fe6b0:	4b06      	ldr	r3, [pc, #24]	; (23fe6cc <_GLOBAL__sub_I_SystemMode+0x20>)
    SleepResult() {}
 23fe6b2:	4a07      	ldr	r2, [pc, #28]	; (23fe6d0 <_GLOBAL__sub_I_SystemMode+0x24>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe6b4:	2001      	movs	r0, #1
              error_(SYSTEM_ERROR_NONE) {
 23fe6b6:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fe6ba:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fe6bc:	f000 fc1c 	bl	23feef8 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fe6c0:	4621      	mov	r1, r4
 23fe6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SYSTEM_THREAD(ENABLED);
 23fe6c6:	2001      	movs	r0, #1
 23fe6c8:	f000 bc32 	b.w	23fef30 <system_thread_set_state>
 23fe6cc:	1007aa40 	.word	0x1007aa40
 23fe6d0:	ffff0000 	.word	0xffff0000

023fe6d4 <_Z15digital_in_initP12digital_in_th>:
#include "drv_digital_in.h"

//function for setting pin as input
int8_t digital_in_init(digital_in_t *in, uint8_t mode)
{
 23fe6d4:	b510      	push	{r4, lr}
    if (mode == INPUT)
 23fe6d6:	460c      	mov	r4, r1
 23fe6d8:	b921      	cbnz	r1, 23fe6e4 <_Z15digital_in_initP12digital_in_th+0x10>
    {
        pinMode(in->pin, static_cast<PinMode>(mode));
 23fe6da:	7800      	ldrb	r0, [r0, #0]
 23fe6dc:	f001 f9b8 	bl	23ffa50 <pinMode>
        return DIGITAL_IN_SUCCESS;      //return status
 23fe6e0:	4620      	mov	r0, r4
    }
    else        //mode other than input selected
    {
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
    }
}
 23fe6e2:	bd10      	pop	{r4, pc}
        return DIGITAL_IN_UNSUPPORTED_PIN;      //return status
 23fe6e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe6e8:	e7fb      	b.n	23fe6e2 <_Z15digital_in_initP12digital_in_th+0xe>

023fe6ea <_Z16digital_out_initP13digital_out_th>:
#include "drv_digital_out.h"

//function for setting pin as output
int8_t digital_out_init(digital_out_t *out, uint8_t mode)
{
    if (mode == OUTPUT)
 23fe6ea:	2901      	cmp	r1, #1
{
 23fe6ec:	b508      	push	{r3, lr}
    if (mode == OUTPUT)
 23fe6ee:	d104      	bne.n	23fe6fa <_Z16digital_out_initP13digital_out_th+0x10>
    {
        pinMode(out->pin, static_cast<PinMode>(mode));
 23fe6f0:	8800      	ldrh	r0, [r0, #0]
 23fe6f2:	f001 f9ad 	bl	23ffa50 <pinMode>
        return DIGITAL_OUT_SUCCESS;     //return status
 23fe6f6:	2000      	movs	r0, #0
    }
    else
    {
        return DIGITAL_OUT_UNSUPPORTED_PIN;       //return status
    }
}
 23fe6f8:	bd08      	pop	{r3, pc}
        return DIGITAL_OUT_UNSUPPORTED_PIN;       //return status
 23fe6fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe6fe:	e7fb      	b.n	23fe6f8 <_Z16digital_out_initP13digital_out_th+0xe>

023fe700 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>:
static uint32_t set_speed;      //scl speed variable, static as previous value should be retained
static uint8_t addr;            //7-bit cleint address variable, status as previous value should be retained

//Configures i2c_master_config_t struct to default initialization values
void i2c_master_configure_default(i2c_master_config_t *config)
{
 23fe700:	b510      	push	{r4, lr}
    addr = 0x00;                                    //set client address to 0x00
 23fe702:	2400      	movs	r4, #0
 23fe704:	4b05      	ldr	r3, [pc, #20]	; (23fe71c <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x1c>)
 23fe706:	701c      	strb	r4, [r3, #0]
    set_speed = I2C_MASTER_SPEED_STANDARD;          //set static global variable to new speed value
 23fe708:	4b05      	ldr	r3, [pc, #20]	; (23fe720 <_Z28i2c_master_configure_defaultP19i2c_master_config_t+0x20>)
 23fe70a:	601c      	str	r4, [r3, #0]
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fe70c:	f001 f9cc 	bl	23ffaa8 <_Z19__fetch_global_Wirev>
 23fe710:	4621      	mov	r1, r4
}
 23fe712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Wire.setSpeed(I2C_MASTER_SPEED_STANDARD);       //set speed, must be done before Wire.begin()
 23fe716:	f000 bddf 	b.w	23ff2d8 <_ZN7TwoWire8setSpeedEm>
 23fe71a:	bf00      	nop
 23fe71c:	1007ae68 	.word	0x1007ae68
 23fe720:	1007ae6c 	.word	0x1007ae6c

023fe724 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>:

//Opens the I2C Master driver object on selected pins
int8_t i2c_master_open(i2c_master_t *obj, i2c_master_config_t *config)
{
 23fe724:	b508      	push	{r3, lr}
    Wire.setSpeed(set_speed);       //set speed, must be done before Wire.begin() and set to whatever the static global variable is set to
 23fe726:	f001 f9bf 	bl	23ffaa8 <_Z19__fetch_global_Wirev>
 23fe72a:	4b05      	ldr	r3, [pc, #20]	; (23fe740 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t+0x1c>)
 23fe72c:	6819      	ldr	r1, [r3, #0]
 23fe72e:	f000 fdd3 	bl	23ff2d8 <_ZN7TwoWire8setSpeedEm>
    Wire.begin();                   //join i2c bus as host                   
 23fe732:	f001 f9b9 	bl	23ffaa8 <_Z19__fetch_global_Wirev>
 23fe736:	f000 fdd3 	bl	23ff2e0 <_ZN7TwoWire5beginEv>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe73a:	2000      	movs	r0, #0
 23fe73c:	bd08      	pop	{r3, pc}
 23fe73e:	bf00      	nop
 23fe740:	1007ae6c 	.word	0x1007ae6c

023fe744 <_Z20i2c_master_set_speedP12i2c_master_tm>:

//set scl speed
int8_t i2c_master_set_speed(i2c_master_t *obj, uint32_t speed)
{
 23fe744:	b510      	push	{r4, lr}
 23fe746:	460c      	mov	r4, r1
    set_speed = speed;              //set static global variable to new speed value
 23fe748:	4b04      	ldr	r3, [pc, #16]	; (23fe75c <_Z20i2c_master_set_speedP12i2c_master_tm+0x18>)
 23fe74a:	6019      	str	r1, [r3, #0]
    Wire.setSpeed(speed);           //set speed, must be done before Wire.begin()
 23fe74c:	f001 f9ac 	bl	23ffaa8 <_Z19__fetch_global_Wirev>
 23fe750:	4621      	mov	r1, r4
 23fe752:	f000 fdc1 	bl	23ff2d8 <_ZN7TwoWire8setSpeedEm>
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe756:	2000      	movs	r0, #0
 23fe758:	bd10      	pop	{r4, pc}
 23fe75a:	bf00      	nop
 23fe75c:	1007ae6c 	.word	0x1007ae6c

023fe760 <_Z28i2c_master_set_slave_addressP12i2c_master_th>:
}

//set 7-bit client address
int8_t i2c_master_set_slave_address(i2c_master_t *obj, uint8_t address)
{
    addr = address;                 //set function parameter to global variable
 23fe760:	4b01      	ldr	r3, [pc, #4]	; (23fe768 <_Z28i2c_master_set_slave_addressP12i2c_master_th+0x8>)
    return I2C_MASTER_SUCCESS;      //return status
}
 23fe762:	2000      	movs	r0, #0
    addr = address;                 //set function parameter to global variable
 23fe764:	7019      	strb	r1, [r3, #0]
}
 23fe766:	4770      	bx	lr
 23fe768:	1007ae68 	.word	0x1007ae68

023fe76c <_Z16i2c_master_writeP12i2c_master_tPhj>:

//i2c write operation, R/W = 0
int8_t i2c_master_write(i2c_master_t *obj, uint8_t *write_data_buf, size_t len_write_data)
{
 23fe76c:	b513      	push	{r0, r1, r4, lr}
 23fe76e:	460c      	mov	r4, r1
 23fe770:	9201      	str	r2, [sp, #4]
    Wire.beginTransmission(addr);                       //send device address byte using 7-bit client address
 23fe772:	f001 f999 	bl	23ffaa8 <_Z19__fetch_global_Wirev>
 23fe776:	4b0b      	ldr	r3, [pc, #44]	; (23fe7a4 <_Z16i2c_master_writeP12i2c_master_tPhj+0x38>)
 23fe778:	7819      	ldrb	r1, [r3, #0]
 23fe77a:	f000 fdb7 	bl	23ff2ec <_ZN7TwoWire17beginTransmissionEh>
    Wire.write(write_data_buf, len_write_data);
 23fe77e:	f001 f993 	bl	23ffaa8 <_Z19__fetch_global_Wirev>
 23fe782:	6803      	ldr	r3, [r0, #0]
 23fe784:	4621      	mov	r1, r4
 23fe786:	68db      	ldr	r3, [r3, #12]
 23fe788:	9a01      	ldr	r2, [sp, #4]
 23fe78a:	4798      	blx	r3
    if (Wire.endTransmission(TRUE) == TRUE)     //send stop condition (true)
 23fe78c:	f001 f98c 	bl	23ffaa8 <_Z19__fetch_global_Wirev>
 23fe790:	2101      	movs	r1, #1
 23fe792:	f000 fdaf 	bl	23ff2f4 <_ZN7TwoWire15endTransmissionEh>
    {
        return I2C_MASTER_SUCCESS;      //return status
    }
    return I2C_MASTER_ERROR;        //return status    
}
 23fe796:	3801      	subs	r0, #1
 23fe798:	bf18      	it	ne
 23fe79a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fe79e:	b002      	add	sp, #8
 23fe7a0:	bd10      	pop	{r4, pc}
 23fe7a2:	bf00      	nop
 23fe7a4:	1007ae68 	.word	0x1007ae68

023fe7a8 <_Z22uart_configure_defaultP13uart_config_t>:
static uint32_t global_baud;           //baud rate variable


//function for setting uart default configuration
void uart_configure_default(uart_config_t *config)
{
 23fe7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    global_baud = 115200;
 23fe7aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 23fe7ae:	4c0b      	ldr	r4, [pc, #44]	; (23fe7dc <_Z22uart_configure_defaultP13uart_config_t+0x34>)
    global_data_bits = UART_DATA_BITS_DEFAULT;
    global_parity = SERIAL_PARITY_NO;
 23fe7b0:	2200      	movs	r2, #0
    global_baud = 115200;
 23fe7b2:	6023      	str	r3, [r4, #0]
    global_data_bits = UART_DATA_BITS_DEFAULT;
 23fe7b4:	2301      	movs	r3, #1
 23fe7b6:	4f0a      	ldr	r7, [pc, #40]	; (23fe7e0 <_Z22uart_configure_defaultP13uart_config_t+0x38>)
    global_parity = SERIAL_PARITY_NO;
 23fe7b8:	4e0a      	ldr	r6, [pc, #40]	; (23fe7e4 <_Z22uart_configure_defaultP13uart_config_t+0x3c>)
    global_stop_bits = UART_STOP_BITS_DEFAULT;
 23fe7ba:	4d0b      	ldr	r5, [pc, #44]	; (23fe7e8 <_Z22uart_configure_defaultP13uart_config_t+0x40>)
    global_data_bits = UART_DATA_BITS_DEFAULT;
 23fe7bc:	603b      	str	r3, [r7, #0]
    global_parity = SERIAL_PARITY_NO;
 23fe7be:	6032      	str	r2, [r6, #0]
    global_stop_bits = UART_STOP_BITS_DEFAULT;
 23fe7c0:	602b      	str	r3, [r5, #0]
    memset( &config->rx_buf, 0x00, sizeof( ring_buf8_t ) );
    config->tx_ring_size = 0;
    config->rx_ring_size = 0;
    */

    Serial1.begin(global_baud,(uint32_t)(global_data_bits|global_parity|global_stop_bits));
 23fe7c2:	f001 f9c5 	bl	23ffb50 <_Z22__fetch_global_Serial1v>
 23fe7c6:	6832      	ldr	r2, [r6, #0]
 23fe7c8:	683b      	ldr	r3, [r7, #0]
 23fe7ca:	6821      	ldr	r1, [r4, #0]
 23fe7cc:	4313      	orrs	r3, r2
 23fe7ce:	682a      	ldr	r2, [r5, #0]
 23fe7d0:	431a      	orrs	r2, r3
}
 23fe7d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial1.begin(global_baud,(uint32_t)(global_data_bits|global_parity|global_stop_bits));
 23fe7d6:	f000 bf8b 	b.w	23ff6f0 <_ZN11USARTSerial5beginEmm>
 23fe7da:	bf00      	nop
 23fe7dc:	1007ae7c 	.word	0x1007ae7c
 23fe7e0:	1007ae84 	.word	0x1007ae84
 23fe7e4:	1007ae80 	.word	0x1007ae80
 23fe7e8:	1007ae88 	.word	0x1007ae88

023fe7ec <_Z9uart_openP6uart_tP13uart_config_t>:

////function for opening uart port
int8_t uart_open(uart_t *obj, uart_config_t *config)
{
 23fe7ec:	b508      	push	{r3, lr}
/*   
    uart_config_t *p_config = &obj->config;
    memcpy( p_config, config, sizeof( uart_config_t ) );
    return _acquire( obj, true );
*/
    Serial1.begin(global_baud,(uint32_t)(global_data_bits|global_parity|global_stop_bits));
 23fe7ee:	f001 f9af 	bl	23ffb50 <_Z22__fetch_global_Serial1v>
 23fe7f2:	4b07      	ldr	r3, [pc, #28]	; (23fe810 <_Z9uart_openP6uart_tP13uart_config_t+0x24>)
 23fe7f4:	4a07      	ldr	r2, [pc, #28]	; (23fe814 <_Z9uart_openP6uart_tP13uart_config_t+0x28>)
 23fe7f6:	681b      	ldr	r3, [r3, #0]
 23fe7f8:	6812      	ldr	r2, [r2, #0]
 23fe7fa:	4313      	orrs	r3, r2
 23fe7fc:	4a06      	ldr	r2, [pc, #24]	; (23fe818 <_Z9uart_openP6uart_tP13uart_config_t+0x2c>)
 23fe7fe:	6812      	ldr	r2, [r2, #0]
 23fe800:	431a      	orrs	r2, r3
 23fe802:	4b06      	ldr	r3, [pc, #24]	; (23fe81c <_Z9uart_openP6uart_tP13uart_config_t+0x30>)
 23fe804:	6819      	ldr	r1, [r3, #0]
 23fe806:	f000 ff73 	bl	23ff6f0 <_ZN11USARTSerial5beginEmm>
    return UART_SUCCESS;        //return status
}
 23fe80a:	2000      	movs	r0, #0
 23fe80c:	bd08      	pop	{r3, pc}
 23fe80e:	bf00      	nop
 23fe810:	1007ae84 	.word	0x1007ae84
 23fe814:	1007ae80 	.word	0x1007ae80
 23fe818:	1007ae88 	.word	0x1007ae88
 23fe81c:	1007ae7c 	.word	0x1007ae7c

023fe820 <_Z13uart_set_baudP6uart_tm>:
        return hal_uart_set_baud( &obj->handle, &obj->config );
    } else {
        return UART_ERROR;
    }
*/
    switch (baud)
 23fe820:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
{
 23fe824:	b510      	push	{r4, lr}
 23fe826:	460c      	mov	r4, r1
    switch (baud)
 23fe828:	d00d      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe82a:	d81e      	bhi.n	23fe86a <_Z13uart_set_baudP6uart_tm+0x4a>
 23fe82c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
 23fe830:	d009      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe832:	d811      	bhi.n	23fe858 <_Z13uart_set_baudP6uart_tm+0x38>
 23fe834:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
 23fe838:	d005      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe83a:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
 23fe83e:	d002      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe840:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
 23fe844:	d127      	bne.n	23fe896 <_Z13uart_set_baudP6uart_tm+0x76>
        case 230400:
        case 250000:
        case 460800:
        case 921600:
        case 1000000:
                global_baud = baud;         //set global variable to function parameter
 23fe846:	4b15      	ldr	r3, [pc, #84]	; (23fe89c <_Z13uart_set_baudP6uart_tm+0x7c>)
 23fe848:	601c      	str	r4, [r3, #0]
                Serial1.begin(baud);        //set new baud rate
 23fe84a:	f001 f981 	bl	23ffb50 <_Z22__fetch_global_Serial1v>
 23fe84e:	4621      	mov	r1, r4
 23fe850:	f000 ff52 	bl	23ff6f8 <_ZN11USARTSerial5beginEm>
            return UART_SUCCESS;        //return status
 23fe854:	2000      	movs	r0, #0

        //invalid input
        default:
            return UART_ERROR;      //return status
    }
}
 23fe856:	bd10      	pop	{r4, pc}
    switch (baud)
 23fe858:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
 23fe85c:	d0f3      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe85e:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
 23fe862:	d0f0      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe864:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
 23fe868:	e7ec      	b.n	23fe844 <_Z13uart_set_baudP6uart_tm+0x24>
 23fe86a:	4b0d      	ldr	r3, [pc, #52]	; (23fe8a0 <_Z13uart_set_baudP6uart_tm+0x80>)
 23fe86c:	4299      	cmp	r1, r3
 23fe86e:	d0ea      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe870:	d808      	bhi.n	23fe884 <_Z13uart_set_baudP6uart_tm+0x64>
 23fe872:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
 23fe876:	d0e6      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe878:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
 23fe87c:	d0e3      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe87e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
 23fe882:	e7df      	b.n	23fe844 <_Z13uart_set_baudP6uart_tm+0x24>
 23fe884:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
 23fe888:	d0dd      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe88a:	4b06      	ldr	r3, [pc, #24]	; (23fe8a4 <_Z13uart_set_baudP6uart_tm+0x84>)
 23fe88c:	4299      	cmp	r1, r3
 23fe88e:	d0da      	beq.n	23fe846 <_Z13uart_set_baudP6uart_tm+0x26>
 23fe890:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
 23fe894:	e7d6      	b.n	23fe844 <_Z13uart_set_baudP6uart_tm+0x24>
 23fe896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe89a:	e7dc      	b.n	23fe856 <_Z13uart_set_baudP6uart_tm+0x36>
 23fe89c:	1007ae7c 	.word	0x1007ae7c
 23fe8a0:	0003d090 	.word	0x0003d090
 23fe8a4:	000f4240 	.word	0x000f4240

023fe8a8 <_Z15uart_set_parityP6uart_t13uart_parity_t>:
        return hal_uart_set_parity( &obj->handle, &obj->config );
    } else {
        return UART_ERROR;
    }
*/
    switch (parity)
 23fe8a8:	2901      	cmp	r1, #1
{
 23fe8aa:	b508      	push	{r3, lr}
    switch (parity)
 23fe8ac:	d005      	beq.n	23fe8ba <_Z15uart_set_parityP6uart_t13uart_parity_t+0x12>
 23fe8ae:	2902      	cmp	r1, #2
 23fe8b0:	d016      	beq.n	23fe8e0 <_Z15uart_set_parityP6uart_t13uart_parity_t+0x38>
 23fe8b2:	b1c1      	cbz	r1, 23fe8e6 <_Z15uart_set_parityP6uart_t13uart_parity_t+0x3e>
 23fe8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
            return UART_ERROR;      //return status
    }

    Serial1.begin(global_baud,(uint32_t)(global_data_bits|global_parity|global_stop_bits));     //set new parity
    return UART_SUCCESS;                                                                        //return status
}
 23fe8b8:	bd08      	pop	{r3, pc}
                global_parity = SERIAL_PARITY_EVEN;     //set new parity global variable
 23fe8ba:	2204      	movs	r2, #4
 23fe8bc:	4b0b      	ldr	r3, [pc, #44]	; (23fe8ec <_Z15uart_set_parityP6uart_t13uart_parity_t+0x44>)
                global_parity = SERIAL_PARITY_ODD;     //set new parity global variable
 23fe8be:	601a      	str	r2, [r3, #0]
    Serial1.begin(global_baud,(uint32_t)(global_data_bits|global_parity|global_stop_bits));     //set new parity
 23fe8c0:	f001 f946 	bl	23ffb50 <_Z22__fetch_global_Serial1v>
 23fe8c4:	4b0a      	ldr	r3, [pc, #40]	; (23fe8f0 <_Z15uart_set_parityP6uart_t13uart_parity_t+0x48>)
 23fe8c6:	4a09      	ldr	r2, [pc, #36]	; (23fe8ec <_Z15uart_set_parityP6uart_t13uart_parity_t+0x44>)
 23fe8c8:	681b      	ldr	r3, [r3, #0]
 23fe8ca:	6812      	ldr	r2, [r2, #0]
 23fe8cc:	4313      	orrs	r3, r2
 23fe8ce:	4a09      	ldr	r2, [pc, #36]	; (23fe8f4 <_Z15uart_set_parityP6uart_t13uart_parity_t+0x4c>)
 23fe8d0:	6812      	ldr	r2, [r2, #0]
 23fe8d2:	431a      	orrs	r2, r3
 23fe8d4:	4b08      	ldr	r3, [pc, #32]	; (23fe8f8 <_Z15uart_set_parityP6uart_t13uart_parity_t+0x50>)
 23fe8d6:	6819      	ldr	r1, [r3, #0]
 23fe8d8:	f000 ff0a 	bl	23ff6f0 <_ZN11USARTSerial5beginEmm>
    return UART_SUCCESS;                                                                        //return status
 23fe8dc:	2000      	movs	r0, #0
 23fe8de:	e7eb      	b.n	23fe8b8 <_Z15uart_set_parityP6uart_t13uart_parity_t+0x10>
                global_parity = SERIAL_PARITY_ODD;     //set new parity global variable
 23fe8e0:	2208      	movs	r2, #8
 23fe8e2:	4b02      	ldr	r3, [pc, #8]	; (23fe8ec <_Z15uart_set_parityP6uart_t13uart_parity_t+0x44>)
 23fe8e4:	e7eb      	b.n	23fe8be <_Z15uart_set_parityP6uart_t13uart_parity_t+0x16>
                global_parity = SERIAL_PARITY_NO;     //set new parity global variable
 23fe8e6:	4b01      	ldr	r3, [pc, #4]	; (23fe8ec <_Z15uart_set_parityP6uart_t13uart_parity_t+0x44>)
 23fe8e8:	6019      	str	r1, [r3, #0]
            break;
 23fe8ea:	e7e9      	b.n	23fe8c0 <_Z15uart_set_parityP6uart_t13uart_parity_t+0x18>
 23fe8ec:	1007ae80 	.word	0x1007ae80
 23fe8f0:	1007ae84 	.word	0x1007ae84
 23fe8f4:	1007ae88 	.word	0x1007ae88
 23fe8f8:	1007ae7c 	.word	0x1007ae7c

023fe8fc <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t>:

//function for setting uart stop bits
int8_t uart_set_stop_bits(uart_t *obj, uart_stop_bits_t stop)
{
 23fe8fc:	b508      	push	{r3, lr}
 23fe8fe:	2903      	cmp	r1, #3
 23fe900:	d81f      	bhi.n	23fe942 <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x46>
 23fe902:	e8df f001 	tbb	[pc, r1]
 23fe906:	1502      	.short	0x1502
 23fe908:	1b18      	.short	0x1b18
    }
*/
    switch (stop)
    {
        case UART_STOP_BITS_HALF:
                global_stop_bits = SERIAL_STOP_BITS_0_5;     //set new stop bit global variable
 23fe90a:	2202      	movs	r2, #2
 23fe90c:	4b0e      	ldr	r3, [pc, #56]	; (23fe948 <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x4c>)
        case UART_STOP_BITS_ONE_AND_A_HALF:
                global_stop_bits = SERIAL_STOP_BITS_1_5;     //set new stop bit global variable
            break;

        case UART_STOP_BITS_TWO:
                global_stop_bits = SERIAL_STOP_BITS_2;      //set new stop bit global variable
 23fe90e:	601a      	str	r2, [r3, #0]
        //invalid input
        default:
            return UART_ERROR;      //return status
    }

    Serial1.begin(global_baud,(uint32_t)(global_data_bits|global_parity|global_stop_bits));     //set new stop bit
 23fe910:	f001 f91e 	bl	23ffb50 <_Z22__fetch_global_Serial1v>
 23fe914:	4b0d      	ldr	r3, [pc, #52]	; (23fe94c <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x50>)
 23fe916:	4a0e      	ldr	r2, [pc, #56]	; (23fe950 <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x54>)
 23fe918:	681b      	ldr	r3, [r3, #0]
 23fe91a:	6812      	ldr	r2, [r2, #0]
 23fe91c:	4313      	orrs	r3, r2
 23fe91e:	4a0a      	ldr	r2, [pc, #40]	; (23fe948 <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x4c>)
 23fe920:	6812      	ldr	r2, [r2, #0]
 23fe922:	431a      	orrs	r2, r3
 23fe924:	4b0b      	ldr	r3, [pc, #44]	; (23fe954 <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x58>)
 23fe926:	6819      	ldr	r1, [r3, #0]
 23fe928:	f000 fee2 	bl	23ff6f0 <_ZN11USARTSerial5beginEmm>
    return UART_SUCCESS;   
 23fe92c:	2000      	movs	r0, #0
}
 23fe92e:	bd08      	pop	{r3, pc}
                global_stop_bits = SERIAL_STOP_BITS_1;      //set new stop bit global variable
 23fe930:	2200      	movs	r2, #0
 23fe932:	4b05      	ldr	r3, [pc, #20]	; (23fe948 <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x4c>)
 23fe934:	e7eb      	b.n	23fe90e <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x12>
                global_stop_bits = SERIAL_STOP_BITS_1_5;     //set new stop bit global variable
 23fe936:	2203      	movs	r2, #3
 23fe938:	4b03      	ldr	r3, [pc, #12]	; (23fe948 <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x4c>)
 23fe93a:	e7e8      	b.n	23fe90e <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x12>
                global_stop_bits = SERIAL_STOP_BITS_2;      //set new stop bit global variable
 23fe93c:	2201      	movs	r2, #1
 23fe93e:	4b02      	ldr	r3, [pc, #8]	; (23fe948 <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x4c>)
 23fe940:	e7e5      	b.n	23fe90e <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x12>
    return UART_SUCCESS;   
 23fe942:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe946:	e7f2      	b.n	23fe92e <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t+0x32>
 23fe948:	1007ae88 	.word	0x1007ae88
 23fe94c:	1007ae84 	.word	0x1007ae84
 23fe950:	1007ae80 	.word	0x1007ae80
 23fe954:	1007ae7c 	.word	0x1007ae7c

023fe958 <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t>:
        return hal_uart_set_data_bits( &obj->handle, &obj->config );
    } else {
        return UART_ERROR;
    }
*/
    switch (bits)
 23fe958:	2901      	cmp	r1, #1
{
 23fe95a:	b508      	push	{r3, lr}
    switch (bits)
 23fe95c:	d015      	beq.n	23fe98a <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x32>
 23fe95e:	2902      	cmp	r1, #2
 23fe960:	d016      	beq.n	23fe990 <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x38>
 23fe962:	b9c1      	cbnz	r1, 23fe996 <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x3e>
    {
        case UART_DATA_BITS_7:
                global_data_bits = SERIAL_DATA_BITS_7;     //set new data bits global variable
 23fe964:	2220      	movs	r2, #32
 23fe966:	4b0d      	ldr	r3, [pc, #52]	; (23fe99c <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x44>)
        case UART_DATA_BITS_8:
                global_data_bits = SERIAL_DATA_BITS_8;     //set new data bits global variable
            break;

        case UART_DATA_BITS_9:
                global_data_bits = SERIAL_DATA_BITS_9;     //set new data bits global variable
 23fe968:	601a      	str	r2, [r3, #0]
        //invalid input
        default:
            return UART_ERROR;      //return status
    }

    Serial1.begin(global_baud,(uint32_t)(global_data_bits|global_parity|global_stop_bits));     //set new data bits
 23fe96a:	f001 f8f1 	bl	23ffb50 <_Z22__fetch_global_Serial1v>
 23fe96e:	4b0b      	ldr	r3, [pc, #44]	; (23fe99c <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x44>)
 23fe970:	4a0b      	ldr	r2, [pc, #44]	; (23fe9a0 <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x48>)
 23fe972:	681b      	ldr	r3, [r3, #0]
 23fe974:	6812      	ldr	r2, [r2, #0]
 23fe976:	4313      	orrs	r3, r2
 23fe978:	4a0a      	ldr	r2, [pc, #40]	; (23fe9a4 <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x4c>)
 23fe97a:	6812      	ldr	r2, [r2, #0]
 23fe97c:	431a      	orrs	r2, r3
 23fe97e:	4b0a      	ldr	r3, [pc, #40]	; (23fe9a8 <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x50>)
 23fe980:	6819      	ldr	r1, [r3, #0]
 23fe982:	f000 feb5 	bl	23ff6f0 <_ZN11USARTSerial5beginEmm>
    return UART_SUCCESS;       
 23fe986:	2000      	movs	r0, #0
}
 23fe988:	bd08      	pop	{r3, pc}
                global_data_bits = SERIAL_DATA_BITS_8;     //set new data bits global variable
 23fe98a:	2200      	movs	r2, #0
 23fe98c:	4b03      	ldr	r3, [pc, #12]	; (23fe99c <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x44>)
 23fe98e:	e7eb      	b.n	23fe968 <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x10>
                global_data_bits = SERIAL_DATA_BITS_9;     //set new data bits global variable
 23fe990:	2210      	movs	r2, #16
 23fe992:	4b02      	ldr	r3, [pc, #8]	; (23fe99c <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x44>)
 23fe994:	e7e8      	b.n	23fe968 <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x10>
    switch (bits)
 23fe996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fe99a:	e7f5      	b.n	23fe988 <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t+0x30>
 23fe99c:	1007ae84 	.word	0x1007ae84
 23fe9a0:	1007ae80 	.word	0x1007ae80
 23fe9a4:	1007ae88 	.word	0x1007ae88
 23fe9a8:	1007ae7c 	.word	0x1007ae7c

023fe9ac <_Z17uart_set_blockingP6uart_tb>:
//function for setting blocking, not implemented
void uart_set_blocking(uart_t *obj, bool blocking)
{
//    hal_uart_set_blocking( &obj->handle, blocking );
    #warning uart_set_blocking() function is not implemented since uart is always non-blocking
}
 23fe9ac:	4770      	bx	lr

023fe9ae <_Z10uart_writeP6uart_tPcj>:

//function for uart write
//int8_t uart_write(uart_t *obj, uint8_t *buffer, size_t size)
int8_t uart_write(uart_t *obj, char *buffer, size_t size)
{
 23fe9ae:	b513      	push	{r0, r1, r4, lr}
 23fe9b0:	4614      	mov	r4, r2
 23fe9b2:	9101      	str	r1, [sp, #4]
    uint32_t temp = 0;      //temp variable for # of bytes to be written

    //temp = Serial1.write(buffer,size);      //write bytes over uart. returns # of bytes written
    //temp = Serial1.write((uint8_t *)buffer,size);      //write bytes over uart. returns # of bytes written
    //temp = Serial1.write(reinterpret_cast<uint8_t *>(buffer),size);      //write bytes over uart. returns # of bytes written
    temp = Serial1.write(reinterpret_cast<uint8_t *>(static_cast<char *>(buffer)),size);      //write bytes over uart. returns # of bytes written
 23fe9b4:	f001 f8cc 	bl	23ffb50 <_Z22__fetch_global_Serial1v>
 23fe9b8:	6803      	ldr	r3, [r0, #0]
 23fe9ba:	4622      	mov	r2, r4
 23fe9bc:	68db      	ldr	r3, [r3, #12]
 23fe9be:	9901      	ldr	r1, [sp, #4]
 23fe9c0:	4798      	blx	r3
    if(temp == size)
    {
        return UART_SUCCESS;        //return status
    }
    return UART_ERROR;      //return status
}
 23fe9c2:	1a20      	subs	r0, r4, r0
 23fe9c4:	bf18      	it	ne
 23fe9c6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fe9ca:	b002      	add	sp, #8
 23fe9cc:	bd10      	pop	{r4, pc}

023fe9ce <rs232_cfg_setup>:
    // Additional gpio pins

    cfg->rts   = HAL_PIN_NC;
    cfg->cts = HAL_PIN_NC;

    cfg->baud_rate      = 9600;
 23fe9ce:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 23fe9d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fe9d6:	e9c0 2300 	strd	r2, r3, [r0]
    cfg->data_bit       = UART_DATA_BITS_DEFAULT;
    cfg->parity_bit     = UART_PARITY_DEFAULT;
    cfg->stop_bit       = UART_STOP_BITS_DEFAULT;
    cfg->uart_blocking  = false;
 23fe9da:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 23fe9de:	6083      	str	r3, [r0, #8]
}
 23fe9e0:	4770      	bx	lr

023fe9e2 <rs232_init>:

RS232_RETVAL rs232_init ( rs232_t *ctx, rs232_cfg_t *cfg )
{
 23fe9e2:	b570      	push	{r4, r5, r6, lr}
 23fe9e4:	4605      	mov	r5, r0
 23fe9e6:	460c      	mov	r4, r1
 23fe9e8:	b086      	sub	sp, #24
    uart_config_t uart_cfg;
    
    uart_configure_default( &uart_cfg );
 23fe9ea:	a801      	add	r0, sp, #4
 23fe9ec:	f7ff fedc 	bl	23fe7a8 <_Z22uart_configure_defaultP13uart_config_t>

    // Ring buffer mapping
    ctx->uart.tx_ring_buffer = ctx->uart_tx_buffer;
 23fe9f0:	f505 7306 	add.w	r3, r5, #536	; 0x218
 23fe9f4:	61ab      	str	r3, [r5, #24]
    ctx->uart.rx_ring_buffer = ctx->uart_rx_buffer;
 23fe9f6:	f105 0324 	add.w	r3, r5, #36	; 0x24
 23fe9fa:	61eb      	str	r3, [r5, #28]

    // UART module config
    uart_cfg.rx_pin = cfg->rx_pin;  // UART RX pin. 
    uart_cfg.tx_pin = cfg->tx_pin;  // UART TX pin. 
 23fe9fc:	8823      	ldrh	r3, [r4, #0]
    uart_cfg.tx_ring_size = sizeof( ctx->uart_tx_buffer );  
    uart_cfg.rx_ring_size = sizeof( ctx->uart_rx_buffer );

    uart_open( &ctx->uart, &uart_cfg );
 23fe9fe:	1d2e      	adds	r6, r5, #4
    uart_cfg.tx_pin = cfg->tx_pin;  // UART TX pin. 
 23fea00:	ba5b      	rev16	r3, r3
 23fea02:	f8ad 3004 	strh.w	r3, [sp, #4]
    uart_cfg.tx_ring_size = sizeof( ctx->uart_tx_buffer );  
 23fea06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    uart_open( &ctx->uart, &uart_cfg );
 23fea0a:	a901      	add	r1, sp, #4
 23fea0c:	4630      	mov	r0, r6
    uart_cfg.rx_ring_size = sizeof( ctx->uart_rx_buffer );
 23fea0e:	e9cd 3304 	strd	r3, r3, [sp, #16]
    uart_open( &ctx->uart, &uart_cfg );
 23fea12:	f7ff feeb 	bl	23fe7ec <_Z9uart_openP6uart_tP13uart_config_t>
    uart_set_baud( &ctx->uart, cfg->baud_rate );
 23fea16:	6861      	ldr	r1, [r4, #4]
 23fea18:	4630      	mov	r0, r6
 23fea1a:	f7ff ff01 	bl	23fe820 <_Z13uart_set_baudP6uart_tm>
    uart_set_parity( &ctx->uart, cfg->parity_bit );
 23fea1e:	7aa1      	ldrb	r1, [r4, #10]
 23fea20:	4630      	mov	r0, r6
 23fea22:	f7ff ff41 	bl	23fe8a8 <_Z15uart_set_parityP6uart_t13uart_parity_t>
    uart_set_stop_bits( &ctx->uart, cfg->stop_bit );  
 23fea26:	7ae1      	ldrb	r1, [r4, #11]
 23fea28:	4630      	mov	r0, r6
 23fea2a:	f7ff ff67 	bl	23fe8fc <_Z18uart_set_stop_bitsP6uart_t16uart_stop_bits_t>
    uart_set_data_bits( &ctx->uart, cfg->data_bit );
 23fea2e:	7a61      	ldrb	r1, [r4, #9]
 23fea30:	4630      	mov	r0, r6
 23fea32:	f7ff ff91 	bl	23fe958 <_Z18uart_set_data_bitsP6uart_t16uart_data_bits_t>

    uart_set_blocking( &ctx->uart, cfg->uart_blocking );
 23fea36:	4630      	mov	r0, r6
 23fea38:	7a21      	ldrb	r1, [r4, #8]
 23fea3a:	f7ff ffb7 	bl	23fe9ac <_Z17uart_set_blockingP6uart_tb>

    // Output pins 

    digital_out_init( &ctx->rts, cfg->rts );
 23fea3e:	78a1      	ldrb	r1, [r4, #2]
 23fea40:	4628      	mov	r0, r5
 23fea42:	f7ff fe52 	bl	23fe6ea <_Z16digital_out_initP13digital_out_th>

    // Input pins

    digital_in_init( &ctx->cts, cfg->cts );
 23fea46:	78e1      	ldrb	r1, [r4, #3]
 23fea48:	1ca8      	adds	r0, r5, #2
 23fea4a:	f7ff fe43 	bl	23fe6d4 <_Z15digital_in_initP12digital_in_th>

    return RS232_OK;
}
 23fea4e:	2000      	movs	r0, #0
 23fea50:	b006      	add	sp, #24
 23fea52:	bd70      	pop	{r4, r5, r6, pc}

023fea54 <rs232_generic_write>:

void rs232_generic_write ( rs232_t *ctx, char *data_buf, uint16_t len )
{
    uart_write( &ctx->uart, data_buf, len );
 23fea54:	3004      	adds	r0, #4
 23fea56:	f7ff bfaa 	b.w	23fe9ae <_Z10uart_writeP6uart_tPcj>

023fea5a <_Z11Delay_100msv>:
inline void Delay_100ms( ) {delay(100);}
 23fea5a:	2064      	movs	r0, #100	; 0x64
 23fea5c:	f000 bb8e 	b.w	23ff17c <delay>

023fea60 <temphum13_cfg_setup>:

void temphum13_cfg_setup ( temphum13_cfg_t *cfg )
{
    // Communication gpio pins 

    cfg->scl = HAL_PIN_NC;
 23fea60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fea64:	8003      	strh	r3, [r0, #0]
    cfg->sda = HAL_PIN_NC;

    cfg->i2c_speed = I2C_MASTER_SPEED_STANDARD; 
 23fea66:	2300      	movs	r3, #0
 23fea68:	6043      	str	r3, [r0, #4]
    cfg->i2c_address = TEMPHUM13_DEVICE_ADDRESS;
 23fea6a:	2340      	movs	r3, #64	; 0x40
 23fea6c:	7203      	strb	r3, [r0, #8]
}
 23fea6e:	4770      	bx	lr

023fea70 <temphum13_init>:

TEMPHUM13_RETVAL temphum13_init ( temphum13_t *ctx, temphum13_cfg_t *cfg )
{
 23fea70:	b530      	push	{r4, r5, lr}
 23fea72:	460d      	mov	r5, r1
 23fea74:	4604      	mov	r4, r0
 23fea76:	b085      	sub	sp, #20
    i2c_master_config_t i2c_cfg;

    i2c_master_configure_default( &i2c_cfg );
 23fea78:	a801      	add	r0, sp, #4
 23fea7a:	f7ff fe41 	bl	23fe700 <_Z28i2c_master_configure_defaultP19i2c_master_config_t>
    i2c_cfg.speed  = cfg->i2c_speed;
 23fea7e:	686b      	ldr	r3, [r5, #4]
    i2c_cfg.scl    = cfg->scl;
    i2c_cfg.sda    = cfg->sda;

    ctx->slave_address = cfg->i2c_address;

    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fea80:	4620      	mov	r0, r4
    i2c_cfg.speed  = cfg->i2c_speed;
 23fea82:	9302      	str	r3, [sp, #8]
    i2c_cfg.scl    = cfg->scl;
 23fea84:	782b      	ldrb	r3, [r5, #0]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fea86:	a901      	add	r1, sp, #4
    i2c_cfg.scl    = cfg->scl;
 23fea88:	f88d 3006 	strb.w	r3, [sp, #6]
    i2c_cfg.sda    = cfg->sda;
 23fea8c:	786b      	ldrb	r3, [r5, #1]
 23fea8e:	f88d 3005 	strb.w	r3, [sp, #5]
    ctx->slave_address = cfg->i2c_address;
 23fea92:	7a2b      	ldrb	r3, [r5, #8]
 23fea94:	7323      	strb	r3, [r4, #12]
    if ( i2c_master_open( &ctx->i2c, &i2c_cfg ) == I2C_MASTER_ERROR )
 23fea96:	f7ff fe45 	bl	23fe724 <_Z15i2c_master_openP12i2c_master_tP19i2c_master_config_t>
 23fea9a:	3001      	adds	r0, #1
 23fea9c:	d00a      	beq.n	23feab4 <temphum13_init+0x44>
    {
        return TEMPHUM13_INIT_ERROR;
    }

    i2c_master_set_slave_address( &ctx->i2c, ctx->slave_address );
 23fea9e:	7b21      	ldrb	r1, [r4, #12]
 23feaa0:	4620      	mov	r0, r4
 23feaa2:	f7ff fe5d 	bl	23fe760 <_Z28i2c_master_set_slave_addressP12i2c_master_th>
    i2c_master_set_speed( &ctx->i2c, cfg->i2c_speed );
 23feaa6:	4620      	mov	r0, r4
 23feaa8:	6869      	ldr	r1, [r5, #4]
 23feaaa:	f7ff fe4b 	bl	23fe744 <_Z20i2c_master_set_speedP12i2c_master_tm>

    return TEMPHUM13_OK;
 23feaae:	2000      	movs	r0, #0
}
 23feab0:	b005      	add	sp, #20
 23feab2:	bd30      	pop	{r4, r5, pc}
        return TEMPHUM13_INIT_ERROR;
 23feab4:	20ff      	movs	r0, #255	; 0xff
 23feab6:	e7fb      	b.n	23feab0 <temphum13_init+0x40>

023feab8 <temphum13_soft_reset>:

void temphum13_soft_reset ( temphum13_t *ctx )
{
    uint8_t aux_reg_address;

    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23feab8:	23fe      	movs	r3, #254	; 0xfe
{
 23feaba:	b507      	push	{r0, r1, r2, lr}

    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23feabc:	2201      	movs	r2, #1
 23feabe:	f10d 0107 	add.w	r1, sp, #7
    aux_reg_address = TEMPHUM13_CMD_SOFT_RESET;
 23feac2:	f88d 3007 	strb.w	r3, [sp, #7]
    i2c_master_write( &ctx->i2c, &aux_reg_address, 1 );   
 23feac6:	f7ff fe51 	bl	23fe76c <_Z16i2c_master_writeP12i2c_master_tPhj>
}
 23feaca:	b003      	add	sp, #12
 23feacc:	f85d fb04 	ldr.w	pc, [sp], #4

023fead0 <temphum13_default_cfg>:
{
 23fead0:	b507      	push	{r0, r1, r2, lr}
 23fead2:	9001      	str	r0, [sp, #4]
    Delay_100ms( );
 23fead4:	f7ff ffc1 	bl	23fea5a <_Z11Delay_100msv>
    Delay_100ms( );
 23fead8:	f7ff ffbf 	bl	23fea5a <_Z11Delay_100msv>
    Delay_100ms( );
 23feadc:	f7ff ffbd 	bl	23fea5a <_Z11Delay_100msv>
    Delay_100ms( );
 23feae0:	f7ff ffbb 	bl	23fea5a <_Z11Delay_100msv>
    Delay_100ms( );
 23feae4:	f7ff ffb9 	bl	23fea5a <_Z11Delay_100msv>
    temphum13_soft_reset( ctx );
 23feae8:	9801      	ldr	r0, [sp, #4]
 23feaea:	f7ff ffe5 	bl	23feab8 <temphum13_soft_reset>
    Delay_100ms( );
 23feaee:	f7ff ffb4 	bl	23fea5a <_Z11Delay_100msv>
    Delay_100ms( );
 23feaf2:	f7ff ffb2 	bl	23fea5a <_Z11Delay_100msv>
    Delay_100ms( );
 23feaf6:	f7ff ffb0 	bl	23fea5a <_Z11Delay_100msv>
    Delay_100ms( );
 23feafa:	f7ff ffae 	bl	23fea5a <_Z11Delay_100msv>
    Delay_100ms( );
 23feafe:	f7ff ffac 	bl	23fea5a <_Z11Delay_100msv>
}
 23feb02:	b003      	add	sp, #12
 23feb04:	f85d fb04 	ldr.w	pc, [sp], #4

023feb08 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23feb08:	b509      	push	{r0, r3, lr}
 23feb0a:	4804      	ldr	r0, [pc, #16]	; (23feb1c <os_mutex_recursive_create+0x14>)
 23feb0c:	6800      	ldr	r0, [r0, #0]
 23feb0e:	4b04      	ldr	r3, [pc, #16]	; (23feb20 <os_mutex_recursive_create+0x18>)
 23feb10:	4403      	add	r3, r0
 23feb12:	681b      	ldr	r3, [r3, #0]
 23feb14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23feb16:	9302      	str	r3, [sp, #8]
 23feb18:	bd09      	pop	{r0, r3, pc}
 23feb1a:	0000      	.short	0x0000
 23feb1c:	1007a9d0 	.word	0x1007a9d0
 23feb20:	00000030 	.word	0x00000030

023feb24 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23feb24:	b509      	push	{r0, r3, lr}
 23feb26:	4804      	ldr	r0, [pc, #16]	; (23feb38 <HAL_RNG_GetRandomNumber+0x14>)
 23feb28:	6800      	ldr	r0, [r0, #0]
 23feb2a:	4b04      	ldr	r3, [pc, #16]	; (23feb3c <HAL_RNG_GetRandomNumber+0x18>)
 23feb2c:	4403      	add	r3, r0
 23feb2e:	681b      	ldr	r3, [r3, #0]
 23feb30:	685b      	ldr	r3, [r3, #4]
 23feb32:	9302      	str	r3, [sp, #8]
 23feb34:	bd09      	pop	{r0, r3, pc}
 23feb36:	0000      	.short	0x0000
 23feb38:	1007a9d0 	.word	0x1007a9d0
 23feb3c:	00000000 	.word	0x00000000

023feb40 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23feb40:	b509      	push	{r0, r3, lr}
 23feb42:	4804      	ldr	r0, [pc, #16]	; (23feb54 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23feb44:	6800      	ldr	r0, [r0, #0]
 23feb46:	4b04      	ldr	r3, [pc, #16]	; (23feb58 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23feb48:	4403      	add	r3, r0
 23feb4a:	681b      	ldr	r3, [r3, #0]
 23feb4c:	695b      	ldr	r3, [r3, #20]
 23feb4e:	9302      	str	r3, [sp, #8]
 23feb50:	bd09      	pop	{r0, r3, pc}
 23feb52:	0000      	.short	0x0000
 23feb54:	1007a9d0 	.word	0x1007a9d0
 23feb58:	00000000 	.word	0x00000000

023feb5c <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23feb5c:	b509      	push	{r0, r3, lr}
 23feb5e:	4804      	ldr	r0, [pc, #16]	; (23feb70 <hal_gpio_mode+0x14>)
 23feb60:	6800      	ldr	r0, [r0, #0]
 23feb62:	4b04      	ldr	r3, [pc, #16]	; (23feb74 <hal_gpio_mode+0x18>)
 23feb64:	4403      	add	r3, r0
 23feb66:	681b      	ldr	r3, [r3, #0]
 23feb68:	689b      	ldr	r3, [r3, #8]
 23feb6a:	9302      	str	r3, [sp, #8]
 23feb6c:	bd09      	pop	{r0, r3, pc}
 23feb6e:	0000      	.short	0x0000
 23feb70:	1007a9d0 	.word	0x1007a9d0
 23feb74:	00000014 	.word	0x00000014

023feb78 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23feb78:	b509      	push	{r0, r3, lr}
 23feb7a:	4804      	ldr	r0, [pc, #16]	; (23feb8c <hal_i2c_set_speed+0x14>)
 23feb7c:	6800      	ldr	r0, [r0, #0]
 23feb7e:	4b04      	ldr	r3, [pc, #16]	; (23feb90 <hal_i2c_set_speed+0x18>)
 23feb80:	4403      	add	r3, r0
 23feb82:	681b      	ldr	r3, [r3, #0]
 23feb84:	681b      	ldr	r3, [r3, #0]
 23feb86:	9302      	str	r3, [sp, #8]
 23feb88:	bd09      	pop	{r0, r3, pc}
 23feb8a:	0000      	.short	0x0000
 23feb8c:	1007a9d0 	.word	0x1007a9d0
 23feb90:	00000010 	.word	0x00000010

023feb94 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23feb94:	b509      	push	{r0, r3, lr}
 23feb96:	4804      	ldr	r0, [pc, #16]	; (23feba8 <hal_i2c_begin+0x14>)
 23feb98:	6800      	ldr	r0, [r0, #0]
 23feb9a:	4b04      	ldr	r3, [pc, #16]	; (23febac <hal_i2c_begin+0x18>)
 23feb9c:	4403      	add	r3, r0
 23feb9e:	681b      	ldr	r3, [r3, #0]
 23feba0:	68db      	ldr	r3, [r3, #12]
 23feba2:	9302      	str	r3, [sp, #8]
 23feba4:	bd09      	pop	{r0, r3, pc}
 23feba6:	0000      	.short	0x0000
 23feba8:	1007a9d0 	.word	0x1007a9d0
 23febac:	00000010 	.word	0x00000010

023febb0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23febb0:	b509      	push	{r0, r3, lr}
 23febb2:	4804      	ldr	r0, [pc, #16]	; (23febc4 <hal_i2c_begin_transmission+0x14>)
 23febb4:	6800      	ldr	r0, [r0, #0]
 23febb6:	4b04      	ldr	r3, [pc, #16]	; (23febc8 <hal_i2c_begin_transmission+0x18>)
 23febb8:	4403      	add	r3, r0
 23febba:	681b      	ldr	r3, [r3, #0]
 23febbc:	699b      	ldr	r3, [r3, #24]
 23febbe:	9302      	str	r3, [sp, #8]
 23febc0:	bd09      	pop	{r0, r3, pc}
 23febc2:	0000      	.short	0x0000
 23febc4:	1007a9d0 	.word	0x1007a9d0
 23febc8:	00000010 	.word	0x00000010

023febcc <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23febcc:	b509      	push	{r0, r3, lr}
 23febce:	4804      	ldr	r0, [pc, #16]	; (23febe0 <hal_i2c_end_transmission+0x14>)
 23febd0:	6800      	ldr	r0, [r0, #0]
 23febd2:	4b04      	ldr	r3, [pc, #16]	; (23febe4 <hal_i2c_end_transmission+0x18>)
 23febd4:	4403      	add	r3, r0
 23febd6:	681b      	ldr	r3, [r3, #0]
 23febd8:	69db      	ldr	r3, [r3, #28]
 23febda:	9302      	str	r3, [sp, #8]
 23febdc:	bd09      	pop	{r0, r3, pc}
 23febde:	0000      	.short	0x0000
 23febe0:	1007a9d0 	.word	0x1007a9d0
 23febe4:	00000010 	.word	0x00000010

023febe8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23febe8:	b509      	push	{r0, r3, lr}
 23febea:	4804      	ldr	r0, [pc, #16]	; (23febfc <hal_i2c_write+0x14>)
 23febec:	6800      	ldr	r0, [r0, #0]
 23febee:	4b04      	ldr	r3, [pc, #16]	; (23fec00 <hal_i2c_write+0x18>)
 23febf0:	4403      	add	r3, r0
 23febf2:	681b      	ldr	r3, [r3, #0]
 23febf4:	6a1b      	ldr	r3, [r3, #32]
 23febf6:	9302      	str	r3, [sp, #8]
 23febf8:	bd09      	pop	{r0, r3, pc}
 23febfa:	0000      	.short	0x0000
 23febfc:	1007a9d0 	.word	0x1007a9d0
 23fec00:	00000010 	.word	0x00000010

023fec04 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fec04:	b509      	push	{r0, r3, lr}
 23fec06:	4804      	ldr	r0, [pc, #16]	; (23fec18 <hal_i2c_available+0x14>)
 23fec08:	6800      	ldr	r0, [r0, #0]
 23fec0a:	4b04      	ldr	r3, [pc, #16]	; (23fec1c <hal_i2c_available+0x18>)
 23fec0c:	4403      	add	r3, r0
 23fec0e:	681b      	ldr	r3, [r3, #0]
 23fec10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fec12:	9302      	str	r3, [sp, #8]
 23fec14:	bd09      	pop	{r0, r3, pc}
 23fec16:	0000      	.short	0x0000
 23fec18:	1007a9d0 	.word	0x1007a9d0
 23fec1c:	00000010 	.word	0x00000010

023fec20 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fec20:	b509      	push	{r0, r3, lr}
 23fec22:	4804      	ldr	r0, [pc, #16]	; (23fec34 <hal_i2c_read+0x14>)
 23fec24:	6800      	ldr	r0, [r0, #0]
 23fec26:	4b04      	ldr	r3, [pc, #16]	; (23fec38 <hal_i2c_read+0x18>)
 23fec28:	4403      	add	r3, r0
 23fec2a:	681b      	ldr	r3, [r3, #0]
 23fec2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fec2e:	9302      	str	r3, [sp, #8]
 23fec30:	bd09      	pop	{r0, r3, pc}
 23fec32:	0000      	.short	0x0000
 23fec34:	1007a9d0 	.word	0x1007a9d0
 23fec38:	00000010 	.word	0x00000010

023fec3c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fec3c:	b509      	push	{r0, r3, lr}
 23fec3e:	4804      	ldr	r0, [pc, #16]	; (23fec50 <hal_i2c_peek+0x14>)
 23fec40:	6800      	ldr	r0, [r0, #0]
 23fec42:	4b04      	ldr	r3, [pc, #16]	; (23fec54 <hal_i2c_peek+0x18>)
 23fec44:	4403      	add	r3, r0
 23fec46:	681b      	ldr	r3, [r3, #0]
 23fec48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fec4a:	9302      	str	r3, [sp, #8]
 23fec4c:	bd09      	pop	{r0, r3, pc}
 23fec4e:	0000      	.short	0x0000
 23fec50:	1007a9d0 	.word	0x1007a9d0
 23fec54:	00000010 	.word	0x00000010

023fec58 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fec58:	b509      	push	{r0, r3, lr}
 23fec5a:	4804      	ldr	r0, [pc, #16]	; (23fec6c <hal_i2c_flush+0x14>)
 23fec5c:	6800      	ldr	r0, [r0, #0]
 23fec5e:	4b04      	ldr	r3, [pc, #16]	; (23fec70 <hal_i2c_flush+0x18>)
 23fec60:	4403      	add	r3, r0
 23fec62:	681b      	ldr	r3, [r3, #0]
 23fec64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fec66:	9302      	str	r3, [sp, #8]
 23fec68:	bd09      	pop	{r0, r3, pc}
 23fec6a:	0000      	.short	0x0000
 23fec6c:	1007a9d0 	.word	0x1007a9d0
 23fec70:	00000010 	.word	0x00000010

023fec74 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fec74:	b509      	push	{r0, r3, lr}
 23fec76:	4804      	ldr	r0, [pc, #16]	; (23fec88 <hal_i2c_is_enabled+0x14>)
 23fec78:	6800      	ldr	r0, [r0, #0]
 23fec7a:	4b04      	ldr	r3, [pc, #16]	; (23fec8c <hal_i2c_is_enabled+0x18>)
 23fec7c:	4403      	add	r3, r0
 23fec7e:	681b      	ldr	r3, [r3, #0]
 23fec80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fec82:	9302      	str	r3, [sp, #8]
 23fec84:	bd09      	pop	{r0, r3, pc}
 23fec86:	0000      	.short	0x0000
 23fec88:	1007a9d0 	.word	0x1007a9d0
 23fec8c:	00000010 	.word	0x00000010

023fec90 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fec90:	b509      	push	{r0, r3, lr}
 23fec92:	4804      	ldr	r0, [pc, #16]	; (23feca4 <hal_i2c_init+0x14>)
 23fec94:	6800      	ldr	r0, [r0, #0]
 23fec96:	4b04      	ldr	r3, [pc, #16]	; (23feca8 <hal_i2c_init+0x18>)
 23fec98:	4403      	add	r3, r0
 23fec9a:	681b      	ldr	r3, [r3, #0]
 23fec9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fec9e:	9302      	str	r3, [sp, #8]
 23feca0:	bd09      	pop	{r0, r3, pc}
 23feca2:	0000      	.short	0x0000
 23feca4:	1007a9d0 	.word	0x1007a9d0
 23feca8:	00000010 	.word	0x00000010

023fecac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fecac:	b509      	push	{r0, r3, lr}
 23fecae:	4804      	ldr	r0, [pc, #16]	; (23fecc0 <inet_inet_ntop+0x14>)
 23fecb0:	6800      	ldr	r0, [r0, #0]
 23fecb2:	4b04      	ldr	r3, [pc, #16]	; (23fecc4 <inet_inet_ntop+0x18>)
 23fecb4:	4403      	add	r3, r0
 23fecb6:	681b      	ldr	r3, [r3, #0]
 23fecb8:	695b      	ldr	r3, [r3, #20]
 23fecba:	9302      	str	r3, [sp, #8]
 23fecbc:	bd09      	pop	{r0, r3, pc}
 23fecbe:	0000      	.short	0x0000
 23fecc0:	1007a9d0 	.word	0x1007a9d0
 23fecc4:	0000004c 	.word	0x0000004c

023fecc8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fecc8:	b509      	push	{r0, r3, lr}
 23fecca:	4804      	ldr	r0, [pc, #16]	; (23fecdc <netdb_freeaddrinfo+0x14>)
 23feccc:	6800      	ldr	r0, [r0, #0]
 23fecce:	4b04      	ldr	r3, [pc, #16]	; (23fece0 <netdb_freeaddrinfo+0x18>)
 23fecd0:	4403      	add	r3, r0
 23fecd2:	681b      	ldr	r3, [r3, #0]
 23fecd4:	689b      	ldr	r3, [r3, #8]
 23fecd6:	9302      	str	r3, [sp, #8]
 23fecd8:	bd09      	pop	{r0, r3, pc}
 23fecda:	0000      	.short	0x0000
 23fecdc:	1007a9d0 	.word	0x1007a9d0
 23fece0:	00000050 	.word	0x00000050

023fece4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fece4:	b509      	push	{r0, r3, lr}
 23fece6:	4804      	ldr	r0, [pc, #16]	; (23fecf8 <netdb_getaddrinfo+0x14>)
 23fece8:	6800      	ldr	r0, [r0, #0]
 23fecea:	4b04      	ldr	r3, [pc, #16]	; (23fecfc <netdb_getaddrinfo+0x18>)
 23fecec:	4403      	add	r3, r0
 23fecee:	681b      	ldr	r3, [r3, #0]
 23fecf0:	68db      	ldr	r3, [r3, #12]
 23fecf2:	9302      	str	r3, [sp, #8]
 23fecf4:	bd09      	pop	{r0, r3, pc}
 23fecf6:	0000      	.short	0x0000
 23fecf8:	1007a9d0 	.word	0x1007a9d0
 23fecfc:	00000050 	.word	0x00000050

023fed00 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fed00:	b509      	push	{r0, r3, lr}
 23fed02:	4804      	ldr	r0, [pc, #16]	; (23fed14 <hal_spi_init+0x14>)
 23fed04:	6800      	ldr	r0, [r0, #0]
 23fed06:	4b04      	ldr	r3, [pc, #16]	; (23fed18 <hal_spi_init+0x18>)
 23fed08:	4403      	add	r3, r0
 23fed0a:	681b      	ldr	r3, [r3, #0]
 23fed0c:	69db      	ldr	r3, [r3, #28]
 23fed0e:	9302      	str	r3, [sp, #8]
 23fed10:	bd09      	pop	{r0, r3, pc}
 23fed12:	0000      	.short	0x0000
 23fed14:	1007a9d0 	.word	0x1007a9d0
 23fed18:	00000018 	.word	0x00000018

023fed1c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fed1c:	b509      	push	{r0, r3, lr}
 23fed1e:	4804      	ldr	r0, [pc, #16]	; (23fed30 <hal_spi_is_enabled+0x14>)
 23fed20:	6800      	ldr	r0, [r0, #0]
 23fed22:	4b04      	ldr	r3, [pc, #16]	; (23fed34 <hal_spi_is_enabled+0x18>)
 23fed24:	4403      	add	r3, r0
 23fed26:	681b      	ldr	r3, [r3, #0]
 23fed28:	6a1b      	ldr	r3, [r3, #32]
 23fed2a:	9302      	str	r3, [sp, #8]
 23fed2c:	bd09      	pop	{r0, r3, pc}
 23fed2e:	0000      	.short	0x0000
 23fed30:	1007a9d0 	.word	0x1007a9d0
 23fed34:	00000018 	.word	0x00000018

023fed38 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fed38:	b509      	push	{r0, r3, lr}
 23fed3a:	4804      	ldr	r0, [pc, #16]	; (23fed4c <hal_usart_write+0x14>)
 23fed3c:	6800      	ldr	r0, [r0, #0]
 23fed3e:	4b04      	ldr	r3, [pc, #16]	; (23fed50 <hal_usart_write+0x18>)
 23fed40:	4403      	add	r3, r0
 23fed42:	681b      	ldr	r3, [r3, #0]
 23fed44:	68db      	ldr	r3, [r3, #12]
 23fed46:	9302      	str	r3, [sp, #8]
 23fed48:	bd09      	pop	{r0, r3, pc}
 23fed4a:	0000      	.short	0x0000
 23fed4c:	1007a9d0 	.word	0x1007a9d0
 23fed50:	00000024 	.word	0x00000024

023fed54 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fed54:	b509      	push	{r0, r3, lr}
 23fed56:	4804      	ldr	r0, [pc, #16]	; (23fed68 <hal_usart_available+0x14>)
 23fed58:	6800      	ldr	r0, [r0, #0]
 23fed5a:	4b04      	ldr	r3, [pc, #16]	; (23fed6c <hal_usart_available+0x18>)
 23fed5c:	4403      	add	r3, r0
 23fed5e:	681b      	ldr	r3, [r3, #0]
 23fed60:	691b      	ldr	r3, [r3, #16]
 23fed62:	9302      	str	r3, [sp, #8]
 23fed64:	bd09      	pop	{r0, r3, pc}
 23fed66:	0000      	.short	0x0000
 23fed68:	1007a9d0 	.word	0x1007a9d0
 23fed6c:	00000024 	.word	0x00000024

023fed70 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fed70:	b509      	push	{r0, r3, lr}
 23fed72:	4804      	ldr	r0, [pc, #16]	; (23fed84 <hal_usart_read+0x14>)
 23fed74:	6800      	ldr	r0, [r0, #0]
 23fed76:	4b04      	ldr	r3, [pc, #16]	; (23fed88 <hal_usart_read+0x18>)
 23fed78:	4403      	add	r3, r0
 23fed7a:	681b      	ldr	r3, [r3, #0]
 23fed7c:	695b      	ldr	r3, [r3, #20]
 23fed7e:	9302      	str	r3, [sp, #8]
 23fed80:	bd09      	pop	{r0, r3, pc}
 23fed82:	0000      	.short	0x0000
 23fed84:	1007a9d0 	.word	0x1007a9d0
 23fed88:	00000024 	.word	0x00000024

023fed8c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fed8c:	b509      	push	{r0, r3, lr}
 23fed8e:	4804      	ldr	r0, [pc, #16]	; (23feda0 <hal_usart_peek+0x14>)
 23fed90:	6800      	ldr	r0, [r0, #0]
 23fed92:	4b04      	ldr	r3, [pc, #16]	; (23feda4 <hal_usart_peek+0x18>)
 23fed94:	4403      	add	r3, r0
 23fed96:	681b      	ldr	r3, [r3, #0]
 23fed98:	699b      	ldr	r3, [r3, #24]
 23fed9a:	9302      	str	r3, [sp, #8]
 23fed9c:	bd09      	pop	{r0, r3, pc}
 23fed9e:	0000      	.short	0x0000
 23feda0:	1007a9d0 	.word	0x1007a9d0
 23feda4:	00000024 	.word	0x00000024

023feda8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23feda8:	b509      	push	{r0, r3, lr}
 23fedaa:	4804      	ldr	r0, [pc, #16]	; (23fedbc <hal_usart_flush+0x14>)
 23fedac:	6800      	ldr	r0, [r0, #0]
 23fedae:	4b04      	ldr	r3, [pc, #16]	; (23fedc0 <hal_usart_flush+0x18>)
 23fedb0:	4403      	add	r3, r0
 23fedb2:	681b      	ldr	r3, [r3, #0]
 23fedb4:	69db      	ldr	r3, [r3, #28]
 23fedb6:	9302      	str	r3, [sp, #8]
 23fedb8:	bd09      	pop	{r0, r3, pc}
 23fedba:	0000      	.short	0x0000
 23fedbc:	1007a9d0 	.word	0x1007a9d0
 23fedc0:	00000024 	.word	0x00000024

023fedc4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fedc4:	b509      	push	{r0, r3, lr}
 23fedc6:	4804      	ldr	r0, [pc, #16]	; (23fedd8 <hal_usart_is_enabled+0x14>)
 23fedc8:	6800      	ldr	r0, [r0, #0]
 23fedca:	4b04      	ldr	r3, [pc, #16]	; (23feddc <hal_usart_is_enabled+0x18>)
 23fedcc:	4403      	add	r3, r0
 23fedce:	681b      	ldr	r3, [r3, #0]
 23fedd0:	6a1b      	ldr	r3, [r3, #32]
 23fedd2:	9302      	str	r3, [sp, #8]
 23fedd4:	bd09      	pop	{r0, r3, pc}
 23fedd6:	0000      	.short	0x0000
 23fedd8:	1007a9d0 	.word	0x1007a9d0
 23feddc:	00000024 	.word	0x00000024

023fede0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fede0:	b509      	push	{r0, r3, lr}
 23fede2:	4804      	ldr	r0, [pc, #16]	; (23fedf4 <hal_usart_available_data_for_write+0x14>)
 23fede4:	6800      	ldr	r0, [r0, #0]
 23fede6:	4b04      	ldr	r3, [pc, #16]	; (23fedf8 <hal_usart_available_data_for_write+0x18>)
 23fede8:	4403      	add	r3, r0
 23fedea:	681b      	ldr	r3, [r3, #0]
 23fedec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fedee:	9302      	str	r3, [sp, #8]
 23fedf0:	bd09      	pop	{r0, r3, pc}
 23fedf2:	0000      	.short	0x0000
 23fedf4:	1007a9d0 	.word	0x1007a9d0
 23fedf8:	00000024 	.word	0x00000024

023fedfc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fedfc:	b509      	push	{r0, r3, lr}
 23fedfe:	4804      	ldr	r0, [pc, #16]	; (23fee10 <hal_usart_begin_config+0x14>)
 23fee00:	6800      	ldr	r0, [r0, #0]
 23fee02:	4b04      	ldr	r3, [pc, #16]	; (23fee14 <hal_usart_begin_config+0x18>)
 23fee04:	4403      	add	r3, r0
 23fee06:	681b      	ldr	r3, [r3, #0]
 23fee08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fee0a:	9302      	str	r3, [sp, #8]
 23fee0c:	bd09      	pop	{r0, r3, pc}
 23fee0e:	0000      	.short	0x0000
 23fee10:	1007a9d0 	.word	0x1007a9d0
 23fee14:	00000024 	.word	0x00000024

023fee18 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fee18:	b509      	push	{r0, r3, lr}
 23fee1a:	4804      	ldr	r0, [pc, #16]	; (23fee2c <hal_usart_init_ex+0x14>)
 23fee1c:	6800      	ldr	r0, [r0, #0]
 23fee1e:	4b04      	ldr	r3, [pc, #16]	; (23fee30 <hal_usart_init_ex+0x18>)
 23fee20:	4403      	add	r3, r0
 23fee22:	681b      	ldr	r3, [r3, #0]
 23fee24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fee26:	9302      	str	r3, [sp, #8]
 23fee28:	bd09      	pop	{r0, r3, pc}
 23fee2a:	0000      	.short	0x0000
 23fee2c:	1007a9d0 	.word	0x1007a9d0
 23fee30:	00000024 	.word	0x00000024

023fee34 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fee34:	b509      	push	{r0, r3, lr}
 23fee36:	4804      	ldr	r0, [pc, #16]	; (23fee48 <HAL_USB_USART_Init+0x14>)
 23fee38:	6800      	ldr	r0, [r0, #0]
 23fee3a:	4b04      	ldr	r3, [pc, #16]	; (23fee4c <HAL_USB_USART_Init+0x18>)
 23fee3c:	4403      	add	r3, r0
 23fee3e:	681b      	ldr	r3, [r3, #0]
 23fee40:	681b      	ldr	r3, [r3, #0]
 23fee42:	9302      	str	r3, [sp, #8]
 23fee44:	bd09      	pop	{r0, r3, pc}
 23fee46:	0000      	.short	0x0000
 23fee48:	1007a9d0 	.word	0x1007a9d0
 23fee4c:	00000034 	.word	0x00000034

023fee50 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fee50:	b509      	push	{r0, r3, lr}
 23fee52:	4804      	ldr	r0, [pc, #16]	; (23fee64 <HAL_USB_USART_Begin+0x14>)
 23fee54:	6800      	ldr	r0, [r0, #0]
 23fee56:	4b04      	ldr	r3, [pc, #16]	; (23fee68 <HAL_USB_USART_Begin+0x18>)
 23fee58:	4403      	add	r3, r0
 23fee5a:	681b      	ldr	r3, [r3, #0]
 23fee5c:	685b      	ldr	r3, [r3, #4]
 23fee5e:	9302      	str	r3, [sp, #8]
 23fee60:	bd09      	pop	{r0, r3, pc}
 23fee62:	0000      	.short	0x0000
 23fee64:	1007a9d0 	.word	0x1007a9d0
 23fee68:	00000034 	.word	0x00000034

023fee6c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fee6c:	b509      	push	{r0, r3, lr}
 23fee6e:	4804      	ldr	r0, [pc, #16]	; (23fee80 <HAL_USB_USART_Available_Data+0x14>)
 23fee70:	6800      	ldr	r0, [r0, #0]
 23fee72:	4b04      	ldr	r3, [pc, #16]	; (23fee84 <HAL_USB_USART_Available_Data+0x18>)
 23fee74:	4403      	add	r3, r0
 23fee76:	681b      	ldr	r3, [r3, #0]
 23fee78:	691b      	ldr	r3, [r3, #16]
 23fee7a:	9302      	str	r3, [sp, #8]
 23fee7c:	bd09      	pop	{r0, r3, pc}
 23fee7e:	0000      	.short	0x0000
 23fee80:	1007a9d0 	.word	0x1007a9d0
 23fee84:	00000034 	.word	0x00000034

023fee88 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fee88:	b509      	push	{r0, r3, lr}
 23fee8a:	4804      	ldr	r0, [pc, #16]	; (23fee9c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fee8c:	6800      	ldr	r0, [r0, #0]
 23fee8e:	4b04      	ldr	r3, [pc, #16]	; (23feea0 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fee90:	4403      	add	r3, r0
 23fee92:	681b      	ldr	r3, [r3, #0]
 23fee94:	695b      	ldr	r3, [r3, #20]
 23fee96:	9302      	str	r3, [sp, #8]
 23fee98:	bd09      	pop	{r0, r3, pc}
 23fee9a:	0000      	.short	0x0000
 23fee9c:	1007a9d0 	.word	0x1007a9d0
 23feea0:	00000034 	.word	0x00000034

023feea4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23feea4:	b509      	push	{r0, r3, lr}
 23feea6:	4804      	ldr	r0, [pc, #16]	; (23feeb8 <HAL_USB_USART_Receive_Data+0x14>)
 23feea8:	6800      	ldr	r0, [r0, #0]
 23feeaa:	4b04      	ldr	r3, [pc, #16]	; (23feebc <HAL_USB_USART_Receive_Data+0x18>)
 23feeac:	4403      	add	r3, r0
 23feeae:	681b      	ldr	r3, [r3, #0]
 23feeb0:	699b      	ldr	r3, [r3, #24]
 23feeb2:	9302      	str	r3, [sp, #8]
 23feeb4:	bd09      	pop	{r0, r3, pc}
 23feeb6:	0000      	.short	0x0000
 23feeb8:	1007a9d0 	.word	0x1007a9d0
 23feebc:	00000034 	.word	0x00000034

023feec0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23feec0:	b509      	push	{r0, r3, lr}
 23feec2:	4804      	ldr	r0, [pc, #16]	; (23feed4 <HAL_USB_USART_Send_Data+0x14>)
 23feec4:	6800      	ldr	r0, [r0, #0]
 23feec6:	4b04      	ldr	r3, [pc, #16]	; (23feed8 <HAL_USB_USART_Send_Data+0x18>)
 23feec8:	4403      	add	r3, r0
 23feeca:	681b      	ldr	r3, [r3, #0]
 23feecc:	69db      	ldr	r3, [r3, #28]
 23feece:	9302      	str	r3, [sp, #8]
 23feed0:	bd09      	pop	{r0, r3, pc}
 23feed2:	0000      	.short	0x0000
 23feed4:	1007a9d0 	.word	0x1007a9d0
 23feed8:	00000034 	.word	0x00000034

023feedc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23feedc:	b509      	push	{r0, r3, lr}
 23feede:	4804      	ldr	r0, [pc, #16]	; (23feef0 <HAL_USB_USART_Flush_Data+0x14>)
 23feee0:	6800      	ldr	r0, [r0, #0]
 23feee2:	4b04      	ldr	r3, [pc, #16]	; (23feef4 <HAL_USB_USART_Flush_Data+0x18>)
 23feee4:	4403      	add	r3, r0
 23feee6:	681b      	ldr	r3, [r3, #0]
 23feee8:	6a1b      	ldr	r3, [r3, #32]
 23feeea:	9302      	str	r3, [sp, #8]
 23feeec:	bd09      	pop	{r0, r3, pc}
 23feeee:	0000      	.short	0x0000
 23feef0:	1007a9d0 	.word	0x1007a9d0
 23feef4:	00000034 	.word	0x00000034

023feef8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23feef8:	b509      	push	{r0, r3, lr}
 23feefa:	4804      	ldr	r0, [pc, #16]	; (23fef0c <set_system_mode+0x14>)
 23feefc:	6800      	ldr	r0, [r0, #0]
 23feefe:	4b04      	ldr	r3, [pc, #16]	; (23fef10 <set_system_mode+0x18>)
 23fef00:	4403      	add	r3, r0
 23fef02:	681b      	ldr	r3, [r3, #0]
 23fef04:	685b      	ldr	r3, [r3, #4]
 23fef06:	9302      	str	r3, [sp, #8]
 23fef08:	bd09      	pop	{r0, r3, pc}
 23fef0a:	0000      	.short	0x0000
 23fef0c:	1007a9d0 	.word	0x1007a9d0
 23fef10:	00000008 	.word	0x00000008

023fef14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fef14:	b509      	push	{r0, r3, lr}
 23fef16:	4804      	ldr	r0, [pc, #16]	; (23fef28 <system_delay_ms+0x14>)
 23fef18:	6800      	ldr	r0, [r0, #0]
 23fef1a:	4b04      	ldr	r3, [pc, #16]	; (23fef2c <system_delay_ms+0x18>)
 23fef1c:	4403      	add	r3, r0
 23fef1e:	681b      	ldr	r3, [r3, #0]
 23fef20:	695b      	ldr	r3, [r3, #20]
 23fef22:	9302      	str	r3, [sp, #8]
 23fef24:	bd09      	pop	{r0, r3, pc}
 23fef26:	0000      	.short	0x0000
 23fef28:	1007a9d0 	.word	0x1007a9d0
 23fef2c:	00000008 	.word	0x00000008

023fef30 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fef30:	b509      	push	{r0, r3, lr}
 23fef32:	4804      	ldr	r0, [pc, #16]	; (23fef44 <system_thread_set_state+0x14>)
 23fef34:	6800      	ldr	r0, [r0, #0]
 23fef36:	4b04      	ldr	r3, [pc, #16]	; (23fef48 <system_thread_set_state+0x18>)
 23fef38:	4403      	add	r3, r0
 23fef3a:	681b      	ldr	r3, [r3, #0]
 23fef3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fef3e:	9302      	str	r3, [sp, #8]
 23fef40:	bd09      	pop	{r0, r3, pc}
 23fef42:	0000      	.short	0x0000
 23fef44:	1007a9d0 	.word	0x1007a9d0
 23fef48:	00000008 	.word	0x00000008

023fef4c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fef4c:	b509      	push	{r0, r3, lr}
 23fef4e:	4804      	ldr	r0, [pc, #16]	; (23fef60 <system_ctrl_set_app_request_handler+0x14>)
 23fef50:	6800      	ldr	r0, [r0, #0]
 23fef52:	4b04      	ldr	r3, [pc, #16]	; (23fef64 <system_ctrl_set_app_request_handler+0x18>)
 23fef54:	4403      	add	r3, r0
 23fef56:	681b      	ldr	r3, [r3, #0]
 23fef58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fef5c:	9302      	str	r3, [sp, #8]
 23fef5e:	bd09      	pop	{r0, r3, pc}
 23fef60:	1007a9d0 	.word	0x1007a9d0
 23fef64:	00000008 	.word	0x00000008

023fef68 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fef68:	b509      	push	{r0, r3, lr}
 23fef6a:	4804      	ldr	r0, [pc, #16]	; (23fef7c <system_ctrl_set_result+0x14>)
 23fef6c:	6800      	ldr	r0, [r0, #0]
 23fef6e:	4b04      	ldr	r3, [pc, #16]	; (23fef80 <system_ctrl_set_result+0x18>)
 23fef70:	4403      	add	r3, r0
 23fef72:	681b      	ldr	r3, [r3, #0]
 23fef74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fef78:	9302      	str	r3, [sp, #8]
 23fef7a:	bd09      	pop	{r0, r3, pc}
 23fef7c:	1007a9d0 	.word	0x1007a9d0
 23fef80:	00000008 	.word	0x00000008

023fef84 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fef84:	b509      	push	{r0, r3, lr}
 23fef86:	4804      	ldr	r0, [pc, #16]	; (23fef98 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fef88:	6800      	ldr	r0, [r0, #0]
 23fef8a:	4b04      	ldr	r3, [pc, #16]	; (23fef9c <spark_set_random_seed_from_cloud_handler+0x18>)
 23fef8c:	4403      	add	r3, r0
 23fef8e:	681b      	ldr	r3, [r3, #0]
 23fef90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fef92:	9302      	str	r3, [sp, #8]
 23fef94:	bd09      	pop	{r0, r3, pc}
 23fef96:	0000      	.short	0x0000
 23fef98:	1007a9d0 	.word	0x1007a9d0
 23fef9c:	0000002c 	.word	0x0000002c

023fefa0 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23fefa0:	b509      	push	{r0, r3, lr}
 23fefa2:	4804      	ldr	r0, [pc, #16]	; (23fefb4 <spark_cloud_disconnect+0x14>)
 23fefa4:	6800      	ldr	r0, [r0, #0]
 23fefa6:	4b04      	ldr	r3, [pc, #16]	; (23fefb8 <spark_cloud_disconnect+0x18>)
 23fefa8:	4403      	add	r3, r0
 23fefaa:	681b      	ldr	r3, [r3, #0]
 23fefac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fefae:	9302      	str	r3, [sp, #8]
 23fefb0:	bd09      	pop	{r0, r3, pc}
 23fefb2:	0000      	.short	0x0000
 23fefb4:	1007a9d0 	.word	0x1007a9d0
 23fefb8:	0000002c 	.word	0x0000002c

023fefbc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fefbc:	b509      	push	{r0, r3, lr}
 23fefbe:	4804      	ldr	r0, [pc, #16]	; (23fefd0 <network_connect+0x14>)
 23fefc0:	6800      	ldr	r0, [r0, #0]
 23fefc2:	4b04      	ldr	r3, [pc, #16]	; (23fefd4 <network_connect+0x18>)
 23fefc4:	4403      	add	r3, r0
 23fefc6:	681b      	ldr	r3, [r3, #0]
 23fefc8:	685b      	ldr	r3, [r3, #4]
 23fefca:	9302      	str	r3, [sp, #8]
 23fefcc:	bd09      	pop	{r0, r3, pc}
 23fefce:	0000      	.short	0x0000
 23fefd0:	1007a9d0 	.word	0x1007a9d0
 23fefd4:	00000028 	.word	0x00000028

023fefd8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fefd8:	b509      	push	{r0, r3, lr}
 23fefda:	4804      	ldr	r0, [pc, #16]	; (23fefec <network_connecting+0x14>)
 23fefdc:	6800      	ldr	r0, [r0, #0]
 23fefde:	4b04      	ldr	r3, [pc, #16]	; (23feff0 <network_connecting+0x18>)
 23fefe0:	4403      	add	r3, r0
 23fefe2:	681b      	ldr	r3, [r3, #0]
 23fefe4:	689b      	ldr	r3, [r3, #8]
 23fefe6:	9302      	str	r3, [sp, #8]
 23fefe8:	bd09      	pop	{r0, r3, pc}
 23fefea:	0000      	.short	0x0000
 23fefec:	1007a9d0 	.word	0x1007a9d0
 23feff0:	00000028 	.word	0x00000028

023feff4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23feff4:	b509      	push	{r0, r3, lr}
 23feff6:	4804      	ldr	r0, [pc, #16]	; (23ff008 <network_disconnect+0x14>)
 23feff8:	6800      	ldr	r0, [r0, #0]
 23feffa:	4b04      	ldr	r3, [pc, #16]	; (23ff00c <network_disconnect+0x18>)
 23feffc:	4403      	add	r3, r0
 23feffe:	681b      	ldr	r3, [r3, #0]
 23ff000:	68db      	ldr	r3, [r3, #12]
 23ff002:	9302      	str	r3, [sp, #8]
 23ff004:	bd09      	pop	{r0, r3, pc}
 23ff006:	0000      	.short	0x0000
 23ff008:	1007a9d0 	.word	0x1007a9d0
 23ff00c:	00000028 	.word	0x00000028

023ff010 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23ff010:	b509      	push	{r0, r3, lr}
 23ff012:	4804      	ldr	r0, [pc, #16]	; (23ff024 <network_ready+0x14>)
 23ff014:	6800      	ldr	r0, [r0, #0]
 23ff016:	4b04      	ldr	r3, [pc, #16]	; (23ff028 <network_ready+0x18>)
 23ff018:	4403      	add	r3, r0
 23ff01a:	681b      	ldr	r3, [r3, #0]
 23ff01c:	691b      	ldr	r3, [r3, #16]
 23ff01e:	9302      	str	r3, [sp, #8]
 23ff020:	bd09      	pop	{r0, r3, pc}
 23ff022:	0000      	.short	0x0000
 23ff024:	1007a9d0 	.word	0x1007a9d0
 23ff028:	00000028 	.word	0x00000028

023ff02c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23ff02c:	b509      	push	{r0, r3, lr}
 23ff02e:	4804      	ldr	r0, [pc, #16]	; (23ff040 <network_on+0x14>)
 23ff030:	6800      	ldr	r0, [r0, #0]
 23ff032:	4b04      	ldr	r3, [pc, #16]	; (23ff044 <network_on+0x18>)
 23ff034:	4403      	add	r3, r0
 23ff036:	681b      	ldr	r3, [r3, #0]
 23ff038:	695b      	ldr	r3, [r3, #20]
 23ff03a:	9302      	str	r3, [sp, #8]
 23ff03c:	bd09      	pop	{r0, r3, pc}
 23ff03e:	0000      	.short	0x0000
 23ff040:	1007a9d0 	.word	0x1007a9d0
 23ff044:	00000028 	.word	0x00000028

023ff048 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23ff048:	b509      	push	{r0, r3, lr}
 23ff04a:	4804      	ldr	r0, [pc, #16]	; (23ff05c <network_off+0x14>)
 23ff04c:	6800      	ldr	r0, [r0, #0]
 23ff04e:	4b04      	ldr	r3, [pc, #16]	; (23ff060 <network_off+0x18>)
 23ff050:	4403      	add	r3, r0
 23ff052:	681b      	ldr	r3, [r3, #0]
 23ff054:	699b      	ldr	r3, [r3, #24]
 23ff056:	9302      	str	r3, [sp, #8]
 23ff058:	bd09      	pop	{r0, r3, pc}
 23ff05a:	0000      	.short	0x0000
 23ff05c:	1007a9d0 	.word	0x1007a9d0
 23ff060:	00000028 	.word	0x00000028

023ff064 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23ff064:	b509      	push	{r0, r3, lr}
 23ff066:	4804      	ldr	r0, [pc, #16]	; (23ff078 <network_listen+0x14>)
 23ff068:	6800      	ldr	r0, [r0, #0]
 23ff06a:	4b04      	ldr	r3, [pc, #16]	; (23ff07c <network_listen+0x18>)
 23ff06c:	4403      	add	r3, r0
 23ff06e:	681b      	ldr	r3, [r3, #0]
 23ff070:	69db      	ldr	r3, [r3, #28]
 23ff072:	9302      	str	r3, [sp, #8]
 23ff074:	bd09      	pop	{r0, r3, pc}
 23ff076:	0000      	.short	0x0000
 23ff078:	1007a9d0 	.word	0x1007a9d0
 23ff07c:	00000028 	.word	0x00000028

023ff080 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23ff080:	b509      	push	{r0, r3, lr}
 23ff082:	4804      	ldr	r0, [pc, #16]	; (23ff094 <network_listening+0x14>)
 23ff084:	6800      	ldr	r0, [r0, #0]
 23ff086:	4b04      	ldr	r3, [pc, #16]	; (23ff098 <network_listening+0x18>)
 23ff088:	4403      	add	r3, r0
 23ff08a:	681b      	ldr	r3, [r3, #0]
 23ff08c:	6a1b      	ldr	r3, [r3, #32]
 23ff08e:	9302      	str	r3, [sp, #8]
 23ff090:	bd09      	pop	{r0, r3, pc}
 23ff092:	0000      	.short	0x0000
 23ff094:	1007a9d0 	.word	0x1007a9d0
 23ff098:	00000028 	.word	0x00000028

023ff09c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23ff09c:	b509      	push	{r0, r3, lr}
 23ff09e:	4804      	ldr	r0, [pc, #16]	; (23ff0b0 <network_set_listen_timeout+0x14>)
 23ff0a0:	6800      	ldr	r0, [r0, #0]
 23ff0a2:	4b04      	ldr	r3, [pc, #16]	; (23ff0b4 <network_set_listen_timeout+0x18>)
 23ff0a4:	4403      	add	r3, r0
 23ff0a6:	681b      	ldr	r3, [r3, #0]
 23ff0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23ff0aa:	9302      	str	r3, [sp, #8]
 23ff0ac:	bd09      	pop	{r0, r3, pc}
 23ff0ae:	0000      	.short	0x0000
 23ff0b0:	1007a9d0 	.word	0x1007a9d0
 23ff0b4:	00000028 	.word	0x00000028

023ff0b8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23ff0b8:	b509      	push	{r0, r3, lr}
 23ff0ba:	4804      	ldr	r0, [pc, #16]	; (23ff0cc <network_get_listen_timeout+0x14>)
 23ff0bc:	6800      	ldr	r0, [r0, #0]
 23ff0be:	4b04      	ldr	r3, [pc, #16]	; (23ff0d0 <network_get_listen_timeout+0x18>)
 23ff0c0:	4403      	add	r3, r0
 23ff0c2:	681b      	ldr	r3, [r3, #0]
 23ff0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23ff0c6:	9302      	str	r3, [sp, #8]
 23ff0c8:	bd09      	pop	{r0, r3, pc}
 23ff0ca:	0000      	.short	0x0000
 23ff0cc:	1007a9d0 	.word	0x1007a9d0
 23ff0d0:	00000028 	.word	0x00000028

023ff0d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23ff0d4:	b509      	push	{r0, r3, lr}
 23ff0d6:	4804      	ldr	r0, [pc, #16]	; (23ff0e8 <network_is_on+0x14>)
 23ff0d8:	6800      	ldr	r0, [r0, #0]
 23ff0da:	4b04      	ldr	r3, [pc, #16]	; (23ff0ec <network_is_on+0x18>)
 23ff0dc:	4403      	add	r3, r0
 23ff0de:	681b      	ldr	r3, [r3, #0]
 23ff0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23ff0e2:	9302      	str	r3, [sp, #8]
 23ff0e4:	bd09      	pop	{r0, r3, pc}
 23ff0e6:	0000      	.short	0x0000
 23ff0e8:	1007a9d0 	.word	0x1007a9d0
 23ff0ec:	00000028 	.word	0x00000028

023ff0f0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23ff0f0:	b509      	push	{r0, r3, lr}
 23ff0f2:	4804      	ldr	r0, [pc, #16]	; (23ff104 <network_is_off+0x14>)
 23ff0f4:	6800      	ldr	r0, [r0, #0]
 23ff0f6:	4b04      	ldr	r3, [pc, #16]	; (23ff108 <network_is_off+0x18>)
 23ff0f8:	4403      	add	r3, r0
 23ff0fa:	681b      	ldr	r3, [r3, #0]
 23ff0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23ff0fe:	9302      	str	r3, [sp, #8]
 23ff100:	bd09      	pop	{r0, r3, pc}
 23ff102:	0000      	.short	0x0000
 23ff104:	1007a9d0 	.word	0x1007a9d0
 23ff108:	00000028 	.word	0x00000028

023ff10c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23ff10c:	b509      	push	{r0, r3, lr}
 23ff10e:	4804      	ldr	r0, [pc, #16]	; (23ff120 <malloc+0x14>)
 23ff110:	6800      	ldr	r0, [r0, #0]
 23ff112:	4b04      	ldr	r3, [pc, #16]	; (23ff124 <malloc+0x18>)
 23ff114:	4403      	add	r3, r0
 23ff116:	681b      	ldr	r3, [r3, #0]
 23ff118:	681b      	ldr	r3, [r3, #0]
 23ff11a:	9302      	str	r3, [sp, #8]
 23ff11c:	bd09      	pop	{r0, r3, pc}
 23ff11e:	0000      	.short	0x0000
 23ff120:	1007a9d0 	.word	0x1007a9d0
 23ff124:	00000004 	.word	0x00000004

023ff128 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23ff128:	b509      	push	{r0, r3, lr}
 23ff12a:	4804      	ldr	r0, [pc, #16]	; (23ff13c <free+0x14>)
 23ff12c:	6800      	ldr	r0, [r0, #0]
 23ff12e:	4b04      	ldr	r3, [pc, #16]	; (23ff140 <free+0x18>)
 23ff130:	4403      	add	r3, r0
 23ff132:	681b      	ldr	r3, [r3, #0]
 23ff134:	685b      	ldr	r3, [r3, #4]
 23ff136:	9302      	str	r3, [sp, #8]
 23ff138:	bd09      	pop	{r0, r3, pc}
 23ff13a:	0000      	.short	0x0000
 23ff13c:	1007a9d0 	.word	0x1007a9d0
 23ff140:	00000004 	.word	0x00000004

023ff144 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23ff144:	b509      	push	{r0, r3, lr}
 23ff146:	4804      	ldr	r0, [pc, #16]	; (23ff158 <__assert_func+0x14>)
 23ff148:	6800      	ldr	r0, [r0, #0]
 23ff14a:	4b04      	ldr	r3, [pc, #16]	; (23ff15c <__assert_func+0x18>)
 23ff14c:	4403      	add	r3, r0
 23ff14e:	681b      	ldr	r3, [r3, #0]
 23ff150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23ff152:	9302      	str	r3, [sp, #8]
 23ff154:	bd09      	pop	{r0, r3, pc}
 23ff156:	0000      	.short	0x0000
 23ff158:	1007a9d0 	.word	0x1007a9d0
 23ff15c:	00000004 	.word	0x00000004

023ff160 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23ff160:	b509      	push	{r0, r3, lr}
 23ff162:	4804      	ldr	r0, [pc, #16]	; (23ff174 <newlib_impure_ptr_callback+0x14>)
 23ff164:	6800      	ldr	r0, [r0, #0]
 23ff166:	4b04      	ldr	r3, [pc, #16]	; (23ff178 <newlib_impure_ptr_callback+0x18>)
 23ff168:	4403      	add	r3, r0
 23ff16a:	681b      	ldr	r3, [r3, #0]
 23ff16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23ff16e:	9302      	str	r3, [sp, #8]
 23ff170:	bd09      	pop	{r0, r3, pc}
 23ff172:	0000      	.short	0x0000
 23ff174:	1007a9d0 	.word	0x1007a9d0
 23ff178:	00000004 	.word	0x00000004

023ff17c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23ff17c:	2100      	movs	r1, #0
 23ff17e:	f7ff bec9 	b.w	23fef14 <system_delay_ms>
	...

023ff184 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23ff184:	2300      	movs	r3, #0
 23ff186:	4802      	ldr	r0, [pc, #8]	; (23ff190 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23ff188:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23ff18a:	f7ff bcbd 	b.w	23feb08 <os_mutex_recursive_create>
 23ff18e:	bf00      	nop
 23ff190:	1007ae8c 	.word	0x1007ae8c

023ff194 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23ff194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 23ff196:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 23ff198:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 23ff19a:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 23ff19e:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 23ff1a0:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 23ff1a4:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 23ff1a8:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 23ff1aa:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 23ff1ae:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 23ff1b2:	6843      	ldr	r3, [r0, #4]
 23ff1b4:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 23ff1b6:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23ff1b8:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 23ff1ba:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23ff1be:	f7ff feef 	bl	23fefa0 <spark_cloud_disconnect>
}
 23ff1c2:	b005      	add	sp, #20
 23ff1c4:	f85d fb04 	ldr.w	pc, [sp], #4

023ff1c8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff1c8:	2200      	movs	r2, #0
 23ff1ca:	6840      	ldr	r0, [r0, #4]
 23ff1cc:	4611      	mov	r1, r2
 23ff1ce:	f7ff bf57 	b.w	23ff080 <network_listening>

023ff1d2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff1d2:	2200      	movs	r2, #0
 23ff1d4:	6840      	ldr	r0, [r0, #4]
 23ff1d6:	4611      	mov	r1, r2
 23ff1d8:	f7ff bf6e 	b.w	23ff0b8 <network_get_listen_timeout>

023ff1dc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff1dc:	2200      	movs	r2, #0
 23ff1de:	6840      	ldr	r0, [r0, #4]
 23ff1e0:	f7ff bf5c 	b.w	23ff09c <network_set_listen_timeout>

023ff1e4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff1e4:	2200      	movs	r2, #0
 23ff1e6:	6840      	ldr	r0, [r0, #4]
 23ff1e8:	f081 0101 	eor.w	r1, r1, #1
 23ff1ec:	f7ff bf3a 	b.w	23ff064 <network_listen>

023ff1f0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff1f0:	2300      	movs	r3, #0
 23ff1f2:	6840      	ldr	r0, [r0, #4]
 23ff1f4:	461a      	mov	r2, r3
 23ff1f6:	4619      	mov	r1, r3
 23ff1f8:	f7ff bf26 	b.w	23ff048 <network_off>

023ff1fc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff1fc:	2300      	movs	r3, #0
 23ff1fe:	6840      	ldr	r0, [r0, #4]
 23ff200:	461a      	mov	r2, r3
 23ff202:	4619      	mov	r1, r3
 23ff204:	f7ff bf12 	b.w	23ff02c <network_on>

023ff208 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23ff208:	2200      	movs	r2, #0
 23ff20a:	6840      	ldr	r0, [r0, #4]
 23ff20c:	4611      	mov	r1, r2
 23ff20e:	f7ff beff 	b.w	23ff010 <network_ready>

023ff212 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff212:	2200      	movs	r2, #0
 23ff214:	6840      	ldr	r0, [r0, #4]
 23ff216:	4611      	mov	r1, r2
 23ff218:	f7ff bede 	b.w	23fefd8 <network_connecting>

023ff21c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff21c:	2200      	movs	r2, #0
 23ff21e:	2102      	movs	r1, #2
 23ff220:	6840      	ldr	r0, [r0, #4]
 23ff222:	f7ff bee7 	b.w	23feff4 <network_disconnect>

023ff226 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff226:	2300      	movs	r3, #0
 23ff228:	6840      	ldr	r0, [r0, #4]
 23ff22a:	461a      	mov	r2, r3
 23ff22c:	f7ff bec6 	b.w	23fefbc <network_connect>

023ff230 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23ff230:	2203      	movs	r2, #3
 23ff232:	4b02      	ldr	r3, [pc, #8]	; (23ff23c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23ff234:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23ff236:	4a02      	ldr	r2, [pc, #8]	; (23ff240 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23ff238:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23ff23a:	4770      	bx	lr
 23ff23c:	1007ae90 	.word	0x1007ae90
 23ff240:	023ffdf8 	.word	0x023ffdf8

023ff244 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23ff244:	4770      	bx	lr

023ff246 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23ff246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff248:	4606      	mov	r6, r0
 23ff24a:	4615      	mov	r5, r2
 23ff24c:	460c      	mov	r4, r1
 23ff24e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23ff250:	42bc      	cmp	r4, r7
 23ff252:	d006      	beq.n	23ff262 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23ff254:	6833      	ldr	r3, [r6, #0]
 23ff256:	4630      	mov	r0, r6
 23ff258:	689b      	ldr	r3, [r3, #8]
 23ff25a:	f814 1b01 	ldrb.w	r1, [r4], #1
 23ff25e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23ff260:	e7f6      	b.n	23ff250 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23ff262:	4628      	mov	r0, r5
 23ff264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff266 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23ff266:	2200      	movs	r2, #0
 23ff268:	7c00      	ldrb	r0, [r0, #16]
 23ff26a:	f7ff bcbd 	b.w	23febe8 <hal_i2c_write>

023ff26e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23ff26e:	2100      	movs	r1, #0
 23ff270:	7c00      	ldrb	r0, [r0, #16]
 23ff272:	f7ff bcc7 	b.w	23fec04 <hal_i2c_available>

023ff276 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23ff276:	2100      	movs	r1, #0
 23ff278:	7c00      	ldrb	r0, [r0, #16]
 23ff27a:	f7ff bcd1 	b.w	23fec20 <hal_i2c_read>

023ff27e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23ff27e:	2100      	movs	r1, #0
 23ff280:	7c00      	ldrb	r0, [r0, #16]
 23ff282:	f7ff bcdb 	b.w	23fec3c <hal_i2c_peek>

023ff286 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23ff286:	2100      	movs	r1, #0
 23ff288:	7c00      	ldrb	r0, [r0, #16]
 23ff28a:	f7ff bce5 	b.w	23fec58 <hal_i2c_flush>

023ff28e <_ZN7TwoWireD0Ev>:
 23ff28e:	b510      	push	{r4, lr}
 23ff290:	4604      	mov	r4, r0
 23ff292:	2114      	movs	r1, #20
 23ff294:	f7ff f99f 	bl	23fe5d6 <_ZdlPvj>
 23ff298:	4620      	mov	r0, r4
 23ff29a:	bd10      	pop	{r4, pc}

023ff29c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23ff29c:	b538      	push	{r3, r4, r5, lr}
 23ff29e:	4604      	mov	r4, r0
 23ff2a0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23ff2a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff2a6:	2200      	movs	r2, #0
 23ff2a8:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff2ac:	4b09      	ldr	r3, [pc, #36]	; (23ff2d4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23ff2ae:	4608      	mov	r0, r1
  _i2c = i2c;
 23ff2b0:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23ff2b2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23ff2b4:	4629      	mov	r1, r5
 23ff2b6:	f7ff fceb 	bl	23fec90 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23ff2ba:	30bf      	adds	r0, #191	; 0xbf
 23ff2bc:	d108      	bne.n	23ff2d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23ff2be:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23ff2c0:	07db      	lsls	r3, r3, #31
 23ff2c2:	d505      	bpl.n	23ff2d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23ff2c4:	6868      	ldr	r0, [r5, #4]
 23ff2c6:	f7ff ff2f 	bl	23ff128 <free>
    free(conf.tx_buffer);
 23ff2ca:	68e8      	ldr	r0, [r5, #12]
 23ff2cc:	f7ff ff2c 	bl	23ff128 <free>
}
 23ff2d0:	4620      	mov	r0, r4
 23ff2d2:	bd38      	pop	{r3, r4, r5, pc}
 23ff2d4:	023ffe34 	.word	0x023ffe34

023ff2d8 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23ff2d8:	2200      	movs	r2, #0
 23ff2da:	7c00      	ldrb	r0, [r0, #16]
 23ff2dc:	f7ff bc4c 	b.w	23feb78 <hal_i2c_set_speed>

023ff2e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23ff2e0:	2300      	movs	r3, #0
 23ff2e2:	7c00      	ldrb	r0, [r0, #16]
 23ff2e4:	461a      	mov	r2, r3
 23ff2e6:	4619      	mov	r1, r3
 23ff2e8:	f7ff bc54 	b.w	23feb94 <hal_i2c_begin>

023ff2ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23ff2ec:	2200      	movs	r2, #0
 23ff2ee:	7c00      	ldrb	r0, [r0, #16]
 23ff2f0:	f7ff bc5e 	b.w	23febb0 <hal_i2c_begin_transmission>

023ff2f4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23ff2f4:	2200      	movs	r2, #0
 23ff2f6:	7c00      	ldrb	r0, [r0, #16]
 23ff2f8:	f7ff bc68 	b.w	23febcc <hal_i2c_end_transmission>

023ff2fc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23ff2fc:	4770      	bx	lr

023ff2fe <_ZN9IPAddressD0Ev>:
 23ff2fe:	b510      	push	{r4, lr}
 23ff300:	4604      	mov	r4, r0
 23ff302:	2118      	movs	r1, #24
 23ff304:	f7ff f967 	bl	23fe5d6 <_ZdlPvj>
 23ff308:	4620      	mov	r0, r4
 23ff30a:	bd10      	pop	{r4, pc}

023ff30c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23ff30c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23ff30e:	7d03      	ldrb	r3, [r0, #20]
{
 23ff310:	460e      	mov	r6, r1
	if (address.v==6) {
 23ff312:	2b06      	cmp	r3, #6
 23ff314:	f04f 0400 	mov.w	r4, #0
{
 23ff318:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff31a:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23ff31e:	d012      	beq.n	23ff346 <_ZNK9IPAddress7printToER5Print+0x3a>
 23ff320:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23ff324:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23ff328:	220a      	movs	r2, #10
 23ff32a:	4630      	mov	r0, r6
 23ff32c:	f000 f943 	bl	23ff5b6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23ff330:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23ff332:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23ff334:	d019      	beq.n	23ff36a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23ff336:	2c00      	cmp	r4, #0
 23ff338:	d0f4      	beq.n	23ff324 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23ff33a:	212e      	movs	r1, #46	; 0x2e
 23ff33c:	4630      	mov	r0, r6
 23ff33e:	f000 f937 	bl	23ff5b0 <_ZN5Print5printEc>
 23ff342:	4404      	add	r4, r0
 23ff344:	e7ee      	b.n	23ff324 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff346:	232f      	movs	r3, #47	; 0x2f
 23ff348:	466a      	mov	r2, sp
 23ff34a:	4639      	mov	r1, r7
 23ff34c:	200a      	movs	r0, #10
		buf[0] = 0;
 23ff34e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23ff352:	f7ff fcab 	bl	23fecac <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23ff356:	4668      	mov	r0, sp
 23ff358:	f7ff f916 	bl	23fe588 <strlen>
 23ff35c:	6833      	ldr	r3, [r6, #0]
 23ff35e:	4602      	mov	r2, r0
 23ff360:	4669      	mov	r1, sp
 23ff362:	4630      	mov	r0, r6
 23ff364:	68db      	ldr	r3, [r3, #12]
 23ff366:	4798      	blx	r3
 23ff368:	4604      	mov	r4, r0
    }
    return n;
}
 23ff36a:	4620      	mov	r0, r4
 23ff36c:	b00d      	add	sp, #52	; 0x34
 23ff36e:	bdf0      	pop	{r4, r5, r6, r7, pc}

023ff370 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23ff370:	b510      	push	{r4, lr}
 23ff372:	4604      	mov	r4, r0
 23ff374:	4b04      	ldr	r3, [pc, #16]	; (23ff388 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23ff376:	2211      	movs	r2, #17
 23ff378:	2100      	movs	r1, #0
 23ff37a:	f840 3b04 	str.w	r3, [r0], #4
 23ff37e:	f000 fc8c 	bl	23ffc9a <memset>
}
 23ff382:	4620      	mov	r0, r4
 23ff384:	bd10      	pop	{r4, pc}
 23ff386:	bf00      	nop
 23ff388:	023ffe5c 	.word	0x023ffe5c

023ff38c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23ff38c:	4603      	mov	r3, r0
 23ff38e:	4a07      	ldr	r2, [pc, #28]	; (23ff3ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23ff390:	b510      	push	{r4, lr}
 23ff392:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23ff396:	f101 0210 	add.w	r2, r1, #16
 23ff39a:	f851 4b04 	ldr.w	r4, [r1], #4
 23ff39e:	4291      	cmp	r1, r2
 23ff3a0:	f843 4b04 	str.w	r4, [r3], #4
 23ff3a4:	d1f9      	bne.n	23ff39a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23ff3a6:	780a      	ldrb	r2, [r1, #0]
 23ff3a8:	701a      	strb	r2, [r3, #0]
}
 23ff3aa:	bd10      	pop	{r4, pc}
 23ff3ac:	023ffe5c 	.word	0x023ffe5c

023ff3b0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23ff3b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23ff3b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23ff3b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23ff3ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23ff3be:	2304      	movs	r3, #4
 23ff3c0:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23ff3c4:	6041      	str	r1, [r0, #4]
 23ff3c6:	7503      	strb	r3, [r0, #20]
}
 23ff3c8:	bd10      	pop	{r4, pc}
	...

023ff3cc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23ff3cc:	b507      	push	{r0, r1, r2, lr}
 23ff3ce:	4b06      	ldr	r3, [pc, #24]	; (23ff3e8 <_ZN9IPAddressC1EPKh+0x1c>)
 23ff3d0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23ff3d2:	78cb      	ldrb	r3, [r1, #3]
 23ff3d4:	9300      	str	r3, [sp, #0]
 23ff3d6:	788b      	ldrb	r3, [r1, #2]
 23ff3d8:	784a      	ldrb	r2, [r1, #1]
 23ff3da:	7809      	ldrb	r1, [r1, #0]
 23ff3dc:	f7ff ffe8 	bl	23ff3b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23ff3e0:	b003      	add	sp, #12
 23ff3e2:	f85d fb04 	ldr.w	pc, [sp], #4
 23ff3e6:	bf00      	nop
 23ff3e8:	023ffe5c 	.word	0x023ffe5c

023ff3ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23ff3ec:	4b01      	ldr	r3, [pc, #4]	; (23ff3f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23ff3ee:	4a02      	ldr	r2, [pc, #8]	; (23ff3f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23ff3f0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23ff3f2:	4770      	bx	lr
 23ff3f4:	1007ae98 	.word	0x1007ae98
 23ff3f8:	023ffe68 	.word	0x023ffe68

023ff3fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23ff3fc:	2300      	movs	r3, #0
 23ff3fe:	6840      	ldr	r0, [r0, #4]
 23ff400:	461a      	mov	r2, r3
 23ff402:	f7ff bddb 	b.w	23fefbc <network_connect>

023ff406 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23ff406:	2200      	movs	r2, #0
 23ff408:	2102      	movs	r1, #2
 23ff40a:	6840      	ldr	r0, [r0, #4]
 23ff40c:	f7ff bdf2 	b.w	23feff4 <network_disconnect>

023ff410 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23ff410:	2200      	movs	r2, #0
 23ff412:	6840      	ldr	r0, [r0, #4]
 23ff414:	4611      	mov	r1, r2
 23ff416:	f7ff bddf 	b.w	23fefd8 <network_connecting>

023ff41a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23ff41a:	2200      	movs	r2, #0
 23ff41c:	6840      	ldr	r0, [r0, #4]
 23ff41e:	4611      	mov	r1, r2
 23ff420:	f7ff bdf6 	b.w	23ff010 <network_ready>

023ff424 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23ff424:	2300      	movs	r3, #0
 23ff426:	6840      	ldr	r0, [r0, #4]
 23ff428:	461a      	mov	r2, r3
 23ff42a:	4619      	mov	r1, r3
 23ff42c:	f7ff bdfe 	b.w	23ff02c <network_on>

023ff430 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23ff430:	2300      	movs	r3, #0
 23ff432:	6840      	ldr	r0, [r0, #4]
 23ff434:	461a      	mov	r2, r3
 23ff436:	4619      	mov	r1, r3
 23ff438:	f7ff be06 	b.w	23ff048 <network_off>

023ff43c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23ff43c:	2100      	movs	r1, #0
 23ff43e:	6840      	ldr	r0, [r0, #4]
 23ff440:	f7ff be48 	b.w	23ff0d4 <network_is_on>

023ff444 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23ff444:	2100      	movs	r1, #0
 23ff446:	6840      	ldr	r0, [r0, #4]
 23ff448:	f7ff be52 	b.w	23ff0f0 <network_is_off>

023ff44c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23ff44c:	2200      	movs	r2, #0
 23ff44e:	6840      	ldr	r0, [r0, #4]
 23ff450:	f081 0101 	eor.w	r1, r1, #1
 23ff454:	f7ff be06 	b.w	23ff064 <network_listen>

023ff458 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23ff458:	2200      	movs	r2, #0
 23ff45a:	6840      	ldr	r0, [r0, #4]
 23ff45c:	f7ff be1e 	b.w	23ff09c <network_set_listen_timeout>

023ff460 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23ff460:	2200      	movs	r2, #0
 23ff462:	6840      	ldr	r0, [r0, #4]
 23ff464:	4611      	mov	r1, r2
 23ff466:	f7ff be27 	b.w	23ff0b8 <network_get_listen_timeout>

023ff46a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23ff46a:	2200      	movs	r2, #0
 23ff46c:	6840      	ldr	r0, [r0, #4]
 23ff46e:	4611      	mov	r1, r2
 23ff470:	f7ff be06 	b.w	23ff080 <network_listening>

023ff474 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23ff474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23ff478:	b095      	sub	sp, #84	; 0x54
 23ff47a:	4614      	mov	r4, r2
 23ff47c:	460d      	mov	r5, r1
 23ff47e:	4607      	mov	r7, r0
    IPAddress addr;
 23ff480:	f7ff ff76 	bl	23ff370 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23ff484:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23ff486:	221c      	movs	r2, #28
 23ff488:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23ff48a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23ff48c:	f000 fc05 	bl	23ffc9a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23ff490:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff492:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23ff494:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23ff496:	2100      	movs	r1, #0
 23ff498:	466b      	mov	r3, sp
 23ff49a:	aa0c      	add	r2, sp, #48	; 0x30
 23ff49c:	f7ff fc22 	bl	23fece4 <netdb_getaddrinfo>
    if (!r) {
 23ff4a0:	4604      	mov	r4, r0
 23ff4a2:	2800      	cmp	r0, #0
 23ff4a4:	d14b      	bne.n	23ff53e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff4a6:	4602      	mov	r2, r0
 23ff4a8:	2101      	movs	r1, #1
 23ff4aa:	6868      	ldr	r0, [r5, #4]
 23ff4ac:	f7ff fdb0 	bl	23ff010 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff4b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23ff4b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff4b4:	4622      	mov	r2, r4
 23ff4b6:	6868      	ldr	r0, [r5, #4]
 23ff4b8:	f7ff fdaa 	bl	23ff010 <network_ready>
        bool ok = false;
 23ff4bc:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23ff4be:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff4c0:	9e00      	ldr	r6, [sp, #0]
 23ff4c2:	2e00      	cmp	r6, #0
 23ff4c4:	d03b      	beq.n	23ff53e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23ff4c6:	2900      	cmp	r1, #0
 23ff4c8:	d139      	bne.n	23ff53e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23ff4ca:	6873      	ldr	r3, [r6, #4]
 23ff4cc:	2b02      	cmp	r3, #2
 23ff4ce:	d003      	beq.n	23ff4d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23ff4d0:	2b0a      	cmp	r3, #10
 23ff4d2:	d011      	beq.n	23ff4f8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23ff4d4:	69f6      	ldr	r6, [r6, #28]
 23ff4d6:	e7f4      	b.n	23ff4c2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23ff4d8:	f1b8 0f00 	cmp.w	r8, #0
 23ff4dc:	d0fa      	beq.n	23ff4d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23ff4de:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23ff4e0:	a806      	add	r0, sp, #24
 23ff4e2:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23ff4e4:	1d3c      	adds	r4, r7, #4
 23ff4e6:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23ff4e8:	f7ff ff70 	bl	23ff3cc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23ff4ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff4ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff4f0:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff4f2:	4641      	mov	r1, r8
 23ff4f4:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23ff4f6:	e7ed      	b.n	23ff4d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23ff4f8:	f1b9 0f00 	cmp.w	r9, #0
 23ff4fc:	d0ea      	beq.n	23ff4d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff4fe:	2210      	movs	r2, #16
 23ff500:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff502:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff504:	f000 fbc9 	bl	23ffc9a <memset>
                    a.v = 6;
 23ff508:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff50a:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff50c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff510:	f104 0308 	add.w	r3, r4, #8
 23ff514:	3418      	adds	r4, #24
 23ff516:	462a      	mov	r2, r5
 23ff518:	6818      	ldr	r0, [r3, #0]
 23ff51a:	6859      	ldr	r1, [r3, #4]
 23ff51c:	3308      	adds	r3, #8
 23ff51e:	c203      	stmia	r2!, {r0, r1}
 23ff520:	42a3      	cmp	r3, r4
 23ff522:	4615      	mov	r5, r2
 23ff524:	d1f7      	bne.n	23ff516 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff526:	a901      	add	r1, sp, #4
 23ff528:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff52a:	1d3c      	adds	r4, r7, #4
 23ff52c:	ad07      	add	r5, sp, #28
 23ff52e:	f7ff ff2d 	bl	23ff38c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff536:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff538:	4649      	mov	r1, r9
 23ff53a:	7023      	strb	r3, [r4, #0]
                    break;
 23ff53c:	e7ca      	b.n	23ff4d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff53e:	9800      	ldr	r0, [sp, #0]
 23ff540:	f7ff fbc2 	bl	23fecc8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff544:	4638      	mov	r0, r7
 23ff546:	b015      	add	sp, #84	; 0x54
 23ff548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff54c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff54c:	4b02      	ldr	r3, [pc, #8]	; (23ff558 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff54e:	4a03      	ldr	r2, [pc, #12]	; (23ff55c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff550:	601a      	str	r2, [r3, #0]
 23ff552:	2200      	movs	r2, #0
 23ff554:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff556:	4770      	bx	lr
 23ff558:	1007ae9c 	.word	0x1007ae9c
 23ff55c:	023ffe74 	.word	0x023ffe74

023ff560 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff562:	4606      	mov	r6, r0
 23ff564:	460d      	mov	r5, r1
  size_t n = 0;
 23ff566:	2400      	movs	r4, #0
 23ff568:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff56a:	42bd      	cmp	r5, r7
 23ff56c:	d00c      	beq.n	23ff588 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff56e:	6833      	ldr	r3, [r6, #0]
 23ff570:	4630      	mov	r0, r6
 23ff572:	689b      	ldr	r3, [r3, #8]
 23ff574:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff578:	4798      	blx	r3
     if (chunk>=0)
 23ff57a:	1e03      	subs	r3, r0, #0
 23ff57c:	db01      	blt.n	23ff582 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff57e:	441c      	add	r4, r3
  while (size--) {
 23ff580:	e7f3      	b.n	23ff56a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff582:	2c00      	cmp	r4, #0
 23ff584:	bf08      	it	eq
 23ff586:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff588:	4620      	mov	r0, r4
 23ff58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff58c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff58c:	b513      	push	{r0, r1, r4, lr}
 23ff58e:	4604      	mov	r4, r0
    }
 23ff590:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff592:	b159      	cbz	r1, 23ff5ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff594:	9101      	str	r1, [sp, #4]
 23ff596:	f7fe fff7 	bl	23fe588 <strlen>
 23ff59a:	4602      	mov	r2, r0
 23ff59c:	4620      	mov	r0, r4
 23ff59e:	6823      	ldr	r3, [r4, #0]
 23ff5a0:	9901      	ldr	r1, [sp, #4]
 23ff5a2:	68db      	ldr	r3, [r3, #12]
    }
 23ff5a4:	b002      	add	sp, #8
 23ff5a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff5aa:	4718      	bx	r3
    }
 23ff5ac:	b002      	add	sp, #8
 23ff5ae:	bd10      	pop	{r4, pc}

023ff5b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23ff5b0:	6803      	ldr	r3, [r0, #0]
 23ff5b2:	689b      	ldr	r3, [r3, #8]
 23ff5b4:	4718      	bx	r3

023ff5b6 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff5b6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff5b8:	2a01      	cmp	r2, #1
 23ff5ba:	bf98      	it	ls
 23ff5bc:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff5be:	b530      	push	{r4, r5, lr}
 23ff5c0:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff5c2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff5c6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff5c8:	460d      	mov	r5, r1
 23ff5ca:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff5ce:	fb01 5312 	mls	r3, r1, r2, r5
 23ff5d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff5d6:	2b09      	cmp	r3, #9
 23ff5d8:	bf94      	ite	ls
 23ff5da:	3330      	addls	r3, #48	; 0x30
 23ff5dc:	3337      	addhi	r3, #55	; 0x37
 23ff5de:	b2db      	uxtb	r3, r3
  } while(n);
 23ff5e0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff5e2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff5e6:	d9ef      	bls.n	23ff5c8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff5e8:	4621      	mov	r1, r4
 23ff5ea:	f7ff ffcf 	bl	23ff58c <_ZN5Print5writeEPKc>
}
 23ff5ee:	b00b      	add	sp, #44	; 0x2c
 23ff5f0:	bd30      	pop	{r4, r5, pc}
	...

023ff5f4 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23ff5f4:	2200      	movs	r2, #0
 23ff5f6:	4b01      	ldr	r3, [pc, #4]	; (23ff5fc <_GLOBAL__sub_I_RGB+0x8>)
 23ff5f8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff5fa:	4770      	bx	lr
 23ff5fc:	1007aea4 	.word	0x1007aea4

023ff600 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff600:	b510      	push	{r4, lr}
 23ff602:	4604      	mov	r4, r0
 23ff604:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff606:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff608:	f7ff fb7a 	bl	23fed00 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff60c:	2300      	movs	r3, #0
}
 23ff60e:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff610:	6063      	str	r3, [r4, #4]
}
 23ff612:	bd10      	pop	{r4, pc}

023ff614 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff614:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23ff616:	2000      	movs	r0, #0
 23ff618:	4b04      	ldr	r3, [pc, #16]	; (23ff62c <_GLOBAL__sub_I_System+0x18>)
 23ff61a:	601a      	str	r2, [r3, #0]
 23ff61c:	4b04      	ldr	r3, [pc, #16]	; (23ff630 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff61e:	4a05      	ldr	r2, [pc, #20]	; (23ff634 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff620:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff624:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff626:	f7ff bc67 	b.w	23feef8 <set_system_mode>
 23ff62a:	bf00      	nop
 23ff62c:	1007aec0 	.word	0x1007aec0
 23ff630:	1007aeb4 	.word	0x1007aeb4
 23ff634:	ffff0000 	.word	0xffff0000

023ff638 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff638:	4b02      	ldr	r3, [pc, #8]	; (23ff644 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff63a:	681a      	ldr	r2, [r3, #0]
 23ff63c:	4b02      	ldr	r3, [pc, #8]	; (23ff648 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff63e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff640:	4770      	bx	lr
 23ff642:	bf00      	nop
 23ff644:	1007a9d4 	.word	0x1007a9d4
 23ff648:	1007aec4 	.word	0x1007aec4

023ff64c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff64c:	4770      	bx	lr

023ff64e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff64e:	7441      	strb	r1, [r0, #17]
}
 23ff650:	4770      	bx	lr

023ff652 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff652:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff654:	7c00      	ldrb	r0, [r0, #16]
 23ff656:	f7ff fbc3 	bl	23fede0 <hal_usart_available_data_for_write>
}
 23ff65a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff65e:	bd08      	pop	{r3, pc}

023ff660 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff660:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff662:	7c00      	ldrb	r0, [r0, #16]
 23ff664:	f7ff fb76 	bl	23fed54 <hal_usart_available>
}
 23ff668:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff66c:	bd08      	pop	{r3, pc}

023ff66e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff66e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff670:	7c00      	ldrb	r0, [r0, #16]
 23ff672:	f7ff fb8b 	bl	23fed8c <hal_usart_peek>
}
 23ff676:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff67a:	bd08      	pop	{r3, pc}

023ff67c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff67c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff67e:	7c00      	ldrb	r0, [r0, #16]
 23ff680:	f7ff fb76 	bl	23fed70 <hal_usart_read>
}
 23ff684:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff688:	bd08      	pop	{r3, pc}

023ff68a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff68a:	7c00      	ldrb	r0, [r0, #16]
 23ff68c:	f7ff bb8c 	b.w	23feda8 <hal_usart_flush>

023ff690 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff690:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff692:	7c45      	ldrb	r5, [r0, #17]
{
 23ff694:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff696:	b12d      	cbz	r5, 23ff6a4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff698:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff69a:	b003      	add	sp, #12
 23ff69c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff6a0:	f7ff bb4a 	b.w	23fed38 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff6a4:	7c00      	ldrb	r0, [r0, #16]
 23ff6a6:	9101      	str	r1, [sp, #4]
 23ff6a8:	f7ff fb9a 	bl	23fede0 <hal_usart_available_data_for_write>
 23ff6ac:	2800      	cmp	r0, #0
 23ff6ae:	9901      	ldr	r1, [sp, #4]
 23ff6b0:	dcf2      	bgt.n	23ff698 <_ZN11USARTSerial5writeEh+0x8>
}
 23ff6b2:	4628      	mov	r0, r5
 23ff6b4:	b003      	add	sp, #12
 23ff6b6:	bd30      	pop	{r4, r5, pc}

023ff6b8 <_ZN11USARTSerialD0Ev>:
 23ff6b8:	b510      	push	{r4, lr}
 23ff6ba:	4604      	mov	r4, r0
 23ff6bc:	2114      	movs	r1, #20
 23ff6be:	f7fe ff8a 	bl	23fe5d6 <_ZdlPvj>
 23ff6c2:	4620      	mov	r0, r4
 23ff6c4:	bd10      	pop	{r4, pc}
	...

023ff6c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff6c8:	b510      	push	{r4, lr}
 23ff6ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff6ce:	4604      	mov	r4, r0
 23ff6d0:	4608      	mov	r0, r1
 23ff6d2:	4611      	mov	r1, r2
 23ff6d4:	2200      	movs	r2, #0
 23ff6d6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff6da:	4b04      	ldr	r3, [pc, #16]	; (23ff6ec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff6dc:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff6de:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff6e0:	2301      	movs	r3, #1
 23ff6e2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff6e4:	f7ff fb98 	bl	23fee18 <hal_usart_init_ex>
}
 23ff6e8:	4620      	mov	r0, r4
 23ff6ea:	bd10      	pop	{r4, pc}
 23ff6ec:	023ffecc 	.word	0x023ffecc

023ff6f0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23ff6f0:	2300      	movs	r3, #0
 23ff6f2:	7c00      	ldrb	r0, [r0, #16]
 23ff6f4:	f7ff bb82 	b.w	23fedfc <hal_usart_begin_config>

023ff6f8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23ff6f8:	2200      	movs	r2, #0
 23ff6fa:	f7ff bff9 	b.w	23ff6f0 <_ZN11USARTSerial5beginEmm>

023ff6fe <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff6fe:	7c00      	ldrb	r0, [r0, #16]
 23ff700:	f7ff bb60 	b.w	23fedc4 <hal_usart_is_enabled>

023ff704 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff704:	7441      	strb	r1, [r0, #17]
}
 23ff706:	4770      	bx	lr

023ff708 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff708:	4770      	bx	lr

023ff70a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff70a:	4770      	bx	lr

023ff70c <_ZN9USBSerial4readEv>:
{
 23ff70c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff70e:	2100      	movs	r1, #0
 23ff710:	7c00      	ldrb	r0, [r0, #16]
 23ff712:	f7ff fbc7 	bl	23feea4 <HAL_USB_USART_Receive_Data>
}
 23ff716:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff71a:	bd08      	pop	{r3, pc}

023ff71c <_ZN9USBSerial4peekEv>:
{
 23ff71c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff71e:	2101      	movs	r1, #1
 23ff720:	7c00      	ldrb	r0, [r0, #16]
 23ff722:	f7ff fbbf 	bl	23feea4 <HAL_USB_USART_Receive_Data>
}
 23ff726:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff72a:	bd08      	pop	{r3, pc}

023ff72c <_ZN9USBSerial17availableForWriteEv>:
{
 23ff72c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff72e:	7c00      	ldrb	r0, [r0, #16]
 23ff730:	f7ff fbaa 	bl	23fee88 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff734:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff738:	bd08      	pop	{r3, pc}

023ff73a <_ZN9USBSerial9availableEv>:
{
 23ff73a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff73c:	7c00      	ldrb	r0, [r0, #16]
 23ff73e:	f7ff fb95 	bl	23fee6c <HAL_USB_USART_Available_Data>
}
 23ff742:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff746:	bd08      	pop	{r3, pc}

023ff748 <_ZN9USBSerial5writeEh>:
{
 23ff748:	b513      	push	{r0, r1, r4, lr}
 23ff74a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff74c:	7c00      	ldrb	r0, [r0, #16]
{
 23ff74e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff750:	f7ff fb9a 	bl	23fee88 <HAL_USB_USART_Available_Data_For_Write>
 23ff754:	2800      	cmp	r0, #0
 23ff756:	9901      	ldr	r1, [sp, #4]
 23ff758:	dc01      	bgt.n	23ff75e <_ZN9USBSerial5writeEh+0x16>
 23ff75a:	7c60      	ldrb	r0, [r4, #17]
 23ff75c:	b120      	cbz	r0, 23ff768 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff75e:	7c20      	ldrb	r0, [r4, #16]
 23ff760:	f7ff fbae 	bl	23feec0 <HAL_USB_USART_Send_Data>
 23ff764:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff768:	b002      	add	sp, #8
 23ff76a:	bd10      	pop	{r4, pc}

023ff76c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff76c:	7c00      	ldrb	r0, [r0, #16]
 23ff76e:	f7ff bbb5 	b.w	23feedc <HAL_USB_USART_Flush_Data>

023ff772 <_ZN9USBSerialD0Ev>:
 23ff772:	b510      	push	{r4, lr}
 23ff774:	4604      	mov	r4, r0
 23ff776:	2114      	movs	r1, #20
 23ff778:	f7fe ff2d 	bl	23fe5d6 <_ZdlPvj>
 23ff77c:	4620      	mov	r0, r4
 23ff77e:	bd10      	pop	{r4, pc}

023ff780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff780:	b510      	push	{r4, lr}
 23ff782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff786:	4604      	mov	r4, r0
 23ff788:	4608      	mov	r0, r1
 23ff78a:	2100      	movs	r1, #0
 23ff78c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff790:	4b04      	ldr	r3, [pc, #16]	; (23ff7a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff792:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff794:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff796:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff798:	4611      	mov	r1, r2
  _blocking = true;
 23ff79a:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff79c:	f7ff fb4a 	bl	23fee34 <HAL_USB_USART_Init>
}
 23ff7a0:	4620      	mov	r0, r4
 23ff7a2:	bd10      	pop	{r4, pc}
 23ff7a4:	023ffefc 	.word	0x023ffefc

023ff7a8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23ff7a8:	2200      	movs	r2, #0
 23ff7aa:	7c00      	ldrb	r0, [r0, #16]
 23ff7ac:	f7ff bb50 	b.w	23fee50 <HAL_USB_USART_Begin>

023ff7b0 <_Z19acquireSerialBufferv>:
{
 23ff7b0:	b510      	push	{r4, lr}
 23ff7b2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff7b4:	2214      	movs	r2, #20
 23ff7b6:	2100      	movs	r1, #0
 23ff7b8:	f000 fa6f 	bl	23ffc9a <memset>
}
 23ff7bc:	4620      	mov	r0, r4
 23ff7be:	bd10      	pop	{r4, pc}

023ff7c0 <_Z16_fetch_usbserialv>:
{
 23ff7c0:	b510      	push	{r4, lr}
 23ff7c2:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff7c4:	a803      	add	r0, sp, #12
 23ff7c6:	f7ff fff3 	bl	23ff7b0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff7ca:	4c0c      	ldr	r4, [pc, #48]	; (23ff7fc <_Z16_fetch_usbserialv+0x3c>)
 23ff7cc:	e8d4 1f8f 	ldab	r1, [r4]
 23ff7d0:	f011 0101 	ands.w	r1, r1, #1
 23ff7d4:	d10f      	bne.n	23ff7f6 <_Z16_fetch_usbserialv+0x36>
 23ff7d6:	4620      	mov	r0, r4
 23ff7d8:	9101      	str	r1, [sp, #4]
 23ff7da:	f7fe fefe 	bl	23fe5da <__cxa_guard_acquire>
 23ff7de:	9901      	ldr	r1, [sp, #4]
 23ff7e0:	b148      	cbz	r0, 23ff7f6 <_Z16_fetch_usbserialv+0x36>
 23ff7e2:	aa03      	add	r2, sp, #12
 23ff7e4:	4806      	ldr	r0, [pc, #24]	; (23ff800 <_Z16_fetch_usbserialv+0x40>)
 23ff7e6:	f7ff ffcb 	bl	23ff780 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff7ea:	4620      	mov	r0, r4
 23ff7ec:	f7fe fefa 	bl	23fe5e4 <__cxa_guard_release>
 23ff7f0:	4804      	ldr	r0, [pc, #16]	; (23ff804 <_Z16_fetch_usbserialv+0x44>)
 23ff7f2:	f000 fa3f 	bl	23ffc74 <atexit>
	return _usbserial;
}
 23ff7f6:	4802      	ldr	r0, [pc, #8]	; (23ff800 <_Z16_fetch_usbserialv+0x40>)
 23ff7f8:	b008      	add	sp, #32
 23ff7fa:	bd10      	pop	{r4, pc}
 23ff7fc:	1007aec8 	.word	0x1007aec8
 23ff800:	1007aecc 	.word	0x1007aecc
 23ff804:	023ff709 	.word	0x023ff709

023ff808 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff808:	2200      	movs	r2, #0
 23ff80a:	6840      	ldr	r0, [r0, #4]
 23ff80c:	4611      	mov	r1, r2
 23ff80e:	f7ff bbff 	b.w	23ff010 <network_ready>

023ff812 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff812:	2200      	movs	r2, #0
 23ff814:	6840      	ldr	r0, [r0, #4]
 23ff816:	4611      	mov	r1, r2
 23ff818:	f7ff bc32 	b.w	23ff080 <network_listening>

023ff81c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff81c:	2200      	movs	r2, #0
 23ff81e:	6840      	ldr	r0, [r0, #4]
 23ff820:	4611      	mov	r1, r2
 23ff822:	f7ff bc49 	b.w	23ff0b8 <network_get_listen_timeout>

023ff826 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff826:	2200      	movs	r2, #0
 23ff828:	6840      	ldr	r0, [r0, #4]
 23ff82a:	f7ff bc37 	b.w	23ff09c <network_set_listen_timeout>

023ff82e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff82e:	2200      	movs	r2, #0
 23ff830:	6840      	ldr	r0, [r0, #4]
 23ff832:	f081 0101 	eor.w	r1, r1, #1
 23ff836:	f7ff bc15 	b.w	23ff064 <network_listen>

023ff83a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff83a:	2300      	movs	r3, #0
 23ff83c:	6840      	ldr	r0, [r0, #4]
 23ff83e:	461a      	mov	r2, r3
 23ff840:	4619      	mov	r1, r3
 23ff842:	f7ff bc01 	b.w	23ff048 <network_off>

023ff846 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff846:	2300      	movs	r3, #0
 23ff848:	6840      	ldr	r0, [r0, #4]
 23ff84a:	461a      	mov	r2, r3
 23ff84c:	4619      	mov	r1, r3
 23ff84e:	f7ff bbed 	b.w	23ff02c <network_on>

023ff852 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff852:	2200      	movs	r2, #0
 23ff854:	6840      	ldr	r0, [r0, #4]
 23ff856:	4611      	mov	r1, r2
 23ff858:	f7ff bbbe 	b.w	23fefd8 <network_connecting>

023ff85c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff85c:	2200      	movs	r2, #0
 23ff85e:	2102      	movs	r1, #2
 23ff860:	6840      	ldr	r0, [r0, #4]
 23ff862:	f7ff bbc7 	b.w	23feff4 <network_disconnect>

023ff866 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff866:	2300      	movs	r3, #0
 23ff868:	6840      	ldr	r0, [r0, #4]
 23ff86a:	461a      	mov	r2, r3
 23ff86c:	f7ff bba6 	b.w	23fefbc <network_connect>

023ff870 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff870:	2204      	movs	r2, #4
 23ff872:	4b02      	ldr	r3, [pc, #8]	; (23ff87c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff874:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff876:	4a02      	ldr	r2, [pc, #8]	; (23ff880 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff878:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff87a:	4770      	bx	lr
 23ff87c:	1007aee0 	.word	0x1007aee0
 23ff880:	023fff2c 	.word	0x023fff2c

023ff884 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff884:	4b01      	ldr	r3, [pc, #4]	; (23ff88c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff886:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff888:	4770      	bx	lr
 23ff88a:	bf00      	nop
 23ff88c:	1007a9d8 	.word	0x1007a9d8

023ff890 <serialEventRun>:
{
 23ff890:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff892:	4b0f      	ldr	r3, [pc, #60]	; (23ff8d0 <serialEventRun+0x40>)
 23ff894:	b143      	cbz	r3, 23ff8a8 <serialEventRun+0x18>
 23ff896:	f7ff ff93 	bl	23ff7c0 <_Z16_fetch_usbserialv>
 23ff89a:	6803      	ldr	r3, [r0, #0]
 23ff89c:	691b      	ldr	r3, [r3, #16]
 23ff89e:	4798      	blx	r3
 23ff8a0:	2800      	cmp	r0, #0
 23ff8a2:	dd01      	ble.n	23ff8a8 <serialEventRun+0x18>
        serialEvent();
 23ff8a4:	e000      	b.n	23ff8a8 <serialEventRun+0x18>
 23ff8a6:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff8a8:	4b0a      	ldr	r3, [pc, #40]	; (23ff8d4 <serialEventRun+0x44>)
 23ff8aa:	b143      	cbz	r3, 23ff8be <serialEventRun+0x2e>
 23ff8ac:	f000 f950 	bl	23ffb50 <_Z22__fetch_global_Serial1v>
 23ff8b0:	6803      	ldr	r3, [r0, #0]
 23ff8b2:	691b      	ldr	r3, [r3, #16]
 23ff8b4:	4798      	blx	r3
 23ff8b6:	2800      	cmp	r0, #0
 23ff8b8:	dd01      	ble.n	23ff8be <serialEventRun+0x2e>
        serialEvent1();
 23ff8ba:	e000      	b.n	23ff8be <serialEventRun+0x2e>
 23ff8bc:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff8be:	4b06      	ldr	r3, [pc, #24]	; (23ff8d8 <serialEventRun+0x48>)
 23ff8c0:	b10b      	cbz	r3, 23ff8c6 <serialEventRun+0x36>
 23ff8c2:	f000 f98b 	bl	23ffbdc <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff8c6:	4b05      	ldr	r3, [pc, #20]	; (23ff8dc <serialEventRun+0x4c>)
 23ff8c8:	b10b      	cbz	r3, 23ff8ce <serialEventRun+0x3e>
 23ff8ca:	f000 f9bd 	bl	23ffc48 <_Z15serialEventRun3v>
}
 23ff8ce:	bd08      	pop	{r3, pc}
	...

023ff8e0 <_post_loop>:
{
 23ff8e0:	b508      	push	{r3, lr}
	serialEventRun();
 23ff8e2:	f7ff ffd5 	bl	23ff890 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff8e6:	f7ff f92b 	bl	23feb40 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff8ea:	4b01      	ldr	r3, [pc, #4]	; (23ff8f0 <_post_loop+0x10>)
 23ff8ec:	6018      	str	r0, [r3, #0]
}
 23ff8ee:	bd08      	pop	{r3, pc}
 23ff8f0:	1007aef0 	.word	0x1007aef0

023ff8f4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff8f4:	4805      	ldr	r0, [pc, #20]	; (23ff90c <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff8f6:	4a06      	ldr	r2, [pc, #24]	; (23ff910 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff8f8:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff8fa:	1a12      	subs	r2, r2, r0
 23ff8fc:	4905      	ldr	r1, [pc, #20]	; (23ff914 <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff8fe:	f000 f9bf 	bl	23ffc80 <memcpy>
    __backup_sram_signature = signature;
 23ff902:	4b05      	ldr	r3, [pc, #20]	; (23ff918 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff904:	4a05      	ldr	r2, [pc, #20]	; (23ff91c <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff906:	601a      	str	r2, [r3, #0]
}
 23ff908:	bd08      	pop	{r3, pc}
 23ff90a:	bf00      	nop
 23ff90c:	1007b400 	.word	0x1007b400
 23ff910:	1007b404 	.word	0x1007b404
 23ff914:	085ffb70 	.word	0x085ffb70
 23ff918:	1007b400 	.word	0x1007b400
 23ff91c:	9a271c1e 	.word	0x9a271c1e

023ff920 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff920:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff922:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff924:	461a      	mov	r2, r3
 23ff926:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff92a:	9300      	str	r3, [sp, #0]
 23ff92c:	f7ff fb1c 	bl	23fef68 <system_ctrl_set_result>
}
 23ff930:	b003      	add	sp, #12
 23ff932:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff938 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff938:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff93a:	8843      	ldrh	r3, [r0, #2]
 23ff93c:	2b0a      	cmp	r3, #10
 23ff93e:	d008      	beq.n	23ff952 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff940:	2b50      	cmp	r3, #80	; 0x50
 23ff942:	d10b      	bne.n	23ff95c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff944:	4b09      	ldr	r3, [pc, #36]	; (23ff96c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff946:	681b      	ldr	r3, [r3, #0]
 23ff948:	b14b      	cbz	r3, 23ff95e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff94a:	b003      	add	sp, #12
 23ff94c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff950:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff952:	f7ff ffe5 	bl	23ff920 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff956:	b003      	add	sp, #12
 23ff958:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff95c:	2300      	movs	r3, #0
 23ff95e:	461a      	mov	r2, r3
 23ff960:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff964:	9300      	str	r3, [sp, #0]
 23ff966:	f7ff faff 	bl	23fef68 <system_ctrl_set_result>
}
 23ff96a:	e7f4      	b.n	23ff956 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff96c:	1007aeec 	.word	0x1007aeec

023ff970 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff970:	2100      	movs	r1, #0
{
 23ff972:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff974:	4811      	ldr	r0, [pc, #68]	; (23ff9bc <module_user_init_hook+0x4c>)
 23ff976:	f7ff fbf3 	bl	23ff160 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff97a:	4b11      	ldr	r3, [pc, #68]	; (23ff9c0 <module_user_init_hook+0x50>)
 23ff97c:	681a      	ldr	r2, [r3, #0]
 23ff97e:	4b11      	ldr	r3, [pc, #68]	; (23ff9c4 <module_user_init_hook+0x54>)
 23ff980:	429a      	cmp	r2, r3
 23ff982:	bf0c      	ite	eq
 23ff984:	2201      	moveq	r2, #1
 23ff986:	2200      	movne	r2, #0
 23ff988:	4b0f      	ldr	r3, [pc, #60]	; (23ff9c8 <module_user_init_hook+0x58>)
 23ff98a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff98c:	d001      	beq.n	23ff992 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff98e:	f7ff ffb1 	bl	23ff8f4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff992:	f7ff f8c7 	bl	23feb24 <HAL_RNG_GetRandomNumber>
 23ff996:	4604      	mov	r4, r0
    srand(seed);
 23ff998:	f000 f988 	bl	23ffcac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff99c:	4b0b      	ldr	r3, [pc, #44]	; (23ff9cc <module_user_init_hook+0x5c>)
 23ff99e:	b113      	cbz	r3, 23ff9a6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff9a0:	4620      	mov	r0, r4
 23ff9a2:	e000      	b.n	23ff9a6 <module_user_init_hook+0x36>
 23ff9a4:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff9a6:	2100      	movs	r1, #0
 23ff9a8:	4808      	ldr	r0, [pc, #32]	; (23ff9cc <module_user_init_hook+0x5c>)
 23ff9aa:	f7ff faeb 	bl	23fef84 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff9ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff9b2:	2100      	movs	r1, #0
 23ff9b4:	4806      	ldr	r0, [pc, #24]	; (23ff9d0 <module_user_init_hook+0x60>)
 23ff9b6:	f7ff bac9 	b.w	23fef4c <system_ctrl_set_app_request_handler>
 23ff9ba:	bf00      	nop
 23ff9bc:	023ff885 	.word	0x023ff885
 23ff9c0:	1007b400 	.word	0x1007b400
 23ff9c4:	9a271c1e 	.word	0x9a271c1e
 23ff9c8:	1007aee8 	.word	0x1007aee8
 23ff9cc:	00000000 	.word	0x00000000
 23ff9d0:	023ff939 	.word	0x023ff939

023ff9d4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff9d4:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff9d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff9d8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff9da:	d902      	bls.n	23ff9e2 <pinAvailable+0xe>
    return false;
 23ff9dc:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff9de:	b003      	add	sp, #12
 23ff9e0:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff9e2:	f1a0 030f 	sub.w	r3, r0, #15
 23ff9e6:	2b02      	cmp	r3, #2
 23ff9e8:	d90b      	bls.n	23ffa02 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff9ea:	2801      	cmp	r0, #1
 23ff9ec:	d821      	bhi.n	23ffa32 <pinAvailable+0x5e>
 23ff9ee:	f000 f85b 	bl	23ffaa8 <_Z19__fetch_global_Wirev>
 23ff9f2:	2100      	movs	r1, #0
 23ff9f4:	7c00      	ldrb	r0, [r0, #16]
 23ff9f6:	f7ff f93d 	bl	23fec74 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff9fa:	f080 0001 	eor.w	r0, r0, #1
 23ff9fe:	b2c0      	uxtb	r0, r0
 23ffa00:	e7ed      	b.n	23ff9de <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ffa02:	4d11      	ldr	r5, [pc, #68]	; (23ffa48 <pinAvailable+0x74>)
 23ffa04:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa08:	f011 0101 	ands.w	r1, r1, #1
 23ffa0c:	d10b      	bne.n	23ffa26 <pinAvailable+0x52>
 23ffa0e:	4628      	mov	r0, r5
 23ffa10:	9101      	str	r1, [sp, #4]
 23ffa12:	f7fe fde2 	bl	23fe5da <__cxa_guard_acquire>
 23ffa16:	9901      	ldr	r1, [sp, #4]
 23ffa18:	b128      	cbz	r0, 23ffa26 <pinAvailable+0x52>
 23ffa1a:	480c      	ldr	r0, [pc, #48]	; (23ffa4c <pinAvailable+0x78>)
 23ffa1c:	f7ff fdf0 	bl	23ff600 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ffa20:	4628      	mov	r0, r5
 23ffa22:	f7fe fddf 	bl	23fe5e4 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ffa26:	4b09      	ldr	r3, [pc, #36]	; (23ffa4c <pinAvailable+0x78>)
 23ffa28:	7818      	ldrb	r0, [r3, #0]
 23ffa2a:	f7ff f977 	bl	23fed1c <hal_spi_is_enabled>
 23ffa2e:	2800      	cmp	r0, #0
 23ffa30:	d1d4      	bne.n	23ff9dc <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ffa32:	3c08      	subs	r4, #8
 23ffa34:	2c01      	cmp	r4, #1
 23ffa36:	d805      	bhi.n	23ffa44 <pinAvailable+0x70>
 23ffa38:	f000 f88a 	bl	23ffb50 <_Z22__fetch_global_Serial1v>
 23ffa3c:	7c00      	ldrb	r0, [r0, #16]
 23ffa3e:	f7ff f9c1 	bl	23fedc4 <hal_usart_is_enabled>
 23ffa42:	e7da      	b.n	23ff9fa <pinAvailable+0x26>
  return true; // 'pin' is available
 23ffa44:	2001      	movs	r0, #1
 23ffa46:	e7ca      	b.n	23ff9de <pinAvailable+0xa>
 23ffa48:	1007ae70 	.word	0x1007ae70
 23ffa4c:	1007ae74 	.word	0x1007ae74

023ffa50 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ffa50:	281b      	cmp	r0, #27
{
 23ffa52:	b538      	push	{r3, r4, r5, lr}
 23ffa54:	4604      	mov	r4, r0
 23ffa56:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ffa58:	d80a      	bhi.n	23ffa70 <pinMode+0x20>
 23ffa5a:	29ff      	cmp	r1, #255	; 0xff
 23ffa5c:	d008      	beq.n	23ffa70 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ffa5e:	f7ff ffb9 	bl	23ff9d4 <pinAvailable>
 23ffa62:	b128      	cbz	r0, 23ffa70 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ffa64:	4629      	mov	r1, r5
 23ffa66:	4620      	mov	r0, r4
}
 23ffa68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ffa6c:	f7ff b876 	b.w	23feb5c <hal_gpio_mode>
}
 23ffa70:	bd38      	pop	{r3, r4, r5, pc}

023ffa72 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffa72:	4770      	bx	lr

023ffa74 <_Z17acquireWireBufferv>:
{
 23ffa74:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ffa76:	4b0a      	ldr	r3, [pc, #40]	; (23ffaa0 <_Z17acquireWireBufferv+0x2c>)
{
 23ffa78:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ffa7a:	6003      	str	r3, [r0, #0]
 23ffa7c:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa7e:	4909      	ldr	r1, [pc, #36]	; (23ffaa4 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ffa80:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa82:	2020      	movs	r0, #32
 23ffa84:	f000 f8f4 	bl	23ffc70 <_ZnajRKSt9nothrow_t>
	};
 23ffa88:	2520      	movs	r5, #32
 23ffa8a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa8c:	4905      	ldr	r1, [pc, #20]	; (23ffaa4 <_Z17acquireWireBufferv+0x30>)
 23ffa8e:	4628      	mov	r0, r5
	};
 23ffa90:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ffa92:	f000 f8ed 	bl	23ffc70 <_ZnajRKSt9nothrow_t>
	};
 23ffa96:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ffa9a:	4620      	mov	r0, r4
 23ffa9c:	bd38      	pop	{r3, r4, r5, pc}
 23ffa9e:	bf00      	nop
 23ffaa0:	00010018 	.word	0x00010018
 23ffaa4:	023fff60 	.word	0x023fff60

023ffaa8 <_Z19__fetch_global_Wirev>:
{
 23ffaa8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffaaa:	4d0e      	ldr	r5, [pc, #56]	; (23ffae4 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ffaac:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ffaae:	e8d5 1f8f 	ldab	r1, [r5]
 23ffab2:	f011 0401 	ands.w	r4, r1, #1
 23ffab6:	d111      	bne.n	23ffadc <_Z19__fetch_global_Wirev+0x34>
 23ffab8:	4628      	mov	r0, r5
 23ffaba:	f7fe fd8e 	bl	23fe5da <__cxa_guard_acquire>
 23ffabe:	b168      	cbz	r0, 23ffadc <_Z19__fetch_global_Wirev+0x34>
 23ffac0:	4668      	mov	r0, sp
 23ffac2:	f7ff ffd7 	bl	23ffa74 <_Z17acquireWireBufferv>
 23ffac6:	466a      	mov	r2, sp
 23ffac8:	4621      	mov	r1, r4
 23ffaca:	4807      	ldr	r0, [pc, #28]	; (23ffae8 <_Z19__fetch_global_Wirev+0x40>)
 23ffacc:	f7ff fbe6 	bl	23ff29c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ffad0:	4628      	mov	r0, r5
 23ffad2:	f7fe fd87 	bl	23fe5e4 <__cxa_guard_release>
 23ffad6:	4805      	ldr	r0, [pc, #20]	; (23ffaec <_Z19__fetch_global_Wirev+0x44>)
 23ffad8:	f000 f8cc 	bl	23ffc74 <atexit>
	return wire;
}
 23ffadc:	4802      	ldr	r0, [pc, #8]	; (23ffae8 <_Z19__fetch_global_Wirev+0x40>)
 23ffade:	b007      	add	sp, #28
 23ffae0:	bd30      	pop	{r4, r5, pc}
 23ffae2:	bf00      	nop
 23ffae4:	1007aef4 	.word	0x1007aef4
 23ffae8:	1007aef8 	.word	0x1007aef8
 23ffaec:	023ffa73 	.word	0x023ffa73

023ffaf0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffaf0:	4770      	bx	lr
	...

023ffaf4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffaf4:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ffaf6:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffaf8:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ffafa:	462a      	mov	r2, r5
 23ffafc:	2100      	movs	r1, #0
 23ffafe:	f000 f8cc 	bl	23ffc9a <memset>
 23ffb02:	8025      	strh	r5, [r4, #0]
 23ffb04:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffb06:	4907      	ldr	r1, [pc, #28]	; (23ffb24 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ffb08:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ffb0a:	8125      	strh	r5, [r4, #8]
 23ffb0c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffb0e:	f000 f8af 	bl	23ffc70 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffb12:	4904      	ldr	r1, [pc, #16]	; (23ffb24 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ffb14:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffb16:	4628      	mov	r0, r5
 23ffb18:	f000 f8aa 	bl	23ffc70 <_ZnajRKSt9nothrow_t>
    };
 23ffb1c:	60e0      	str	r0, [r4, #12]
}
 23ffb1e:	4620      	mov	r0, r4
 23ffb20:	bd38      	pop	{r3, r4, r5, pc}
 23ffb22:	bf00      	nop
 23ffb24:	023fff60 	.word	0x023fff60

023ffb28 <__tcf_2>:
 23ffb28:	4770      	bx	lr

023ffb2a <__tcf_1>:
 23ffb2a:	4770      	bx	lr

023ffb2c <_Z20acquireSerial1Bufferv>:
{
 23ffb2c:	b510      	push	{r4, lr}
 23ffb2e:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ffb30:	f7ff ffe0 	bl	23ffaf4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ffb34:	4620      	mov	r0, r4
 23ffb36:	bd10      	pop	{r4, pc}

023ffb38 <_Z20acquireSerial2Bufferv>:
 23ffb38:	b510      	push	{r4, lr}
 23ffb3a:	4604      	mov	r4, r0
 23ffb3c:	f7ff ffda 	bl	23ffaf4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb40:	4620      	mov	r0, r4
 23ffb42:	bd10      	pop	{r4, pc}

023ffb44 <_Z20acquireSerial3Bufferv>:
 23ffb44:	b510      	push	{r4, lr}
 23ffb46:	4604      	mov	r4, r0
 23ffb48:	f7ff ffd4 	bl	23ffaf4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffb4c:	4620      	mov	r0, r4
 23ffb4e:	bd10      	pop	{r4, pc}

023ffb50 <_Z22__fetch_global_Serial1v>:
{
 23ffb50:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb52:	4d0e      	ldr	r5, [pc, #56]	; (23ffb8c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffb54:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffb56:	e8d5 1f8f 	ldab	r1, [r5]
 23ffb5a:	f011 0401 	ands.w	r4, r1, #1
 23ffb5e:	d111      	bne.n	23ffb84 <_Z22__fetch_global_Serial1v+0x34>
 23ffb60:	4628      	mov	r0, r5
 23ffb62:	f7fe fd3a 	bl	23fe5da <__cxa_guard_acquire>
 23ffb66:	b168      	cbz	r0, 23ffb84 <_Z22__fetch_global_Serial1v+0x34>
 23ffb68:	a801      	add	r0, sp, #4
 23ffb6a:	f7ff ffdf 	bl	23ffb2c <_Z20acquireSerial1Bufferv>
 23ffb6e:	4621      	mov	r1, r4
 23ffb70:	aa01      	add	r2, sp, #4
 23ffb72:	4807      	ldr	r0, [pc, #28]	; (23ffb90 <_Z22__fetch_global_Serial1v+0x40>)
 23ffb74:	f7ff fda8 	bl	23ff6c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb78:	4628      	mov	r0, r5
 23ffb7a:	f7fe fd33 	bl	23fe5e4 <__cxa_guard_release>
 23ffb7e:	4805      	ldr	r0, [pc, #20]	; (23ffb94 <_Z22__fetch_global_Serial1v+0x44>)
 23ffb80:	f000 f878 	bl	23ffc74 <atexit>
    return serial1;
}
 23ffb84:	4802      	ldr	r0, [pc, #8]	; (23ffb90 <_Z22__fetch_global_Serial1v+0x40>)
 23ffb86:	b007      	add	sp, #28
 23ffb88:	bd30      	pop	{r4, r5, pc}
 23ffb8a:	bf00      	nop
 23ffb8c:	1007af0c 	.word	0x1007af0c
 23ffb90:	1007af18 	.word	0x1007af18
 23ffb94:	023ffaf1 	.word	0x023ffaf1

023ffb98 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffb98:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb9a:	4c0d      	ldr	r4, [pc, #52]	; (23ffbd0 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffb9c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffb9e:	e8d4 3f8f 	ldab	r3, [r4]
 23ffba2:	07db      	lsls	r3, r3, #31
 23ffba4:	d411      	bmi.n	23ffbca <_Z22__fetch_global_Serial2v+0x32>
 23ffba6:	4620      	mov	r0, r4
 23ffba8:	f7fe fd17 	bl	23fe5da <__cxa_guard_acquire>
 23ffbac:	b168      	cbz	r0, 23ffbca <_Z22__fetch_global_Serial2v+0x32>
 23ffbae:	a801      	add	r0, sp, #4
 23ffbb0:	f7ff ffc2 	bl	23ffb38 <_Z20acquireSerial2Bufferv>
 23ffbb4:	2101      	movs	r1, #1
 23ffbb6:	aa01      	add	r2, sp, #4
 23ffbb8:	4806      	ldr	r0, [pc, #24]	; (23ffbd4 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffbba:	f7ff fd85 	bl	23ff6c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffbbe:	4620      	mov	r0, r4
 23ffbc0:	f7fe fd10 	bl	23fe5e4 <__cxa_guard_release>
 23ffbc4:	4804      	ldr	r0, [pc, #16]	; (23ffbd8 <_Z22__fetch_global_Serial2v+0x40>)
 23ffbc6:	f000 f855 	bl	23ffc74 <atexit>
	return serial2;
}
 23ffbca:	4802      	ldr	r0, [pc, #8]	; (23ffbd4 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffbcc:	b006      	add	sp, #24
 23ffbce:	bd10      	pop	{r4, pc}
 23ffbd0:	1007af10 	.word	0x1007af10
 23ffbd4:	1007af2c 	.word	0x1007af2c
 23ffbd8:	023ffb2b 	.word	0x023ffb2b

023ffbdc <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffbdc:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffbde:	f7ff ffdb 	bl	23ffb98 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffbe2:	4b07      	ldr	r3, [pc, #28]	; (23ffc00 <_Z15serialEventRun2v+0x24>)
 23ffbe4:	4604      	mov	r4, r0
 23ffbe6:	b153      	cbz	r3, 23ffbfe <_Z15serialEventRun2v+0x22>
 23ffbe8:	f7ff fd89 	bl	23ff6fe <_ZN11USARTSerial9isEnabledEv>
 23ffbec:	b138      	cbz	r0, 23ffbfe <_Z15serialEventRun2v+0x22>
 23ffbee:	6823      	ldr	r3, [r4, #0]
 23ffbf0:	4620      	mov	r0, r4
 23ffbf2:	691b      	ldr	r3, [r3, #16]
 23ffbf4:	4798      	blx	r3
 23ffbf6:	2800      	cmp	r0, #0
 23ffbf8:	dd01      	ble.n	23ffbfe <_Z15serialEventRun2v+0x22>
        handler();
 23ffbfa:	e000      	b.n	23ffbfe <_Z15serialEventRun2v+0x22>
 23ffbfc:	bf00      	nop
}
 23ffbfe:	bd10      	pop	{r4, pc}
 23ffc00:	00000000 	.word	0x00000000

023ffc04 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffc04:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffc06:	4c0d      	ldr	r4, [pc, #52]	; (23ffc3c <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffc08:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffc0a:	e8d4 3f8f 	ldab	r3, [r4]
 23ffc0e:	07db      	lsls	r3, r3, #31
 23ffc10:	d411      	bmi.n	23ffc36 <_Z22__fetch_global_Serial3v+0x32>
 23ffc12:	4620      	mov	r0, r4
 23ffc14:	f7fe fce1 	bl	23fe5da <__cxa_guard_acquire>
 23ffc18:	b168      	cbz	r0, 23ffc36 <_Z22__fetch_global_Serial3v+0x32>
 23ffc1a:	a801      	add	r0, sp, #4
 23ffc1c:	f7ff ff92 	bl	23ffb44 <_Z20acquireSerial3Bufferv>
 23ffc20:	2102      	movs	r1, #2
 23ffc22:	aa01      	add	r2, sp, #4
 23ffc24:	4806      	ldr	r0, [pc, #24]	; (23ffc40 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffc26:	f7ff fd4f 	bl	23ff6c8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffc2a:	4620      	mov	r0, r4
 23ffc2c:	f7fe fcda 	bl	23fe5e4 <__cxa_guard_release>
 23ffc30:	4804      	ldr	r0, [pc, #16]	; (23ffc44 <_Z22__fetch_global_Serial3v+0x40>)
 23ffc32:	f000 f81f 	bl	23ffc74 <atexit>
	return serial3;
}
 23ffc36:	4802      	ldr	r0, [pc, #8]	; (23ffc40 <_Z22__fetch_global_Serial3v+0x3c>)
 23ffc38:	b006      	add	sp, #24
 23ffc3a:	bd10      	pop	{r4, pc}
 23ffc3c:	1007af14 	.word	0x1007af14
 23ffc40:	1007af40 	.word	0x1007af40
 23ffc44:	023ffb29 	.word	0x023ffb29

023ffc48 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffc48:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffc4a:	f7ff ffdb 	bl	23ffc04 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffc4e:	4b07      	ldr	r3, [pc, #28]	; (23ffc6c <_Z15serialEventRun3v+0x24>)
 23ffc50:	4604      	mov	r4, r0
 23ffc52:	b153      	cbz	r3, 23ffc6a <_Z15serialEventRun3v+0x22>
 23ffc54:	f7ff fd53 	bl	23ff6fe <_ZN11USARTSerial9isEnabledEv>
 23ffc58:	b138      	cbz	r0, 23ffc6a <_Z15serialEventRun3v+0x22>
 23ffc5a:	6823      	ldr	r3, [r4, #0]
 23ffc5c:	4620      	mov	r0, r4
 23ffc5e:	691b      	ldr	r3, [r3, #16]
 23ffc60:	4798      	blx	r3
 23ffc62:	2800      	cmp	r0, #0
 23ffc64:	dd01      	ble.n	23ffc6a <_Z15serialEventRun3v+0x22>
        handler();
 23ffc66:	e000      	b.n	23ffc6a <_Z15serialEventRun3v+0x22>
 23ffc68:	bf00      	nop
}
 23ffc6a:	bd10      	pop	{r4, pc}
 23ffc6c:	00000000 	.word	0x00000000

023ffc70 <_ZnajRKSt9nothrow_t>:
 23ffc70:	f7fe bcaf 	b.w	23fe5d2 <_Znaj>

023ffc74 <atexit>:
 23ffc74:	2300      	movs	r3, #0
 23ffc76:	4601      	mov	r1, r0
 23ffc78:	461a      	mov	r2, r3
 23ffc7a:	4618      	mov	r0, r3
 23ffc7c:	f000 b844 	b.w	23ffd08 <__register_exitproc>

023ffc80 <memcpy>:
 23ffc80:	440a      	add	r2, r1
 23ffc82:	1e43      	subs	r3, r0, #1
 23ffc84:	4291      	cmp	r1, r2
 23ffc86:	d100      	bne.n	23ffc8a <memcpy+0xa>
 23ffc88:	4770      	bx	lr
 23ffc8a:	b510      	push	{r4, lr}
 23ffc8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffc90:	4291      	cmp	r1, r2
 23ffc92:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffc96:	d1f9      	bne.n	23ffc8c <memcpy+0xc>
 23ffc98:	bd10      	pop	{r4, pc}

023ffc9a <memset>:
 23ffc9a:	4402      	add	r2, r0
 23ffc9c:	4603      	mov	r3, r0
 23ffc9e:	4293      	cmp	r3, r2
 23ffca0:	d100      	bne.n	23ffca4 <memset+0xa>
 23ffca2:	4770      	bx	lr
 23ffca4:	f803 1b01 	strb.w	r1, [r3], #1
 23ffca8:	e7f9      	b.n	23ffc9e <memset+0x4>
	...

023ffcac <srand>:
 23ffcac:	b538      	push	{r3, r4, r5, lr}
 23ffcae:	4b10      	ldr	r3, [pc, #64]	; (23ffcf0 <srand+0x44>)
 23ffcb0:	4604      	mov	r4, r0
 23ffcb2:	681d      	ldr	r5, [r3, #0]
 23ffcb4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffcb6:	b9b3      	cbnz	r3, 23ffce6 <srand+0x3a>
 23ffcb8:	2018      	movs	r0, #24
 23ffcba:	f7ff fa27 	bl	23ff10c <malloc>
 23ffcbe:	4602      	mov	r2, r0
 23ffcc0:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffcc2:	b920      	cbnz	r0, 23ffcce <srand+0x22>
 23ffcc4:	4b0b      	ldr	r3, [pc, #44]	; (23ffcf4 <srand+0x48>)
 23ffcc6:	2142      	movs	r1, #66	; 0x42
 23ffcc8:	480b      	ldr	r0, [pc, #44]	; (23ffcf8 <srand+0x4c>)
 23ffcca:	f7ff fa3b 	bl	23ff144 <__assert_func>
 23ffcce:	490b      	ldr	r1, [pc, #44]	; (23ffcfc <srand+0x50>)
 23ffcd0:	4b0b      	ldr	r3, [pc, #44]	; (23ffd00 <srand+0x54>)
 23ffcd2:	e9c0 1300 	strd	r1, r3, [r0]
 23ffcd6:	4b0b      	ldr	r3, [pc, #44]	; (23ffd04 <srand+0x58>)
 23ffcd8:	2100      	movs	r1, #0
 23ffcda:	6083      	str	r3, [r0, #8]
 23ffcdc:	230b      	movs	r3, #11
 23ffcde:	8183      	strh	r3, [r0, #12]
 23ffce0:	2001      	movs	r0, #1
 23ffce2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffce6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffce8:	2200      	movs	r2, #0
 23ffcea:	611c      	str	r4, [r3, #16]
 23ffcec:	615a      	str	r2, [r3, #20]
 23ffcee:	bd38      	pop	{r3, r4, r5, pc}
 23ffcf0:	1007a9d8 	.word	0x1007a9d8
 23ffcf4:	023fff61 	.word	0x023fff61
 23ffcf8:	023fff78 	.word	0x023fff78
 23ffcfc:	abcd330e 	.word	0xabcd330e
 23ffd00:	e66d1234 	.word	0xe66d1234
 23ffd04:	0005deec 	.word	0x0005deec

023ffd08 <__register_exitproc>:
 23ffd08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffd0c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffdcc <__register_exitproc+0xc4>
 23ffd10:	4606      	mov	r6, r0
 23ffd12:	461f      	mov	r7, r3
 23ffd14:	460d      	mov	r5, r1
 23ffd16:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd1a:	4691      	mov	r9, r2
 23ffd1c:	f000 f858 	bl	23ffdd0 <__retarget_lock_acquire_recursive>
 23ffd20:	4b26      	ldr	r3, [pc, #152]	; (23ffdbc <__register_exitproc+0xb4>)
 23ffd22:	681c      	ldr	r4, [r3, #0]
 23ffd24:	b934      	cbnz	r4, 23ffd34 <__register_exitproc+0x2c>
 23ffd26:	4c26      	ldr	r4, [pc, #152]	; (23ffdc0 <__register_exitproc+0xb8>)
 23ffd28:	601c      	str	r4, [r3, #0]
 23ffd2a:	4b26      	ldr	r3, [pc, #152]	; (23ffdc4 <__register_exitproc+0xbc>)
 23ffd2c:	b113      	cbz	r3, 23ffd34 <__register_exitproc+0x2c>
 23ffd2e:	681b      	ldr	r3, [r3, #0]
 23ffd30:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffd34:	6863      	ldr	r3, [r4, #4]
 23ffd36:	2b1f      	cmp	r3, #31
 23ffd38:	dd07      	ble.n	23ffd4a <__register_exitproc+0x42>
 23ffd3a:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd3e:	f000 f849 	bl	23ffdd4 <__retarget_lock_release_recursive>
 23ffd42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffd46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffd4a:	b35e      	cbz	r6, 23ffda4 <__register_exitproc+0x9c>
 23ffd4c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffd50:	b988      	cbnz	r0, 23ffd76 <__register_exitproc+0x6e>
 23ffd52:	4b1d      	ldr	r3, [pc, #116]	; (23ffdc8 <__register_exitproc+0xc0>)
 23ffd54:	b923      	cbnz	r3, 23ffd60 <__register_exitproc+0x58>
 23ffd56:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd5a:	f000 f83a 	bl	23ffdd2 <__retarget_lock_release>
 23ffd5e:	e7f0      	b.n	23ffd42 <__register_exitproc+0x3a>
 23ffd60:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffd64:	f7ff f9d2 	bl	23ff10c <malloc>
 23ffd68:	2800      	cmp	r0, #0
 23ffd6a:	d0f4      	beq.n	23ffd56 <__register_exitproc+0x4e>
 23ffd6c:	2300      	movs	r3, #0
 23ffd6e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffd72:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffd76:	6863      	ldr	r3, [r4, #4]
 23ffd78:	2201      	movs	r2, #1
 23ffd7a:	2e02      	cmp	r6, #2
 23ffd7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffd80:	fa02 f203 	lsl.w	r2, r2, r3
 23ffd84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffd88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffd8c:	ea43 0302 	orr.w	r3, r3, r2
 23ffd90:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffd94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffd98:	bf02      	ittt	eq
 23ffd9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffd9e:	4313      	orreq	r3, r2
 23ffda0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffda4:	6863      	ldr	r3, [r4, #4]
 23ffda6:	f8d8 0000 	ldr.w	r0, [r8]
 23ffdaa:	1c5a      	adds	r2, r3, #1
 23ffdac:	3302      	adds	r3, #2
 23ffdae:	6062      	str	r2, [r4, #4]
 23ffdb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffdb4:	f000 f80e 	bl	23ffdd4 <__retarget_lock_release_recursive>
 23ffdb8:	2000      	movs	r0, #0
 23ffdba:	e7c4      	b.n	23ffd46 <__register_exitproc+0x3e>
 23ffdbc:	1007afe0 	.word	0x1007afe0
 23ffdc0:	1007af54 	.word	0x1007af54
 23ffdc4:	00000000 	.word	0x00000000
 23ffdc8:	023ff10d 	.word	0x023ff10d
 23ffdcc:	1007aa3c 	.word	0x1007aa3c

023ffdd0 <__retarget_lock_acquire_recursive>:
 23ffdd0:	4770      	bx	lr

023ffdd2 <__retarget_lock_release>:
 23ffdd2:	4770      	bx	lr

023ffdd4 <__retarget_lock_release_recursive>:
 23ffdd4:	4770      	bx	lr
	...

023ffdd8 <dynalib_user>:
 23ffdd8:	e599 023f e5c1 023f e5c5 023f 0000 0000     ..?...?...?.....
 23ffde8:	694d 726b 456f 0000                         MikroE..

023ffdf0 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdf8:	f227 023f f21d 023f f213 023f f209 023f     '.?...?...?...?.
 23ffe08:	f1fd 023f f1f1 023f f43d 023f f445 023f     ..?...?.=.?.E.?.
 23ffe18:	f1e5 023f f1dd 023f f1d3 023f f1c9 023f     ..?...?...?...?.
 23ffe28:	f475 023f                                   u.?.

023ffe2c <_ZTV7TwoWire>:
	...
 23ffe34:	f245 023f f28f 023f f267 023f f247 023f     E.?...?.g.?.G.?.
 23ffe44:	f26f 023f f277 023f f27f 023f f287 023f     o.?.w.?...?...?.

023ffe54 <_ZTV9IPAddress>:
	...
 23ffe5c:	f30d 023f f2fd 023f f2ff 023f 7061 0070     ..?...?...?.app.

023ffe6c <_ZTVN5spark12NetworkClassE>:
	...
 23ffe74:	f3fd 023f f407 023f f411 023f f41b 023f     ..?...?...?...?.
 23ffe84:	f425 023f f431 023f f43d 023f f445 023f     %.?.1.?.=.?.E.?.
 23ffe94:	f44d 023f f459 023f f461 023f f46b 023f     M.?.Y.?.a.?.k.?.
 23ffea4:	f475 023f 5925 252d 2d6d 6425 2554 3a48     u.?.%Y-%m-%dT%H:
 23ffeb4:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

023ffec4 <_ZTV11USARTSerial>:
	...
 23ffecc:	f64d 023f f6b9 023f f691 023f f561 023f     M.?...?...?.a.?.
 23ffedc:	f661 023f f67d 023f f66f 023f f68b 023f     a.?.}.?.o.?...?.
 23ffeec:	f64f 023f f653 023f                         O.?.S.?.

023ffef4 <_ZTV9USBSerial>:
	...
 23ffefc:	f70b 023f f773 023f f749 023f f561 023f     ..?.s.?.I.?.a.?.
 23fff0c:	f73b 023f f70d 023f f71d 023f f76d 023f     ;.?...?...?.m.?.
 23fff1c:	f72d 023f f705 023f                         -.?...?.

023fff24 <_ZTVN5spark9WiFiClassE>:
	...
 23fff2c:	f867 023f f85d 023f f853 023f f809 023f     g.?.].?.S.?...?.
 23fff3c:	f847 023f f83b 023f f43d 023f f445 023f     G.?.;.?.=.?.E.?.
 23fff4c:	f82f 023f f827 023f f81d 023f f813 023f     /.?.'.?...?...?.
 23fff5c:	f475 023f                                   u.?.

023fff60 <_ZSt7nothrow>:
 23fff60:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff70:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff80:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff90:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd1 <link_const_data_end>:
 23fffd1:	00          	.byte	0x00
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023fe6ad 	.word	0x023fe6ad
 23fffd8:	023ff185 	.word	0x023ff185
 23fffdc:	023ff231 	.word	0x023ff231
 23fffe0:	023ff3ed 	.word	0x023ff3ed
 23fffe4:	023ff54d 	.word	0x023ff54d
 23fffe8:	023ff5f5 	.word	0x023ff5f5
 23fffec:	023ff615 	.word	0x023ff615
 23ffff0:	023ff639 	.word	0x023ff639
 23ffff4:	023ff871 	.word	0x023ff871
